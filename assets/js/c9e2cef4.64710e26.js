"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[15309],{3905:(t,e,n)=>{n.d(e,{Zo:()=>m,kt:()=>f});var a=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var p=a.createContext({}),u=function(t){var e=a.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},m=function(t){var e=u(t.components);return a.createElement(p.Provider,{value:e},t.children)},c="mdxType",s={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,i=t.originalType,p=t.parentName,m=o(t,["components","mdxType","originalType","parentName"]),c=u(n),d=r,f=c["".concat(p,".").concat(d)]||c[d]||s[d]||i;return n?a.createElement(f,l(l({ref:e},m),{},{components:n})):a.createElement(f,l({ref:e},m))}));function f(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=t,o[c]="string"==typeof t?t:r,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},35859:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>h,contentTitle:()=>k,default:()=>S,frontMatter:()=>f,metadata:()=>b,toc:()=>N});var a=n(3905),r=Object.defineProperty,i=Object.defineProperties,l=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,m=(t,e,n)=>e in t?r(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,c=(t,e)=>{for(var n in e||(e={}))p.call(e,n)&&m(t,n,e[n]);if(o)for(var n of o(e))u.call(e,n)&&m(t,n,e[n]);return t},s=(t,e)=>i(t,l(e)),d=(t,e)=>{var n={};for(var a in t)p.call(t,a)&&e.indexOf(a)<0&&(n[a]=t[a]);if(null!=t&&o)for(var a of o(t))e.indexOf(a)<0&&u.call(t,a)&&(n[a]=t[a]);return n};const f={title:"MultiSet (namespace)",slug:"/rimbu/multiset/MultiSet/namespace"},k="namespace MultiSet",b={unversionedId:"rimbu_multiset/MultiSet/index",id:"rimbu_multiset/MultiSet/index",title:"MultiSet (namespace)",description:"A type-invariant immutable MultiSet of value type T. In the MultiSet, each value can occur multiple times. See the MultiSet documentation and the MultiSet API documentation",source:"@site/api/rimbu_multiset/MultiSet/index.mdx",sourceDirName:"rimbu_multiset/MultiSet",slug:"/rimbu/multiset/MultiSet/namespace",permalink:"/api/rimbu/multiset/MultiSet/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"MultiSet (namespace)",slug:"/rimbu/multiset/MultiSet/namespace"},sidebar:"defaultSidebar",previous:{title:"HashMultiSet<T>",permalink:"/api/rimbu/multiset/HashMultiSet/interface"},next:{title:"MultiSet.Builder<T>",permalink:"/api/rimbu/multiset/MultiSet/Builder/interface"}},h={},N=[{value:"Interfaces",id:"interfaces",level:2},{value:"Static Methods",id:"static-methods",level:2},{value:"<code>createContext</code>",id:"createcontext",level:3},{value:"Definition",id:"definition",level:4},{value:"Type parameters",id:"type-parameters",level:4},{value:"Parameters",id:"parameters",level:4}],y={toc:N},M="wrapper";function S(t){var e=t,{components:n}=e,r=d(e,["components"]);return(0,a.kt)(M,s(c(c({},y),r),{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",c({},{id:"namespace-multiset"}),(0,a.kt)("inlineCode",{parentName:"h1"},"namespace MultiSet")),(0,a.kt)("p",null,"A type-invariant immutable MultiSet of value type T. In the MultiSet, each value can occur multiple times. See the ",(0,a.kt)("a",c({parentName:"p"},{href:"https://rimbu.org/docs/collections/multiset"}),"MultiSet documentation")," and the ",(0,a.kt)("a",c({parentName:"p"},{href:"https://rimbu.org/api/rimbu/multiset/MultiSet/interface"}),"MultiSet API documentation")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Companion interface:")," ",(0,a.kt)("a",c({parentName:"p"},{href:"/api/rimbu/multiset/MultiSet/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"MultiSet<T>"))),(0,a.kt)("h2",c({},{id:"interfaces"}),"Interfaces"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",c({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",c({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",c({parentName:"tr"},{align:null}),(0,a.kt)("a",c({parentName:"td"},{href:"/api/rimbu/multiset/MultiSet/Builder/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"MultiSet.Builder<T>"))),(0,a.kt)("td",c({parentName:"tr"},{align:null}),"A mutable ",(0,a.kt)("inlineCode",{parentName:"td"},"MultiSet")," builder used to efficiently create new immutable instances. See the ",(0,a.kt)("a",c({parentName:"td"},{href:"https://rimbu.org/docs/collections/multiset"}),"MultiSet documentation")," and the ",(0,a.kt)("a",c({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multiset/MultiSet/Builder/interface"}),"MultiSet.Builder API documentation"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",c({parentName:"tr"},{align:null}),(0,a.kt)("a",c({parentName:"td"},{href:"/api/rimbu/multiset/MultiSet/Context/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"MultiSet.Context<UT>"))),(0,a.kt)("td",c({parentName:"tr"},{align:null}),"A context instance for ",(0,a.kt)("inlineCode",{parentName:"td"},"MultiSet")," implementations that acts as a factory for every instance of this type of collection.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",c({parentName:"tr"},{align:null}),(0,a.kt)("a",c({parentName:"td"},{href:"/api/rimbu/multiset/MultiSet/NonEmpty/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"MultiSet.NonEmpty<T>"))),(0,a.kt)("td",c({parentName:"tr"},{align:null}),"A non-empty type-invariant immutable MultiSet of value type T. In the MultiSet, each value can occur multiple times. See the ",(0,a.kt)("a",c({parentName:"td"},{href:"https://rimbu.org/docs/collections/multiset"}),"MultiSet documentation")," and the ",(0,a.kt)("a",c({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multiset/MultiSet/interface"}),"MultiSet API documentation"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",c({parentName:"tr"},{align:null}),(0,a.kt)("a",c({parentName:"td"},{href:"/api/rimbu/multiset/MultiSet/Types/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"MultiSet.Types"))),(0,a.kt)("td",c({parentName:"tr"},{align:null}),"Utility interface that provides higher-kinded types for this collection.")))),(0,a.kt)("h2",c({},{id:"static-methods"}),"Static Methods"),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",c({},{id:"createcontext"}),(0,a.kt)("inlineCode",{parentName:"h3"},"createContext")),(0,a.kt)("p",null,"Returns a new MultiSet context instance based on the given ",(0,a.kt)("inlineCode",{parentName:"p"},"options"),".")),(0,a.kt)("h4",c({},{id:"definition"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"createContext<UT>(options: {"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"countMapContext: "),(0,a.kt)("a",c({parentName:"p"},{href:"/api/rimbu/collection-types/map/RMap/Context/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"RMap.Context")),(0,a.kt)("inlineCode",{parentName:"p"},"<UT>;"),(0,a.kt)("br",null),"\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"}): "),(0,a.kt)("a",c({parentName:"p"},{href:"/api/rimbu/multiset/MultiSet/Context/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"MultiSet.Context")),(0,a.kt)("inlineCode",{parentName:"p"},"<UT>;"))),(0,a.kt)("h4",c({},{id:"type-parameters"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",c({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",c({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",c({parentName:"tr"},{align:null}),"UT"),(0,a.kt)("td",c({parentName:"tr"},{align:null}),"the upper element type for which the context can create instances")))),(0,a.kt)("h4",c({},{id:"parameters"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",c({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",c({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",c({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",c({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"options")),(0,a.kt)("td",c({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"{"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"countMapContext: "),(0,a.kt)("a",c({parentName:"td"},{href:"/api/rimbu/collection-types/map/RMap/Context/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"RMap.Context")),(0,a.kt)("inlineCode",{parentName:"td"},"<UT>;"),(0,a.kt)("br",null),"\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"}")),(0,a.kt)("td",c({parentName:"tr"},{align:null}),"an object containing the following properties:",(0,a.kt)("br",null)," - countMapContext: the map context to use for key to count mapping"))))))}S.isMDXComponent=!0}}]);