"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[86596],{15680:(e,n,a)=>{a.d(n,{xA:()=>s,yg:()=>y});var t=a(96540);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=t.createContext({}),c=function(e){var n=t.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},s=function(e){var n=c(e.components);return t.createElement(p.Provider,{value:n},e.children)},m="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),m=c(a),u=r,y=m["".concat(p,".").concat(u)]||m[u]||g[u]||l;return a?t.createElement(y,i(i({ref:n},s),{},{components:a})):t.createElement(y,i({ref:n},s))}));function y(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=u;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[m]="string"==typeof e?e:r,i[1]=o;for(var c=2;c<l;c++)i[c]=a[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},30509:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>f,contentTitle:()=>d,default:()=>v,frontMatter:()=>y,metadata:()=>h,toc:()=>b});var t=a(15680),r=Object.defineProperty,l=Object.defineProperties,i=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,s=(e,n,a)=>n in e?r(e,n,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[n]=a,m=(e,n)=>{for(var a in n||(n={}))p.call(n,a)&&s(e,a,n[a]);if(o)for(var a of o(n))c.call(n,a)&&s(e,a,n[a]);return e},g=(e,n)=>l(e,i(n)),u=(e,n)=>{var a={};for(var t in e)p.call(e,t)&&n.indexOf(t)<0&&(a[t]=e[t]);if(null!=e&&o)for(var t of o(e))n.indexOf(t)<0&&c.call(e,t)&&(a[t]=e[t]);return a};const y={title:"Channel (namespace)",slug:"/rimbu/channel/Channel/namespace"},d="namespace Channel",h={unversionedId:"rimbu_channel/Channel/index",id:"rimbu_channel/Channel/index",title:"Channel (namespace)",description:"A Rimbu Channel offers various ways to synchronize communication between asynchronous processes. These processes can send and receive messages in a blocking way. Channel messages are of type T, and channels can be buffered or unbuffered. A buffered channel can queue a given amount of messages before blocking the sender.",source:"@site/api/rimbu_channel/Channel/index.mdx",sourceDirName:"rimbu_channel/Channel",slug:"/rimbu/channel/Channel/namespace",permalink:"/api/rimbu/channel/Channel/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"Channel (namespace)",slug:"/rimbu/channel/Channel/namespace"},sidebar:"defaultSidebar",previous:{title:"@rimbu/channel",permalink:"/api/rimbu/channel"},next:{title:"Channel.Config",permalink:"/api/rimbu/channel/Channel/Config/interface"}},f={},b=[{value:"Interfaces",id:"interfaces",level:2},{value:"Static Methods",id:"static-methods",level:2},{value:"<code>create</code>",id:"create",level:3},{value:"Definition",id:"definition",level:4},{value:"Type parameters",id:"type-parameters",level:4},{value:"Parameters",id:"parameters",level:4}],C={toc:b},N="wrapper";function v(e){var n=e,{components:a}=n,r=u(n,["components"]);return(0,t.yg)(N,g(m(m({},C),r),{components:a,mdxType:"MDXLayout"}),(0,t.yg)("h1",m({},{id:"namespace-channel"}),(0,t.yg)("inlineCode",{parentName:"h1"},"namespace Channel")),(0,t.yg)("p",null,"A Rimbu Channel offers various ways to synchronize communication between asynchronous processes. These processes can send and receive messages in a blocking way. Channel messages are of type T, and channels can be buffered or unbuffered. A buffered channel can queue a given amount of messages before blocking the sender."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Companion interface:")," ",(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/channel/Channel/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Channel<T>"))),(0,t.yg)("h2",m({},{id:"interfaces"}),"Interfaces"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/channel/Channel/Config/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Channel.Config"))),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"The configuration options for creating a Channel.")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/channel/Channel/Constructors/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Channel.Constructors"))),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"Defines the static ",(0,t.yg)("inlineCode",{parentName:"td"},"Channel")," API.")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/channel/Channel/Read/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Channel.Read<T>"))),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"A read-only Channel that can perform blocking reads. This means that a ",(0,t.yg)("inlineCode",{parentName:"td"},"receive")," call will block until a message is available.")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/channel/Channel/Write/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Channel.Write<T>"))),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"A write-only Channel that can perform blocking writes. This means that a ",(0,t.yg)("inlineCode",{parentName:"td"},"send")," call will block until the channel has capacity to send a message.")))),(0,t.yg)("h2",m({},{id:"static-methods"}),"Static Methods"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"create"}),(0,t.yg)("inlineCode",{parentName:"h3"},"create")),(0,t.yg)("p",null,"Returns a new Channel instance that can be used to synchronize asynchronous processes within a single thread.")),(0,t.yg)("h4",m({},{id:"definition"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"create<T = void>(options?: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/channel/Channel/Config/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Channel.Config")),(0,t.yg)("inlineCode",{parentName:"p"},"): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/channel/Channel/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Channel")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,t.yg)("h4",m({},{id:"type-parameters"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"T"),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"void")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the channel message type")))),(0,t.yg)("h4",m({},{id:"parameters"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/channel/Channel/Config/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Channel.Config"))),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"(optional) the options used to create the channel",(0,t.yg)("br",null)," - capacity: (optional) the buffer size of the channel",(0,t.yg)("br",null)," - validator: (optional) a function taking a message and returning true if the message is of a valid type, false otherwise"))))))}v.isMDXComponent=!0}}]);