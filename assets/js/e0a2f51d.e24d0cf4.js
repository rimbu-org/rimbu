"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[94033],{15680:(e,a,n)=>{n.d(a,{xA:()=>m,yg:()=>s});var t=n(96540);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function l(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?l(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function p(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var y=t.createContext({}),o=function(e){var a=t.useContext(y),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},m=function(e){var a=o(e.components);return t.createElement(y.Provider,{value:a},e.children)},g="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},u=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,l=e.originalType,y=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),g=o(n),u=r,s=g["".concat(y,".").concat(u)]||g[u]||d[u]||l;return n?t.createElement(s,i(i({ref:a},m),{},{components:n})):t.createElement(s,i({ref:a},m))}));function s(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=u;var p={};for(var y in a)hasOwnProperty.call(a,y)&&(p[y]=a[y]);p.originalType=e,p[g]="string"==typeof e?e:r,i[1]=p;for(var o=2;o<l;o++)i[o]=n[o];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},96245:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>h,contentTitle:()=>N,default:()=>C,frontMatter:()=>s,metadata:()=>c,toc:()=>f});var t=n(15680),r=Object.defineProperty,l=Object.defineProperties,i=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,y=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable,m=(e,a,n)=>a in e?r(e,a,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[a]=n,g=(e,a)=>{for(var n in a||(a={}))y.call(a,n)&&m(e,n,a[n]);if(p)for(var n of p(a))o.call(a,n)&&m(e,n,a[n]);return e},d=(e,a)=>l(e,i(a)),u=(e,a)=>{var n={};for(var t in e)y.call(e,t)&&a.indexOf(t)<0&&(n[t]=e[t]);if(null!=e&&p)for(var t of p(e))a.indexOf(t)<0&&o.call(e,t)&&(n[t]=e[t]);return n};const s={title:"RMapBase.Context<UK,Tp>",slug:"/rimbu/collection-types/map-custom/RMapBase/Context/interface"},N="interface RMapBase.Context<UK,Tp>",c={unversionedId:"rimbu_collection-types/map-custom/RMapBase/Context.interface",id:"rimbu_collection-types/map-custom/RMapBase/Context.interface",title:"RMapBase.Context<UK,Tp>",description:"The map's Context instance that serves as a factory for all related immutable instances and builders.",source:"@site/api/rimbu_collection-types/map-custom/RMapBase/Context.interface.mdx",sourceDirName:"rimbu_collection-types/map-custom/RMapBase",slug:"/rimbu/collection-types/map-custom/RMapBase/Context/interface",permalink:"/api/rimbu/collection-types/map-custom/RMapBase/Context/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"RMapBase.Context<UK,Tp>",slug:"/rimbu/collection-types/map-custom/RMapBase/Context/interface"},sidebar:"defaultSidebar",previous:{title:"RMapBase.Builder<K,V,Tp>",permalink:"/api/rimbu/collection-types/map-custom/RMapBase/Builder/interface"},next:{title:"ContextBase<UK,Tp>",permalink:"/api/rimbu/collection-types/map-custom/RMapBase/ContextBase/class"}},h={},f=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>_fixedKeyType</code>",id:"_fixedkeytype",level:3},{value:"Definition",id:"definition",level:4},{value:"<code>_types</code>",id:"_types",level:3},{value:"Definition",id:"definition-1",level:4},{value:"<code>typeTag</code>",id:"typetag",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Methods",id:"methods",level:2},{value:"<code>builder</code>",id:"builder",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Overrides",id:"overrides",level:4},{value:"<code>empty</code>",id:"empty",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"<code>from</code>",id:"from",level:3},{value:"Definitions",id:"definitions",level:4},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"<code>isValidKey</code>",id:"isvalidkey",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>merge</code>",id:"merge",level:3},{value:"Definitions",id:"definitions-1",level:4},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"<code>mergeAll</code>",id:"mergeall",level:3},{value:"Definitions",id:"definitions-2",level:4},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Overrides",id:"overrides-4",level:4},{value:"<code>mergeAllWith</code>",id:"mergeallwith",level:3},{value:"Definitions",id:"definitions-3",level:4},{value:"Type parameters",id:"type-parameters-6",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"Overrides",id:"overrides-5",level:4},{value:"<code>mergeWith</code>",id:"mergewith",level:3},{value:"Definitions",id:"definitions-4",level:4},{value:"Type parameters",id:"type-parameters-7",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"Overrides",id:"overrides-6",level:4},{value:"<code>of</code>",id:"of",level:3},{value:"Definition",id:"definition-6",level:4},{value:"Type parameters",id:"type-parameters-8",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"Overrides",id:"overrides-7",level:4},{value:"<code>reducer</code>",id:"reducer",level:3},{value:"Definition",id:"definition-7",level:4},{value:"Type parameters",id:"type-parameters-9",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"Overrides",id:"overrides-8",level:4}],b={toc:f},v="wrapper";function C(e){var a=e,{components:n}=a,r=u(a,["components"]);return(0,t.yg)(v,d(g(g({},b),r),{components:n,mdxType:"MDXLayout"}),(0,t.yg)("h1",g({},{id:"interface-rmapbasecontextuktp"}),(0,t.yg)("inlineCode",{parentName:"h1"},"interface RMapBase.Context<UK,Tp>")),(0,t.yg)("p",null,"The map's Context instance that serves as a factory for all related immutable instances and builders."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Extends:")," ",(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Factory/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"RMapBase.Factory<Tp,UK>"))),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Implemented by:")," ",(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/ordered/map-custom/OrderedMapBase/Context/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"OrderedMapBase.Context<UK,Tp>")),", ",(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/hashed/map/HashMap/Context/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"HashMap.Context<UK>")),", ",(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/sorted/map/SortedMap/Context/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"SortedMap.Context<UK>")),", ",(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/proximity/ProximityMap/Context/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"ProximityMap.Context<UK>")),", ",(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/ContextBase/class"}),(0,t.yg)("inlineCode",{parentName:"a"},"ContextBase<UK,Tp>"))),(0,t.yg)("h2",g({},{id:"type-parameters"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"UK"),(0,t.yg)("td",g({parentName:"tr"},{align:null})),(0,t.yg)("td",g({parentName:"tr"},{align:null})),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"undocumented")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"Tp"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Types/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"RMapBase.Types"))),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Types/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"RMapBase.Types"))),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"undocumented")))),(0,t.yg)("h2",g({},{id:"properties"}),"Properties"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"_fixedkeytype"}),(0,t.yg)("inlineCode",{parentName:"h3"},"_fixedKeyType")),(0,t.yg)("p",null,"undocumented")),(0,t.yg)("h4",g({},{id:"definition"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly _fixedKeyType: (key: UK) => never;")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"_types"}),(0,t.yg)("inlineCode",{parentName:"h3"},"_types")),(0,t.yg)("p",null,"undocumented")),(0,t.yg)("h4",g({},{id:"definition-1"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly _types: Tp;")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"typetag"}),(0,t.yg)("inlineCode",{parentName:"h3"},"typeTag")),(0,t.yg)("p",null,"A string tag defining the specific collection type")),(0,t.yg)("h4",g({},{id:"definition-2"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly typeTag: string;"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashMap.defaultContext().typeTag   // => 'HashMap'\n")))),(0,t.yg)("h2",g({},{id:"methods"}),"Methods"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"builder"}),(0,t.yg)("inlineCode",{parentName:"h3"},"builder")),(0,t.yg)("p",null,"Returns an empty builder instance for this type of collection and context.")),(0,t.yg)("h4",g({},{id:"definition-3"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"builder<K extends UK, V>(): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['builder'];"))),(0,t.yg)("h4",g({},{id:"type-parameters-1"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"K"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"UK")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"V"),(0,t.yg)("td",g({parentName:"tr"},{align:null})),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashMap.builder<number, string>()    // => HashMap.Builder<number, string>\n"))),(0,t.yg)("h4",g({},{id:"overrides"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Factory/interface#builder"}),"Factory.builder"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"empty"}),(0,t.yg)("inlineCode",{parentName:"h3"},"empty")),(0,t.yg)("p",null,"Returns the (singleton) empty instance of this type and context with given key and value types.")),(0,t.yg)("h4",g({},{id:"definition-4"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"empty<K extends UK, V>(): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,t.yg)("h4",g({},{id:"type-parameters-2"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"K"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"UK")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"V"),(0,t.yg)("td",g({parentName:"tr"},{align:null})),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashMap.empty<number, string>()    // => HashMap<number, string>\nHashMap.empty<string, boolean>()   // => HashMap<string, boolean>\n"))),(0,t.yg)("h4",g({},{id:"overrides-1"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Factory/interface#empty"}),"Factory.empty"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"from"}),(0,t.yg)("inlineCode",{parentName:"h3"},"from")),(0,t.yg)("p",null,"Returns an immutable map of this type and context, containing the entries in the given ",(0,t.yg)("inlineCode",{parentName:"p"},"sources")," ",(0,t.yg)("inlineCode",{parentName:"p"},"StreamSource")," instances.")),(0,t.yg)("h4",g({},{id:"definitions"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"from<K extends UK, V>(...sources: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<"),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<readonly [K, V]>>): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['nonEmpty'];"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"from<K, V>(...sources: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<"),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<readonly [K, V]>>): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,t.yg)("h4",g({},{id:"type-parameters-3"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"K"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"UK")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"V"),(0,t.yg)("td",g({parentName:"tr"},{align:null})),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",g({},{id:"parameters"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"sources")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,t.yg)("inlineCode",{parentName:"td"},"<"),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"td"},"<readonly [K, V]>>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"an array of ",(0,t.yg)("inlineCode",{parentName:"td"},"StreamSource")," instances containing key-value entries")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashMap.from([[1, 'a'], [2, 'b']])    // => HashMap.NonEmpty<number, string>\n"))),(0,t.yg)("h4",g({},{id:"overrides-2"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Factory/interface#from"}),"Factory.from"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"isvalidkey"}),(0,t.yg)("inlineCode",{parentName:"h3"},"isValidKey")),(0,t.yg)("p",null,"Returns true if given ",(0,t.yg)("inlineCode",{parentName:"p"},"obj")," could be a valid key in this Context.")),(0,t.yg)("h4",g({},{id:"definition-5"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"isValidKey(obj: any): obj is UK;"))),(0,t.yg)("h4",g({},{id:"parameters-1"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"obj")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"any")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the object to check")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashMap.defaultContext().isValidKey(1)   // => true\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"merge"}),(0,t.yg)("inlineCode",{parentName:"h3"},"merge")),(0,t.yg)("p",null,"Returns a Map containing the common keys from this map and all the given ",(0,t.yg)("inlineCode",{parentName:"p"},"sources")," key-value stream sources, and as values tuples of all the corresponding values for each common key. If a source doesn't have a key, the key will be skipped.")),(0,t.yg)("h4",g({},{id:"definitions-1"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"merge<K extends UK, I extends readonly [unknown, unknown, ...unknown[]]>(...sources: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"[KT in keyof I]: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<readonly [K, I[KT]]>;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"} & unknown[]): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, K, {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"[KT in keyof I]: I[KT];"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}>['nonEmpty'];"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"merge<K extends UK, I extends readonly [unknown, unknown, ...unknown[]]>(...sources: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"[KT in keyof I]: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<readonly [K, I[KT]]>;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"} & unknown[]): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, K, {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"[KT in keyof I]: I[KT];"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}>['normal'];"))),(0,t.yg)("h4",g({},{id:"type-parameters-4"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"K"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"UK")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the common key type")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"I"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"readonly [unknown, unknown, ...unknown[]]")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the array of input source value types")))),(0,t.yg)("h4",g({},{id:"parameters-2"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"sources")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"[KT in keyof I]: "),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"td"},"<readonly [K, I[KT]]>;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"} & unknown[]")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"a non-empty set of StreamSouces containing tuples of keys and values")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b'])\nconst m2 = HashMap.merge(m, [[2, true]], HashMap.of([2, 15]))\n// type of m2: HashMap<number, [string, boolean, number]>\nconsole.log(m2.toArray())\n// => [[2, ['b', true, 15]]]\n"))),(0,t.yg)("h4",g({},{id:"overrides-3"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Factory/interface#merge"}),"Factory.merge"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"mergeall"}),(0,t.yg)("inlineCode",{parentName:"h3"},"mergeAll")),(0,t.yg)("p",null,"Returns a Map containing all keys from this map and all the given ",(0,t.yg)("inlineCode",{parentName:"p"},"sources")," key-value stream sources, and as values tuples of all the corresponding values for each key. If a source doesn't have a key, the tuple will be filled with the given ",(0,t.yg)("inlineCode",{parentName:"p"},"fillValue"),".")),(0,t.yg)("h4",g({},{id:"definitions-2"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"mergeAll<O, I extends readonly [unknown, unknown, ...unknown[]], K extends UK>(fillValue: O, ...sources: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"[KT in keyof I]: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<readonly [K, I[KT]]>;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"} & unknown[]): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, K, {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"[KT in keyof I]: I[KT] "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," O;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}>['nonEmpty'];"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"mergeAll<O, I extends readonly [unknown, unknown, ...unknown[]], K extends UK>(fillValue: O, ...sources: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"[KT in keyof I]: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<readonly [K, I[KT]]>;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"} & unknown[]): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, K, {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"[KT in keyof I]: I[KT] "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," O;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}>['normal'];"))),(0,t.yg)("h4",g({},{id:"type-parameters-5"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"O"),(0,t.yg)("td",g({parentName:"tr"},{align:null})),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the type of the fill value")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"I"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"readonly [unknown, unknown, ...unknown[]]")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the array of input source value types")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"K"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"UK")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the common key type")))),(0,t.yg)("h4",g({},{id:"parameters-3"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"fillValue")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"O")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the value to use for the result tuple if a source does not have a certain key")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"sources")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"[KT in keyof I]: "),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"td"},"<readonly [K, I[KT]]>;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"} & unknown[]")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"a non-empty set of StreamSouces containing tuples of keys and values")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b'])\nconst m2 = HashMap.mergeAll('none', m, [[2, true]], HashMap.of([3, 15]))\n// type of m2: HashMap<number, [string, boolean | string, number | string]>\nconsole.log(m2.toArray())\n// => [[1, ['a', 'none', 'none']], [2, ['b', true, 'none']], [3, ['none', 'none', 15]]]\n"))),(0,t.yg)("h4",g({},{id:"overrides-4"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Factory/interface#mergeAll"}),"Factory.mergeAll"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"mergeallwith"}),(0,t.yg)("inlineCode",{parentName:"h3"},"mergeAllWith")),(0,t.yg)("p",null,"Returns a Map containing all keys from this map and all the given ",(0,t.yg)("inlineCode",{parentName:"p"},"sources")," key-value stream sources, and as values the result of applying the given ",(0,t.yg)("inlineCode",{parentName:"p"},"mergeFun")," to the key and all the corresponding values for each key. If a source doesn't have a key, the given tuple will be filled with the given ",(0,t.yg)("inlineCode",{parentName:"p"},"fillValue"),".")),(0,t.yg)("h4",g({},{id:"definitions-3"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"mergeAllWith<I extends readonly [unknown, unknown, ...unknown[]], K extends UK>(...sources: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"[KT in keyof I]: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<readonly [K, I[KT]]>;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"} & unknown[]): <O, R>(fillValue: O, mergeFun: (key: K, ...values: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"[KT in keyof I]: I[KT] "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," O;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}) => R) => "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, K, R>['nonEmpty'];"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"mergeAllWith<I extends readonly [unknown, unknown, ...unknown[]], K extends UK>(...sources: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"[KT in keyof I]: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<readonly [K, I[KT]]>;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"} & unknown[]): <O, R>(fillValue: O, mergeFun: (key: K, ...values: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"[KT in keyof I]: I[KT] "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," O;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}) => R) => "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, K, R>['normal'];"))),(0,t.yg)("h4",g({},{id:"type-parameters-6"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"I"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"readonly [unknown, unknown, ...unknown[]]")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the array of input source value types")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"K"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"UK")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the common key type")))),(0,t.yg)("h4",g({},{id:"parameters-4"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"sources")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"[KT in keyof I]: "),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"td"},"<readonly [K, I[KT]]>;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"} & unknown[]")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"a non-empty set of StreamSouces containing tuples of keys and values")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b'])\nconst m2 = HashMap.mergeAllWith(\nm\n[[2, 'c']],\nHashMap.of([3, 'd'])\n)(\n'q',\n(key, v1, v2, v3) => `${key}${v1}${v2}${v3}`\n)\n// type of m2: HashMap<number, string>\nconsole.log(m2.toArray())\n// => [[1, '1aqq'], [2, '2bcq'], [3, '3qqd']]\n"))),(0,t.yg)("h4",g({},{id:"overrides-5"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Factory/interface#mergeAllWith"}),"Factory.mergeAllWith"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"mergewith"}),(0,t.yg)("inlineCode",{parentName:"h3"},"mergeWith")),(0,t.yg)("p",null,"Returns a Map containing the common keys from this map and all the given ",(0,t.yg)("inlineCode",{parentName:"p"},"sources")," key-value stream sources, and as values the result of applying given ",(0,t.yg)("inlineCode",{parentName:"p"},"mergeFun")," to the key and values of all the corresponding values for each common key. If a source doesn't have a key, the key will be skipped.")),(0,t.yg)("h4",g({},{id:"definitions-4"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"mergeWith<I extends readonly [unknown, unknown, ...unknown[]], K extends UK>(...sources: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"[KT in keyof I]: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<readonly [K, I[KT]]>;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"} & unknown[]): <R>(mergeFun: (key: K, ...values: I) => R) => "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, K, R>['nonEmpty'];"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"mergeWith<I extends readonly [unknown, unknown, ...unknown[]], K extends UK>(...sources: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"[KT in keyof I]: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<readonly [K, I[KT]]>;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"} & unknown[]): <R>(mergeFun: (key: K, ...values: I) => R) => "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, K, R>['normal'];"))),(0,t.yg)("h4",g({},{id:"type-parameters-7"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"I"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"readonly [unknown, unknown, ...unknown[]]")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the array of input source value types")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"K"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"UK")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the common key type")))),(0,t.yg)("h4",g({},{id:"parameters-5"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"sources")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"[KT in keyof I]: "),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"td"},"<readonly [K, I[KT]]>;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"} & unknown[]")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"a non-empty set of StreamSouces containing tuples of keys and values")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b'])\nconst m2 = HashMap.mergeWith(\nm,\n[[2, true]],\nHashMap.of([2, 15])\n)(\n(key, v1, v2) => `${key}${v1}${v2}`,\n)\n// type of m2: HashMap<number, string>\nconsole.log(m2.toArray())\n// => [[2, '2true15']]\n"))),(0,t.yg)("h4",g({},{id:"overrides-6"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Factory/interface#mergeWith"}),"Factory.mergeWith"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"of"}),(0,t.yg)("inlineCode",{parentName:"h3"},"of")),(0,t.yg)("p",null,"Returns an immutable map of this collection type and context, containing the given ",(0,t.yg)("inlineCode",{parentName:"p"},"entries"),".")),(0,t.yg)("h4",g({},{id:"definition-6"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"of<K extends UK, V>(...entries: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<readonly [K, V]>): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['nonEmpty'];"))),(0,t.yg)("h4",g({},{id:"type-parameters-8"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"K"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"UK")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"V"),(0,t.yg)("td",g({parentName:"tr"},{align:null})),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",g({},{id:"parameters-6"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"entries")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,t.yg)("inlineCode",{parentName:"td"},"<readonly [K, V]>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"a non-empty array of key-value entries")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 'a'], [2, 'b'])    // => HashMap.NonEmpty<number, string>\n"))),(0,t.yg)("h4",g({},{id:"overrides-7"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Factory/interface#of"}),"Factory.of"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"reducer"}),(0,t.yg)("inlineCode",{parentName:"h3"},"reducer")),(0,t.yg)("p",null,"Returns a ",(0,t.yg)("inlineCode",{parentName:"p"},"Reducer")," that adds received tuples to an RMap and returns the RMap as a result. When a ",(0,t.yg)("inlineCode",{parentName:"p"},"source")," is given, the reducer will first create an RMap from the source, and then add tuples to it.")),(0,t.yg)("h4",g({},{id:"definition-7"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"reducer<K extends UK, V>(source?: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<readonly [K, V]>): Reducer<readonly [K, V], "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal']>;"))),(0,t.yg)("h4",g({},{id:"type-parameters-9"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"K"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"UK")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"V"),(0,t.yg)("td",g({parentName:"tr"},{align:null})),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",g({},{id:"parameters-7"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"source")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<readonly [K, V]>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"(optional) an initial source of tuples to add to")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const someSource = HashMap.of([1, 'a'], [2, 'b']);\nconst result = Stream.of([1, 'c'], [3, 'a']).reduce(HashMap.reducer(someSource))\nresult.toArray()   // => [[1, 'c'], [2, 'b'], [3, 'a']]\n"))),(0,t.yg)("admonition",g({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"uses a builder under the hood. If the given ",(0,t.yg)("inlineCode",{parentName:"p"},"source")," is an RMap in the same context, it will directly call ",(0,t.yg)("inlineCode",{parentName:"p"},".toBuilder()"),".")),(0,t.yg)("h4",g({},{id:"overrides-8"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Factory/interface#reducer"}),"Factory.reducer"))))}C.isMDXComponent=!0}}]);