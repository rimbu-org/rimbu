"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[33364],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>N});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=n.createContext({}),m=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=m(e.components);return n.createElement(o.Provider,{value:t},e.children)},k="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},s=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),k=m(a),s=i,N=k["".concat(o,".").concat(s)]||k[s]||u[s]||r;return a?n.createElement(N,l(l({ref:t},d),{},{components:a})):n.createElement(N,l({ref:t},d))}));function N(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=s;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[k]="string"==typeof e?e:i,l[1]=p;for(var m=2;m<r;m++)l[m]=a[m];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}s.displayName="MDXCreateElement"},96009:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>v,contentTitle:()=>h,default:()=>g,frontMatter:()=>N,metadata:()=>y,toc:()=>c});var n=a(3905),i=Object.defineProperty,r=Object.defineProperties,l=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable,d=(e,t,a)=>t in e?i(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,k=(e,t)=>{for(var a in t||(t={}))o.call(t,a)&&d(e,a,t[a]);if(p)for(var a of p(t))m.call(t,a)&&d(e,a,t[a]);return e},u=(e,t)=>r(e,l(t)),s=(e,t)=>{var a={};for(var n in e)o.call(e,n)&&t.indexOf(n)<0&&(a[n]=e[n]);if(null!=e&&p)for(var n of p(e))t.indexOf(n)<0&&m.call(e,n)&&(a[n]=e[n]);return a};const N={title:"BiMap.NonEmpty<K,V>",slug:"/rimbu/bimap/BiMap/NonEmpty/interface"},h="interface BiMap.NonEmpty<K,V>",y={unversionedId:"rimbu_bimap/BiMap/NonEmpty.interface",id:"rimbu_bimap/BiMap/NonEmpty.interface",title:"BiMap.NonEmpty<K,V>",description:"A non-empty type-invariant immutable bi-directional Map where keys and values have a one-to-one mapping. See the BiMap documentation and the BiMap API documentation *",source:"@site/api/rimbu_bimap/BiMap/NonEmpty.interface.mdx",sourceDirName:"rimbu_bimap/BiMap",slug:"/rimbu/bimap/BiMap/NonEmpty/interface",permalink:"/api/rimbu/bimap/BiMap/NonEmpty/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"BiMap.NonEmpty<K,V>",slug:"/rimbu/bimap/BiMap/NonEmpty/interface"},sidebar:"defaultSidebar",previous:{title:"BiMap.Context<UK,UV,Tp>",permalink:"/api/rimbu/bimap/BiMap/Context/interface"},next:{title:"BiMap.Types",permalink:"/api/rimbu/bimap/BiMap/Types/interface"}},v={},c=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>context</code>",id:"context",level:3},{value:"Definition",id:"definition",level:4},{value:"Overrides",id:"overrides",level:4},{value:"<code>isEmpty</code>",id:"isempty",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"<code>keyValueMap</code>",id:"keyvaluemap",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"<code>size</code>",id:"size",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"<code>valueKeyMap</code>",id:"valuekeymap",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Overrides",id:"overrides-4",level:4},{value:"Methods",id:"methods",level:2},{value:"<code>[Symbol.iterator]</code>",id:"symboliterator",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Overrides",id:"overrides-5",level:4},{value:"<code>addEntries</code>",id:"addentries",level:3},{value:"Definition",id:"definition-6",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Overrides",id:"overrides-6",level:4},{value:"<code>addEntry</code>",id:"addentry",level:3},{value:"Definition",id:"definition-7",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Overrides",id:"overrides-7",level:4},{value:"<code>asNormal</code>",id:"asnormal",level:3},{value:"Definition",id:"definition-8",level:4},{value:"<code>assumeNonEmpty</code>",id:"assumenonempty",level:3},{value:"Definition",id:"definition-9",level:4},{value:"Overrides",id:"overrides-8",level:4},{value:"<code>filter</code>",id:"filter",level:3},{value:"Definition",id:"definition-10",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Overrides",id:"overrides-9",level:4},{value:"<code>forEach</code>",id:"foreach",level:3},{value:"Definition",id:"definition-11",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Overrides",id:"overrides-10",level:4},{value:"<code>getKey</code>",id:"getkey",level:3},{value:"Definitions",id:"definitions",level:4},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"Overrides",id:"overrides-11",level:4},{value:"<code>getValue</code>",id:"getvalue",level:3},{value:"Definitions",id:"definitions-1",level:4},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"Overrides",id:"overrides-12",level:4},{value:"<code>hasKey</code>",id:"haskey",level:3},{value:"Definition",id:"definition-12",level:4},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"Overrides",id:"overrides-13",level:4},{value:"<code>hasValue</code>",id:"hasvalue",level:3},{value:"Definition",id:"definition-13",level:4},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"Overrides",id:"overrides-14",level:4},{value:"<code>nonEmpty</code>",id:"nonempty",level:3},{value:"Definition",id:"definition-14",level:4},{value:"Overrides",id:"overrides-15",level:4},{value:"<code>removeKey</code>",id:"removekey",level:3},{value:"Definition",id:"definition-15",level:4},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"Overrides",id:"overrides-16",level:4},{value:"<code>removeKeyAndGet</code>",id:"removekeyandget",level:3},{value:"Definition",id:"definition-16",level:4},{value:"Type parameters",id:"type-parameters-6",level:4},{value:"Parameters",id:"parameters-9",level:4},{value:"Overrides",id:"overrides-17",level:4},{value:"<code>removeKeys</code>",id:"removekeys",level:3},{value:"Definition",id:"definition-17",level:4},{value:"Type parameters",id:"type-parameters-7",level:4},{value:"Parameters",id:"parameters-10",level:4},{value:"Overrides",id:"overrides-18",level:4},{value:"<code>removeValue</code>",id:"removevalue",level:3},{value:"Definition",id:"definition-18",level:4},{value:"Type parameters",id:"type-parameters-8",level:4},{value:"Parameters",id:"parameters-11",level:4},{value:"Overrides",id:"overrides-19",level:4},{value:"<code>removeValueAndGet</code>",id:"removevalueandget",level:3},{value:"Definition",id:"definition-19",level:4},{value:"Type parameters",id:"type-parameters-9",level:4},{value:"Parameters",id:"parameters-12",level:4},{value:"Overrides",id:"overrides-20",level:4},{value:"<code>removeValues</code>",id:"removevalues",level:3},{value:"Definition",id:"definition-20",level:4},{value:"Type parameters",id:"type-parameters-10",level:4},{value:"Parameters",id:"parameters-13",level:4},{value:"Overrides",id:"overrides-21",level:4},{value:"<code>set</code>",id:"set",level:3},{value:"Definition",id:"definition-21",level:4},{value:"Parameters",id:"parameters-14",level:4},{value:"Overrides",id:"overrides-22",level:4},{value:"<code>stream</code>",id:"stream",level:3},{value:"Definition",id:"definition-22",level:4},{value:"Overrides",id:"overrides-23",level:4},{value:"<code>streamKeys</code>",id:"streamkeys",level:3},{value:"Definition",id:"definition-23",level:4},{value:"Overrides",id:"overrides-24",level:4},{value:"<code>streamValues</code>",id:"streamvalues",level:3},{value:"Definition",id:"definition-24",level:4},{value:"Overrides",id:"overrides-25",level:4},{value:"<code>toArray</code>",id:"toarray",level:3},{value:"Definition",id:"definition-25",level:4},{value:"Overrides",id:"overrides-26",level:4},{value:"<code>toBuilder</code>",id:"tobuilder",level:3},{value:"Definition",id:"definition-26",level:4},{value:"Overrides",id:"overrides-27",level:4},{value:"<code>toJSON</code>",id:"tojson",level:3},{value:"Definition",id:"definition-27",level:4},{value:"Overrides",id:"overrides-28",level:4},{value:"<code>toString</code>",id:"tostring",level:3},{value:"Definition",id:"definition-28",level:4},{value:"Overrides",id:"overrides-29",level:4},{value:"<code>updateKeyAtValue</code>",id:"updatekeyatvalue",level:3},{value:"Definition",id:"definition-29",level:4},{value:"Type parameters",id:"type-parameters-11",level:4},{value:"Parameters",id:"parameters-15",level:4},{value:"Overrides",id:"overrides-30",level:4},{value:"<code>updateValueAtKey</code>",id:"updatevalueatkey",level:3},{value:"Definition",id:"definition-30",level:4},{value:"Type parameters",id:"type-parameters-12",level:4},{value:"Parameters",id:"parameters-16",level:4},{value:"Overrides",id:"overrides-31",level:4}],f={toc:c},b="wrapper";function g(e){var t=e,{components:a}=t,i=s(t,["components"]);return(0,n.kt)(b,u(k(k({},f),i),{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",k({},{id:"interface-bimapnonemptykv"}),(0,n.kt)("inlineCode",{parentName:"h1"},"interface BiMap.NonEmpty<K,V>")),(0,n.kt)("p",null,"A non-empty type-invariant immutable bi-directional Map where keys and values have a one-to-one mapping. See the ",(0,n.kt)("a",k({parentName:"p"},{href:"https://rimbu.org/docs/collections/bimap"}),"BiMap documentation")," and the ",(0,n.kt)("a",k({parentName:"p"},{href:"https://rimbu.org/api/rimbu/bimap/BiMap/interface"}),"BiMap API documentation")," *"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Extends:")," ",(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/Streamable/NonEmpty/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Streamable.NonEmpty<T>")),", ",(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"BiMap<K,V>"))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Implemented by:")," ",(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/custom/BiMapNonEmptyImpl/class"}),(0,n.kt)("inlineCode",{parentName:"a"},"BiMapNonEmptyImpl<K,V>"))),(0,n.kt)("h2",k({},{id:"type-parameters"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"K"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the key type")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"V"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the value type")))),(0,n.kt)("h2",k({},{id:"properties"}),"Properties"),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"context"}),(0,n.kt)("inlineCode",{parentName:"h3"},"context")),(0,n.kt)("p",null,"Returns the ",(0,n.kt)("inlineCode",{parentName:"p"},"context")," associated to this collection instance.")),(0,n.kt)("h4",k({},{id:"definition"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly context: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/Context/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"BiMap.Context")),(0,n.kt)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,n.kt)("h4",k({},{id:"overrides"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#context"}),"BiMap.context"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"isempty"}),(0,n.kt)("inlineCode",{parentName:"h3"},"isEmpty")),(0,n.kt)("p",null,"Returns false since this collection is known to be non-empty.")),(0,n.kt)("h4",k({},{id:"definition-1"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly isEmpty: false;"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"BiMap.of([1, 1], [2, 2]).isEmpty   // => false\n"))),(0,n.kt)("h4",k({},{id:"overrides-1"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#isEmpty"}),"BiMap.isEmpty"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"keyvaluemap"}),(0,n.kt)("inlineCode",{parentName:"h3"},"keyValueMap")),(0,n.kt)("p",null,"Returns the non-empty Map representation of the key to value mapping.")),(0,n.kt)("h4",k({},{id:"definition-2"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly keyValueMap: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map/RMap/NonEmpty/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"RMap.NonEmpty")),(0,n.kt)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"BiMap.of([1, 10], [2, 20]).keyValueMap.toArray()\n// => [[1, 10], [2, 20]]\n"))),(0,n.kt)("h4",k({},{id:"overrides-2"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#keyValueMap"}),"BiMap.keyValueMap"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"size"}),(0,n.kt)("inlineCode",{parentName:"h3"},"size")),(0,n.kt)("p",null,"Returns the number of entries")),(0,n.kt)("h4",k({},{id:"definition-3"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly size: number;"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"BiMap.of([1, 1], [2, 2]).size       // => 2\n"))),(0,n.kt)("h4",k({},{id:"overrides-3"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#size"}),"BiMap.size"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"valuekeymap"}),(0,n.kt)("inlineCode",{parentName:"h3"},"valueKeyMap")),(0,n.kt)("p",null,"Returns the non-empty Map representation of the key to value mapping.")),(0,n.kt)("h4",k({},{id:"definition-4"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly valueKeyMap: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map/RMap/NonEmpty/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"RMap.NonEmpty")),(0,n.kt)("inlineCode",{parentName:"p"},"<V, K>;"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"BiMap.of([1, 10], [2, 20]).valueKeyMap.toArray()\n// => [[10, 1], [20, 2]]\n"))),(0,n.kt)("h4",k({},{id:"overrides-4"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#valueKeyMap"}),"BiMap.valueKeyMap"))),(0,n.kt)("h2",k({},{id:"methods"}),"Methods"),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"symboliterator"}),(0,n.kt)("inlineCode",{parentName:"h3"},"[Symbol.iterator]")),(0,n.kt)("p",null,"Returns a ",(0,n.kt)("inlineCode",{parentName:"p"},"FastIterator")," instance used to iterate over the values of this ",(0,n.kt)("inlineCode",{parentName:"p"},"Iterable"),".")),(0,n.kt)("h4",k({},{id:"definition-5"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"[Symbol.iterator](): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/FastIterator/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"FastIterator")),(0,n.kt)("inlineCode",{parentName:"p"},"<T>;"))),(0,n.kt)("h4",k({},{id:"overrides-5"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/FastIterable/interface#%5BSymbol.iterator%5D"}),"FastIterable.[Symbol.iterator]"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"addentries"}),(0,n.kt)("inlineCode",{parentName:"h3"},"addEntries")),(0,n.kt)("p",null,"Returns the collection with the entries from the given ",(0,n.kt)("inlineCode",{parentName:"p"},"StreamSource")," ",(0,n.kt)("inlineCode",{parentName:"p"},"entries")," added.")),(0,n.kt)("h4",k({},{id:"definition-6"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"addEntries(entries: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.kt)("inlineCode",{parentName:"p"},"<readonly [K, V]>): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/NonEmpty/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"BiMap.NonEmpty")),(0,n.kt)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,n.kt)("h4",k({},{id:"parameters"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"entries")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.kt)("inlineCode",{parentName:"td"},"<readonly [K, V]>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"a ",(0,n.kt)("inlineCode",{parentName:"td"},"StreamSource")," containing tuples with a key and value")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"BiMap.of([1, 1]).addEntries([[2, 2], [1, 3]]).toArray()\n// => [[1, 2]]\n"))),(0,n.kt)("h4",k({},{id:"overrides-6"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#addEntries"}),"BiMap.addEntries"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"addentry"}),(0,n.kt)("inlineCode",{parentName:"h3"},"addEntry")),(0,n.kt)("p",null,"Returns the collection with given ",(0,n.kt)("inlineCode",{parentName:"p"},"entry")," added.")),(0,n.kt)("h4",k({},{id:"definition-7"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"addEntry(entry: readonly [K, V]): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/NonEmpty/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"BiMap.NonEmpty")),(0,n.kt)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,n.kt)("h4",k({},{id:"parameters-1"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"entry")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"readonly [K, V]")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"a tuple containing a key and value")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"BiMap.of([1, 1], [2, 2]).addEntry([1, 2]).toArray()\n// => [[1, 2]]\n"))),(0,n.kt)("h4",k({},{id:"overrides-7"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#addEntry"}),"BiMap.addEntry"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"asnormal"}),(0,n.kt)("inlineCode",{parentName:"h3"},"asNormal")),(0,n.kt)("p",null,"Returns this collection typed as a 'possibly empty' collection.")),(0,n.kt)("h4",k({},{id:"definition-8"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"asNormal(): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"BiMap")),(0,n.kt)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"BiMap.of([1, 1], [2, 2]).asNormal();  // type: BiMap<number, number>\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"assumenonempty"}),(0,n.kt)("inlineCode",{parentName:"h3"},"assumeNonEmpty")),(0,n.kt)("p",null,"Returns a self reference since this collection is known to be non-empty.")),(0,n.kt)("h4",k({},{id:"definition-9"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"assumeNonEmpty(): this;"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const m = BiMap.of([1, 1], [2, 2]);\nm === m.assumeNonEmpty()  // => true\n"))),(0,n.kt)("h4",k({},{id:"overrides-8"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#assumeNonEmpty"}),"BiMap.assumeNonEmpty"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"filter"}),(0,n.kt)("inlineCode",{parentName:"h3"},"filter")),(0,n.kt)("p",null,"Returns a collection containing only those entries that satisfy given ",(0,n.kt)("inlineCode",{parentName:"p"},"pred")," predicate.")),(0,n.kt)("h4",k({},{id:"definition-10"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"filter(pred: (entry: readonly [K, V], index: number, halt: () => void) => boolean, options?: {"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"negate?: boolean;"),(0,n.kt)("br",null),"\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"}): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"BiMap")),(0,n.kt)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,n.kt)("h4",k({},{id:"parameters-2"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"pred")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"(entry: readonly [K, V], index: number, halt: () => void) => boolean")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"a predicate function receiving:",(0,n.kt)("br",null)," - ",(0,n.kt)("inlineCode",{parentName:"td"},"entry"),": the next entry",(0,n.kt)("br",null)," - ",(0,n.kt)("inlineCode",{parentName:"td"},"index"),": the entry index",(0,n.kt)("br",null)," - ",(0,n.kt)("inlineCode",{parentName:"td"},"halt"),": a function that, when called, ensures no next elements are passed")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"options")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"{"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"td"},"negate?: boolean;"),(0,n.kt)("br",null),"\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"td"},"}")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,n.kt)("br",null)," - negate: (default: false) when true will negate the given predicate")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"BiMap.of([1, 'a'], [2, 'b'], [3, 'c']).filter(entry => entry[0] === 2 || entry[1] === 'c').toArray()\n// => [[2, 'b'], [3, 'c']]\n"))),(0,n.kt)("h4",k({},{id:"overrides-9"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#filter"}),"BiMap.filter"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"foreach"}),(0,n.kt)("inlineCode",{parentName:"h3"},"forEach")),(0,n.kt)("p",null,"Performs given function ",(0,n.kt)("inlineCode",{parentName:"p"},"f")," for each entry of the collection, using given ",(0,n.kt)("inlineCode",{parentName:"p"},"state")," as initial traversal state.")),(0,n.kt)("h4",k({},{id:"definition-11"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"forEach(f: (entry: readonly [K, V], index: number, halt: () => void) => void, options?: {"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"state?: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/TraverseState/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"TraverseState")),(0,n.kt)("inlineCode",{parentName:"p"},";"),(0,n.kt)("br",null),"\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"}): void;"))),(0,n.kt)("h4",k({},{id:"parameters-3"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"f")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"(entry: readonly [K, V], index: number, halt: () => void) => void")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the function to perform for each entry, receiving:",(0,n.kt)("br",null)," - ",(0,n.kt)("inlineCode",{parentName:"td"},"entry"),": the next tuple of a key and value",(0,n.kt)("br",null)," - ",(0,n.kt)("inlineCode",{parentName:"td"},"index"),": the index of the element",(0,n.kt)("br",null)," - ",(0,n.kt)("inlineCode",{parentName:"td"},"halt"),": a function that, if called, ensures that no new elements are passed")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"options")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"{"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"td"},"state?: "),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/common/TraverseState/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"TraverseState")),(0,n.kt)("inlineCode",{parentName:"td"},";"),(0,n.kt)("br",null),"\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"td"},"}")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,n.kt)("br",null)," - state: (optional) the traverse state")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"BiMap.of([1, 'a'], [2, 'b'], [3, 'c']).forEach((entry, i, halt) => {\nconsole.log([entry[1], entry[0]]);\nif (i >= 1) halt();\n})\n// => logs ['a', 1]  ['b', 2]\n"))),(0,n.kt)("admonition",k({},{title:"note",type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"O(N)")),(0,n.kt)("h4",k({},{id:"overrides-10"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#forEach"}),"BiMap.forEach"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"getkey"}),(0,n.kt)("inlineCode",{parentName:"h3"},"getKey")),(0,n.kt)("p",null,"Returns the key associated with the given ",(0,n.kt)("inlineCode",{parentName:"p"},"value"),", or given ",(0,n.kt)("inlineCode",{parentName:"p"},"otherwise")," value if the key is not in the collection.")),(0,n.kt)("h4",k({},{id:"definitions"}),"Definitions"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"getKey<UV = V>(value: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"p"},"<V, UV>): K "),(0,n.kt)("code",null,"|"),(0,n.kt)("inlineCode",{parentName:"p"}," undefined;"))),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"getKey<UV, O>(value: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"p"},"<V, UV>, otherwise: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"OptLazy")),(0,n.kt)("inlineCode",{parentName:"p"},"<O>): K "),(0,n.kt)("code",null,"|"),(0,n.kt)("inlineCode",{parentName:"p"}," O;"))),(0,n.kt)("h4",k({},{id:"type-parameters-1"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Default"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"UV"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"V")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-4"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"value")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"td"},"<V, UV>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"thevalue to look for")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const m = BiMap.of([1, 'a'], [2, 'b'])\nm.getKey('b')          // => 2\nm.getKey('z')          // => undefined\nm.getKey('b', 'none')  // => 2\nm.getKey('z', 'none')  // => 'none'\n"))),(0,n.kt)("h4",k({},{id:"overrides-11"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#getKey"}),"BiMap.getKey"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"getvalue"}),(0,n.kt)("inlineCode",{parentName:"h3"},"getValue")),(0,n.kt)("p",null,"Returns the value associated with the given ",(0,n.kt)("inlineCode",{parentName:"p"},"key"),", or given ",(0,n.kt)("inlineCode",{parentName:"p"},"otherwise")," value if the key is not in the collection.")),(0,n.kt)("h4",k({},{id:"definitions-1"}),"Definitions"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"getValue<UK = K>(key: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"p"},"<K, UK>): V "),(0,n.kt)("code",null,"|"),(0,n.kt)("inlineCode",{parentName:"p"}," undefined;"))),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"getValue<UK, O>(key: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"p"},"<K, UK>, otherwise: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"OptLazy")),(0,n.kt)("inlineCode",{parentName:"p"},"<O>): V "),(0,n.kt)("code",null,"|"),(0,n.kt)("inlineCode",{parentName:"p"}," O;"))),(0,n.kt)("h4",k({},{id:"type-parameters-2"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Default"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"UK"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"K")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-5"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"key")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"td"},"<K, UK>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the key to look for")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const m = BiMap.of([1, 'a'], [2, 'b'])\nm.getValue(2)          // => 'b'\nm.getValue(3)          // => undefined\nm.getValue(2, 'none')  // => 'b'\nm.getValue(3, 'none')  // => 'none'\n"))),(0,n.kt)("h4",k({},{id:"overrides-12"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#getValue"}),"BiMap.getValue"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"haskey"}),(0,n.kt)("inlineCode",{parentName:"h3"},"hasKey")),(0,n.kt)("p",null,"Returns true if the given ",(0,n.kt)("inlineCode",{parentName:"p"},"key")," is present in the collection.")),(0,n.kt)("h4",k({},{id:"definition-12"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"hasKey<UK = K>(key: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"p"},"<K, UK>): boolean;"))),(0,n.kt)("h4",k({},{id:"type-parameters-3"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Default"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"UK"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"K")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-6"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"key")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"td"},"<K, UK>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the key to look for")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const m = BiMap.of([1, 'a'], [2, 'b'])\nm.hasKey(2)    // => true\nm.hasKey(3)    // => false\n"))),(0,n.kt)("h4",k({},{id:"overrides-13"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#hasKey"}),"BiMap.hasKey"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"hasvalue"}),(0,n.kt)("inlineCode",{parentName:"h3"},"hasValue")),(0,n.kt)("p",null,"Returns true if the given ",(0,n.kt)("inlineCode",{parentName:"p"},"value")," is present in the collection.")),(0,n.kt)("h4",k({},{id:"definition-13"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"hasValue<UV = V>(key: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"p"},"<V, UV>): boolean;"))),(0,n.kt)("h4",k({},{id:"type-parameters-4"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Default"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"UV"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"V")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-7"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"key")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"td"},"<V, UV>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const m = BiMap.of([1, 'a'], [2, 'b'])\nm.hasKey('a')    // => true\nm.hasKey('z')    // => false\n"))),(0,n.kt)("h4",k({},{id:"overrides-14"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#hasValue"}),"BiMap.hasValue"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"nonempty"}),(0,n.kt)("inlineCode",{parentName:"h3"},"nonEmpty")),(0,n.kt)("p",null,"Returns true since this collection is known to be non-empty")),(0,n.kt)("h4",k({},{id:"definition-14"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"nonEmpty(): true;"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"BiMap.of([1, 1], [2, 2]).nonEmpty()   // => true\n"))),(0,n.kt)("h4",k({},{id:"overrides-15"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#nonEmpty"}),"BiMap.nonEmpty"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"removekey"}),(0,n.kt)("inlineCode",{parentName:"h3"},"removeKey")),(0,n.kt)("p",null,"Returns the collection where the entry associated with given ",(0,n.kt)("inlineCode",{parentName:"p"},"key")," is removed if it was part of the collection.")),(0,n.kt)("h4",k({},{id:"definition-15"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"removeKey<UK = K>(key: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"p"},"<K, UK>): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"BiMap")),(0,n.kt)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,n.kt)("h4",k({},{id:"type-parameters-5"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Default"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"UK"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"K")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-8"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"key")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"td"},"<K, UK>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the key of the entry to remove")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const m = BiMap.of([1, 1], [2, 2])\nm.removeKey(2).toArray()   // => [[1, 1]]\nm.removeKey(3) === m       // true\n"))),(0,n.kt)("admonition",k({},{title:"note",type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"guarantees same object reference if the key is not present")),(0,n.kt)("h4",k({},{id:"overrides-16"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#removeKey"}),"BiMap.removeKey"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"removekeyandget"}),(0,n.kt)("inlineCode",{parentName:"h3"},"removeKeyAndGet")),(0,n.kt)("p",null,"Returns a tuple containing the collection of which the entry associated with given ",(0,n.kt)("inlineCode",{parentName:"p"},"key")," is removed, and the value that is associated with that key. If the key is not present, it will return undefined instead.")),(0,n.kt)("h4",k({},{id:"definition-16"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"removeKeyAndGet<UK = K>(key: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"p"},"<K, UK>): ["),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"BiMap")),(0,n.kt)("inlineCode",{parentName:"p"},"<K, V>, V] "),(0,n.kt)("code",null,"|"),(0,n.kt)("inlineCode",{parentName:"p"}," undefined;"))),(0,n.kt)("h4",k({},{id:"type-parameters-6"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Default"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"UK"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"K")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-9"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"key")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"td"},"<K, UK>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the key of the entry to remove")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const m = BiMap.of([1, 1], [2, 2])\nconst result = m.removeKeyAndGet(2)\nif (result !== undefined) console.log([result[0].toString(), result[1]])    // => logs [BiMap(1 <=> 1), 2]\nconsole.log(m.removeKeyAndGet(3))                                           // => logs undefined\n"))),(0,n.kt)("h4",k({},{id:"overrides-17"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#removeKeyAndGet"}),"BiMap.removeKeyAndGet"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"removekeys"}),(0,n.kt)("inlineCode",{parentName:"h3"},"removeKeys")),(0,n.kt)("p",null,"Returns the collection where the entries associated with each key in given ",(0,n.kt)("inlineCode",{parentName:"p"},"keys")," are removed if they were present.")),(0,n.kt)("h4",k({},{id:"definition-17"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"removeKeys<UK = K>(keys: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.kt)("inlineCode",{parentName:"p"},"<"),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"p"},"<K, UK>>): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"BiMap")),(0,n.kt)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,n.kt)("h4",k({},{id:"type-parameters-7"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Default"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"UK"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"K")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-10"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"keys")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.kt)("inlineCode",{parentName:"td"},"<"),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"td"},"<K, UK>>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"a ",(0,n.kt)("inlineCode",{parentName:"td"},"StreamSource")," of keys to remove")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const m = BiMap.of([1, 1], [2, 2])\nm.removeKeys([1, 3]).toArray()     // => [[2, 2]]\nm.removeKeys([1, 3, 2]).toArray()  // => []\nm.removeKeys([3, 4, 5]) === m      // => true\n"))),(0,n.kt)("admonition",k({},{title:"note",type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"guarantees same object reference if none of the keys are present")),(0,n.kt)("h4",k({},{id:"overrides-18"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#removeKeys"}),"BiMap.removeKeys"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"removevalue"}),(0,n.kt)("inlineCode",{parentName:"h3"},"removeValue")),(0,n.kt)("p",null,"Returns the collection where the entry associated with given ",(0,n.kt)("inlineCode",{parentName:"p"},"value")," is removed if it was part of the collection.")),(0,n.kt)("h4",k({},{id:"definition-18"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"removeValue<UV = V>(value: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"p"},"<V, UV>): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"BiMap")),(0,n.kt)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,n.kt)("h4",k({},{id:"type-parameters-8"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Default"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"UV"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"V")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-11"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"value")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"td"},"<V, UV>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the value of the entry to remove")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const m = BiMap.of([1, 1], [2, 2])\nm.removeValue(2).toArray()   // => [[1, 1]]\nm.removeValue(3) === m       // true\n"))),(0,n.kt)("admonition",k({},{title:"note",type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"guarantees same object reference if the key is not present")),(0,n.kt)("h4",k({},{id:"overrides-19"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#removeValue"}),"BiMap.removeValue"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"removevalueandget"}),(0,n.kt)("inlineCode",{parentName:"h3"},"removeValueAndGet")),(0,n.kt)("p",null,"Returns a tuple containing the collection of which the entry associated with given ",(0,n.kt)("inlineCode",{parentName:"p"},"value")," is removed, and the key that is associated with that value. If the value is not present, it will return undefined instead.")),(0,n.kt)("h4",k({},{id:"definition-19"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"removeValueAndGet<UV = V>(value: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"p"},"<V, UV>): ["),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"BiMap")),(0,n.kt)("inlineCode",{parentName:"p"},"<K, V>, K] "),(0,n.kt)("code",null,"|"),(0,n.kt)("inlineCode",{parentName:"p"}," undefined;"))),(0,n.kt)("h4",k({},{id:"type-parameters-9"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Default"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"UV"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"V")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-12"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"value")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"td"},"<V, UV>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the value of the entry to remove")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const m = BiMap.of([1, 1], [2, 2])\nconst result = m.removeValueAndGet(2)\nif (result !== undefined) console.log([result[0].toString(), result[1]])    // => logs [BiMap(1 <=> 1), 2]\nconsole.log(m.removeValueAndGet(3))                                           // => logs undefined\n"))),(0,n.kt)("h4",k({},{id:"overrides-20"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#removeValueAndGet"}),"BiMap.removeValueAndGet"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"removevalues"}),(0,n.kt)("inlineCode",{parentName:"h3"},"removeValues")),(0,n.kt)("p",null,"Returns the collection where the entries associated with each value in given ",(0,n.kt)("inlineCode",{parentName:"p"},"values")," are removed if they were present.")),(0,n.kt)("h4",k({},{id:"definition-20"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"removeValues<UV = V>(value: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.kt)("inlineCode",{parentName:"p"},"<"),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"p"},"<V, UV>>): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"BiMap")),(0,n.kt)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,n.kt)("h4",k({},{id:"type-parameters-10"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Default"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"UV"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"V")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-13"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"value")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.kt)("inlineCode",{parentName:"td"},"<"),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"td"},"<V, UV>>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const m = BiMap.of([1, 1], [2, 2])\nm.removeValues([1, 3]).toArray()     // => [[2, 2]]\nm.removeValues([1, 3, 2]).toArray()  // => []\nm.removeValues([3, 4, 5]) === m      // => true\n"))),(0,n.kt)("admonition",k({},{title:"note",type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"guarantees same object reference if none of the keys are present")),(0,n.kt)("h4",k({},{id:"overrides-21"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#removeValues"}),"BiMap.removeValues"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"set"}),(0,n.kt)("inlineCode",{parentName:"h3"},"set")),(0,n.kt)("p",null,"Returns the collection with the given ",(0,n.kt)("inlineCode",{parentName:"p"},"key")," associated to the given ",(0,n.kt)("inlineCode",{parentName:"p"},"value"),".")),(0,n.kt)("h4",k({},{id:"definition-21"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"set(key: K, value: V): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/NonEmpty/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"BiMap.NonEmpty")),(0,n.kt)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,n.kt)("h4",k({},{id:"parameters-14"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"key")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"K")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the entry key to add")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"value")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"V")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the entry value to add")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"BiMap.of([1, 1], [2, 2]).set(1, 2).toArray()\n// => [[1, 2]]\n"))),(0,n.kt)("admonition",k({},{title:"note",type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"if the key and/or value are already associated, the previous value will be 'replaced'")),(0,n.kt)("h4",k({},{id:"overrides-22"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#set"}),"BiMap.set"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"stream"}),(0,n.kt)("inlineCode",{parentName:"h3"},"stream")),(0,n.kt)("p",null,"Returns a non-empty ",(0,n.kt)("inlineCode",{parentName:"p"},"Stream")," containing all entries of this collection as tuples of key and value.")),(0,n.kt)("h4",k({},{id:"definition-22"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"stream(): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,n.kt)("inlineCode",{parentName:"p"},"<readonly [K, V]>;"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"BiMap.of([1, 1], [2, 2]).stream().toArray()  // => [[1, 1], [2, 2]]\n"))),(0,n.kt)("h4",k({},{id:"overrides-23"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/Streamable/NonEmpty/interface#stream"}),"NonEmpty.stream"),", ",(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#stream"}),"BiMap.stream"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"streamkeys"}),(0,n.kt)("inlineCode",{parentName:"h3"},"streamKeys")),(0,n.kt)("p",null,"Returns a non-empty ",(0,n.kt)("inlineCode",{parentName:"p"},"Stream")," containing all keys of this collection.")),(0,n.kt)("h4",k({},{id:"definition-23"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"streamKeys(): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,n.kt)("inlineCode",{parentName:"p"},"<K>;"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"BiMap.of([[1, 'a'], [2, 'b']]).streamKeys().toArray()   // => [1, 2]\n"))),(0,n.kt)("h4",k({},{id:"overrides-24"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#streamKeys"}),"BiMap.streamKeys"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"streamvalues"}),(0,n.kt)("inlineCode",{parentName:"h3"},"streamValues")),(0,n.kt)("p",null,"Returns a non-empty ",(0,n.kt)("inlineCode",{parentName:"p"},"Stream")," containing all values of this collection.")),(0,n.kt)("h4",k({},{id:"definition-24"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"streamValues(): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,n.kt)("inlineCode",{parentName:"p"},"<V>;"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"BiMap.of([[1, 'a'], [2, 'b']]).streamValues().toArray()   // => ['a', 'b']\n"))),(0,n.kt)("h4",k({},{id:"overrides-25"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#streamValues"}),"BiMap.streamValues"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"toarray"}),(0,n.kt)("inlineCode",{parentName:"h3"},"toArray")),(0,n.kt)("p",null,"Returns a non-empty array containing all entries in this collection.")),(0,n.kt)("h4",k({},{id:"definition-25"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"toArray(): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,n.kt)("inlineCode",{parentName:"p"},"<readonly [K, V]>;"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"BiMap.of([1, 'a'], [2, 'b']).toArray()   // => [[1, 'a'], [2, 'b']]\n"))),(0,n.kt)("admonition",k({},{title:"note",type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"O(log(N))  @note it is safe to mutate the returned array, however, the array elements are not copied, thus should be treated as read-only")),(0,n.kt)("h4",k({},{id:"overrides-26"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#toArray"}),"BiMap.toArray"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"tobuilder"}),(0,n.kt)("inlineCode",{parentName:"h3"},"toBuilder")),(0,n.kt)("p",null,"Returns a builder object containing the entries of this collection.")),(0,n.kt)("h4",k({},{id:"definition-26"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"toBuilder(): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/Builder/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"BiMap.Builder")),(0,n.kt)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const builder: BiMap.Builder<number, string> = BiMap.of([1, 'a'], [2, 'b']).toBuilder()\n"))),(0,n.kt)("h4",k({},{id:"overrides-27"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#toBuilder"}),"BiMap.toBuilder"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"tojson"}),(0,n.kt)("inlineCode",{parentName:"h3"},"toJSON")),(0,n.kt)("p",null,"Returns a JSON representation of this collection.")),(0,n.kt)("h4",k({},{id:"definition-27"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"toJSON(): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/ToJSON/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"ToJSON")),(0,n.kt)("inlineCode",{parentName:"p"},"<(readonly [K, V])[], this['context']['typeTag']>;"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"BiMap.of([1, 'a'], [2, 'b']).toJSON()   // => { dataType: 'BiMap', value: [[1, 'a'], [2, 'b']] }\n"))),(0,n.kt)("h4",k({},{id:"overrides-28"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#toJSON"}),"BiMap.toJSON"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"tostring"}),(0,n.kt)("inlineCode",{parentName:"h3"},"toString")),(0,n.kt)("p",null,"Returns a string representation of this collection.")),(0,n.kt)("h4",k({},{id:"definition-28"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"toString(): string;"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"BiMap.of([1, 'a'], [2, 'b']).toString()   // => BiMap(1 <=> 'a', 2 <=> 'b')\n"))),(0,n.kt)("h4",k({},{id:"overrides-29"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#toString"}),"BiMap.toString"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"updatekeyatvalue"}),(0,n.kt)("inlineCode",{parentName:"h3"},"updateKeyAtValue")),(0,n.kt)("p",null,"Returns the collection where the key associated with given ",(0,n.kt)("inlineCode",{parentName:"p"},"value")," is updated with the given ",(0,n.kt)("inlineCode",{parentName:"p"},"update")," value or update function.")),(0,n.kt)("h4",k({},{id:"definition-29"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"updateKeyAtValue<UV = V>(keyUpdate: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/Update/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Update")),(0,n.kt)("inlineCode",{parentName:"p"},"<K>, value: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"p"},"<V, UV>): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/NonEmpty/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"BiMap.NonEmpty")),(0,n.kt)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,n.kt)("h4",k({},{id:"type-parameters-11"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Default"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"UV"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"V")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-15"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"keyUpdate")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/common/Update/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Update")),(0,n.kt)("inlineCode",{parentName:"td"},"<K>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"a new value or function taking the current key and returning a new key")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"value")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"td"},"<V, UV>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the value of the entry to update")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const m = BiMap.of([1, 1], [2, 2])\nm.updateKeyAtValue(3, 3).toArray()\n// => [[1, 1], [2, 2]]\nm.updateKeyAtValue(10, 2).toArray()\n// => [[1, 1], [10, 2]]\nm.updateKeyAtValue((v) => v + 1, 1)\n// => [[2, 1]]\n"))),(0,n.kt)("h4",k({},{id:"overrides-30"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#updateKeyAtValue"}),"BiMap.updateKeyAtValue"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"updatevalueatkey"}),(0,n.kt)("inlineCode",{parentName:"h3"},"updateValueAtKey")),(0,n.kt)("p",null,"Returns the collection where the value associated with given ",(0,n.kt)("inlineCode",{parentName:"p"},"key")," is updated with the given ",(0,n.kt)("inlineCode",{parentName:"p"},"update")," value or update function.")),(0,n.kt)("h4",k({},{id:"definition-30"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"updateValueAtKey<UK = K>(key: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"p"},"<K, UK>, valueUpdate: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/Update/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Update")),(0,n.kt)("inlineCode",{parentName:"p"},"<V>): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/NonEmpty/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"BiMap.NonEmpty")),(0,n.kt)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,n.kt)("h4",k({},{id:"type-parameters-12"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Default"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"UK"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"K")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-16"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"key")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"td"},"<K, UK>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the key of the entry to update")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"valueUpdate")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/common/Update/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Update")),(0,n.kt)("inlineCode",{parentName:"td"},"<V>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"a new value or function taking the current value and returning a new value")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const m = BiMap.of([1, 1], [2, 2])\nm.updateValueAt(3, 3).toArray()\n// => [[1, 1], [2, 2]]\nm.updateValueAt(2, 10).toArray()\n// => [[1, 1], [2, 10]]\nm.updateValueAt(1, v => v + 1)\n// => [[1, 2]]\n"))),(0,n.kt)("h4",k({},{id:"overrides-31"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#updateValueAtKey"}),"BiMap.updateValueAtKey"))))}g.isMDXComponent=!0}}]);