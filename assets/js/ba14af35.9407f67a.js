"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[25758],{15680:(e,n,a)=>{a.d(n,{xA:()=>m,yg:()=>y});var t=a(96540);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=t.createContext({}),s=function(e){var n=t.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},m=function(e){var n=s(e.components);return t.createElement(p.Provider,{value:n},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=s(a),c=r,y=d["".concat(p,".").concat(c)]||d[c]||g[c]||i;return a?t.createElement(y,l(l({ref:n},m),{},{components:a})):t.createElement(y,l({ref:n},m))}));function y(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=c;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=a[s];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}c.displayName="MDXCreateElement"},63021:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>C,contentTitle:()=>h,default:()=>v,frontMatter:()=>y,metadata:()=>u,toc:()=>f});var t=a(15680),r=Object.defineProperty,i=Object.defineProperties,l=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable,m=(e,n,a)=>n in e?r(e,n,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[n]=a,d=(e,n)=>{for(var a in n||(n={}))p.call(n,a)&&m(e,a,n[a]);if(o)for(var a of o(n))s.call(n,a)&&m(e,a,n[a]);return e},g=(e,n)=>i(e,l(n)),c=(e,n)=>{var a={};for(var t in e)p.call(e,t)&&n.indexOf(t)<0&&(a[t]=e[t]);if(null!=e&&o)for(var t of o(e))n.indexOf(t)<0&&s.call(e,t)&&(a[t]=e[t]);return a};const y={title:"CrossChannel (namespace)",slug:"/rimbu/channel/CrossChannel/namespace"},h="namespace CrossChannel",u={unversionedId:"rimbu_channel/CrossChannel/index",id:"rimbu_channel/CrossChannel/index",title:"CrossChannel (namespace)",description:"A CrossChannel is a channel of which the send and receive modules are not internally connected. This means that the send and receive message types can also differ. A normal Channel can receive its own message, but a CrossChannel cannot, and so they are usually created in pairs to perform bidirectional communication with some other entity.",source:"@site/api/rimbu_channel/CrossChannel/index.mdx",sourceDirName:"rimbu_channel/CrossChannel",slug:"/rimbu/channel/CrossChannel/namespace",permalink:"/api/rimbu/channel/CrossChannel/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"CrossChannel (namespace)",slug:"/rimbu/channel/CrossChannel/namespace"},sidebar:"defaultSidebar",previous:{title:"TimeoutError",permalink:"/api/rimbu/channel/ChannelError/TimeoutError/class"},next:{title:"CrossChannel.Config",permalink:"/api/rimbu/channel/CrossChannel/Config/interface"}},C={},f=[{value:"Interfaces",id:"interfaces",level:2},{value:"Static Methods",id:"static-methods",level:2},{value:"<code>combine</code>",id:"combine",level:3},{value:"Definition",id:"definition",level:4},{value:"Type parameters",id:"type-parameters",level:4},{value:"Parameters",id:"parameters",level:4},{value:"<code>createPair</code>",id:"createpair",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters-1",level:4}],N={toc:f},b="wrapper";function v(e){var n=e,{components:a}=n,r=c(n,["components"]);return(0,t.yg)(b,g(d(d({},N),r),{components:a,mdxType:"MDXLayout"}),(0,t.yg)("h1",d({},{id:"namespace-crosschannel"}),(0,t.yg)("inlineCode",{parentName:"h1"},"namespace CrossChannel")),(0,t.yg)("p",null,"A CrossChannel is a channel of which the send and receive modules are not internally connected. This means that the send and receive message types can also differ. A normal Channel can receive its own message, but a CrossChannel cannot, and so they are usually created in pairs to perform bidirectional communication with some other entity."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Companion interface:")," ",(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/channel/CrossChannel/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"CrossChannel<TSend,TReceive>"))),(0,t.yg)("h2",d({},{id:"interfaces"}),"Interfaces"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/channel/CrossChannel/Config/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"CrossChannel.Config"))),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"Configuration options for creating a CrossChannel")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/channel/CrossChannel/Constructors/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"CrossChannel.Constructors"))),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"Defines the static ",(0,t.yg)("inlineCode",{parentName:"td"},"CrossChannel")," API.")))),(0,t.yg)("h2",d({},{id:"static-methods"}),"Static Methods"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"combine"}),(0,t.yg)("inlineCode",{parentName:"h3"},"combine")),(0,t.yg)("p",null,"Returns a CrossChannel where the send module comprises the given ",(0,t.yg)("inlineCode",{parentName:"p"},"writeCh"),", and the receive module conists of the given ",(0,t.yg)("inlineCode",{parentName:"p"},"readCh"),".")),(0,t.yg)("h4",d({},{id:"definition"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"combine<TSend = void, TReceive = TSend>(writeCh: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/channel/Channel/Write/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Channel.Write")),(0,t.yg)("inlineCode",{parentName:"p"},"<TSend>, readCh: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/channel/Channel/Read/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Channel.Read")),(0,t.yg)("inlineCode",{parentName:"p"},"<TReceive>): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/channel/CrossChannel/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"CrossChannel")),(0,t.yg)("inlineCode",{parentName:"p"},"<TSend, TReceive>;"))),(0,t.yg)("h4",d({},{id:"type-parameters"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"TSend"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"void")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the send message type")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"TReceive"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"TSend")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the receive message type")))),(0,t.yg)("h4",d({},{id:"parameters"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"writeCh")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/channel/Channel/Write/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Channel.Write")),(0,t.yg)("inlineCode",{parentName:"td"},"<TSend>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the write channel to use for sending messages")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"readCh")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/channel/Channel/Read/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Channel.Read")),(0,t.yg)("inlineCode",{parentName:"td"},"<TReceive>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the read channel to use for receiving messages"))))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"createpair"}),(0,t.yg)("inlineCode",{parentName:"h3"},"createPair")),(0,t.yg)("p",null,"Returns a pair of connected CrossChannels of which the send module of the first is connected to the receive module of the second, and the send module of the second is connected to the receive module of the first.")),(0,t.yg)("h4",d({},{id:"definition-1"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"createPair<TSend = void, TReceive = TSend>(config?: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/channel/CrossChannel/Config/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"CrossChannel.Config")),(0,t.yg)("inlineCode",{parentName:"p"},"): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/channel/CrossChannel/Pair/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"CrossChannel.Pair")),(0,t.yg)("inlineCode",{parentName:"p"},"<TSend, TReceive>;"))),(0,t.yg)("h4",d({},{id:"type-parameters-1"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"TSend"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"void")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the send message type")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"TReceive"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"TSend")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the receive message type")))),(0,t.yg)("h4",d({},{id:"parameters-1"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"config")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/channel/CrossChannel/Config/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"CrossChannel.Config"))),(0,t.yg)("td",d({parentName:"tr"},{align:null})))))))}v.isMDXComponent=!0}}]);