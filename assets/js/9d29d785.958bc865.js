"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[67977],{15680:(e,a,t)=>{t.d(a,{xA:()=>m,yg:()=>u});var n=t(96540);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=n.createContext({}),s=function(e){var a=n.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},m=function(e){var a=s(e.components);return n.createElement(p.Provider,{value:a},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},y=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=s(t),y=r,u=d["".concat(p,".").concat(y)]||d[y]||c[y]||i;return t?n.createElement(u,o(o({ref:a},m),{},{components:t})):n.createElement(u,o({ref:a},m))}));function u(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=y;var l={};for(var p in a)hasOwnProperty.call(a,p)&&(l[p]=a[p]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}y.displayName="MDXCreateElement"},10684:(e,a,t)=>{t.d(a,{P:()=>i});var n=t(96540);function r(e){return e.replace(/</g,"%3C").replace(/>/g,"%3E")}function i(e){const a=r(`https://g.gravizo.com/svg?\n  @startuml;\n  skinparam monochrome true;\n  skinparam backgroundColor none;\n  skinparam classBackgroundColor darkslategrey;\n  skinparam classBorderColor gray;\n  skinparam classFontColor lightgray;\n  skinparam classStereotypeFontColor darkgray;\n  skinparam arrowColor lightgray;\n  skinparam linetype ortho;\n  ${e.contents}\n  @enduml;`);return n.createElement("img",{src:a,className:"diagram"})}},7738:(e,a,t)=>{t.d(a,{G:()=>u});var n=t(96540),r=Object.defineProperty,i=Object.defineProperties,o=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable,m=(e,a,t)=>a in e?r(e,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[a]=t,d=(e,a)=>{for(var t in a||(a={}))p.call(a,t)&&m(e,t,a[t]);if(l)for(var t of l(a))s.call(a,t)&&m(e,t,a[t]);return e},c=(e,a)=>i(e,o(a));const y={previewwindow:"console",view:"split",editorsize:"60",codemirror:"1",moduleview:"1"};function u(e){const a=function(e){let a="",t="";for(const n in e)a+=`${t}${n}=${e[n]}`,t="&";return""===a?"":`?${a}`}(c(d({},y),{module:`/src/${e.path}`})),t=`https://codesandbox.io/embed/github/vitoke/rimbu-sandbox/tree/main${a}`,r=`https://codesandbox.io/s/github/vitoke/rimbu-sandbox/tree/main${a}`;return n.createElement(n.Fragment,null,n.createElement("a",{target:"_blank",className:"button button--secondary",href:r,style:{marginBottom:10}},"Open file below in new window with full type-check"),n.createElement("iframe",{src:t,className:"codesandbox-iframe",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"}))}},66297:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>w,contentTitle:()=>f,default:()=>x,frontMatter:()=>b,metadata:()=>v,toc:()=>N});var n=t(15680),r=t(10684);const i="\ninterface Streamable<[K, V]>;\n\ninterface VariantMap<K, V>;\nabstract RMap<K, V>;\nclass HashMap<K, V>;\nclass SortedMap<K, V>;\n\nStreamable <|.. VariantMap;\nVariantMap <|-- RMap;\nRMap <|-- HashMap;\nRMap <|-- SortedMap;\nRMap <|-- ProximityMap;\n";var o=t(7738),l=Object.defineProperty,p=Object.defineProperties,s=Object.getOwnPropertyDescriptors,m=Object.getOwnPropertySymbols,d=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,y=(e,a,t)=>a in e?l(e,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[a]=t,u=(e,a)=>{for(var t in a||(a={}))d.call(a,t)&&y(e,t,a[t]);if(m)for(var t of m(a))c.call(a,t)&&y(e,t,a[t]);return e},g=(e,a)=>p(e,s(a)),h=(e,a)=>{var t={};for(var n in e)d.call(e,n)&&a.indexOf(n)<0&&(t[n]=e[n]);if(null!=e&&m)for(var n of m(e))a.indexOf(n)<0&&c.call(e,n)&&(t[n]=e[n]);return t};const b={id:"map",slug:"./map",title:"Map"},f="Map",v={unversionedId:"collections/map",id:"collections/map",title:"Map",description:"A Map is a collection of entries, where each entry has a key and a value. Each key has exactly one value, and each key is unique. Values do not need to be unique.",source:"@site/docs/collections/map.mdx",sourceDirName:"collections",slug:"/collections/map",permalink:"/docs/collections/map",draft:!1,editUrl:"https://github.com/rimbu-org/rimbu/edit/master/website/docs/collections/map.mdx",tags:[],version:"current",frontMatter:{id:"map",slug:"./map",title:"Map"},sidebar:"sidebar",previous:{title:"List",permalink:"/docs/collections/list"},next:{title:"MultiMap",permalink:"/docs/collections/multimap"}},w={},N=[{value:"When to use",id:"when-to-use",level:2},{value:"HashMap",id:"hashmap",level:2},{value:"SortedMap",id:"sortedmap",level:2},{value:"OrderedMap",id:"orderedmap",level:2},{value:"ProximityMap",id:"proximitymap",level:2},{value:"Exports",id:"exports",level:2},{value:"Inheritance",id:"inheritance",level:2},{value:"Usage",id:"usage",level:2},{value:"Creation",id:"creation",level:3},{value:"Query",id:"query",level:3},{value:"Builder",id:"builder",level:3}],M={toc:N},O="wrapper";function x(e){var a=e,{components:t}=a,l=h(a,["components"]);return(0,n.yg)(O,g(u(u({},M),l),{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",u({},{id:"map"}),"Map"),(0,n.yg)("p",null,"A Map is a collection of entries, where each entry has a key and a value. Each key has exactly one value, and each key is unique. Values do not need to be unique."),(0,n.yg)("h2",u({},{id:"when-to-use"}),"When to use"),(0,n.yg)("p",null,"The Map is a useful when it is useful to assign values of objects to unique entities of a certain type. For example, consider currencies and their values. Using a Map we can assign a value to each currency, e.g. euro and dollar. We can update their values, and we can query the value of a specific currency. It does not really make much sense to query using a value to get a currency, so a ",(0,n.yg)("inlineCode",{parentName:"p"},"BiMap")," would not be useful in this case."),(0,n.yg)("admonition",u({},{type:"info"}),(0,n.yg)("p",{parentName:"admonition"},"Rimbu provides one unordered immutable map implementation, being ",(0,n.yg)("inlineCode",{parentName:"p"},"HashMap"),", and two ordered immutable maps, being ",(0,n.yg)("inlineCode",{parentName:"p"},"SortedMap")," and ",(0,n.yg)("inlineCode",{parentName:"p"},"OrderedMap"))),(0,n.yg)("h2",u({},{id:"hashmap"}),"HashMap"),(0,n.yg)("p",null,"The ",(0,n.yg)("inlineCode",{parentName:"p"},"HashMap")," uses a ",(0,n.yg)("inlineCode",{parentName:"p"},"Hasher")," instance to convert values and objects into numbers that can be used to effeciently organize items within the collection. This results in the values being 'unordered', that is, iterating over the collection will not necessarily return the values in insertion order."),(0,n.yg)("h2",u({},{id:"sortedmap"}),"SortedMap"),(0,n.yg)("p",null,"The ",(0,n.yg)("inlineCode",{parentName:"p"},"SortedMap")," uses a ",(0,n.yg)("inlineCode",{parentName:"p"},"Comp")," instance that can compare two elements and return a number indicating whether they are equal or which one is 'larger'. The ",(0,n.yg)("inlineCode",{parentName:"p"},"Sortedap")," uses this method to keep the elements in sorted order, so that iteration will always return the elements in sorted order as well."),(0,n.yg)("h2",u({},{id:"orderedmap"}),"OrderedMap"),(0,n.yg)("p",null,"The ",(0,n.yg)("inlineCode",{parentName:"p"},"OrderedMap")," maintains an extra ",(0,n.yg)("inlineCode",{parentName:"p"},"List")," or the inserted keys in insertion order. At the cost of extra memory usage for the List, the ",(0,n.yg)("inlineCode",{parentName:"p"},"OrderedMap")," will return entries in the insertion order when iterating over its values."),(0,n.yg)("h2",u({},{id:"proximitymap"}),"ProximityMap"),(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"ProximityMap")," is a map whose ",(0,n.yg)("inlineCode",{parentName:"p"},"get()")," method is based not on ",(0,n.yg)("em",{parentName:"p"},"equality"),", but on ",(0,n.yg)("em",{parentName:"p"},"proximity"),": it performs an interruptible linear scan of all the keys, returning the value associated with the key ",(0,n.yg)("em",{parentName:"p"},"closest")," to the given input key, according to an arbitrary ",(0,n.yg)("em",{parentName:"p"},"distance function"),"."),(0,n.yg)("h2",u({},{id:"exports"}),"Exports"),(0,n.yg)("p",null,"The ",(0,n.yg)("inlineCode",{parentName:"p"},"@rimbu/core")," package exports the following ",(0,n.yg)("em",{parentName:"p"},"abstract")," Map TypeScript types:"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("a",u({parentName:"td"},{href:"/api/rimbu/collection-types/map/VariantMap/namespace"}),(0,n.yg)("inlineCode",{parentName:"a"},"VariantMap<K, V>"))),(0,n.yg)("td",u({parentName:"tr"},{align:null}),"a type-variant map with entries of key type K and value type V")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("a",u({parentName:"td"},{href:"/api/rimbu/collection-types/map/RMap/namespace"}),(0,n.yg)("inlineCode",{parentName:"a"},"RMap<K, V>"))),(0,n.yg)("td",u({parentName:"tr"},{align:null}),"a generic map with entries of key type K and value type V")))),(0,n.yg)("p",null,"The ",(0,n.yg)("inlineCode",{parentName:"p"},"@rimbu/core")," package exports the following ",(0,n.yg)("em",{parentName:"p"},"concrete")," Map TypeScript types:"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("a",u({parentName:"td"},{href:"/api/rimbu/hashed/map/HashMap/namespace"}),(0,n.yg)("inlineCode",{parentName:"a"},"HashMap<K, V>"))),(0,n.yg)("td",u({parentName:"tr"},{align:null}),"a map with entries of key type K and value type V, where keys are hashed with a ",(0,n.yg)("inlineCode",{parentName:"td"},"Hasher"))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("a",u({parentName:"td"},{href:"/api/rimbu/sorted/map/SortedMap/namespace"}),(0,n.yg)("inlineCode",{parentName:"a"},"SortedMap<K, V>"))),(0,n.yg)("td",u({parentName:"tr"},{align:null}),"a map with entries of key type K and value type V, where keys are sorted with a ",(0,n.yg)("inlineCode",{parentName:"td"},"Comp"))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("a",u({parentName:"td"},{href:"/api/rimbu/ordered/map/OrderedMap/namespace"}),(0,n.yg)("inlineCode",{parentName:"a"},"OrderedMap<K, V>"))),(0,n.yg)("td",u({parentName:"tr"},{align:null}),"a map with entries of key type K and value type V, where key insertion order is maintained")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("a",u({parentName:"td"},{href:"/api/rimbu/proximity/map/ProximityMap/namespace"}),(0,n.yg)("inlineCode",{parentName:"a"},"ProximityMap<K, V>"))),(0,n.yg)("td",u({parentName:"tr"},{align:null}),"a map with entries of key type K and value type V, where value retrieval is based on ",(0,n.yg)("em",{parentName:"td"},"proximity"))))),(0,n.yg)("h2",u({},{id:"inheritance"}),"Inheritance"),(0,n.yg)(r.P,{contents:i,mdxType:"UmlGraph"}),(0,n.yg)("h2",u({},{id:"usage"}),"Usage"),(0,n.yg)("h3",u({},{id:"creation"}),"Creation"),(0,n.yg)(o.G,{path:"map/create.ts",mdxType:"SandBox"}),(0,n.yg)("h3",u({},{id:"query"}),"Query"),(0,n.yg)(o.G,{path:"map/query.ts",mdxType:"SandBox"}),(0,n.yg)("h3",u({},{id:"builder"}),"Builder"),(0,n.yg)(o.G,{path:"map/build.ts",mdxType:"SandBox"}))}x.isMDXComponent=!0}}]);