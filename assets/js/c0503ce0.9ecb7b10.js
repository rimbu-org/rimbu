"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[88745],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>k});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),u=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=u(e.components);return a.createElement(d.Provider,{value:t},e.children)},o="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),o=u(n),s=r,k=o["".concat(d,".").concat(s)]||o[s]||c[s]||l;return n?a.createElement(k,i(i({ref:t},m),{},{components:n})):a.createElement(k,i({ref:t},m))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=s;var p={};for(var d in t)hasOwnProperty.call(t,d)&&(p[d]=t[d]);p.originalType=e,p[o]="string"==typeof e?e:r,i[1]=p;for(var u=2;u<l;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},41195:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>N,default:()=>C,frontMatter:()=>k,metadata:()=>y,toc:()=>b});var a=n(3905),r=Object.defineProperty,l=Object.defineProperties,i=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,d=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,m=(e,t,n)=>t in e?r(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,o=(e,t)=>{for(var n in t||(t={}))d.call(t,n)&&m(e,n,t[n]);if(p)for(var n of p(t))u.call(t,n)&&m(e,n,t[n]);return e},c=(e,t)=>l(e,i(t)),s=(e,t)=>{var n={};for(var a in e)d.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&p)for(var a of p(e))t.indexOf(a)<0&&u.call(e,a)&&(n[a]=e[a]);return n};const k={title:"AsyncReducer.Impl<I,O,S>",slug:"/rimbu/stream/AsyncReducer/Impl/interface"},N="interface AsyncReducer.Impl<I,O,S>",y={unversionedId:"rimbu_stream/AsyncReducer/Impl.interface",id:"rimbu_stream/AsyncReducer/Impl.interface",title:"AsyncReducer.Impl<I,O,S>",description:"The AsyncReducer implementation interface defining the required methods.",source:"@site/api/rimbu_stream/AsyncReducer/Impl.interface.mdx",sourceDirName:"rimbu_stream/AsyncReducer",slug:"/rimbu/stream/AsyncReducer/Impl/interface",permalink:"/api/rimbu/stream/AsyncReducer/Impl/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"AsyncReducer.Impl<I,O,S>",slug:"/rimbu/stream/AsyncReducer/Impl/interface"},sidebar:"defaultSidebar",previous:{title:"CombineShape",permalink:"/api/rimbu/stream/AsyncReducer/CombineShape/type"},next:{title:"AsyncReducer.Instance<I,O>",permalink:"/api/rimbu/stream/AsyncReducer/Instance/interface"}},h={},b=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>init</code>",id:"init",level:3},{value:"Definition",id:"definition",level:4},{value:"<code>onClose</code>",id:"onclose",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Methods",id:"methods",level:2},{value:"<code>chain</code>",id:"chain",level:3},{value:"Definitions",id:"definitions",level:4},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters",level:4},{value:"<code>collectInput</code>",id:"collectinput",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>compile</code>",id:"compile",level:3},{value:"Definition",id:"definition-3",level:4},{value:"<code>dropInput</code>",id:"dropinput",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"<code>filterInput</code>",id:"filterinput",level:3},{value:"Definitions",id:"definitions-1",level:4},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"<code>flatMapInput</code>",id:"flatmapinput",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"<code>mapInput</code>",id:"mapinput",level:3},{value:"Definition",id:"definition-6",level:4},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"<code>mapOutput</code>",id:"mapoutput",level:3},{value:"Definition",id:"definition-7",level:4},{value:"Type parameters",id:"type-parameters-6",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"<code>next</code>",id:"next",level:3},{value:"Definition",id:"definition-8",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"<code>pipe</code>",id:"pipe",level:3},{value:"Definitions",id:"definitions-2",level:4},{value:"Type parameters",id:"type-parameters-7",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"<code>sliceInput</code>",id:"sliceinput",level:3},{value:"Definition",id:"definition-9",level:4},{value:"Parameters",id:"parameters-9",level:4},{value:"<code>stateToResult</code>",id:"statetoresult",level:3},{value:"Definition",id:"definition-10",level:4},{value:"Parameters",id:"parameters-10",level:4},{value:"<code>takeInput</code>",id:"takeinput",level:3},{value:"Definition",id:"definition-11",level:4},{value:"Parameters",id:"parameters-11",level:4},{value:"<code>takeOutput</code>",id:"takeoutput",level:3},{value:"Definition",id:"definition-12",level:4},{value:"Parameters",id:"parameters-12",level:4},{value:"<code>takeOutputUntil</code>",id:"takeoutputuntil",level:3},{value:"Definition",id:"definition-13",level:4},{value:"Parameters",id:"parameters-13",level:4}],f={toc:b},v="wrapper";function C(e){var t=e,{components:n}=t,r=s(t,["components"]);return(0,a.kt)(v,c(o(o({},f),r),{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",o({},{id:"interface-asyncreducerimplios"}),(0,a.kt)("inlineCode",{parentName:"h1"},"interface AsyncReducer.Impl<I,O,S>")),(0,a.kt)("p",null,"The AsyncReducer implementation interface defining the required methods."),(0,a.kt)("h2",o({},{id:"type-parameters"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),"I"),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"the input type")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),"O"),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"the output type")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),"S"),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"the state type")))),(0,a.kt)("h2",o({},{id:"properties"}),"Properties"),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",o({},{id:"init"}),(0,a.kt)("inlineCode",{parentName:"h3"},"init")),(0,a.kt)("p",null,"The initial state value for the reducer algorithm.")),(0,a.kt)("h4",o({},{id:"definition"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"readonly init: (initHalt: () => void) => MaybePromise<S>;")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",o({},{id:"onclose"}),(0,a.kt)("inlineCode",{parentName:"h3"},"onClose")),(0,a.kt)("p",null,"An optional function that is called when the reducer will no longer receive values.")),(0,a.kt)("h4",o({},{id:"definition-1"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"onClose?: ((state: S, error?: unknown) => MaybePromise<void>) "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," undefined;")))),(0,a.kt)("h2",o({},{id:"methods"}),"Methods"),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",o({},{id:"chain"}),(0,a.kt)("inlineCode",{parentName:"h3"},"chain")),(0,a.kt)("p",null,"Returns a reducer that applies the given ",(0,a.kt)("inlineCode",{parentName:"p"},"nextReducers")," sequentially after this reducer has halted, and moving on to the next provided reducer until it is halted. Optionally, it provides the last output value of the previous reducer.")),(0,a.kt)("h4",o({},{id:"definitions"}),"Definitions"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"chain<O1>(nextReducer1: AsyncOptLazy<"),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"p"},"<I, O1>, [O]>): "),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<I, O1>;"))),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"chain<O1, O2>(nextReducer1: AsyncOptLazy<"),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"p"},"<I, O1>, [O]>, nextReducer2: AsyncOptLazy<"),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"p"},"<I, O2>, [O1]>): "),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<I, O2>;"))),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"chain<O1, O2, O3>(nextReducer1: AsyncOptLazy<"),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"p"},"<I, O1>, [O]>, nextReducer2: AsyncOptLazy<"),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"p"},"<I, O2>, [O1]>, nextReducer3: AsyncOptLazy<"),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"p"},"<I, O3>, [O2]>): "),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<I, O3>;"))),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"chain<O1, O2, O3, O4>(nextReducer1: AsyncOptLazy<"),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"p"},"<I, O1>, [O]>, nextReducer2: AsyncOptLazy<"),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"p"},"<I, O2>, [O1]>, nextReducer3: AsyncOptLazy<"),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"p"},"<I, O3>, [O2]>, nextReducer4: AsyncOptLazy<"),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"p"},"<I, O4>, [O3]>): "),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<I, O4>;"))),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"chain<O1, O2, O3, O4, O5>(nextReducer1: AsyncOptLazy<"),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"p"},"<I, O1>, [O]>, nextReducer2: AsyncOptLazy<"),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"p"},"<I, O2>, [O1]>, nextReducer3: AsyncOptLazy<"),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"p"},"<I, O3>, [O2]>, nextReducer4: AsyncOptLazy<"),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"p"},"<I, O4>, [O3]>, nextReducer5: AsyncOptLazy<"),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"p"},"<I, O5>, [O4]>): "),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<I, O5>;"))),(0,a.kt)("h4",o({},{id:"type-parameters-1"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),"O1"),(0,a.kt)("td",o({parentName:"tr"},{align:null}))))),(0,a.kt)("h4",o({},{id:"parameters"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"nextReducer1")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"AsyncOptLazy<"),(0,a.kt)("a",o({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"td"},"<I, O1>, [O]>")),(0,a.kt)("td",o({parentName:"tr"},{align:null}))))),(0,a.kt)("admonition",o({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",o({parentName:"pre"},{className:"language-ts"}),"const result = await AsyncStream.range({ amount: 6 })\n.reduce(\nAsyncReducer.sum\n.takeInput(3)\n.chain(\nv => v > 10 ? AsyncReducer.product : AsyncReducer.sum\n)\n)\nconsole.log(result)\n// => 21\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",o({},{id:"collectinput"}),(0,a.kt)("inlineCode",{parentName:"h3"},"collectInput")),(0,a.kt)("p",null,"Returns an ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncReducer")," instance that converts or filters its input values using given ",(0,a.kt)("inlineCode",{parentName:"p"},"collectFun")," before passing them to the reducer.")),(0,a.kt)("h4",o({},{id:"definition-2"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"collectInput<I2>(collectFun: AsyncCollectFun<I2, I>): "),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<I2, O>;"))),(0,a.kt)("h4",o({},{id:"type-parameters-2"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),"I2"),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"the new input type")))),(0,a.kt)("h4",o({},{id:"parameters-1"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"collectFun")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"AsyncCollectFun<I2, I>")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"a (potentially async) function receiving",(0,a.kt)("br",null)," - ",(0,a.kt)("inlineCode",{parentName:"td"},"value"),": the next value",(0,a.kt)("br",null)," - ",(0,a.kt)("inlineCode",{parentName:"td"},"index"),": the value index",(0,a.kt)("br",null)," - ",(0,a.kt)("inlineCode",{parentName:"td"},"skip"),": a token that, when returned, will not add a value to the resulting collection",(0,a.kt)("br",null)," - ",(0,a.kt)("inlineCode",{parentName:"td"},"halt"),": a function that, when called, ensures no next elements are passed")))),(0,a.kt)("admonition",o({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",o({parentName:"pre"},{className:"language-ts"}),"AsyncReducer\n.createMono(0, async (c, v) => c + v)\n.collectInput(async (v, _, skip) => v <= 10 ? skip : v * 2)\n// this reducer will double all input values larger thant 10 before summing them,\n// and will skip all values smaller than 10\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",o({},{id:"compile"}),(0,a.kt)("inlineCode",{parentName:"h3"},"compile")),(0,a.kt)("p",null,"Returns a promise that resolves to a 'runnable' instance of the current reducer specification. This instance maintains its own state and indices, so that the instance only needs to be provided the input values, and output values can be retrieved when needed. The state is kept private.")),(0,a.kt)("h4",o({},{id:"definition-3"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"compile(): Promise<"),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Instance/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Instance")),(0,a.kt)("inlineCode",{parentName:"p"},"<I, O>>;"))),(0,a.kt)("admonition",o({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",o({parentName:"pre"},{className:"language-ts"}),"const reducer = AsyncReducer.sum.mapOutput(v => v * 2);\nconst instance = reducer.compile();\nawait instance.next(3);\nawait instance.next(5);\nconsole.log(await instance.getOutput());\n// => 16\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",o({},{id:"dropinput"}),(0,a.kt)("inlineCode",{parentName:"h3"},"dropInput")),(0,a.kt)("p",null,"Returns an ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncReducer")," instance that skips the first given ",(0,a.kt)("inlineCode",{parentName:"p"},"amount")," of input elements, and will process subsequent elements.")),(0,a.kt)("h4",o({},{id:"definition-4"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"dropInput(amount: number): "),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<I, O>;"))),(0,a.kt)("h4",o({},{id:"parameters-2"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"amount")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"number")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"the amount of elements to skip")))),(0,a.kt)("admonition",o({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",o({parentName:"pre"},{className:"language-ts"}),"await AsyncStream\n.from(Stream.range({ end: 10 }))\n.reduce(\nAsyncReducer\n.createMono(0, async (c, v) => c + v)\n.dropInput(9)\n)\n// => 19\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",o({},{id:"filterinput"}),(0,a.kt)("inlineCode",{parentName:"h3"},"filterInput")),(0,a.kt)("p",null,"Returns an ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncReducer")," instance that only passes values to the reducer that satisy the given ",(0,a.kt)("inlineCode",{parentName:"p"},"pred")," predicate.")),(0,a.kt)("h4",o({},{id:"definitions-1"}),"Definitions"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"filterInput<IF extends I>(pred: (value: I, index: number, halt: () => void) => value is IF, options?: {"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"negate?: false "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"}): "),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<IF, O>;"))),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"filterInput<IF extends I>(pred: (value: I, index: number, halt: () => void) => value is IF, options: {"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"negate: true;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"}): "),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<Exclude<I, IF>, O>;"))),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"filterInput(pred: (value: I, index: number, halt: () => void) => MaybePromise<boolean>, options?: {"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"negate?: boolean "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"}): "),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<I, O>;"))),(0,a.kt)("h4",o({},{id:"type-parameters-3"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Constraints"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),"IF"),(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"I")),(0,a.kt)("td",o({parentName:"tr"},{align:null}))))),(0,a.kt)("h4",o({},{id:"parameters-3"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"pred")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"(value: I, index: number, halt: () => void) => value is IF")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"a potaentially asynchronous function that returns true if the value should be passed to the reducer based on the following inputs:",(0,a.kt)("br",null)," - value: the current input value",(0,a.kt)("br",null)," - index: the current input index",(0,a.kt)("br",null)," - halt: function that, when called, ensures no more new values are passed to the reducer")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"options")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"{"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"negate?: false "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"td"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"}")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,a.kt)("br",null)," - negate: (default: false) when true will invert the given predicate")))),(0,a.kt)("admonition",o({},{title:"note",type:"note"}),(0,a.kt)("p",{parentName:"admonition"},"if the predicate is a type guard, the return type is automatically inferred")),(0,a.kt)("admonition",o({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",o({parentName:"pre"},{className:"language-ts"}),"AsyncReducer\n.createMono(0, async (c, v) => c + v)\n.filterInput(async v => v > 10)\n// this reducer will only sum values larger than 10\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",o({},{id:"flatmapinput"}),(0,a.kt)("inlineCode",{parentName:"h3"},"flatMapInput")),(0,a.kt)("p",null,"Returns an ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncReducer")," instance that converts its input values using given ",(0,a.kt)("inlineCode",{parentName:"p"},"flatMapFun")," before passing them to the reducer.")),(0,a.kt)("h4",o({},{id:"definition-5"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"flatMapInput<I2>(flatMapFun: (value: I2, index: number) => MaybePromise<"),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,a.kt)("inlineCode",{parentName:"p"},"<I>>): "),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<I2, O>;"))),(0,a.kt)("h4",o({},{id:"type-parameters-4"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),"I2"),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"the new input type")))),(0,a.kt)("h4",o({},{id:"parameters-4"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"flatMapFun")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"(value: I2, index: number) => MaybePromise<"),(0,a.kt)("a",o({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,a.kt)("inlineCode",{parentName:"td"},"<I>>")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"a potentially asynchronous function that returns am arbitrary number of new values to pass to the reducer based on the following inputs:",(0,a.kt)("br",null)," - value: the current input value",(0,a.kt)("br",null)," - index: the current input index")))),(0,a.kt)("admonition",o({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",o({parentName:"pre"},{className:"language-ts"}),"AsyncReducer\n.createMono(0, async (c, v) => c + v)\n.flatMapInput(async v => [v, v])\n// this reducer will include all input values twice before summing them\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",o({},{id:"mapinput"}),(0,a.kt)("inlineCode",{parentName:"h3"},"mapInput")),(0,a.kt)("p",null,"Returns an ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncReducer")," instance that converts its input values using given ",(0,a.kt)("inlineCode",{parentName:"p"},"mapFun")," before passing them to the reducer.")),(0,a.kt)("h4",o({},{id:"definition-6"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"mapInput<I2>(mapFun: (value: I2, index: number) => MaybePromise<I>): "),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<I2, O>;"))),(0,a.kt)("h4",o({},{id:"type-parameters-5"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),"I2"),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"the new input type")))),(0,a.kt)("h4",o({},{id:"parameters-5"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"mapFun")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"(value: I2, index: number) => MaybePromise<I>")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"a potentially asynchronous function that returns a new value to pass to the reducer based on the following inputs:",(0,a.kt)("br",null)," - value: the current input value",(0,a.kt)("br",null)," - index: the current input index")))),(0,a.kt)("admonition",o({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",o({parentName:"pre"},{className:"language-ts"}),"AsyncReducer\n.createMono(0, async (c, v) => c + v)\n.mapInput(async v => v * 2)\n// this reducer will double all input values before summing them\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",o({},{id:"mapoutput"}),(0,a.kt)("inlineCode",{parentName:"h3"},"mapOutput")),(0,a.kt)("p",null,"Returns an ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncReducer")," instance that converts its output values using given ",(0,a.kt)("inlineCode",{parentName:"p"},"mapFun"),".")),(0,a.kt)("h4",o({},{id:"definition-7"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"mapOutput<O2>(mapFun: (value: O) => MaybePromise<O2>): "),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<I, O2>;"))),(0,a.kt)("h4",o({},{id:"type-parameters-6"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),"O2"),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"the new output type")))),(0,a.kt)("h4",o({},{id:"parameters-6"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"mapFun")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"(value: O) => MaybePromise<O2>")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"a potentially asynchronous function that takes the current output value and converts it to a new output value")))),(0,a.kt)("admonition",o({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",o({parentName:"pre"},{className:"language-ts"}),"AsyncReducer\n.createMono(0, async (c, v) => c + v)\n.mapOutput(async v => String(v))\n// this reducer will convert all its results to string before returning them\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",o({},{id:"next"}),(0,a.kt)("inlineCode",{parentName:"h3"},"next")),(0,a.kt)("p",null,"Returns the next state based on the given input values")),(0,a.kt)("h4",o({},{id:"definition-8"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"next(state: S, elem: I, index: number, halt: () => void): MaybePromise<S>;"))),(0,a.kt)("h4",o({},{id:"parameters-7"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"state")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"S")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"the current state")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"elem")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"I")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"the current input value")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"index")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"number")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"the current input index")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"halt")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"() => void")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"a function that, when called, ensures no more values are passed to the reducer"))))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",o({},{id:"pipe"}),(0,a.kt)("inlineCode",{parentName:"h3"},"pipe")),(0,a.kt)("p",null,"Returns an ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncReducer")," instance that first applies this reducer, and then applies the given ",(0,a.kt)("inlineCode",{parentName:"p"},"next")," reducer to each output produced by the previous reducer.")),(0,a.kt)("h4",o({},{id:"definitions-2"}),"Definitions"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"pipe<O1>(nextReducer1: "),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"p"},"<O, O1>): "),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<I, O1>;"))),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"pipe<O1, O2>(nextReducer1: "),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"p"},"<O, O1>, nextReducer2: "),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"p"},"<O1, O2>): "),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<I, O2>;"))),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"pipe<O1, O2, O3>(nextReducer1: "),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"p"},"<O, O1>, nextReducer2: "),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"p"},"<O1, O2>, nextReducer3: "),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"p"},"<O2, O3>): "),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<I, O3>;"))),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"pipe<O1, O2, O3, O4>(nextReducer1: "),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"p"},"<O, O1>, nextReducer2: "),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"p"},"<O1, O2>, nextReducer3: "),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"p"},"<O2, O3>, nextReducer4: "),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"p"},"<O3, O4>): "),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<I, O4>;"))),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"pipe<O1, O2, O3, O4, O5>(nextReducer1: "),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"p"},"<O, O1>, nextReducer2: "),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"p"},"<O1, O2>, nextReducer3: "),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"p"},"<O2, O3>, nextReducer4: "),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"p"},"<O3, O4>, nextReducer5: "),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"p"},"<O4, O5>): "),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<I, O5>;"))),(0,a.kt)("h4",o({},{id:"type-parameters-7"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),"O1"),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"the output type of the ",(0,a.kt)("inlineCode",{parentName:"td"},"nextReducer1")," reducer")))),(0,a.kt)("h4",o({},{id:"parameters-8"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"nextReducer1")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("a",o({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"td"},"<O, O1>")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"the next reducer to apply to each output of this reducer.")))),(0,a.kt)("admonition",o({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",o({parentName:"pre"},{className:"language-ts"}),"AsyncStream\n.from(Stream.of(1, 2, 3))\n.reduce(\nAsyncReducer.product\n.pipe(AsyncReducer.sum)\n)\n// => 9\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",o({},{id:"sliceinput"}),(0,a.kt)("inlineCode",{parentName:"h3"},"sliceInput")),(0,a.kt)("p",null,"Returns an ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncReducer")," instance that takes given ",(0,a.kt)("inlineCode",{parentName:"p"},"amount")," of elements starting at given ",(0,a.kt)("inlineCode",{parentName:"p"},"from")," index, and ignores other elements.")),(0,a.kt)("h4",o({},{id:"definition-9"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"sliceInput(from?: number "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"},"undefined, amount?: number"),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"},"undefined):"),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<I, O>;"))),(0,a.kt)("h4",o({},{id:"parameters-9"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"from")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"number "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"td"}," undefined")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"(default: 0) the index at which to start processing elements")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"amount")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"number "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"td"}," undefined")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"(optional) the amount of elements to process, if not given, processes all elements from the ",(0,a.kt)("inlineCode",{parentName:"td"},"from")," index")))),(0,a.kt)("admonition",o({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",o({parentName:"pre"},{className:"language-ts"}),"await AsyncStream\n.from(Stream.range({ end: 10 }))\n.reduce(\nAsyncReducer\n.createMono(0, async (c, v) => c + v)\n.sliceInput(1, 2)\n)\n// => 3\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",o({},{id:"statetoresult"}),(0,a.kt)("inlineCode",{parentName:"h3"},"stateToResult")),(0,a.kt)("p",null,"Returns the output value based on the given ",(0,a.kt)("inlineCode",{parentName:"p"},"state"))),(0,a.kt)("h4",o({},{id:"definition-10"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"stateToResult(state: S, index: number, halted: boolean): MaybePromise<O>;"))),(0,a.kt)("h4",o({},{id:"parameters-10"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"state")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"S")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"the current state")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"index")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"number")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"the value index")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"halted")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"boolean")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"a boolean indicating whether the reducer is halted"))))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",o({},{id:"takeinput"}),(0,a.kt)("inlineCode",{parentName:"h3"},"takeInput")),(0,a.kt)("p",null,"Returns an ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncReducer")," instance that takes at most the given ",(0,a.kt)("inlineCode",{parentName:"p"},"amount")," of input elements, and will ignore subsequent elements.")),(0,a.kt)("h4",o({},{id:"definition-11"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"takeInput(amount: number): "),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<I, O>;"))),(0,a.kt)("h4",o({},{id:"parameters-11"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"amount")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"number")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"the amount of elements to accept")))),(0,a.kt)("admonition",o({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",o({parentName:"pre"},{className:"language-ts"}),"await AsyncStream\n.from(Stream.range({ end: 10 }))\n.reduce(\nAsyncReducer\n.createMono(0, async (c, v) => c + v)\n.takeInput(2)\n)\n// => 1\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",o({},{id:"takeoutput"}),(0,a.kt)("inlineCode",{parentName:"h3"},"takeOutput")),(0,a.kt)("p",null,"Returns an 'AsyncReducer",(0,a.kt)("inlineCode",{parentName:"p"},"instance that produces at most"),"amount` values.")),(0,a.kt)("h4",o({},{id:"definition-12"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"takeOutput(amount: number): "),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<I, O>;"))),(0,a.kt)("h4",o({},{id:"parameters-12"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"amount")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"number")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"the maximum amount of values to produce."))))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",o({},{id:"takeoutputuntil"}),(0,a.kt)("inlineCode",{parentName:"h3"},"takeOutputUntil")),(0,a.kt)("p",null,"Returns an 'AsyncReducer",(0,a.kt)("inlineCode",{parentName:"p"},"instance that produces until the given"),"pred` predicate returns true for the output value.")),(0,a.kt)("h4",o({},{id:"definition-13"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"takeOutputUntil(pred: (value: O, index: number) => MaybePromise<boolean>, options?: {"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"negate?: boolean "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"}): "),(0,a.kt)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<I, O>;"))),(0,a.kt)("h4",o({},{id:"parameters-13"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"pred")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"(value: O, index: number) => MaybePromise<boolean>")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"a potaentially asynchronous function that returns true if the value should be passed to the reducer based on the following inputs:",(0,a.kt)("br",null)," - value: the current input value",(0,a.kt)("br",null)," - index: the current input index",(0,a.kt)("br",null)," - halt: function that, when called, ensures no more new values are passed to the reducer")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"options")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"{"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"negate?: boolean "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"td"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"}")),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,a.kt)("br",null)," - negate: (default: false) when true will invert the given predicate"))))))}C.isMDXComponent=!0}}]);