"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[47756],{15680:(e,t,r)=>{r.d(t,{xA:()=>m,yg:()=>s});var a=r(96540);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,i=function(e,t){if(null==e)return{};var r,a,i={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var u=a.createContext({}),o=function(e){var t=a.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},m=function(e){var t=o(e.components);return a.createElement(u.Provider,{value:t},e.children)},c="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},b=a.forwardRef((function(e,t){var r=e.components,i=e.mdxType,n=e.originalType,u=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=o(r),b=i,s=c["".concat(u,".").concat(b)]||c[b]||y[b]||n;return r?a.createElement(s,p(p({ref:t},m),{},{components:r})):a.createElement(s,p({ref:t},m))}));function s(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var n=r.length,p=new Array(n);p[0]=b;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[c]="string"==typeof e?e:i,p[1]=l;for(var o=2;o<n;o++)p[o]=r[o];return a.createElement.apply(null,p)}return a.createElement.apply(null,r)}b.displayName="MDXCreateElement"},34221:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>f,default:()=>O,frontMatter:()=>s,metadata:()=>g,toc:()=>M});var a=r(15680),i=Object.defineProperty,n=Object.defineProperties,p=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,u=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable,m=(e,t,r)=>t in e?i(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,c=(e,t)=>{for(var r in t||(t={}))u.call(t,r)&&m(e,r,t[r]);if(l)for(var r of l(t))o.call(t,r)&&m(e,r,t[r]);return e},y=(e,t)=>n(e,p(t)),b=(e,t)=>{var r={};for(var a in e)u.call(e,a)&&t.indexOf(a)<0&&(r[a]=e[a]);if(null!=e&&l)for(var a of l(e))t.indexOf(a)<0&&o.call(e,a)&&(r[a]=e[a]);return r};const s={title:"BiMultiMap<K,V>",slug:"/rimbu/bimultimap/BiMultiMap/interface"},f="interface BiMultiMap<K,V>",g={unversionedId:"rimbu_bimultimap/BiMultiMap.interface",id:"rimbu_bimultimap/BiMultiMap.interface",title:"BiMultiMap<K,V>",description:"A type-invariant immutable bi-directional MultiMap where keys and values have a many-to-many mapping. See the BiMultiMap documentation and the BiMultiMap API documentation",source:"@site/api/rimbu_bimultimap/BiMultiMap.interface.mdx",sourceDirName:"rimbu_bimultimap",slug:"/rimbu/bimultimap/BiMultiMap/interface",permalink:"/api/rimbu/bimultimap/BiMultiMap/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"BiMultiMap<K,V>",slug:"/rimbu/bimultimap/BiMultiMap/interface"},sidebar:"defaultSidebar",previous:{title:"BiMultiMap.Types",permalink:"/api/rimbu/bimultimap/BiMultiMap/Types/interface"},next:{title:"HashBiMultiMap (namespace)",permalink:"/api/rimbu/bimultimap/HashBiMultiMap/namespace"}},d={},M=[{value:"Type parameters",id:"type-parameters",level:2}],v={toc:M},h="wrapper";function O(e){var t=e,{components:r}=t,i=b(t,["components"]);return(0,a.yg)(h,y(c(c({},v),i),{components:r,mdxType:"MDXLayout"}),(0,a.yg)("h1",c({},{id:"interface-bimultimapkv"}),(0,a.yg)("inlineCode",{parentName:"h1"},"interface BiMultiMap<K,V>")),(0,a.yg)("p",null,"A type-invariant immutable bi-directional MultiMap where keys and values have a many-to-many mapping. See the ",(0,a.yg)("a",c({parentName:"p"},{href:"https://rimbu.org/docs/collections/bimultimap"}),"BiMultiMap documentation")," and the ",(0,a.yg)("a",c({parentName:"p"},{href:"https://rimbu.org/api/rimbu/bimultimap/BiMultiMap/interface"}),"BiMultiMap API documentation")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Companion namespace:")," ",(0,a.yg)("a",c({parentName:"p"},{href:"/api/rimbu/bimultimap/BiMultiMap/namespace"}),"BiMultiMap")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Implemented by:")," ",(0,a.yg)("a",c({parentName:"p"},{href:"/api/rimbu/bimultimap/BiMultiMap/NonEmpty/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"BiMultiMap.NonEmpty<K,V>"))),(0,a.yg)("h2",c({},{id:"type-parameters"}),"Type parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",c({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",c({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",c({parentName:"tr"},{align:null}),"K"),(0,a.yg)("td",c({parentName:"tr"},{align:null}),"the key type")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",c({parentName:"tr"},{align:null}),"V"),(0,a.yg)("td",c({parentName:"tr"},{align:null}),"the value type")))))}O.isMDXComponent=!0}}]);