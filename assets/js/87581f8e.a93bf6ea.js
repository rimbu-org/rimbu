"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[59119],{15680:(e,a,t)=>{t.d(a,{xA:()=>s,yg:()=>h});var r=t(96540);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function p(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var u=r.createContext({}),o=function(e){var a=r.useContext(u),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},s=function(e){var a=o(e.components);return r.createElement(u.Provider,{value:a},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},y=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,i=e.originalType,u=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),m=o(t),y=n,h=m["".concat(u,".").concat(y)]||m[y]||c[y]||i;return t?r.createElement(h,l(l({ref:a},s),{},{components:t})):r.createElement(h,l({ref:a},s))}));function h(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var i=t.length,l=new Array(i);l[0]=y;var p={};for(var u in a)hasOwnProperty.call(a,u)&&(p[u]=a[u]);p.originalType=e,p[m]="string"==typeof e?e:n,l[1]=p;for(var o=2;o<i;o++)l[o]=t[o];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},20178:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>d,contentTitle:()=>f,default:()=>v,frontMatter:()=>h,metadata:()=>g,toc:()=>M});var r=t(15680),n=Object.defineProperty,i=Object.defineProperties,l=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,u=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable,s=(e,a,t)=>a in e?n(e,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[a]=t,m=(e,a)=>{for(var t in a||(a={}))u.call(a,t)&&s(e,t,a[t]);if(p)for(var t of p(a))o.call(a,t)&&s(e,t,a[t]);return e},c=(e,a)=>i(e,l(a)),y=(e,a)=>{var t={};for(var r in e)u.call(e,r)&&a.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&p)for(var r of p(e))a.indexOf(r)<0&&o.call(e,r)&&(t[r]=e[r]);return t};const h={title:"HashMultiMapHashValue<K,V>",slug:"/rimbu/multimap/HashMultiMapHashValue/interface"},f="interface HashMultiMapHashValue<K,V>",g={unversionedId:"rimbu_multimap/HashMultiMapHashValue.interface",id:"rimbu_multimap/HashMultiMapHashValue.interface",title:"HashMultiMapHashValue<K,V>",description:"A type-invariant immutable MultiMap of key type K, and value type V. In the MultiMap, each key has at least one value. See the MultiMap documentation and the HashMultiMapHashValue API documentation",source:"@site/api/rimbu_multimap/HashMultiMapHashValue.interface.mdx",sourceDirName:"rimbu_multimap",slug:"/rimbu/multimap/HashMultiMapHashValue/interface",permalink:"/api/rimbu/multimap/HashMultiMapHashValue/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"HashMultiMapHashValue<K,V>",slug:"/rimbu/multimap/HashMultiMapHashValue/interface"},sidebar:"defaultSidebar",previous:{title:"HashMultiMapHashValue.Types",permalink:"/api/rimbu/multimap/HashMultiMapHashValue/Types/interface"},next:{title:"HashMultiMapSortedValue (namespace)",permalink:"/api/rimbu/multimap/HashMultiMapSortedValue/namespace"}},d={},M=[{value:"Type parameters",id:"type-parameters",level:2}],b={toc:M},H="wrapper";function v(e){var a=e,{components:t}=a,n=y(a,["components"]);return(0,r.yg)(H,c(m(m({},b),n),{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",m({},{id:"interface-hashmultimaphashvaluekv"}),(0,r.yg)("inlineCode",{parentName:"h1"},"interface HashMultiMapHashValue<K,V>")),(0,r.yg)("p",null,"A type-invariant immutable MultiMap of key type K, and value type V. In the MultiMap, each key has at least one value. See the ",(0,r.yg)("a",m({parentName:"p"},{href:"https://rimbu.org/docs/collections/multimap"}),"MultiMap documentation")," and the ",(0,r.yg)("a",m({parentName:"p"},{href:"https://rimbu.org/api/rimbu/multimap/HashMultiMapHashValue/interface"}),"HashMultiMapHashValue API documentation")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Companion namespace:")," ",(0,r.yg)("a",m({parentName:"p"},{href:"/api/rimbu/multimap/HashMultiMapHashValue/namespace"}),"HashMultiMapHashValue")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Implemented by:")," ",(0,r.yg)("a",m({parentName:"p"},{href:"/api/rimbu/multimap/HashMultiMapHashValue/NonEmpty/interface"}),(0,r.yg)("inlineCode",{parentName:"a"},"HashMultiMapHashValue.NonEmpty<K,V>"))),(0,r.yg)("h2",m({},{id:"type-parameters"}),"Type parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,r.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",m({parentName:"tr"},{align:null}),"K"),(0,r.yg)("td",m({parentName:"tr"},{align:null}),"the key type")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",m({parentName:"tr"},{align:null}),"V"),(0,r.yg)("td",m({parentName:"tr"},{align:null}),"the value type")))),(0,r.yg)("admonition",m({},{title:"note",type:"note"}),(0,r.yg)("ul",{parentName:"admonition"},(0,r.yg)("li",{parentName:"ul"},"The ",(0,r.yg)("inlineCode",{parentName:"li"},"HashMultiMapHashValue")," uses the contexts' ",(0,r.yg)("inlineCode",{parentName:"li"},"HashMap")," ",(0,r.yg)("inlineCode",{parentName:"li"},"keyContext")," to hash the keys - The ",(0,r.yg)("inlineCode",{parentName:"li"},"HashMultiMapHashValue")," uses the contexts' ",(0,r.yg)("inlineCode",{parentName:"li"},"HashSet")," ",(0,r.yg)("inlineCode",{parentName:"li"},"valueContext")," to collect the values for each key."))),(0,r.yg)("admonition",m({},{title:"example",type:"note"}),(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const m1 = HashMultiMapHashValue.empty<number, string>()\nconst m2 = HashMultiMapHashValue.of([1, 'a'], [1, 'b'], [2, 'a'])\n"))))}v.isMDXComponent=!0}}]);