"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[63646],{15680:(e,t,r)=>{r.d(t,{xA:()=>y,yg:()=>f});var n=r(96540);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function p(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?p(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):p(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},p=Object.keys(e);for(n=0;n<p.length;n++)r=p[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(n=0;n<p.length;n++)r=p[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},y=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},s=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,p=e.originalType,l=e.parentName,y=i(e,["components","mdxType","originalType","parentName"]),u=c(r),s=a,f=u["".concat(l,".").concat(s)]||u[s]||m[s]||p;return r?n.createElement(f,o(o({ref:t},y),{},{components:r})):n.createElement(f,o({ref:t},y))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var p=r.length,o=new Array(p);o[0]=s;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:a,o[1]=i;for(var c=2;c<p;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}s.displayName="MDXCreateElement"},78145:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>g,contentTitle:()=>b,default:()=>M,frontMatter:()=>f,metadata:()=>d,toc:()=>v});var n=r(15680),a=Object.defineProperty,p=Object.defineProperties,o=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,y=(e,t,r)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,u=(e,t)=>{for(var r in t||(t={}))l.call(t,r)&&y(e,r,t[r]);if(i)for(var r of i(t))c.call(t,r)&&y(e,r,t[r]);return e},m=(e,t)=>p(e,o(t)),s=(e,t)=>{var r={};for(var n in e)l.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&i)for(var n of i(e))t.indexOf(n)<0&&c.call(e,n)&&(r[n]=e[n]);return r};const f={title:"RMap<K,V>",slug:"/rimbu/collection-types/RMap/interface"},b="interface RMap<K,V>",d={unversionedId:"rimbu_collection-types/RMap.interface",id:"rimbu_collection-types/RMap.interface",title:"RMap<K,V>",description:"A type-invariant immutable Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the Map documentation and the RMap API documentation",source:"@site/api/rimbu_collection-types/RMap.interface.mdx",sourceDirName:"rimbu_collection-types",slug:"/rimbu/collection-types/RMap/interface",permalink:"/api/rimbu/collection-types/RMap/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"RMap<K,V>",slug:"/rimbu/collection-types/RMap/interface"},sidebar:"defaultSidebar",previous:{title:"RMap.Types",permalink:"/api/rimbu/collection-types/RMap/Types/interface"},next:{title:"RSet (namespace)",permalink:"/api/rimbu/collection-types/RSet/namespace"}},g={},v=[{value:"Type parameters",id:"type-parameters",level:2}],h={toc:v},O="wrapper";function M(e){var t=e,{components:r}=t,a=s(t,["components"]);return(0,n.yg)(O,m(u(u({},h),a),{components:r,mdxType:"MDXLayout"}),(0,n.yg)("h1",u({},{id:"interface-rmapkv"}),(0,n.yg)("inlineCode",{parentName:"h1"},"interface RMap<K,V>")),(0,n.yg)("p",null,"A type-invariant immutable Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the ",(0,n.yg)("a",u({parentName:"p"},{href:"https://rimbu.org/docs/collections/map"}),"Map documentation")," and the ",(0,n.yg)("a",u({parentName:"p"},{href:"https://rimbu.org/api/rimbu/collection-types/map/RMap/interface"}),"RMap API documentation")),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Companion namespace:")," ",(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/RMap/namespace"}),"RMap")),(0,n.yg)("h2",u({},{id:"type-parameters"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),"K"),(0,n.yg)("td",u({parentName:"tr"},{align:null}),"the key type")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),"V"),(0,n.yg)("td",u({parentName:"tr"},{align:null}),"the value type")))))}M.isMDXComponent=!0}}]);