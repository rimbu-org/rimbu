"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[46819],{15680:(e,a,n)=>{n.d(a,{xA:()=>m,yg:()=>s});var t=n(96540);function i(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){i(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function p(e,a){if(null==e)return{};var n,t,i=function(e,a){if(null==e)return{};var n,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(i[n]=e[n]);return i}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var y=t.createContext({}),o=function(e){var a=t.useContext(y),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},m=function(e){var a=o(e.components);return t.createElement(y.Provider,{value:a},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},u=t.forwardRef((function(e,a){var n=e.components,i=e.mdxType,r=e.originalType,y=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),d=o(n),u=i,s=d["".concat(y,".").concat(u)]||d[u]||g[u]||r;return n?t.createElement(s,l(l({ref:a},m),{},{components:n})):t.createElement(s,l({ref:a},m))}));function s(e,a){var n=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=u;var p={};for(var y in a)hasOwnProperty.call(a,y)&&(p[y]=a[y]);p.originalType=e,p[d]="string"==typeof e?e:i,l[1]=p;for(var o=2;o<r;o++)l[o]=n[o];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},16326:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>v,contentTitle:()=>N,default:()=>C,frontMatter:()=>s,metadata:()=>h,toc:()=>c});var t=n(15680),i=Object.defineProperty,r=Object.defineProperties,l=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,y=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable,m=(e,a,n)=>a in e?i(e,a,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[a]=n,d=(e,a)=>{for(var n in a||(a={}))y.call(a,n)&&m(e,n,a[n]);if(p)for(var n of p(a))o.call(a,n)&&m(e,n,a[n]);return e},g=(e,a)=>r(e,l(a)),u=(e,a)=>{var n={};for(var t in e)y.call(e,t)&&a.indexOf(t)<0&&(n[t]=e[t]);if(null!=e&&p)for(var t of p(e))a.indexOf(t)<0&&o.call(e,t)&&(n[t]=e[t]);return n};const s={title:"BiMap.NonEmpty<K,V>",slug:"/rimbu/bimap/BiMap/NonEmpty/interface"},N="interface BiMap.NonEmpty<K,V>",h={unversionedId:"rimbu_bimap/BiMap/NonEmpty.interface",id:"rimbu_bimap/BiMap/NonEmpty.interface",title:"BiMap.NonEmpty<K,V>",description:"A non-empty type-invariant immutable bi-directional Map where keys and values have a one-to-one mapping. See the BiMap documentation and the BiMap API documentation *",source:"@site/api/rimbu_bimap/BiMap/NonEmpty.interface.mdx",sourceDirName:"rimbu_bimap/BiMap",slug:"/rimbu/bimap/BiMap/NonEmpty/interface",permalink:"/api/rimbu/bimap/BiMap/NonEmpty/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"BiMap.NonEmpty<K,V>",slug:"/rimbu/bimap/BiMap/NonEmpty/interface"},sidebar:"defaultSidebar",previous:{title:"BiMap.Context<UK,UV,Tp>",permalink:"/api/rimbu/bimap/BiMap/Context/interface"},next:{title:"BiMap.Types",permalink:"/api/rimbu/bimap/BiMap/Types/interface"}},v={},c=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>context</code>",id:"context",level:3},{value:"Definition",id:"definition",level:4},{value:"Overrides",id:"overrides",level:4},{value:"<code>isEmpty</code>",id:"isempty",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"<code>keyValueMap</code>",id:"keyvaluemap",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"<code>size</code>",id:"size",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"<code>valueKeyMap</code>",id:"valuekeymap",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Overrides",id:"overrides-4",level:4},{value:"Methods",id:"methods",level:2},{value:"<code>[Symbol.iterator]</code>",id:"symboliterator",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Overrides",id:"overrides-5",level:4},{value:"<code>addEntries</code>",id:"addentries",level:3},{value:"Definition",id:"definition-6",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Overrides",id:"overrides-6",level:4},{value:"<code>addEntry</code>",id:"addentry",level:3},{value:"Definition",id:"definition-7",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Overrides",id:"overrides-7",level:4},{value:"<code>asNormal</code>",id:"asnormal",level:3},{value:"Definition",id:"definition-8",level:4},{value:"<code>assumeNonEmpty</code>",id:"assumenonempty",level:3},{value:"Definition",id:"definition-9",level:4},{value:"Overrides",id:"overrides-8",level:4},{value:"<code>filter</code>",id:"filter",level:3},{value:"Definition",id:"definition-10",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Overrides",id:"overrides-9",level:4},{value:"<code>forEach</code>",id:"foreach",level:3},{value:"Definition",id:"definition-11",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Overrides",id:"overrides-10",level:4},{value:"<code>getKey</code>",id:"getkey",level:3},{value:"Definitions",id:"definitions",level:4},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"Overrides",id:"overrides-11",level:4},{value:"<code>getValue</code>",id:"getvalue",level:3},{value:"Definitions",id:"definitions-1",level:4},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"Overrides",id:"overrides-12",level:4},{value:"<code>hasKey</code>",id:"haskey",level:3},{value:"Definition",id:"definition-12",level:4},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"Overrides",id:"overrides-13",level:4},{value:"<code>hasValue</code>",id:"hasvalue",level:3},{value:"Definition",id:"definition-13",level:4},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"Overrides",id:"overrides-14",level:4},{value:"<code>nonEmpty</code>",id:"nonempty",level:3},{value:"Definition",id:"definition-14",level:4},{value:"Overrides",id:"overrides-15",level:4},{value:"<code>removeKey</code>",id:"removekey",level:3},{value:"Definition",id:"definition-15",level:4},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"Overrides",id:"overrides-16",level:4},{value:"<code>removeKeyAndGet</code>",id:"removekeyandget",level:3},{value:"Definition",id:"definition-16",level:4},{value:"Type parameters",id:"type-parameters-6",level:4},{value:"Parameters",id:"parameters-9",level:4},{value:"Overrides",id:"overrides-17",level:4},{value:"<code>removeKeys</code>",id:"removekeys",level:3},{value:"Definition",id:"definition-17",level:4},{value:"Type parameters",id:"type-parameters-7",level:4},{value:"Parameters",id:"parameters-10",level:4},{value:"Overrides",id:"overrides-18",level:4},{value:"<code>removeValue</code>",id:"removevalue",level:3},{value:"Definition",id:"definition-18",level:4},{value:"Type parameters",id:"type-parameters-8",level:4},{value:"Parameters",id:"parameters-11",level:4},{value:"Overrides",id:"overrides-19",level:4},{value:"<code>removeValueAndGet</code>",id:"removevalueandget",level:3},{value:"Definition",id:"definition-19",level:4},{value:"Type parameters",id:"type-parameters-9",level:4},{value:"Parameters",id:"parameters-12",level:4},{value:"Overrides",id:"overrides-20",level:4},{value:"<code>removeValues</code>",id:"removevalues",level:3},{value:"Definition",id:"definition-20",level:4},{value:"Type parameters",id:"type-parameters-10",level:4},{value:"Parameters",id:"parameters-13",level:4},{value:"Overrides",id:"overrides-21",level:4},{value:"<code>set</code>",id:"set",level:3},{value:"Definition",id:"definition-21",level:4},{value:"Parameters",id:"parameters-14",level:4},{value:"Overrides",id:"overrides-22",level:4},{value:"<code>stream</code>",id:"stream",level:3},{value:"Definition",id:"definition-22",level:4},{value:"Overrides",id:"overrides-23",level:4},{value:"<code>streamKeys</code>",id:"streamkeys",level:3},{value:"Definition",id:"definition-23",level:4},{value:"Overrides",id:"overrides-24",level:4},{value:"<code>streamValues</code>",id:"streamvalues",level:3},{value:"Definition",id:"definition-24",level:4},{value:"Overrides",id:"overrides-25",level:4},{value:"<code>toArray</code>",id:"toarray",level:3},{value:"Definition",id:"definition-25",level:4},{value:"Overrides",id:"overrides-26",level:4},{value:"<code>toBuilder</code>",id:"tobuilder",level:3},{value:"Definition",id:"definition-26",level:4},{value:"Overrides",id:"overrides-27",level:4},{value:"<code>toJSON</code>",id:"tojson",level:3},{value:"Definition",id:"definition-27",level:4},{value:"Overrides",id:"overrides-28",level:4},{value:"<code>toString</code>",id:"tostring",level:3},{value:"Definition",id:"definition-28",level:4},{value:"Overrides",id:"overrides-29",level:4},{value:"<code>updateKeyAtValue</code>",id:"updatekeyatvalue",level:3},{value:"Definition",id:"definition-29",level:4},{value:"Type parameters",id:"type-parameters-11",level:4},{value:"Parameters",id:"parameters-15",level:4},{value:"Overrides",id:"overrides-30",level:4},{value:"<code>updateValueAtKey</code>",id:"updatevalueatkey",level:3},{value:"Definition",id:"definition-30",level:4},{value:"Type parameters",id:"type-parameters-12",level:4},{value:"Parameters",id:"parameters-16",level:4},{value:"Overrides",id:"overrides-31",level:4}],f={toc:c},b="wrapper";function C(e){var a=e,{components:n}=a,i=u(a,["components"]);return(0,t.yg)(b,g(d(d({},f),i),{components:n,mdxType:"MDXLayout"}),(0,t.yg)("h1",d({},{id:"interface-bimapnonemptykv"}),(0,t.yg)("inlineCode",{parentName:"h1"},"interface BiMap.NonEmpty<K,V>")),(0,t.yg)("p",null,"A non-empty type-invariant immutable bi-directional Map where keys and values have a one-to-one mapping. See the ",(0,t.yg)("a",d({parentName:"p"},{href:"https://rimbu.org/docs/collections/bimap"}),"BiMap documentation")," and the ",(0,t.yg)("a",d({parentName:"p"},{href:"https://rimbu.org/api/rimbu/bimap/BiMap/interface"}),"BiMap API documentation")," *"),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Extends:")," ",(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Streamable/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Streamable.NonEmpty<T>")),", ",(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"BiMap<K,V>"))),(0,t.yg)("h2",d({},{id:"type-parameters"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"K"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the key type")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"V"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the value type")))),(0,t.yg)("h2",d({},{id:"properties"}),"Properties"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"context"}),(0,t.yg)("inlineCode",{parentName:"h3"},"context")),(0,t.yg)("p",null,"Returns the ",(0,t.yg)("inlineCode",{parentName:"p"},"context")," associated to this collection instance.")),(0,t.yg)("h4",d({},{id:"definition"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly context: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/Context/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"BiMap.Context")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,t.yg)("h4",d({},{id:"overrides"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#context"}),"BiMap.context"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"isempty"}),(0,t.yg)("inlineCode",{parentName:"h3"},"isEmpty")),(0,t.yg)("p",null,"Returns false since this collection is known to be non-empty.")),(0,t.yg)("h4",d({},{id:"definition-1"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly isEmpty: false;"))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"BiMap.of([1, 1], [2, 2]).isEmpty   // => false\n"))),(0,t.yg)("h4",d({},{id:"overrides-1"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#isEmpty"}),"BiMap.isEmpty"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"keyvaluemap"}),(0,t.yg)("inlineCode",{parentName:"h3"},"keyValueMap")),(0,t.yg)("p",null,"Returns the non-empty Map representation of the key to value mapping.")),(0,t.yg)("h4",d({},{id:"definition-2"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly keyValueMap: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map/RMap/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"RMap.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"BiMap.of([1, 10], [2, 20]).keyValueMap.toArray()\n// => [[1, 10], [2, 20]]\n"))),(0,t.yg)("h4",d({},{id:"overrides-2"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#keyValueMap"}),"BiMap.keyValueMap"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"size"}),(0,t.yg)("inlineCode",{parentName:"h3"},"size")),(0,t.yg)("p",null,"Returns the number of entries")),(0,t.yg)("h4",d({},{id:"definition-3"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly size: number;"))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"BiMap.of([1, 1], [2, 2]).size       // => 2\n"))),(0,t.yg)("h4",d({},{id:"overrides-3"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#size"}),"BiMap.size"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"valuekeymap"}),(0,t.yg)("inlineCode",{parentName:"h3"},"valueKeyMap")),(0,t.yg)("p",null,"Returns the non-empty Map representation of the key to value mapping.")),(0,t.yg)("h4",d({},{id:"definition-4"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly valueKeyMap: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map/RMap/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"RMap.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<V, K>;"))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"BiMap.of([1, 10], [2, 20]).valueKeyMap.toArray()\n// => [[10, 1], [20, 2]]\n"))),(0,t.yg)("h4",d({},{id:"overrides-4"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#valueKeyMap"}),"BiMap.valueKeyMap"))),(0,t.yg)("h2",d({},{id:"methods"}),"Methods"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"symboliterator"}),(0,t.yg)("inlineCode",{parentName:"h3"},"[Symbol.iterator]")),(0,t.yg)("p",null,"Returns a ",(0,t.yg)("inlineCode",{parentName:"p"},"FastIterator")," instance used to iterate over the values of this ",(0,t.yg)("inlineCode",{parentName:"p"},"Iterable"),".")),(0,t.yg)("h4",d({},{id:"definition-5"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"[Symbol.iterator](): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/FastIterator/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"FastIterator")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,t.yg)("h4",d({},{id:"overrides-5"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/FastIterable/interface#%5BSymbol.iterator%5D"}),"FastIterable.[Symbol.iterator]"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"addentries"}),(0,t.yg)("inlineCode",{parentName:"h3"},"addEntries")),(0,t.yg)("p",null,"Returns the collection with the entries from the given ",(0,t.yg)("inlineCode",{parentName:"p"},"StreamSource")," ",(0,t.yg)("inlineCode",{parentName:"p"},"entries")," added.")),(0,t.yg)("h4",d({},{id:"definition-6"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"addEntries(entries: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<readonly [K, V]>): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"BiMap.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,t.yg)("h4",d({},{id:"parameters"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"entries")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<readonly [K, V]>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"a ",(0,t.yg)("inlineCode",{parentName:"td"},"StreamSource")," containing tuples with a key and value")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"BiMap.of([1, 1]).addEntries([[2, 2], [1, 3]]).toArray()\n// => [[1, 2]]\n"))),(0,t.yg)("h4",d({},{id:"overrides-6"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#addEntries"}),"BiMap.addEntries"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"addentry"}),(0,t.yg)("inlineCode",{parentName:"h3"},"addEntry")),(0,t.yg)("p",null,"Returns the collection with given ",(0,t.yg)("inlineCode",{parentName:"p"},"entry")," added.")),(0,t.yg)("h4",d({},{id:"definition-7"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"addEntry(entry: readonly [K, V]): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"BiMap.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,t.yg)("h4",d({},{id:"parameters-1"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"entry")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"readonly [K, V]")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"a tuple containing a key and value")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"BiMap.of([1, 1], [2, 2]).addEntry([1, 2]).toArray()\n// => [[1, 2]]\n"))),(0,t.yg)("h4",d({},{id:"overrides-7"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#addEntry"}),"BiMap.addEntry"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"asnormal"}),(0,t.yg)("inlineCode",{parentName:"h3"},"asNormal")),(0,t.yg)("p",null,"Returns this collection typed as a 'possibly empty' collection.")),(0,t.yg)("h4",d({},{id:"definition-8"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"asNormal(): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"BiMap")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"BiMap.of([1, 1], [2, 2]).asNormal();  // type: BiMap<number, number>\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"assumenonempty"}),(0,t.yg)("inlineCode",{parentName:"h3"},"assumeNonEmpty")),(0,t.yg)("p",null,"Returns a self reference since this collection is known to be non-empty.")),(0,t.yg)("h4",d({},{id:"definition-9"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"assumeNonEmpty(): this;"))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = BiMap.of([1, 1], [2, 2]);\nm === m.assumeNonEmpty()  // => true\n"))),(0,t.yg)("h4",d({},{id:"overrides-8"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#assumeNonEmpty"}),"BiMap.assumeNonEmpty"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"filter"}),(0,t.yg)("inlineCode",{parentName:"h3"},"filter")),(0,t.yg)("p",null,"Returns a collection containing only those entries that satisfy given ",(0,t.yg)("inlineCode",{parentName:"p"},"pred")," predicate.")),(0,t.yg)("h4",d({},{id:"definition-10"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"filter(pred: (entry: readonly [K, V], index: number, halt: () => void) => boolean, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate?: boolean;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"BiMap")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,t.yg)("h4",d({},{id:"parameters-2"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"pred")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(entry: readonly [K, V], index: number, halt: () => void) => boolean")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"a predicate function receiving:",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"entry"),": the next entry",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"index"),": the entry index",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"halt"),": a function that, when called, ensures no next elements are passed")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"negate?: boolean;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,t.yg)("br",null)," - negate: (default: false) when true will negate the given predicate")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"BiMap.of([1, 'a'], [2, 'b'], [3, 'c']).filter(entry => entry[0] === 2 || entry[1] === 'c').toArray()\n// => [[2, 'b'], [3, 'c']]\n"))),(0,t.yg)("h4",d({},{id:"overrides-9"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#filter"}),"BiMap.filter"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"foreach"}),(0,t.yg)("inlineCode",{parentName:"h3"},"forEach")),(0,t.yg)("p",null,"Performs given function ",(0,t.yg)("inlineCode",{parentName:"p"},"f")," for each entry of the collection, using given ",(0,t.yg)("inlineCode",{parentName:"p"},"state")," as initial traversal state.")),(0,t.yg)("h4",d({},{id:"definition-11"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"forEach(f: (entry: readonly [K, V], index: number, halt: () => void) => void, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"state?: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/TraverseState/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"TraverseState")),(0,t.yg)("inlineCode",{parentName:"p"},";"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): void;"))),(0,t.yg)("h4",d({},{id:"parameters-3"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"f")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(entry: readonly [K, V], index: number, halt: () => void) => void")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the function to perform for each entry, receiving:",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"entry"),": the next tuple of a key and value",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"index"),": the index of the element",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"halt"),": a function that, if called, ensures that no new elements are passed")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"state?: "),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/TraverseState/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"TraverseState")),(0,t.yg)("inlineCode",{parentName:"td"},";"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,t.yg)("br",null)," - state: (optional) the traverse state")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"BiMap.of([1, 'a'], [2, 'b'], [3, 'c']).forEach((entry, i, halt) => {\nconsole.log([entry[1], entry[0]]);\nif (i >= 1) halt();\n})\n// => logs ['a', 1]  ['b', 2]\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N)")),(0,t.yg)("h4",d({},{id:"overrides-10"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#forEach"}),"BiMap.forEach"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"getkey"}),(0,t.yg)("inlineCode",{parentName:"h3"},"getKey")),(0,t.yg)("p",null,"Returns the key associated with the given ",(0,t.yg)("inlineCode",{parentName:"p"},"value"),", or given ",(0,t.yg)("inlineCode",{parentName:"p"},"otherwise")," value if the key is not in the collection.")),(0,t.yg)("h4",d({},{id:"definitions"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"getKey<UV = V>(value: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<V, UV>): K "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"getKey<UV, O>(value: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<V, UV>, otherwise: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,t.yg)("inlineCode",{parentName:"p"},"<O>): K "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," O;"))),(0,t.yg)("h4",d({},{id:"type-parameters-1"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"UV"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"V")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",d({},{id:"parameters-4"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"value")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<V, UV>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"thevalue to look for")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = BiMap.of([1, 'a'], [2, 'b'])\nm.getKey('b')          // => 2\nm.getKey('z')          // => undefined\nm.getKey('b', 'none')  // => 2\nm.getKey('z', 'none')  // => 'none'\n"))),(0,t.yg)("h4",d({},{id:"overrides-11"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#getKey"}),"BiMap.getKey"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"getvalue"}),(0,t.yg)("inlineCode",{parentName:"h3"},"getValue")),(0,t.yg)("p",null,"Returns the value associated with the given ",(0,t.yg)("inlineCode",{parentName:"p"},"key"),", or given ",(0,t.yg)("inlineCode",{parentName:"p"},"otherwise")," value if the key is not in the collection.")),(0,t.yg)("h4",d({},{id:"definitions-1"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"getValue<UK = K>(key: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, UK>): V "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"getValue<UK, O>(key: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, UK>, otherwise: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,t.yg)("inlineCode",{parentName:"p"},"<O>): V "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," O;"))),(0,t.yg)("h4",d({},{id:"type-parameters-2"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"UK"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"K")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",d({},{id:"parameters-5"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"key")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<K, UK>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the key to look for")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = BiMap.of([1, 'a'], [2, 'b'])\nm.getValue(2)          // => 'b'\nm.getValue(3)          // => undefined\nm.getValue(2, 'none')  // => 'b'\nm.getValue(3, 'none')  // => 'none'\n"))),(0,t.yg)("h4",d({},{id:"overrides-12"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#getValue"}),"BiMap.getValue"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"haskey"}),(0,t.yg)("inlineCode",{parentName:"h3"},"hasKey")),(0,t.yg)("p",null,"Returns true if the given ",(0,t.yg)("inlineCode",{parentName:"p"},"key")," is present in the collection.")),(0,t.yg)("h4",d({},{id:"definition-12"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"hasKey<UK = K>(key: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, UK>): boolean;"))),(0,t.yg)("h4",d({},{id:"type-parameters-3"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"UK"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"K")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",d({},{id:"parameters-6"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"key")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<K, UK>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the key to look for")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = BiMap.of([1, 'a'], [2, 'b'])\nm.hasKey(2)    // => true\nm.hasKey(3)    // => false\n"))),(0,t.yg)("h4",d({},{id:"overrides-13"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#hasKey"}),"BiMap.hasKey"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"hasvalue"}),(0,t.yg)("inlineCode",{parentName:"h3"},"hasValue")),(0,t.yg)("p",null,"Returns true if the given ",(0,t.yg)("inlineCode",{parentName:"p"},"value")," is present in the collection.")),(0,t.yg)("h4",d({},{id:"definition-13"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"hasValue<UV = V>(key: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<V, UV>): boolean;"))),(0,t.yg)("h4",d({},{id:"type-parameters-4"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"UV"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"V")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",d({},{id:"parameters-7"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"key")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<V, UV>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = BiMap.of([1, 'a'], [2, 'b'])\nm.hasKey('a')    // => true\nm.hasKey('z')    // => false\n"))),(0,t.yg)("h4",d({},{id:"overrides-14"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#hasValue"}),"BiMap.hasValue"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"nonempty"}),(0,t.yg)("inlineCode",{parentName:"h3"},"nonEmpty")),(0,t.yg)("p",null,"Returns true since this collection is known to be non-empty")),(0,t.yg)("h4",d({},{id:"definition-14"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"nonEmpty(): this is "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"BiMap.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"BiMap.of([1, 1], [2, 2]).nonEmpty()   // => true\n"))),(0,t.yg)("h4",d({},{id:"overrides-15"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#nonEmpty"}),"BiMap.nonEmpty"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"removekey"}),(0,t.yg)("inlineCode",{parentName:"h3"},"removeKey")),(0,t.yg)("p",null,"Returns the collection where the entry associated with given ",(0,t.yg)("inlineCode",{parentName:"p"},"key")," is removed if it was part of the collection.")),(0,t.yg)("h4",d({},{id:"definition-15"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"removeKey<UK = K>(key: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, UK>): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"BiMap")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,t.yg)("h4",d({},{id:"type-parameters-5"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"UK"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"K")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",d({},{id:"parameters-8"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"key")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<K, UK>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the key of the entry to remove")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = BiMap.of([1, 1], [2, 2])\nm.removeKey(2).toArray()   // => [[1, 1]]\nm.removeKey(3) === m       // true\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"guarantees same object reference if the key is not present")),(0,t.yg)("h4",d({},{id:"overrides-16"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#removeKey"}),"BiMap.removeKey"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"removekeyandget"}),(0,t.yg)("inlineCode",{parentName:"h3"},"removeKeyAndGet")),(0,t.yg)("p",null,"Returns a tuple containing the collection of which the entry associated with given ",(0,t.yg)("inlineCode",{parentName:"p"},"key")," is removed, and the value that is associated with that key. If the key is not present, it will return undefined instead.")),(0,t.yg)("h4",d({},{id:"definition-16"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"removeKeyAndGet<UK = K>(key: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, UK>): ["),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"BiMap")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, V>, V] "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"))),(0,t.yg)("h4",d({},{id:"type-parameters-6"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"UK"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"K")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",d({},{id:"parameters-9"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"key")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<K, UK>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the key of the entry to remove")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = BiMap.of([1, 1], [2, 2])\nconst result = m.removeKeyAndGet(2)\nif (result !== undefined) console.log([result[0].toString(), result[1]])    // => logs [BiMap(1 <=> 1), 2]\nconsole.log(m.removeKeyAndGet(3))                                           // => logs undefined\n"))),(0,t.yg)("h4",d({},{id:"overrides-17"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#removeKeyAndGet"}),"BiMap.removeKeyAndGet"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"removekeys"}),(0,t.yg)("inlineCode",{parentName:"h3"},"removeKeys")),(0,t.yg)("p",null,"Returns the collection where the entries associated with each key in given ",(0,t.yg)("inlineCode",{parentName:"p"},"keys")," are removed if they were present.")),(0,t.yg)("h4",d({},{id:"definition-17"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"removeKeys<UK = K>(keys: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<"),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, UK>>): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"BiMap")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,t.yg)("h4",d({},{id:"type-parameters-7"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"UK"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"K")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",d({},{id:"parameters-10"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"keys")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<"),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<K, UK>>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"a ",(0,t.yg)("inlineCode",{parentName:"td"},"StreamSource")," of keys to remove")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = BiMap.of([1, 1], [2, 2])\nm.removeKeys([1, 3]).toArray()     // => [[2, 2]]\nm.removeKeys([1, 3, 2]).toArray()  // => []\nm.removeKeys([3, 4, 5]) === m      // => true\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"guarantees same object reference if none of the keys are present")),(0,t.yg)("h4",d({},{id:"overrides-18"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#removeKeys"}),"BiMap.removeKeys"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"removevalue"}),(0,t.yg)("inlineCode",{parentName:"h3"},"removeValue")),(0,t.yg)("p",null,"Returns the collection where the entry associated with given ",(0,t.yg)("inlineCode",{parentName:"p"},"value")," is removed if it was part of the collection.")),(0,t.yg)("h4",d({},{id:"definition-18"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"removeValue<UV = V>(value: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<V, UV>): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"BiMap")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,t.yg)("h4",d({},{id:"type-parameters-8"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"UV"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"V")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",d({},{id:"parameters-11"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"value")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<V, UV>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the value of the entry to remove")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = BiMap.of([1, 1], [2, 2])\nm.removeValue(2).toArray()   // => [[1, 1]]\nm.removeValue(3) === m       // true\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"guarantees same object reference if the key is not present")),(0,t.yg)("h4",d({},{id:"overrides-19"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#removeValue"}),"BiMap.removeValue"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"removevalueandget"}),(0,t.yg)("inlineCode",{parentName:"h3"},"removeValueAndGet")),(0,t.yg)("p",null,"Returns a tuple containing the collection of which the entry associated with given ",(0,t.yg)("inlineCode",{parentName:"p"},"value")," is removed, and the key that is associated with that value. If the value is not present, it will return undefined instead.")),(0,t.yg)("h4",d({},{id:"definition-19"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"removeValueAndGet<UV = V>(value: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<V, UV>): ["),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"BiMap")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, V>, K] "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"))),(0,t.yg)("h4",d({},{id:"type-parameters-9"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"UV"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"V")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",d({},{id:"parameters-12"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"value")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<V, UV>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the value of the entry to remove")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = BiMap.of([1, 1], [2, 2])\nconst result = m.removeValueAndGet(2)\nif (result !== undefined) console.log([result[0].toString(), result[1]])    // => logs [BiMap(1 <=> 1), 2]\nconsole.log(m.removeValueAndGet(3))                                           // => logs undefined\n"))),(0,t.yg)("h4",d({},{id:"overrides-20"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#removeValueAndGet"}),"BiMap.removeValueAndGet"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"removevalues"}),(0,t.yg)("inlineCode",{parentName:"h3"},"removeValues")),(0,t.yg)("p",null,"Returns the collection where the entries associated with each value in given ",(0,t.yg)("inlineCode",{parentName:"p"},"values")," are removed if they were present.")),(0,t.yg)("h4",d({},{id:"definition-20"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"removeValues<UV = V>(value: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<"),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<V, UV>>): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"BiMap")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,t.yg)("h4",d({},{id:"type-parameters-10"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"UV"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"V")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",d({},{id:"parameters-13"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"value")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<"),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<V, UV>>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = BiMap.of([1, 1], [2, 2])\nm.removeValues([1, 3]).toArray()     // => [[2, 2]]\nm.removeValues([1, 3, 2]).toArray()  // => []\nm.removeValues([3, 4, 5]) === m      // => true\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"guarantees same object reference if none of the keys are present")),(0,t.yg)("h4",d({},{id:"overrides-21"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#removeValues"}),"BiMap.removeValues"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"set"}),(0,t.yg)("inlineCode",{parentName:"h3"},"set")),(0,t.yg)("p",null,"Returns the collection with the given ",(0,t.yg)("inlineCode",{parentName:"p"},"key")," associated to the given ",(0,t.yg)("inlineCode",{parentName:"p"},"value"),".")),(0,t.yg)("h4",d({},{id:"definition-21"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"set(key: K, value: V): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"BiMap.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,t.yg)("h4",d({},{id:"parameters-14"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"key")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"K")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the entry key to add")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"value")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"V")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the entry value to add")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"BiMap.of([1, 1], [2, 2]).set(1, 2).toArray()\n// => [[1, 2]]\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"if the key and/or value are already associated, the previous value will be 'replaced'")),(0,t.yg)("h4",d({},{id:"overrides-22"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#set"}),"BiMap.set"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"stream"}),(0,t.yg)("inlineCode",{parentName:"h3"},"stream")),(0,t.yg)("p",null,"Returns a non-empty ",(0,t.yg)("inlineCode",{parentName:"p"},"Stream")," containing all entries of this collection as tuples of key and value.")),(0,t.yg)("h4",d({},{id:"definition-22"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"stream(): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<readonly [K, V]>;"))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"BiMap.of([1, 1], [2, 2]).stream().toArray()  // => [[1, 1], [2, 2]]\n"))),(0,t.yg)("h4",d({},{id:"overrides-23"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Streamable/NonEmpty/interface#stream"}),"NonEmpty.stream"),", ",(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#stream"}),"BiMap.stream"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"streamkeys"}),(0,t.yg)("inlineCode",{parentName:"h3"},"streamKeys")),(0,t.yg)("p",null,"Returns a non-empty ",(0,t.yg)("inlineCode",{parentName:"p"},"Stream")," containing all keys of this collection.")),(0,t.yg)("h4",d({},{id:"definition-23"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"streamKeys(): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<K>;"))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"BiMap.of([[1, 'a'], [2, 'b']]).streamKeys().toArray()   // => [1, 2]\n"))),(0,t.yg)("h4",d({},{id:"overrides-24"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#streamKeys"}),"BiMap.streamKeys"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"streamvalues"}),(0,t.yg)("inlineCode",{parentName:"h3"},"streamValues")),(0,t.yg)("p",null,"Returns a non-empty ",(0,t.yg)("inlineCode",{parentName:"p"},"Stream")," containing all values of this collection.")),(0,t.yg)("h4",d({},{id:"definition-24"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"streamValues(): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<V>;"))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"BiMap.of([[1, 'a'], [2, 'b']]).streamValues().toArray()   // => ['a', 'b']\n"))),(0,t.yg)("h4",d({},{id:"overrides-25"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#streamValues"}),"BiMap.streamValues"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"toarray"}),(0,t.yg)("inlineCode",{parentName:"h3"},"toArray")),(0,t.yg)("p",null,"Returns a non-empty array containing all entries in this collection.")),(0,t.yg)("h4",d({},{id:"definition-25"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"toArray(): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<readonly [K, V]>;"))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"BiMap.of([1, 'a'], [2, 'b']).toArray()   // => [[1, 'a'], [2, 'b']]\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(log(N))  @note it is safe to mutate the returned array, however, the array elements are not copied, thus should be treated as read-only")),(0,t.yg)("h4",d({},{id:"overrides-26"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#toArray"}),"BiMap.toArray"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"tobuilder"}),(0,t.yg)("inlineCode",{parentName:"h3"},"toBuilder")),(0,t.yg)("p",null,"Returns a builder object containing the entries of this collection.")),(0,t.yg)("h4",d({},{id:"definition-26"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"toBuilder(): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/Builder/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"BiMap.Builder")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const builder: BiMap.Builder<number, string> = BiMap.of([1, 'a'], [2, 'b']).toBuilder()\n"))),(0,t.yg)("h4",d({},{id:"overrides-27"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#toBuilder"}),"BiMap.toBuilder"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"tojson"}),(0,t.yg)("inlineCode",{parentName:"h3"},"toJSON")),(0,t.yg)("p",null,"Returns a JSON representation of this collection.")),(0,t.yg)("h4",d({},{id:"definition-27"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"toJSON(): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/ToJSON/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"ToJSON")),(0,t.yg)("inlineCode",{parentName:"p"},"<(readonly [K, V])[], this['context']['typeTag']>;"))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"BiMap.of([1, 'a'], [2, 'b']).toJSON()   // => { dataType: 'BiMap', value: [[1, 'a'], [2, 'b']] }\n"))),(0,t.yg)("h4",d({},{id:"overrides-28"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#toJSON"}),"BiMap.toJSON"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"tostring"}),(0,t.yg)("inlineCode",{parentName:"h3"},"toString")),(0,t.yg)("p",null,"Returns a string representation of this collection.")),(0,t.yg)("h4",d({},{id:"definition-28"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"toString(): string;"))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"BiMap.of([1, 'a'], [2, 'b']).toString()   // => BiMap(1 <=> 'a', 2 <=> 'b')\n"))),(0,t.yg)("h4",d({},{id:"overrides-29"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#toString"}),"BiMap.toString"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"updatekeyatvalue"}),(0,t.yg)("inlineCode",{parentName:"h3"},"updateKeyAtValue")),(0,t.yg)("p",null,"Returns the collection where the key associated with given ",(0,t.yg)("inlineCode",{parentName:"p"},"value")," is updated with the given ",(0,t.yg)("inlineCode",{parentName:"p"},"update")," value or update function.")),(0,t.yg)("h4",d({},{id:"definition-29"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"updateKeyAtValue<UV = V>(keyUpdate: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/Update/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Update")),(0,t.yg)("inlineCode",{parentName:"p"},"<K>, value: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<V, UV>): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"BiMap.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,t.yg)("h4",d({},{id:"type-parameters-11"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"UV"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"V")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",d({},{id:"parameters-15"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"keyUpdate")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/Update/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Update")),(0,t.yg)("inlineCode",{parentName:"td"},"<K>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"a new value or function taking the current key and returning a new key")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"value")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<V, UV>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the value of the entry to update")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = BiMap.of([1, 1], [2, 2])\nm.updateKeyAtValue(3, 3).toArray()\n// => [[1, 1], [2, 2]]\nm.updateKeyAtValue(10, 2).toArray()\n// => [[1, 1], [10, 2]]\nm.updateKeyAtValue((v) => v + 1, 1)\n// => [[2, 1]]\n"))),(0,t.yg)("h4",d({},{id:"overrides-30"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#updateKeyAtValue"}),"BiMap.updateKeyAtValue"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"updatevalueatkey"}),(0,t.yg)("inlineCode",{parentName:"h3"},"updateValueAtKey")),(0,t.yg)("p",null,"Returns the collection where the value associated with given ",(0,t.yg)("inlineCode",{parentName:"p"},"key")," is updated with the given ",(0,t.yg)("inlineCode",{parentName:"p"},"update")," value or update function.")),(0,t.yg)("h4",d({},{id:"definition-30"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"updateValueAtKey<UK = K>(key: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, UK>, valueUpdate: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/Update/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Update")),(0,t.yg)("inlineCode",{parentName:"p"},"<V>): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"BiMap.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,t.yg)("h4",d({},{id:"type-parameters-12"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"UK"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"K")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",d({},{id:"parameters-16"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"key")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<K, UK>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the key of the entry to update")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"valueUpdate")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/Update/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Update")),(0,t.yg)("inlineCode",{parentName:"td"},"<V>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"a new value or function taking the current value and returning a new value")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = BiMap.of([1, 1], [2, 2])\nm.updateValueAt(3, 3).toArray()\n// => [[1, 1], [2, 2]]\nm.updateValueAt(2, 10).toArray()\n// => [[1, 1], [2, 10]]\nm.updateValueAt(1, v => v + 1)\n// => [[1, 2]]\n"))),(0,t.yg)("h4",d({},{id:"overrides-31"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/bimap/BiMap/interface#updateValueAtKey"}),"BiMap.updateValueAtKey"))))}C.isMDXComponent=!0}}]);