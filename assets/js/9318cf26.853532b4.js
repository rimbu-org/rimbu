"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[95559],{15680:(e,r,t)=>{t.d(r,{xA:()=>m,yg:()=>s});var n=t(96540);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function d(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=n.createContext({}),l=function(e){var r=n.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):d(d({},r),e)),t},m=function(e){var r=l(e.components);return n.createElement(p.Provider,{value:r},e.children)},y="mdxType",c={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},u=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),y=l(t),u=a,s=y["".concat(p,".").concat(u)]||y[u]||c[u]||o;return t?n.createElement(s,d(d({ref:r},m),{},{components:t})):n.createElement(s,d({ref:r},m))}));function s(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,d=new Array(o);d[0]=u;var i={};for(var p in r)hasOwnProperty.call(r,p)&&(i[p]=r[p]);i.originalType=e,i[y]="string"==typeof e?e:a,d[1]=i;for(var l=2;l<o;l++)d[l]=t[l];return n.createElement.apply(null,d)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},75873:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>b,contentTitle:()=>f,default:()=>M,frontMatter:()=>s,metadata:()=>g,toc:()=>O});var n=t(15680),a=Object.defineProperty,o=Object.defineProperties,d=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable,m=(e,r,t)=>r in e?a(e,r,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[r]=t,y=(e,r)=>{for(var t in r||(r={}))p.call(r,t)&&m(e,t,r[t]);if(i)for(var t of i(r))l.call(r,t)&&m(e,t,r[t]);return e},c=(e,r)=>o(e,d(r)),u=(e,r)=>{var t={};for(var n in e)p.call(e,n)&&r.indexOf(n)<0&&(t[n]=e[n]);if(null!=e&&i)for(var n of i(e))r.indexOf(n)<0&&l.call(e,n)&&(t[n]=e[n]);return t};const s={title:"OrderedSortedMap.NonEmpty<K,V>",slug:"/rimbu/ordered/OrderedSortedMap/NonEmpty/interface"},f="interface OrderedSortedMap.NonEmpty<K,V>",g={unversionedId:"rimbu_ordered/OrderedSortedMap/NonEmpty.interface",id:"rimbu_ordered/OrderedSortedMap/NonEmpty.interface",title:"OrderedSortedMap.NonEmpty<K,V>",description:"A non-empty type-invariant immutable Ordered SortedMap of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the Map documentation and the OrderedSortedMap API documentation",source:"@site/api/rimbu_ordered/OrderedSortedMap/NonEmpty.interface.mdx",sourceDirName:"rimbu_ordered/OrderedSortedMap",slug:"/rimbu/ordered/OrderedSortedMap/NonEmpty/interface",permalink:"/api/rimbu/ordered/OrderedSortedMap/NonEmpty/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"OrderedSortedMap.NonEmpty<K,V>",slug:"/rimbu/ordered/OrderedSortedMap/NonEmpty/interface"},sidebar:"defaultSidebar",previous:{title:"OrderedSortedMap.Context<UK>",permalink:"/api/rimbu/ordered/OrderedSortedMap/Context/interface"},next:{title:"OrderedSortedMap.Types",permalink:"/api/rimbu/ordered/OrderedSortedMap/Types/interface"}},b={},O=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>stream</code>",id:"stream",level:3},{value:"Definition",id:"definition",level:4}],h={toc:O},v="wrapper";function M(e){var r=e,{components:t}=r,a=u(r,["components"]);return(0,n.yg)(v,c(y(y({},h),a),{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",y({},{id:"interface-orderedsortedmapnonemptykv"}),(0,n.yg)("inlineCode",{parentName:"h1"},"interface OrderedSortedMap.NonEmpty<K,V>")),(0,n.yg)("p",null,"A non-empty type-invariant immutable Ordered SortedMap of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the ",(0,n.yg)("a",y({parentName:"p"},{href:"https://rimbu.org/docs/collections/map"}),"Map documentation")," and the ",(0,n.yg)("a",y({parentName:"p"},{href:"https://rimbu.org/api/rimbu/ordered/map/OrderedSortedMap/interface"}),"OrderedSortedMap API documentation"),"  "),(0,n.yg)("h2",y({},{id:"type-parameters"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",y({parentName:"tr"},{align:null}),"K"),(0,n.yg)("td",y({parentName:"tr"},{align:null}),"the key type")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",y({parentName:"tr"},{align:null}),"V"),(0,n.yg)("td",y({parentName:"tr"},{align:null}),"the value type")))),(0,n.yg)("admonition",y({},{title:"note",type:"note"}),(0,n.yg)("ul",{parentName:"admonition"},(0,n.yg)("li",{parentName:"ul"},"The OrderedSortedMap keeps maintains the insertion order of elements, thus iterators and streams will also reflect this order. - The OrderedSortedMap wraps around a SortedMap instance, thus has mostly the same time complexity as the SortedMap. - The OrderedSortedMap keeps the key insertion order in a List, thus its space complexity is higher than a regular SortedMap."))),(0,n.yg)("admonition",y({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"const m1 = OrderedSortedMap.empty<number, string>()\nconst m2 = OrderedSortedMap.of([1, 'a'], [2, 'b'])\n"))),(0,n.yg)("h2",y({},{id:"methods"}),"Methods"),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",y({},{id:"stream"}),(0,n.yg)("inlineCode",{parentName:"h3"},"stream")),(0,n.yg)("p",null,"undocumented")),(0,n.yg)("h4",y({},{id:"definition"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"stream(): "),(0,n.yg)("a",y({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,n.yg)("inlineCode",{parentName:"p"},"<readonly [K, V]>;")))))}M.isMDXComponent=!0}}]);