"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[12683],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var m=a.createContext({}),o=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=o(e.components);return a.createElement(m.Provider,{value:t},e.children)},u="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,m=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),u=o(n),k=r,c=u["".concat(m,".").concat(k)]||u[k]||s[k]||l;return n?a.createElement(c,i(i({ref:t},d),{},{components:n})):a.createElement(c,i({ref:t},d))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=k;var p={};for(var m in t)hasOwnProperty.call(t,m)&&(p[m]=t[m]);p.originalType=e,p[u]="string"==typeof e?e:r,i[1]=p;for(var o=2;o<l;o++)i[o]=n[o];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},96620:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>N,default:()=>C,frontMatter:()=>c,metadata:()=>y,toc:()=>f});var a=n(3905),r=Object.defineProperty,l=Object.defineProperties,i=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,m=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable,d=(e,t,n)=>t in e?r(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,u=(e,t)=>{for(var n in t||(t={}))m.call(t,n)&&d(e,n,t[n]);if(p)for(var n of p(t))o.call(t,n)&&d(e,n,t[n]);return e},s=(e,t)=>l(e,i(t)),k=(e,t)=>{var n={};for(var a in e)m.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&p)for(var a of p(e))t.indexOf(a)<0&&o.call(e,a)&&(n[a]=e[a]);return n};const c={title:"AsyncTransformer (namespace)",slug:"/rimbu/stream/async/AsyncTransformer/namespace"},N="namespace AsyncTransformer",y={unversionedId:"rimbu_stream/async/AsyncTransformer/index",id:"rimbu_stream/async/AsyncTransformer/index",title:"AsyncTransformer (namespace)",description:"An AsyncReducer that produces instances of AsyncStreamSource.",source:"@site/api/rimbu_stream/async/AsyncTransformer/index.mdx",sourceDirName:"rimbu_stream/async/AsyncTransformer",slug:"/rimbu/stream/async/AsyncTransformer/namespace",permalink:"/api/rimbu/stream/async/AsyncTransformer/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"AsyncTransformer (namespace)",slug:"/rimbu/stream/async/AsyncTransformer/namespace"},sidebar:"defaultSidebar",previous:{title:"AsyncStreamable<T>",permalink:"/api/rimbu/stream/async/AsyncStreamable/interface"},next:{title:"Accept",permalink:"/api/rimbu/stream/async/AsyncTransformer/Accept/type"}},h={},f=[{value:"Functions",id:"functions",level:2},{value:"<code>collect</code>",id:"collect",level:3},{value:"Definition",id:"definition",level:4},{value:"Type parameters",id:"type-parameters",level:5},{value:"Parameters",id:"parameters",level:4},{value:"<code>flatMap</code>",id:"flatmap",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Type parameters",id:"type-parameters-1",level:5},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>flatZip</code>",id:"flatzip",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Type parameters",id:"type-parameters-2",level:5},{value:"Parameters",id:"parameters-2",level:4},{value:"<code>from</code>",id:"from",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Type parameters",id:"type-parameters-3",level:5},{value:"Parameters",id:"parameters-3",level:4},{value:"<code>indicesWhere</code>",id:"indiceswhere",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Type parameters",id:"type-parameters-4",level:5},{value:"Parameters",id:"parameters-4",level:4},{value:"<code>intersperse</code>",id:"intersperse",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Type parameters",id:"type-parameters-5",level:5},{value:"Parameters",id:"parameters-5",level:4},{value:"<code>splitOn</code>",id:"spliton",level:3},{value:"Definition",id:"definition-6",level:4},{value:"Type parameters",id:"type-parameters-6",level:5},{value:"Parameters",id:"parameters-6",level:4},{value:"<code>splitOnSlice</code>",id:"splitonslice",level:3},{value:"Definition",id:"definition-7",level:4},{value:"Type parameters",id:"type-parameters-7",level:5},{value:"Parameters",id:"parameters-7",level:4},{value:"<code>splitWhere</code>",id:"splitwhere",level:3},{value:"Definition",id:"definition-8",level:4},{value:"Type parameters",id:"type-parameters-8",level:5},{value:"Parameters",id:"parameters-8",level:4},{value:"Constants",id:"constants",level:2}],b={toc:f},g="wrapper";function C(e){var t=e,{components:n}=t,r=k(t,["components"]);return(0,a.kt)(g,s(u(u({},b),r),{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",u({},{id:"namespace-asynctransformer"}),(0,a.kt)("inlineCode",{parentName:"h1"},"namespace AsyncTransformer")),(0,a.kt)("p",null,"An AsyncReducer that produces instances of ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncStreamSource"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Companion type:")," ",(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncTransformer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncTransformer<T,R>"))),(0,a.kt)("h2",u({},{id:"functions"}),"Functions"),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"collect"}),(0,a.kt)("inlineCode",{parentName:"h3"},"collect")),(0,a.kt)("p",null,"Returns an ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncTransformer")," instance that converts or filters its input values using given ",(0,a.kt)("inlineCode",{parentName:"p"},"collectFun")," before passing them to the reducer.")),(0,a.kt)("h4",u({},{id:"definition"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function collect<T, R>(collectFun: AsyncCollectFun<T, R>): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncTransformer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncTransformer")),(0,a.kt)("inlineCode",{parentName:"p"},"<T, R>;"))),(0,a.kt)("h5",u({},{id:"type-parameters"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"T"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the input element type")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"R"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the result element type")))),(0,a.kt)("h4",u({},{id:"parameters"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"collectFun")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"AsyncCollectFun<T, R>")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"a potentially async function receiving the following arguments, and returns a new value or ",(0,a.kt)("inlineCode",{parentName:"td"},"skip")," if the value should be skipped:",(0,a.kt)("br",null)," - ",(0,a.kt)("inlineCode",{parentName:"td"},"value"),": the next value",(0,a.kt)("br",null)," - ",(0,a.kt)("inlineCode",{parentName:"td"},"index"),": the value index",(0,a.kt)("br",null)," - ",(0,a.kt)("inlineCode",{parentName:"td"},"skip"),": a token that, when returned, will not add a value to the resulting collection",(0,a.kt)("br",null)," - ",(0,a.kt)("inlineCode",{parentName:"td"},"halt"),": a function that, when called, ensures no next elements are passed"))))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"flatmap"}),(0,a.kt)("inlineCode",{parentName:"h3"},"flatMap")),(0,a.kt)("p",null,"Returns an async transformer that applies the given flatMap function to each element of the input stream, and concatenates all the resulting resulting streams into one stream.")),(0,a.kt)("h4",u({},{id:"definition-1"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function flatMap<T, T2>(flatMapFun: (value: T, index: number, halt: () => void) => MaybePromise<"),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,a.kt)("inlineCode",{parentName:"p"},"<T2>>): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncTransformer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncTransformer")),(0,a.kt)("inlineCode",{parentName:"p"},"<T, T2>;"))),(0,a.kt)("h5",u({},{id:"type-parameters-1"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"T"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the input element type")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"T2"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the output element type")))),(0,a.kt)("h4",u({},{id:"parameters-1"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"flatMapFun")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"(value: T, index: number, halt: () => void) => MaybePromise<"),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,a.kt)("inlineCode",{parentName:"td"},"<T2>>")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"a potentially async function that maps each input element to an ",(0,a.kt)("inlineCode",{parentName:"td"},"AsyncStreamSource"),". The function receives three parameters:",(0,a.kt)("br",null)," - ",(0,a.kt)("inlineCode",{parentName:"td"},"value"),": the current element being processed",(0,a.kt)("br",null)," - ",(0,a.kt)("inlineCode",{parentName:"td"},"index"),": the index of the current element in the input stream",(0,a.kt)("br",null)," - ",(0,a.kt)("inlineCode",{parentName:"td"},"halt"),": a function that can be called to halt further processing of the input stream",(0,a.kt)("br",null)))))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"flatzip"}),(0,a.kt)("inlineCode",{parentName:"h3"},"flatZip")),(0,a.kt)("p",null,"Returns an async transformer that applies the given flatMap function to each element of the input stream, and concatenates all the resulting resulting streams into one stream, where each resulting element is tupled with the originating input element.")),(0,a.kt)("h4",u({},{id:"definition-2"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function flatZip<T, T2>(flatMapFun: (value: T, index: number, halt: () => void) => MaybePromise<"),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,a.kt)("inlineCode",{parentName:"p"},"<T2>>): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncTransformer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncTransformer")),(0,a.kt)("inlineCode",{parentName:"p"},"<T, [T, T2]>;"))),(0,a.kt)("h5",u({},{id:"type-parameters-2"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"T"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the input element type")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"T2"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the output element type")))),(0,a.kt)("h4",u({},{id:"parameters-2"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"flatMapFun")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"(value: T, index: number, halt: () => void) => MaybePromise<"),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,a.kt)("inlineCode",{parentName:"td"},"<T2>>")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"a potentially async function that maps each input element to an ",(0,a.kt)("inlineCode",{parentName:"td"},"AsyncStreamSource"),". The function receives three parameters:",(0,a.kt)("br",null)," - ",(0,a.kt)("inlineCode",{parentName:"td"},"value"),": the current element being processed",(0,a.kt)("br",null)," - ",(0,a.kt)("inlineCode",{parentName:"td"},"index"),": the index of the current element in the input stream",(0,a.kt)("br",null)," - ",(0,a.kt)("inlineCode",{parentName:"td"},"halt"),": a function that can be called to halt further processing of the input stream",(0,a.kt)("br",null)))))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"from"}),(0,a.kt)("inlineCode",{parentName:"h3"},"from")),(0,a.kt)("p",null,"Returns an AsyncTransformer based on a given synchronous or asynchronous transformer.")),(0,a.kt)("h4",u({},{id:"definition-3"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function from<T, R>(transformer: "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncTransformer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncTransformer.Accept")),(0,a.kt)("inlineCode",{parentName:"p"},"<T, R>): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncTransformer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncTransformer")),(0,a.kt)("inlineCode",{parentName:"p"},"<T, R>;"))),(0,a.kt)("h5",u({},{id:"type-parameters-3"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"T"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the input element type")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"R"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the result stream element type")))),(0,a.kt)("h4",u({},{id:"parameters-3"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"transformer")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncTransformer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncTransformer.Accept")),(0,a.kt)("inlineCode",{parentName:"td"},"<T, R>")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the transformer to convert"))))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"indiceswhere"}),(0,a.kt)("inlineCode",{parentName:"h3"},"indicesWhere")),(0,a.kt)("p",null,"Returns an ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncTransformer")," that outputs the index of each received element that satisfies the given predicate.")),(0,a.kt)("h4",u({},{id:"definition-4"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function indicesWhere<T>(pred: (value: T) => MaybePromise<boolean>, options?: {"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"negate?: boolean "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"}): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncTransformer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncTransformer")),(0,a.kt)("inlineCode",{parentName:"p"},"<T, number>;"))),(0,a.kt)("h5",u({},{id:"type-parameters-4"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"T"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the input element type")))),(0,a.kt)("h4",u({},{id:"parameters-4"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"pred")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"(value: T) => MaybePromise<boolean>")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"a potentially async predicate function taking an element")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"options")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"{"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"negate?: boolean "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"td"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"}")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"(optional) object specifying the following properties",(0,a.kt)("br",null)," - negate: (default: false) when true will negate the given predicate"))))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"intersperse"}),(0,a.kt)("inlineCode",{parentName:"h3"},"intersperse")),(0,a.kt)("p",null,"Returns an ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncTransformer")," that inserts the given ",(0,a.kt)("inlineCode",{parentName:"p"},"sep")," stream source elements between each received input element.")),(0,a.kt)("h4",u({},{id:"definition-5"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function intersperse<T>(sep: "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,a.kt)("inlineCode",{parentName:"p"},"<T>): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncTransformer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncTransformer")),(0,a.kt)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.kt)("h5",u({},{id:"type-parameters-5"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"T"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the input and output element type")))),(0,a.kt)("h4",u({},{id:"parameters-5"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"sep")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,a.kt)("inlineCode",{parentName:"td"},"<T>")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the async StreamSource to insert between each received element"))))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"spliton"}),(0,a.kt)("inlineCode",{parentName:"h3"},"splitOn")),(0,a.kt)("p",null,"Returns an ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncTransformer")," that collects the received elements into a ",(0,a.kt)("inlineCode",{parentName:"p"},"collector")," that will be returned as output every time the input matches the given ",(0,a.kt)("inlineCode",{parentName:"p"},"sepElem")," value.")),(0,a.kt)("h4",u({},{id:"definition-6"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function splitOn<T, R>(sepElem: T, options?: {"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"eq?: Eq<T> "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"negate?: boolean "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"collector?: "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"p"},"<T, R> "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"}): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncTransformer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncTransformer")),(0,a.kt)("inlineCode",{parentName:"p"},"<T, R>;"))),(0,a.kt)("h5",u({},{id:"type-parameters-6"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"T"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the input element type")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"R"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the collector result type")))),(0,a.kt)("h4",u({},{id:"parameters-6"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"sepElem")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"T")),(0,a.kt)("td",u({parentName:"tr"},{align:null}))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"options")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"{"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"eq?: Eq<T> "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"td"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"negate?: boolean "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"td"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"collector?: "),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"td"},"<T, R> "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"td"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"}")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"(optional) object specifying the following properties",(0,a.kt)("br",null)," - eq - (default: ",(0,a.kt)("inlineCode",{parentName:"td"},"Eq.objectIs"),") the equality testing function - negate: (default: false) when true will negate the given predicate",(0,a.kt)("br",null)," - collector: (default: Reducer.toArray()) an AsyncReducer that can accept multiple values and reduce them into a single value of type ",(0,a.kt)("inlineCode",{parentName:"td"},"R"),"."))))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"splitonslice"}),(0,a.kt)("inlineCode",{parentName:"h3"},"splitOnSlice")),(0,a.kt)("p",null,"Returns an ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncTransformer")," that collects the received elements into a ",(0,a.kt)("inlineCode",{parentName:"p"},"collector")," that will be returned as output every time the input matches the given ",(0,a.kt)("inlineCode",{parentName:"p"},"sepSlice")," sequence of elements.")),(0,a.kt)("h4",u({},{id:"definition-7"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function splitOnSlice<T, R>(sepSlice: "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,a.kt)("inlineCode",{parentName:"p"},"<T>, options?: {"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"eq?: Eq<T> "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"collector?: "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"p"},"<T, R> "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"}): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncTransformer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncTransformer")),(0,a.kt)("inlineCode",{parentName:"p"},"<T, R>;"))),(0,a.kt)("h5",u({},{id:"type-parameters-7"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"T"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the input element type")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"R"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the collector result type")))),(0,a.kt)("h4",u({},{id:"parameters-7"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"sepSlice")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,a.kt)("inlineCode",{parentName:"td"},"<T>")),(0,a.kt)("td",u({parentName:"tr"},{align:null}))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"options")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"{"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"eq?: Eq<T> "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"td"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"collector?: "),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"td"},"<T, R> "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"td"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"}")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"(optional) object specifying the following properties",(0,a.kt)("br",null)," - eq - (default: ",(0,a.kt)("inlineCode",{parentName:"td"},"Eq.objectIs"),") the equality testing function - collector: (default: Reducer.toArray()) an AsyncReducer that can accept multiple values and reduce them into a single value of type ",(0,a.kt)("inlineCode",{parentName:"td"},"R"),"."))))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"splitwhere"}),(0,a.kt)("inlineCode",{parentName:"h3"},"splitWhere")),(0,a.kt)("p",null,"Returns an ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncTransformer")," that applies the given ",(0,a.kt)("inlineCode",{parentName:"p"},"pred")," function to each received element, and collects the received elements into a ",(0,a.kt)("inlineCode",{parentName:"p"},"collector")," that will be returned as output every time the predicate returns true.")),(0,a.kt)("h4",u({},{id:"definition-8"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function splitWhere<T, R>(pred: (value: T, index: number) => MaybePromise<boolean>, options?: {"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"negate?: boolean "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"collector?: "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"p"},"<T, R> "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"}): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncTransformer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncTransformer")),(0,a.kt)("inlineCode",{parentName:"p"},"<T, R>;"))),(0,a.kt)("h5",u({},{id:"type-parameters-8"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"T"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the input element type")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"R"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the collector result type")))),(0,a.kt)("h4",u({},{id:"parameters-8"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"pred")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"(value: T, index: number) => MaybePromise<boolean>")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"a potentially async predicate function taking an element")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"options")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"{"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"negate?: boolean "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"td"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"collector?: "),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,a.kt)("inlineCode",{parentName:"td"},"<T, R> "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"td"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"}")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"(optional) object specifying the following properties",(0,a.kt)("br",null)," - negate: (default: false) when true will negate the given predicate",(0,a.kt)("br",null)," - collector: (default: Reducer.toArray()) an AsyncReducer that can accept multiple values and reduce them into a single value of type ",(0,a.kt)("inlineCode",{parentName:"td"},"R"),"."))))),(0,a.kt)("h2",u({},{id:"constants"}),"Constants"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"filter"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"Returns an async transformer that filters elements from the input stream based on the provided predicate function.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"window"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"Returns an async transformer that produces windows/collections of ",(0,a.kt)("inlineCode",{parentName:"td"},"windowSize")," size, each window starting ",(0,a.kt)("inlineCode",{parentName:"td"},"skipAmount")," of elements after the previous, and optionally collected by a custom reducer.")))))}C.isMDXComponent=!0}}]);