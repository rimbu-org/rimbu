"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[27737],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>N});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),m=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=m(e.components);return n.createElement(o.Provider,{value:t},e.children)},k="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),k=m(a),u=r,N=k["".concat(o,".").concat(u)]||k[u]||s[u]||i;return a?n.createElement(N,l(l({ref:t},d),{},{components:a})):n.createElement(N,l({ref:t},d))}));function N(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=u;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[k]="string"==typeof e?e:r,l[1]=p;for(var m=2;m<i;m++)l[m]=a[m];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},33852:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>g,contentTitle:()=>h,default:()=>b,frontMatter:()=>N,metadata:()=>c,toc:()=>f});var n=a(3905),r=Object.defineProperty,i=Object.defineProperties,l=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable,d=(e,t,a)=>t in e?r(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,k=(e,t)=>{for(var a in t||(t={}))o.call(t,a)&&d(e,a,t[a]);if(p)for(var a of p(t))m.call(t,a)&&d(e,a,t[a]);return e},s=(e,t)=>i(e,l(t)),u=(e,t)=>{var a={};for(var n in e)o.call(e,n)&&t.indexOf(n)<0&&(a[n]=e[n]);if(null!=e&&p)for(var n of p(e))t.indexOf(n)<0&&m.call(e,n)&&(a[n]=e[n]);return a};const N={title:"VariantValuedGraphBase<N,V,Tp>",slug:"/rimbu/graph/custom/VariantValuedGraphBase/interface"},h="interface VariantValuedGraphBase<N,V,Tp>",c={unversionedId:"rimbu_graph/custom/VariantValuedGraphBase.interface",id:"rimbu_graph/custom/VariantValuedGraphBase.interface",title:"VariantValuedGraphBase<N,V,Tp>",description:"undocumented",source:"@site/api/rimbu_graph/custom/VariantValuedGraphBase.interface.mdx",sourceDirName:"rimbu_graph/custom",slug:"/rimbu/graph/custom/VariantValuedGraphBase/interface",permalink:"/api/rimbu/graph/custom/VariantValuedGraphBase/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"VariantValuedGraphBase<N,V,Tp>",slug:"/rimbu/graph/custom/VariantValuedGraphBase/interface"},sidebar:"defaultSidebar",previous:{title:"VariantValuedGraphBase.Types",permalink:"/api/rimbu/graph/custom/VariantValuedGraphBase/Types/interface"},next:{title:"WithGraphValues",permalink:"/api/rimbu/graph/custom/WithGraphValues/type"}},g={},f=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>connectionSize</code>",id:"connectionsize",level:3},{value:"Definition",id:"definition",level:4},{value:"Overrides",id:"overrides",level:4},{value:"<code>isDirected</code>",id:"isdirected",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"<code>isEmpty</code>",id:"isempty",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"<code>linkMap</code>",id:"linkmap",level:3},{value:"Definition",id:"definition-3",level:4},{value:"<code>nodeSize</code>",id:"nodesize",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"Methods",id:"methods",level:2},{value:"<code>[Symbol.iterator]</code>",id:"symboliterator",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Overrides",id:"overrides-4",level:4},{value:"<code>assumeNonEmpty</code>",id:"assumenonempty",level:3},{value:"Definition",id:"definition-6",level:4},{value:"Overrides",id:"overrides-5",level:4},{value:"<code>disconnect</code>",id:"disconnect",level:3},{value:"Definition",id:"definition-7",level:4},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Overrides",id:"overrides-6",level:4},{value:"<code>disconnectAll</code>",id:"disconnectall",level:3},{value:"Definition",id:"definition-8",level:4},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Overrides",id:"overrides-7",level:4},{value:"<code>forEach</code>",id:"foreach",level:3},{value:"Definition",id:"definition-9",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Overrides",id:"overrides-8",level:4},{value:"<code>getConnectionStreamFrom</code>",id:"getconnectionstreamfrom",level:3},{value:"Definition",id:"definition-10",level:4},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Overrides",id:"overrides-9",level:4},{value:"<code>getConnectionStreamTo</code>",id:"getconnectionstreamto",level:3},{value:"Definition",id:"definition-11",level:4},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"Overrides",id:"overrides-10",level:4},{value:"<code>getValue</code>",id:"getvalue",level:3},{value:"Definitions",id:"definitions",level:4},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"<code>hasConnection</code>",id:"hasconnection",level:3},{value:"Definition",id:"definition-12",level:4},{value:"Type parameters",id:"type-parameters-6",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"Overrides",id:"overrides-11",level:4},{value:"<code>hasNode</code>",id:"hasnode",level:3},{value:"Definition",id:"definition-13",level:4},{value:"Type parameters",id:"type-parameters-7",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"Overrides",id:"overrides-12",level:4},{value:"<code>mapValues</code>",id:"mapvalues",level:3},{value:"Definition",id:"definition-14",level:4},{value:"Type parameters",id:"type-parameters-8",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"<code>nonEmpty</code>",id:"nonempty",level:3},{value:"Definition",id:"definition-15",level:4},{value:"Overrides",id:"overrides-13",level:4},{value:"<code>removeNode</code>",id:"removenode",level:3},{value:"Definition",id:"definition-16",level:4},{value:"Type parameters",id:"type-parameters-9",level:4},{value:"Parameters",id:"parameters-9",level:4},{value:"Overrides",id:"overrides-14",level:4},{value:"<code>removeNodes</code>",id:"removenodes",level:3},{value:"Definition",id:"definition-17",level:4},{value:"Type parameters",id:"type-parameters-10",level:4},{value:"Parameters",id:"parameters-10",level:4},{value:"Overrides",id:"overrides-15",level:4},{value:"<code>removeUnconnectedNodes</code>",id:"removeunconnectednodes",level:3},{value:"Definition",id:"definition-18",level:4},{value:"Overrides",id:"overrides-16",level:4},{value:"<code>stream</code>",id:"stream",level:3},{value:"Definition",id:"definition-19",level:4},{value:"Overrides",id:"overrides-17",level:4},{value:"<code>streamConnections</code>",id:"streamconnections",level:3},{value:"Definition",id:"definition-20",level:4},{value:"Overrides",id:"overrides-18",level:4},{value:"<code>streamNodes</code>",id:"streamnodes",level:3},{value:"Definition",id:"definition-21",level:4},{value:"Overrides",id:"overrides-19",level:4},{value:"<code>toJSON</code>",id:"tojson",level:3},{value:"Definition",id:"definition-22",level:4},{value:"Overrides",id:"overrides-20",level:4},{value:"<code>toString</code>",id:"tostring",level:3},{value:"Definition",id:"definition-23",level:4},{value:"Overrides",id:"overrides-21",level:4}],v={toc:f},y="wrapper";function b(e){var t=e,{components:a}=t,r=u(t,["components"]);return(0,n.kt)(y,s(k(k({},v),r),{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",k({},{id:"interface-variantvaluedgraphbasenvtp"}),(0,n.kt)("inlineCode",{parentName:"h1"},"interface VariantValuedGraphBase<N,V,Tp>")),(0,n.kt)("p",null,"undocumented"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Companion namespace:")," ",(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantValuedGraphBase/namespace"}),"VariantValuedGraphBase")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Extends:")," ",(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"VariantGraphBase<N,V,Tp>"))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Implemented by:")," ",(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantValuedGraphBase/NonEmpty/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"VariantValuedGraphBase.NonEmpty<N,V,Tp>")),", ",(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/ValuedGraphBase/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"ValuedGraphBase<N,V,Tp>")),", ",(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/VariantValuedGraph/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"VariantValuedGraph<N,V>"))),(0,n.kt)("h2",k({},{id:"type-parameters"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Constraints"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Default"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"N"),(0,n.kt)("td",k({parentName:"tr"},{align:null})),(0,n.kt)("td",k({parentName:"tr"},{align:null})),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"undocumented")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"V"),(0,n.kt)("td",k({parentName:"tr"},{align:null})),(0,n.kt)("td",k({parentName:"tr"},{align:null})),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"undocumented")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"Tp"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/graph/custom/VariantValuedGraphBase/Types/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"VariantValuedGraphBase.Types"))),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/graph/custom/VariantValuedGraphBase/Types/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"VariantValuedGraphBase.Types"))),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"undocumented")))),(0,n.kt)("h2",k({},{id:"properties"}),"Properties"),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"connectionsize"}),(0,n.kt)("inlineCode",{parentName:"h3"},"connectionSize")),(0,n.kt)("p",null,"Returns the amount of connections in the graph.")),(0,n.kt)("h4",k({},{id:"definition"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly connectionSize: number;"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"ArrowGraphHashed.empty<number>().connectionSize  // => 0\nArrowGraphHashed.of([1], [2, 3]).connectionSize  // => 1\n"))),(0,n.kt)("h4",k({},{id:"overrides"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#connectionSize"}),"VariantGraphBase.connectionSize"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"isdirected"}),(0,n.kt)("inlineCode",{parentName:"h3"},"isDirected")),(0,n.kt)("p",null,"Returns true if the graph is an arrow (directed) graph.")),(0,n.kt)("h4",k({},{id:"definition-1"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly isDirected: boolean;"))),(0,n.kt)("h4",k({},{id:"overrides-1"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#isDirected"}),"VariantGraphBase.isDirected"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"isempty"}),(0,n.kt)("inlineCode",{parentName:"h3"},"isEmpty")),(0,n.kt)("p",null,"Returns true if the graph has no nodes.")),(0,n.kt)("h4",k({},{id:"definition-2"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly isEmpty: boolean;"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"ArrowGraphHashed.empty<number>().isEmpty  // => true\nArrowGraphHashed.of([1]).isEmpty          // => false\n"))),(0,n.kt)("h4",k({},{id:"overrides-2"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#isEmpty"}),"VariantGraphBase.isEmpty"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"linkmap"}),(0,n.kt)("inlineCode",{parentName:"h3"},"linkMap")),(0,n.kt)("p",null,"Returns the nested Map representation of the graph connections.")),(0,n.kt)("h4",k({},{id:"definition-3"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly linkMap: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, N, V>['linkMap'];"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"ArrowValuedGraphHashed.of([1, 2, 'a'], [2, 3, 'b']).linkMap.toArray()\n// => [[1, HashMap(2 -> 'a')], [2, HashMap(3 -> 'b')]]\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"nodesize"}),(0,n.kt)("inlineCode",{parentName:"h3"},"nodeSize")),(0,n.kt)("p",null,"Returns the amount of nodes in the graph.")),(0,n.kt)("h4",k({},{id:"definition-4"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly nodeSize: number;"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"ArrowGraphHashed.empty<number>().nodeSize  // => 0\nArrowGraphHashed.of([1], [2, 3]).nodeSize  // => 3\n"))),(0,n.kt)("h4",k({},{id:"overrides-3"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#nodeSize"}),"VariantGraphBase.nodeSize"))),(0,n.kt)("h2",k({},{id:"methods"}),"Methods"),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"symboliterator"}),(0,n.kt)("inlineCode",{parentName:"h3"},"[Symbol.iterator]")),(0,n.kt)("p",null,"Returns a ",(0,n.kt)("inlineCode",{parentName:"p"},"FastIterator")," instance used to iterate over the values of this ",(0,n.kt)("inlineCode",{parentName:"p"},"Iterable"),".")),(0,n.kt)("h4",k({},{id:"definition-5"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"[Symbol.iterator](): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/FastIterator/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"FastIterator")),(0,n.kt)("inlineCode",{parentName:"p"},"<T>;"))),(0,n.kt)("h4",k({},{id:"overrides-4"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/FastIterable/interface#%5BSymbol.iterator%5D"}),"FastIterable.[Symbol.iterator]"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"assumenonempty"}),(0,n.kt)("inlineCode",{parentName:"h3"},"assumeNonEmpty")),(0,n.kt)("p",null,"Returns the collection as a .NonEmpty type")),(0,n.kt)("h4",k({},{id:"definition-6"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"assumeNonEmpty(): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, N, V>['nonEmpty'];"))),(0,n.kt)("admonition",k({},{title:"throws",type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"RimbuError.EmptyCollectionAssumedNonEmptyError if the collection is empty")),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"ArrowGraphHashed.empty<number>().assumeNonEmpty()   // => throws\nconst g: ArrowGraphHashed<number> = ArrowGraphHashed.of([1, 1], [2, 2])\nconst g2: ArrowGraphHashed.NonEmpty<number> = g     // => compiler error\nconst g3: ArrowGraphHashed.NonEmpty<number> = g.assumeNonEmpty()\n"))),(0,n.kt)("admonition",k({},{title:"note",type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"returns reference to this collection")),(0,n.kt)("h4",k({},{id:"overrides-5"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#assumeNonEmpty"}),"VariantGraphBase.assumeNonEmpty"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"disconnect"}),(0,n.kt)("inlineCode",{parentName:"h3"},"disconnect")),(0,n.kt)("p",null,"Returns the graph with the connection between given ",(0,n.kt)("inlineCode",{parentName:"p"},"node1")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"node2")," removed if it exists.")),(0,n.kt)("h4",k({},{id:"definition-7"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"disconnect<UN = N>(node1: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"p"},"<N, UN>, node2: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"p"},"<N, UN>): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, N, V>['normal'];"))),(0,n.kt)("h4",k({},{id:"type-parameters-1"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Default"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"UN"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"N")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"node1")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"td"},"<N, UN>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the first connection node")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"node2")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"td"},"<N, UN>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the second connectio node")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const g = ArrowGraphHashed.of([1], [2, 3])\ng.disconnect(2, 3).stream().toArray()  // => [[1], [2], [3]]\ng.disconnect(1, 2).stream().toArray()  // => [[1], [2, 3]]\n"))),(0,n.kt)("h4",k({},{id:"overrides-6"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#disconnect"}),"VariantGraphBase.disconnect"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"disconnectall"}),(0,n.kt)("inlineCode",{parentName:"h3"},"disconnectAll")),(0,n.kt)("p",null,"Returns the graph with all connections in given ",(0,n.kt)("inlineCode",{parentName:"p"},"links")," removed if they exist.")),(0,n.kt)("h4",k({},{id:"definition-8"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"disconnectAll<UN = N>(links: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.kt)("inlineCode",{parentName:"p"},"<Link<"),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"p"},"<N, UN>>>): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, N, V>['normal'];"))),(0,n.kt)("h4",k({},{id:"type-parameters-2"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Default"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"UN"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"N")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-1"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"links")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.kt)("inlineCode",{parentName:"td"},"<Link<"),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"td"},"<N, UN>>>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"a ",(0,n.kt)("inlineCode",{parentName:"td"},"StreamSource")," containing tuples of nodes representing connections")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const g = ArrowGraphHashed.of([1], [2, 3])\ng.disconnectAll([[1, 2], [3, 4]]).stream().toArray() // => [[1], [2, 3]]\ng.disconnectAll([[2, 3], [3, 4]]).stream().toArray() // => [[1], [2], [3]]\n"))),(0,n.kt)("h4",k({},{id:"overrides-7"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#disconnectAll"}),"VariantGraphBase.disconnectAll"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"foreach"}),(0,n.kt)("inlineCode",{parentName:"h3"},"forEach")),(0,n.kt)("p",null,"Performs given function ",(0,n.kt)("inlineCode",{parentName:"p"},"f")," for each entry of the collection, using given ",(0,n.kt)("inlineCode",{parentName:"p"},"state")," as initial traversal state.")),(0,n.kt)("h4",k({},{id:"definition-9"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"forEach(f: (entry: [N] "),(0,n.kt)("code",null,"|"),(0,n.kt)("inlineCode",{parentName:"p"}," "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, N, V>['link'], index: number, halt: () => void) => void, options?: {"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"state?: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/TraverseState/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"TraverseState")),(0,n.kt)("inlineCode",{parentName:"p"},";"),(0,n.kt)("br",null),"\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"}): void;"))),(0,n.kt)("h4",k({},{id:"parameters-2"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"f")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"(entry: [N] "),(0,n.kt)("code",null,"|"),(0,n.kt)("inlineCode",{parentName:"td"}," "),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,n.kt)("inlineCode",{parentName:"td"},"<Tp, N, V>['link'], index: number, halt: () => void) => void")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the function to perform for each entry, receiving:",(0,n.kt)("br",null)," - ",(0,n.kt)("inlineCode",{parentName:"td"},"entry"),": the next graph element",(0,n.kt)("br",null)," - ",(0,n.kt)("inlineCode",{parentName:"td"},"index"),": the index of the element",(0,n.kt)("br",null)," - ",(0,n.kt)("inlineCode",{parentName:"td"},"halt"),": a function that, if called, ensures that no new elements are passed")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"options")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"{"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"td"},"state?: "),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/common/TraverseState/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"TraverseState")),(0,n.kt)("inlineCode",{parentName:"td"},";"),(0,n.kt)("br",null),"\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"td"},"}")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"object containing the following",(0,n.kt)("br",null)," - state: (optional) the traverse state")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const g = ArrowGraphHashed.of([1], [2, 3], [4])\ng.forEach((entry, i, halt) => {\nconsole.log([entry]);\nif (i >= 1) halt();\n})\n// => logs [1]  [2, 3]\n"))),(0,n.kt)("admonition",k({},{title:"note",type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"O(N)")),(0,n.kt)("h4",k({},{id:"overrides-8"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#forEach"}),"VariantGraphBase.forEach"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"getconnectionstreamfrom"}),(0,n.kt)("inlineCode",{parentName:"h3"},"getConnectionStreamFrom")),(0,n.kt)("p",null,"Returns a ",(0,n.kt)("inlineCode",{parentName:"p"},"Stream")," containing all the connetions from the given ",(0,n.kt)("inlineCode",{parentName:"p"},"node1"))),(0,n.kt)("h4",k({},{id:"definition-10"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"getConnectionStreamFrom<UN = N>(node1: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"p"},"<N, UN>): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Stream")),(0,n.kt)("inlineCode",{parentName:"p"},"<"),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, N, V>['link']>;"))),(0,n.kt)("h4",k({},{id:"type-parameters-3"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Default"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"UN"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"N")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-3"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"node1")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"td"},"<N, UN>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the first connection node")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const g = ArrowGraphHashed.of([1], [2, 3])\ng.getConnectionStreamFrom(2).toArray()   // => [3]\ng.getConnectionStreamFrom(5).toArray()   // => []\n"))),(0,n.kt)("h4",k({},{id:"overrides-9"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#getConnectionStreamFrom"}),"VariantGraphBase.getConnectionStreamFrom"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"getconnectionstreamto"}),(0,n.kt)("inlineCode",{parentName:"h3"},"getConnectionStreamTo")),(0,n.kt)("p",null,"Returns a ",(0,n.kt)("inlineCode",{parentName:"p"},"Stream")," containing all the connetions to the given ",(0,n.kt)("inlineCode",{parentName:"p"},"node2"))),(0,n.kt)("h4",k({},{id:"definition-11"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"getConnectionStreamTo<UN = N>(node2: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"p"},"<N, UN>): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Stream")),(0,n.kt)("inlineCode",{parentName:"p"},"<"),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, N, V>['link']>;"))),(0,n.kt)("h4",k({},{id:"type-parameters-4"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Default"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"UN"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"N")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-4"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"node2")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"td"},"<N, UN>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the second connection node")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const g = ArrowGraphHashed.of([1], [2, 3])\ng.getConnectionStreamTo(3).toArray()   // => [2]\ng.getConnectionStreamTo(5).toArray()   // => []\n"))),(0,n.kt)("h4",k({},{id:"overrides-10"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#getConnectionStreamTo"}),"VariantGraphBase.getConnectionStreamTo"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"getvalue"}),(0,n.kt)("inlineCode",{parentName:"h3"},"getValue")),(0,n.kt)("p",null,"Returns the value of the connection between given ",(0,n.kt)("inlineCode",{parentName:"p"},"node1")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"node2"))),(0,n.kt)("h4",k({},{id:"definitions"}),"Definitions"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"getValue<UN = N>(node1: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"p"},"<N, UN>, node2: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"p"},"<N, UN>): V "),(0,n.kt)("code",null,"|"),(0,n.kt)("inlineCode",{parentName:"p"}," undefined;"))),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"getValue<UN, O>(node1: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"p"},"<N, UN>, node2: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"p"},"<N, UN>, otherwise: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"OptLazy")),(0,n.kt)("inlineCode",{parentName:"p"},"<O>): V "),(0,n.kt)("code",null,"|"),(0,n.kt)("inlineCode",{parentName:"p"}," O;"))),(0,n.kt)("h4",k({},{id:"type-parameters-5"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Default"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"UN"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"N")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-5"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"node1")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"td"},"<N, UN>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the first connection node")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"node2")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"td"},"<N, UN>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the second connection node")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const g = ArrowValuedGraphHashed.of([1, 2, 'a'], [2, 3, 'b'])\ng.getValue(1, 2) // => 'a'\ng.getValue(3, 4) // => undefined\ng.getValue(1, 2, 'z')  // => 'a'\ng.getValue(3, 4, 'z')  // => 'z'\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"hasconnection"}),(0,n.kt)("inlineCode",{parentName:"h3"},"hasConnection")),(0,n.kt)("p",null,"Returns true if the graph has a connection between given ",(0,n.kt)("inlineCode",{parentName:"p"},"node1")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"node2"),".")),(0,n.kt)("h4",k({},{id:"definition-12"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"hasConnection<UN = N>(node1: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"p"},"<N, UN>, node2: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"p"},"<N, UN>): boolean;"))),(0,n.kt)("h4",k({},{id:"type-parameters-6"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Default"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"UN"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"N")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-6"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"node1")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"td"},"<N, UN>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the first connection node")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"node2")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"td"},"<N, UN>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the second connection node")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const g = ArrowGraphHashed.of([1], [2, 3])\ng.hasConnection(2, 3)   // => true\ng.hasConnection(3, 1)   // => false\n"))),(0,n.kt)("h4",k({},{id:"overrides-11"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#hasConnection"}),"VariantGraphBase.hasConnection"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"hasnode"}),(0,n.kt)("inlineCode",{parentName:"h3"},"hasNode")),(0,n.kt)("p",null,"Returns true if the graph contains the given ",(0,n.kt)("inlineCode",{parentName:"p"},"node"),".")),(0,n.kt)("h4",k({},{id:"definition-13"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"hasNode<UN = N>(node: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"p"},"<N, UN>): boolean;"))),(0,n.kt)("h4",k({},{id:"type-parameters-7"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Default"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"UN"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"N")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-7"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"node")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"td"},"<N, UN>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the node to search")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const g = ArrowGraphHashed.of([1], [2, 3])\ng.hasNode(2)   // => true\ng.hasNode(5)   // => false\n"))),(0,n.kt)("h4",k({},{id:"overrides-12"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#hasNode"}),"VariantGraphBase.hasNode"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"mapvalues"}),(0,n.kt)("inlineCode",{parentName:"h3"},"mapValues")),(0,n.kt)("p",null,"Returns a graph with the same connections, but where the given ",(0,n.kt)("inlineCode",{parentName:"p"},"mapFun")," function is applied to each connection value.")),(0,n.kt)("h4",k({},{id:"definition-14"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"mapValues<V2>(mapFun: (value: V, node1: N, node2: N) => V2): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, N, V2>['normal'];"))),(0,n.kt)("h4",k({},{id:"type-parameters-8"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"V2"),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-8"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"mapFun")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"(value: V, node1: N, node2: N) => V2")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"a function taking a ",(0,n.kt)("inlineCode",{parentName:"td"},"value")," and connection's ",(0,n.kt)("inlineCode",{parentName:"td"},"node1")," and ",(0,n.kt)("inlineCode",{parentName:"td"},"node2"),", and returning a new value")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"ArrowValuedGraphHashed.of([1, 2, 'a'], [2, 3, 'bc']).mapValues(v => v.length).toArray()\n// => [[1, 2, 1], [2, 3, 2]]\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"nonempty"}),(0,n.kt)("inlineCode",{parentName:"h3"},"nonEmpty")),(0,n.kt)("p",null,"Returns true if there is at least one node in the collection, and instructs the compiler to treat the collection as a .NonEmpty type.")),(0,n.kt)("h4",k({},{id:"definition-15"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"nonEmpty(): this is "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, N, V>['nonEmpty'];"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const g: ArrowGraphHashed<number> = ArrowGraphHashed.of([1, 1], [2, 2])\ng.streamNodes().first(0)     // compiler allows fallback value since the Stream may be empty\nif (g.nonEmpty()) {\ng.streamNodes().first(0)   // compiler error: fallback value not allowed since Stream is not empty\n}\n"))),(0,n.kt)("h4",k({},{id:"overrides-13"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#nonEmpty"}),"VariantGraphBase.nonEmpty"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"removenode"}),(0,n.kt)("inlineCode",{parentName:"h3"},"removeNode")),(0,n.kt)("p",null,"Returns the graph with the given ",(0,n.kt)("inlineCode",{parentName:"p"},"node")," and all its connections removed.")),(0,n.kt)("h4",k({},{id:"definition-16"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"removeNode<UN = N>(node: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"p"},"<N, UN>): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, N, V>['normal'];"))),(0,n.kt)("h4",k({},{id:"type-parameters-9"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Default"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"UN"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"N")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-9"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"node")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"td"},"<N, UN>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the node to remove")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const g = ArrowGraphHashed.of([1], [2, 3])\ng.removeNode(2).stream().toArray()  // => [[1]]\ng.removeNode(6).stream().toArray()  // => [[1], [2, 3]]\n"))),(0,n.kt)("h4",k({},{id:"overrides-14"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#removeNode"}),"VariantGraphBase.removeNode"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"removenodes"}),(0,n.kt)("inlineCode",{parentName:"h3"},"removeNodes")),(0,n.kt)("p",null,"Returns the graph with all nodes in given ",(0,n.kt)("inlineCode",{parentName:"p"},"nodes")," stream removed, together with all their connections.")),(0,n.kt)("h4",k({},{id:"definition-17"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"removeNodes<UN = N>(nodes: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.kt)("inlineCode",{parentName:"p"},"<"),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"p"},"<N, UN>>): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, N, V>['normal'];"))),(0,n.kt)("h4",k({},{id:"type-parameters-10"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Default"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"UN"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"N")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-10"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"nodes")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.kt)("inlineCode",{parentName:"td"},"<"),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.kt)("inlineCode",{parentName:"td"},"<N, UN>>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"a ",(0,n.kt)("inlineCode",{parentName:"td"},"StreamSource")," containing the nodes to remove")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const g = ArrowGraphHashed.of([1], [2, 3])\ng.removeNodes([2, 3]).stream().toArray()  // => [[1]]\ng.removeNodes([4, 5]).stream().toArray()  // => [[1], [2, 3]]\n"))),(0,n.kt)("h4",k({},{id:"overrides-15"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#removeNodes"}),"VariantGraphBase.removeNodes"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"removeunconnectednodes"}),(0,n.kt)("inlineCode",{parentName:"h3"},"removeUnconnectedNodes")),(0,n.kt)("p",null,"Returns the graph with all isolated nodes removed.")),(0,n.kt)("h4",k({},{id:"definition-18"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"removeUnconnectedNodes(): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, N, V>['normal'];"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const g = ArrowGraphHashed.of([1], [2, 3])\ng.removeUnconnectedNodes().stream().toArray()   // => [[2, 3]]\n"))),(0,n.kt)("h4",k({},{id:"overrides-16"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#removeUnconnectedNodes"}),"VariantGraphBase.removeUnconnectedNodes"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"stream"}),(0,n.kt)("inlineCode",{parentName:"h3"},"stream")),(0,n.kt)("p",null,"Returns a ",(0,n.kt)("inlineCode",{parentName:"p"},"Stream")," containing all graph elements of this collection as single tuples for isolated nodes and 2-valued tuples of nodes for connections.")),(0,n.kt)("h4",k({},{id:"definition-19"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"stream(): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Stream")),(0,n.kt)("inlineCode",{parentName:"p"},"<[N] "),(0,n.kt)("code",null,"|"),(0,n.kt)("inlineCode",{parentName:"p"}," "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, N, V>['link']>;"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"ArrowGraphHashed.of([1], [2, 3]).stream().toArray()  // => [[1], [2, 3]]\n"))),(0,n.kt)("h4",k({},{id:"overrides-17"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#stream"}),"VariantGraphBase.stream"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"streamconnections"}),(0,n.kt)("inlineCode",{parentName:"h3"},"streamConnections")),(0,n.kt)("p",null,"Returns a ",(0,n.kt)("inlineCode",{parentName:"p"},"Stream")," containing all connections of this collection.")),(0,n.kt)("h4",k({},{id:"definition-20"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"streamConnections(): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Stream")),(0,n.kt)("inlineCode",{parentName:"p"},"<"),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, N, V>['link']>;"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"ArrowGraphHashed.of([1], [2, 3]).stream().toArray()   // => [[2, 3]]\n"))),(0,n.kt)("h4",k({},{id:"overrides-18"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#streamConnections"}),"VariantGraphBase.streamConnections"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"streamnodes"}),(0,n.kt)("inlineCode",{parentName:"h3"},"streamNodes")),(0,n.kt)("p",null,"Returns a ",(0,n.kt)("inlineCode",{parentName:"p"},"Stream")," containing all nodes of this collection.")),(0,n.kt)("h4",k({},{id:"definition-21"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"streamNodes(): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Stream")),(0,n.kt)("inlineCode",{parentName:"p"},"<N>;"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"ArrowGraphHashed.of([1], [2, 3]).stream().toArray()   // => [1, 2, 3]\n"))),(0,n.kt)("h4",k({},{id:"overrides-19"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#streamNodes"}),"VariantGraphBase.streamNodes"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"tojson"}),(0,n.kt)("inlineCode",{parentName:"h3"},"toJSON")),(0,n.kt)("p",null,"Returns a JSON representation of this collection.")),(0,n.kt)("h4",k({},{id:"definition-22"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"toJSON(): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/ToJSON/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"ToJSON")),(0,n.kt)("inlineCode",{parentName:"p"},"<[N, "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, N, V>['linkTarget'][]][]>;"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"ArrowGraphHashed.of([1], [2, 3]).toJSON()\n// => { dataType: 'ArrowGraphHashed', value: [[1, []], [2, [3]]] }\n"))),(0,n.kt)("h4",k({},{id:"overrides-20"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#toJSON"}),"VariantGraphBase.toJSON"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"tostring"}),(0,n.kt)("inlineCode",{parentName:"h3"},"toString")),(0,n.kt)("p",null,"Returns a string representation of this collection.")),(0,n.kt)("h4",k({},{id:"definition-23"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"toString(): string;"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"ArrowGraphHashed.of([1], [2, 3]).toString()   // => ArrowGraphHashed(1 => [], 2 => [3])\n"))),(0,n.kt)("h4",k({},{id:"overrides-21"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#toString"}),"VariantGraphBase.toString"))))}b.isMDXComponent=!0}}]);