"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[7835],{15680:(e,a,n)=>{n.d(a,{xA:()=>y,yg:()=>d});var t=n(96540);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function i(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?i(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function o(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=t.createContext({}),p=function(e){var a=t.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},y=function(e){var a=p(e.components);return t.createElement(s.Provider,{value:a},e.children)},h="mdxType",g={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,y=o(e,["components","mdxType","originalType","parentName"]),h=p(n),m=r,d=h["".concat(s,".").concat(m)]||h[m]||g[m]||i;return n?t.createElement(d,l(l({ref:a},y),{},{components:n})):t.createElement(d,l({ref:a},y))}));function d(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in a)hasOwnProperty.call(a,s)&&(o[s]=a[s]);o.originalType=e,o[h]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},51219:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>N,contentTitle:()=>u,default:()=>v,frontMatter:()=>d,metadata:()=>c,toc:()=>f});var t=n(15680),r=Object.defineProperty,i=Object.defineProperties,l=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,y=(e,a,n)=>a in e?r(e,a,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[a]=n,h=(e,a)=>{for(var n in a||(a={}))s.call(a,n)&&y(e,n,a[n]);if(o)for(var n of o(a))p.call(a,n)&&y(e,n,a[n]);return e},g=(e,a)=>i(e,l(a)),m=(e,a)=>{var n={};for(var t in e)s.call(e,t)&&a.indexOf(t)<0&&(n[t]=e[t]);if(null!=e&&o)for(var t of o(e))a.indexOf(t)<0&&p.call(e,t)&&(n[t]=e[t]);return n};const d={title:"Hasher (namespace)",slug:"/rimbu/hashed/Hasher/namespace"},u="namespace Hasher",c={unversionedId:"rimbu_hashed/Hasher/index",id:"rimbu_hashed/Hasher/index",title:"Hasher (namespace)",description:"Interface used to hash objects for hashed collections.",source:"@site/api/rimbu_hashed/Hasher/index.mdx",sourceDirName:"rimbu_hashed/Hasher",slug:"/rimbu/hashed/Hasher/namespace",permalink:"/api/rimbu/hashed/Hasher/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"Hasher (namespace)",slug:"/rimbu/hashed/Hasher/namespace"},sidebar:"defaultSidebar",previous:{title:"HashSet<T>",permalink:"/api/rimbu/hashed/HashSet/interface"},next:{title:"Hasher<UK>",permalink:"/api/rimbu/hashed/Hasher/interface"}},N={},f=[{value:"Functions",id:"functions",level:2},{value:"<code>anyDeepHasher</code>",id:"anydeephasher",level:3},{value:"Definition",id:"definition",level:4},{value:"<code>anyFlatHasher</code>",id:"anyflathasher",level:3},{value:"Definition",id:"definition-1",level:4},{value:"<code>anyJsonStringHasher</code>",id:"anyjsonstringhasher",level:3},{value:"Definition",id:"definition-2",level:4},{value:"<code>anyShallowHasher</code>",id:"anyshallowhasher",level:3},{value:"Definition",id:"definition-3",level:4},{value:"<code>anyToStringHasher</code>",id:"anytostringhasher",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Parameters",id:"parameters",level:4},{value:"<code>arrayHasher</code>",id:"arrayhasher",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Type parameters",id:"type-parameters",level:5},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>bigintHasher</code>",id:"biginthasher",level:3},{value:"Definition",id:"definition-6",level:4},{value:"<code>booleanHasher</code>",id:"booleanhasher",level:3},{value:"Definition",id:"definition-7",level:4},{value:"<code>createValueOfHasher</code>",id:"createvalueofhasher",level:3},{value:"Definition",id:"definition-8",level:4},{value:"Type parameters",id:"type-parameters-1",level:5},{value:"Parameters",id:"parameters-2",level:4},{value:"<code>dateHasher</code>",id:"datehasher",level:3},{value:"Definition",id:"definition-9",level:4},{value:"<code>defaultHasher</code>",id:"defaulthasher",level:3},{value:"Definition",id:"definition-10",level:4},{value:"<code>numberHasher</code>",id:"numberhasher",level:3},{value:"Definition",id:"definition-11",level:4},{value:"<code>objectDeepHasher</code>",id:"objectdeephasher",level:3},{value:"Definition",id:"definition-12",level:4},{value:"Type parameters",id:"type-parameters-2",level:5},{value:"<code>objectHasher</code>",id:"objecthasher",level:3},{value:"Definition",id:"definition-13",level:4},{value:"Type parameters",id:"type-parameters-3",level:5},{value:"Parameters",id:"parameters-3",level:4},{value:"<code>objectShallowHasher</code>",id:"objectshallowhasher",level:3},{value:"Definition",id:"definition-14",level:4},{value:"Type parameters",id:"type-parameters-4",level:5},{value:"<code>streamSourceHasher</code>",id:"streamsourcehasher",level:3},{value:"Definition",id:"definition-15",level:4},{value:"Type parameters",id:"type-parameters-5",level:5},{value:"Parameters",id:"parameters-4",level:4},{value:"<code>stringCaseInsensitiveHasher</code>",id:"stringcaseinsensitivehasher",level:3},{value:"Definition",id:"definition-16",level:4},{value:"<code>stringHasher</code>",id:"stringhasher",level:3},{value:"Definition",id:"definition-17",level:4},{value:"<code>tupleSymmetric</code>",id:"tuplesymmetric",level:3},{value:"Definition",id:"definition-18",level:4},{value:"Type parameters",id:"type-parameters-6",level:5},{value:"Parameters",id:"parameters-5",level:4}],b={toc:f},H="wrapper";function v(e){var a=e,{components:n}=a,r=m(a,["components"]);return(0,t.yg)(H,g(h(h({},b),r),{components:n,mdxType:"MDXLayout"}),(0,t.yg)("h1",h({},{id:"namespace-hasher"}),(0,t.yg)("inlineCode",{parentName:"h1"},"namespace Hasher")),(0,t.yg)("p",null,"Interface used to hash objects for hashed collections."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Companion interface:")," ",(0,t.yg)("a",h({parentName:"p"},{href:"/api/rimbu/hashed/Hasher/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Hasher<UK>"))),(0,t.yg)("h2",h({},{id:"functions"}),"Functions"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",h({},{id:"anydeephasher"}),(0,t.yg)("inlineCode",{parentName:"h3"},"anyDeepHasher")),(0,t.yg)("p",null,"Returns a Hasher instance that hashes any value, and traverses into an object or array to hash its elements.")),(0,t.yg)("h4",h({},{id:"definition"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function anyDeepHasher(): "),(0,t.yg)("a",h({parentName:"p"},{href:"/api/rimbu/hashed/Hasher/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Hasher")),(0,t.yg)("inlineCode",{parentName:"p"},"<any>;"))),(0,t.yg)("admonition",h({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",h({parentName:"pre"},{className:"language-ts"}),"const h = Hasher.anyDeepHasher()\nconsole.log(h.hash({ a: 1, b: 2 }) === h.hash({ b: 2, a: 1 }))\n// => true\nconsole.log(h.hash([{ a: 1, b: 2 }]) === h.hash([{ b: 2, a: 1 }]))\n// => true\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",h({},{id:"anyflathasher"}),(0,t.yg)("inlineCode",{parentName:"h3"},"anyFlatHasher")),(0,t.yg)("p",null,"Returns a Hasher instance that hashes any value, but never traverses into an object or array to hash its elements. In those cases it will use toString.")),(0,t.yg)("h4",h({},{id:"definition-1"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function anyFlatHasher(): "),(0,t.yg)("a",h({parentName:"p"},{href:"/api/rimbu/hashed/Hasher/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Hasher")),(0,t.yg)("inlineCode",{parentName:"p"},"<any>;"))),(0,t.yg)("admonition",h({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",h({parentName:"pre"},{className:"language-ts"}),"const h = Hasher.anyFlatHasher()\nconsole.log(h.hash({ a: 1, b: 2 }) === h.hash({ b: 2, a: 1 }))\n// => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",h({},{id:"anyjsonstringhasher"}),(0,t.yg)("inlineCode",{parentName:"h3"},"anyJsonStringHasher")),(0,t.yg)("p",null,"Returns a Hasher instance that hashes any value by hashing the string resulting from applying JSON.stringify to the value.")),(0,t.yg)("h4",h({},{id:"definition-2"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function anyJsonStringHasher(): "),(0,t.yg)("a",h({parentName:"p"},{href:"/api/rimbu/hashed/Hasher/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Hasher")),(0,t.yg)("inlineCode",{parentName:"p"},"<any>;"))),(0,t.yg)("admonition",h({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",h({parentName:"pre"},{className:"language-ts"}),"const h = Hasher.anyJsonStringHasher()\nconsole.log(h.hash({ a: 1, b: 2 }) === h.hash({ b: 2, a: 1 }))\n// => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",h({},{id:"anyshallowhasher"}),(0,t.yg)("inlineCode",{parentName:"h3"},"anyShallowHasher")),(0,t.yg)("p",null,"Returns a Hasher instance that hashes any value, but only traverses into an object or array to hash its elements one level deep. After one level, it will use toString.")),(0,t.yg)("h4",h({},{id:"definition-3"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function anyShallowHasher(): "),(0,t.yg)("a",h({parentName:"p"},{href:"/api/rimbu/hashed/Hasher/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Hasher")),(0,t.yg)("inlineCode",{parentName:"p"},"<any>;"))),(0,t.yg)("admonition",h({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",h({parentName:"pre"},{className:"language-ts"}),"const h = Hasher.anyShallowHasher()\nconsole.log(h.hash({ a: 1, b: 2 }) === h.hash({ b: 2, a: 1 }))\n// => true\nconsole.log(h.hash([{ a: 1, b: 2 }]) === h.hash([{ b: 2, a: 1 }]))\n// => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",h({},{id:"anytostringhasher"}),(0,t.yg)("inlineCode",{parentName:"h3"},"anyToStringHasher")),(0,t.yg)("p",null,"Returns a Hasher instance that hashes the string representation of any value")),(0,t.yg)("h4",h({},{id:"definition-4"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function anyToStringHasher(maxStepBits?: number): "),(0,t.yg)("a",h({parentName:"p"},{href:"/api/rimbu/hashed/Hasher/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Hasher")),(0,t.yg)("inlineCode",{parentName:"p"},"<any>;"))),(0,t.yg)("h4",h({},{id:"parameters"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",h({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",h({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",h({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",h({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"maxStepBits")),(0,t.yg)("td",h({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"number")),(0,t.yg)("td",h({parentName:"tr"},{align:null}),"the maximum amount of samples to take from the string")))),(0,t.yg)("admonition",h({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",h({parentName:"pre"},{className:"language-ts"}),"const h = Hasher.anyToStringHasher()\nh.hash([1, 3, 'a'])\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",h({},{id:"arrayhasher"}),(0,t.yg)("inlineCode",{parentName:"h3"},"arrayHasher")),(0,t.yg)("p",null,"Returns a Hasher that hashes arrays of elements by sampling the array and using the given ",(0,t.yg)("inlineCode",{parentName:"p"},"itemHasher")," to hash the sampled elements.")),(0,t.yg)("h4",h({},{id:"definition-5"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function arrayHasher<T = any>(options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"itemHasher?: "),(0,t.yg)("a",h({parentName:"p"},{href:"/api/rimbu/hashed/Hasher/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Hasher")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"maxStepBits?: number;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",h({parentName:"p"},{href:"/api/rimbu/hashed/Hasher/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Hasher")),(0,t.yg)("inlineCode",{parentName:"p"},"<readonly T[]>;"))),(0,t.yg)("h5",h({},{id:"type-parameters"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",h({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",h({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",h({parentName:"tr"},{align:null}),"T"),(0,t.yg)("td",h({parentName:"tr"},{align:null}),"the array element type")))),(0,t.yg)("h4",h({},{id:"parameters-1"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",h({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",h({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",h({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",h({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",h({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"itemHasher?: "),(0,t.yg)("a",h({parentName:"td"},{href:"/api/rimbu/hashed/Hasher/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Hasher")),(0,t.yg)("inlineCode",{parentName:"td"},"<T>;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"maxStepBits?: number;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",h({parentName:"tr"},{align:null}),"(optional) an object containing the following items:",(0,t.yg)("br",null)," - itemHasher: (optional) a Hasher instance used to hash elements in the array",(0,t.yg)("br",null)," - maxStepBits: (optional) the amount of bits to determine the maximum amount of array elements to process")))),(0,t.yg)("admonition",h({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",h({parentName:"pre"},{className:"language-ts"}),"const h = Hasher.arrayHasher()\nconsole.log(h.hash([1, 2, 3] === h.hash([1, 3, 2])))\n// => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",h({},{id:"biginthasher"}),(0,t.yg)("inlineCode",{parentName:"h3"},"bigintHasher")),(0,t.yg)("p",null,"Returns a Hasher instance that hashes bigints.")),(0,t.yg)("h4",h({},{id:"definition-6"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function bigintHasher(): "),(0,t.yg)("a",h({parentName:"p"},{href:"/api/rimbu/hashed/Hasher/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Hasher")),(0,t.yg)("inlineCode",{parentName:"p"},"<bigint>;"))),(0,t.yg)("admonition",h({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",h({parentName:"pre"},{className:"language-ts"}),"const h = Hasher.bigintHasher()\nconsole.log(h.hash(BigInt(5)) === h.hash(BigInt(10)))\n// => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",h({},{id:"booleanhasher"}),(0,t.yg)("inlineCode",{parentName:"h3"},"booleanHasher")),(0,t.yg)("p",null,"Returns a Hasher instance that hashes booleans.")),(0,t.yg)("h4",h({},{id:"definition-7"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function booleanHasher(): "),(0,t.yg)("a",h({parentName:"p"},{href:"/api/rimbu/hashed/Hasher/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Hasher")),(0,t.yg)("inlineCode",{parentName:"p"},"<boolean>;"))),(0,t.yg)("admonition",h({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",h({parentName:"pre"},{className:"language-ts"}),"const h = Hasher.booleanHasher()\nconsole.log(h.hash(true) === h.hash(false))\n// => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",h({},{id:"createvalueofhasher"}),(0,t.yg)("inlineCode",{parentName:"h3"},"createValueOfHasher")),(0,t.yg)("p",null,"Returns a Hasher instance that hashes the ",(0,t.yg)("inlineCode",{parentName:"p"},".valueOf")," value of the given object using the given ",(0,t.yg)("inlineCode",{parentName:"p"},"valueHasher")," for instances of given ",(0,t.yg)("inlineCode",{parentName:"p"},"cls")," class.")),(0,t.yg)("h4",h({},{id:"definition-8"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function createValueOfHasher<T extends {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"valueOf(): V;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}, V>(cls: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"new (): T;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}, valueHasher?: "),(0,t.yg)("a",h({parentName:"p"},{href:"/api/rimbu/hashed/Hasher/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Hasher")),(0,t.yg)("inlineCode",{parentName:"p"},"<V>): "),(0,t.yg)("a",h({parentName:"p"},{href:"/api/rimbu/hashed/Hasher/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Hasher")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,t.yg)("h5",h({},{id:"type-parameters-1"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",h({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",h({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",h({parentName:"tr"},{align:null}),"T"),(0,t.yg)("td",h({parentName:"tr"},{align:null}),"the input object type")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",h({parentName:"tr"},{align:null}),"V"),(0,t.yg)("td",h({parentName:"tr"},{align:null}),"the .valueOf property type")))),(0,t.yg)("h4",h({},{id:"parameters-2"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",h({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",h({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",h({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",h({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"cls")),(0,t.yg)("td",h({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"new (): T;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",h({parentName:"tr"},{align:null}),"the class containing the contructur to check for validity of a given object")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",h({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"valueHasher")),(0,t.yg)("td",h({parentName:"tr"},{align:null}),(0,t.yg)("a",h({parentName:"td"},{href:"/api/rimbu/hashed/Hasher/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Hasher")),(0,t.yg)("inlineCode",{parentName:"td"},"<V>")),(0,t.yg)("td",h({parentName:"tr"},{align:null}),"the Hasher instance to use for the ",(0,t.yg)("inlineCode",{parentName:"td"},".valueOf")," values")))),(0,t.yg)("admonition",h({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",h({parentName:"pre"},{className:"language-ts"}),"const h = Hasher.createValueOfHasher(Date)\nconsole.log(h.isValid(new Boolean(true)))\n// => false\nconst d1 = new Date()\nconst d2 = new Date(d1)\nconsole.log(h.hash(d1) === h.hash(d2))\n// => true\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",h({},{id:"datehasher"}),(0,t.yg)("inlineCode",{parentName:"h3"},"dateHasher")),(0,t.yg)("p",null,"Returns a Hasher instance that hashes Dates.")),(0,t.yg)("h4",h({},{id:"definition-9"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function dateHasher(): "),(0,t.yg)("a",h({parentName:"p"},{href:"/api/rimbu/hashed/Hasher/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Hasher")),(0,t.yg)("inlineCode",{parentName:"p"},"<Date>;"))),(0,t.yg)("admonition",h({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",h({parentName:"pre"},{className:"language-ts"}),"const h = Hasher.dateHasher()\nconst d1 = new Date()\nconst d2 = new Date(d1)\nconsole.log(h.hash(d1) === h.hash(d2))\n// => true\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",h({},{id:"defaulthasher"}),(0,t.yg)("inlineCode",{parentName:"h3"},"defaultHasher")),(0,t.yg)("p",null,"undocumented")),(0,t.yg)("h4",h({},{id:"definition-10"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function defaultHasher(): "),(0,t.yg)("a",h({parentName:"p"},{href:"/api/rimbu/hashed/Hasher/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Hasher")),(0,t.yg)("inlineCode",{parentName:"p"},"<any>;")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",h({},{id:"numberhasher"}),(0,t.yg)("inlineCode",{parentName:"h3"},"numberHasher")),(0,t.yg)("p",null,"Returns a Hasher instance that hashes numbers, including 'special' values like NaN and infinities.")),(0,t.yg)("h4",h({},{id:"definition-11"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function numberHasher(): "),(0,t.yg)("a",h({parentName:"p"},{href:"/api/rimbu/hashed/Hasher/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Hasher")),(0,t.yg)("inlineCode",{parentName:"p"},"<number>;"))),(0,t.yg)("admonition",h({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",h({parentName:"pre"},{className:"language-ts"}),"const h = Hasher.numberHasher()\nconsole.log(h.hash(Number.POSITIVE_INFINITY) === h.hash(Number.NEGATIVE_INFINITY))\n// => false\nconsole.log(h.hash(Number.NaN) === h.hash(Number.NaN))\n// => true\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",h({},{id:"objectdeephasher"}),(0,t.yg)("inlineCode",{parentName:"h3"},"objectDeepHasher")),(0,t.yg)("p",null,"Returns a Hasher instance that hashes objects of key type K and value type V. If a value if an object or array, it will recursively hash its values.  ")),(0,t.yg)("h4",h({},{id:"definition-12"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function objectDeepHasher<K extends string "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"},"number"),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"},"symbol, V = any>():"),(0,t.yg)("a",h({parentName:"p"},{href:"/api/rimbu/hashed/Hasher/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Hasher")),(0,t.yg)("inlineCode",{parentName:"p"},"<Record<K, V>>;"))),(0,t.yg)("h5",h({},{id:"type-parameters-2"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",h({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",h({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",h({parentName:"tr"},{align:null}),"K"),(0,t.yg)("td",h({parentName:"tr"},{align:null}),"the key type")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",h({parentName:"tr"},{align:null}),"V"),(0,t.yg)("td",h({parentName:"tr"},{align:null}),"the value type")))),(0,t.yg)("admonition",h({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"be careful with circular structures, they can cause an infinite loop")),(0,t.yg)("admonition",h({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",h({parentName:"pre"},{className:"language-ts"}),"const h = Hasher.objectDeepHasher()\nconsole.log(h.hash({ a: 1, b: 2 }) === h.hash({ b: 2, a: 1 }))\n// => true\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",h({},{id:"objecthasher"}),(0,t.yg)("inlineCode",{parentName:"h3"},"objectHasher")),(0,t.yg)("p",null,"Returns a Hasher instance that hashes objects of key type K and value type V.")),(0,t.yg)("h4",h({},{id:"definition-13"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function objectHasher<K extends string "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"},"number"),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," symbol, V = any>(options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"keyHasher: "),(0,t.yg)("a",h({parentName:"p"},{href:"/api/rimbu/hashed/Hasher/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Hasher")),(0,t.yg)("inlineCode",{parentName:"p"},"<K>;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"valueHasher: "),(0,t.yg)("a",h({parentName:"p"},{href:"/api/rimbu/hashed/Hasher/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Hasher")),(0,t.yg)("inlineCode",{parentName:"p"},"<V>;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",h({parentName:"p"},{href:"/api/rimbu/hashed/Hasher/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Hasher")),(0,t.yg)("inlineCode",{parentName:"p"},"<Record<K, V>>;"))),(0,t.yg)("h5",h({},{id:"type-parameters-3"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",h({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",h({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",h({parentName:"tr"},{align:null}),"K"),(0,t.yg)("td",h({parentName:"tr"},{align:null}),"the key type")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",h({parentName:"tr"},{align:null}),"V"),(0,t.yg)("td",h({parentName:"tr"},{align:null}),"the value type")))),(0,t.yg)("h4",h({},{id:"parameters-3"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",h({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",h({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",h({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",h({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",h({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"keyHasher: "),(0,t.yg)("a",h({parentName:"td"},{href:"/api/rimbu/hashed/Hasher/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Hasher")),(0,t.yg)("inlineCode",{parentName:"td"},"<K>;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"valueHasher: "),(0,t.yg)("a",h({parentName:"td"},{href:"/api/rimbu/hashed/Hasher/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Hasher")),(0,t.yg)("inlineCode",{parentName:"td"},"<V>;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",h({parentName:"tr"},{align:null}),"(optional) an object containing:",(0,t.yg)("br",null)," - keyHasher: (optional) a Hasher instance that is used to hash object keys",(0,t.yg)("br",null)," - valueHasher: (optional) a Hasher instance that is used to hash object values")))),(0,t.yg)("admonition",h({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",h({parentName:"pre"},{className:"language-ts"}),"const h = Hasher.objectHasher()\nconsole.log(h.hash({ a: 1, b: 2 }) === h.hash({ b: 2, a: 1 }))\n// => true\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",h({},{id:"objectshallowhasher"}),(0,t.yg)("inlineCode",{parentName:"h3"},"objectShallowHasher")),(0,t.yg)("p",null,"Returns a Hasher instance that hashes objects of key type K and value type V. If a value if an object or array, it will convert those values to a string.")),(0,t.yg)("h4",h({},{id:"definition-14"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function objectShallowHasher<K extends string "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"},"number"),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"},"symbol, V = any>():"),(0,t.yg)("a",h({parentName:"p"},{href:"/api/rimbu/hashed/Hasher/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Hasher")),(0,t.yg)("inlineCode",{parentName:"p"},"<Record<K, V>>;"))),(0,t.yg)("h5",h({},{id:"type-parameters-4"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",h({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",h({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",h({parentName:"tr"},{align:null}),"K"),(0,t.yg)("td",h({parentName:"tr"},{align:null}),"the key type")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",h({parentName:"tr"},{align:null}),"V"),(0,t.yg)("td",h({parentName:"tr"},{align:null}),"the value type")))),(0,t.yg)("admonition",h({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",h({parentName:"pre"},{className:"language-ts"}),"const h = Hasher.objectShallowHasher()\nconsole.log(h.hash({ a: 1, b: 2 }) === h.hash({ b: 2, a: 1 }))\n// => true\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",h({},{id:"streamsourcehasher"}),(0,t.yg)("inlineCode",{parentName:"h3"},"streamSourceHasher")),(0,t.yg)("p",null,"Returns a Hasher instance that hashes any StreamSource limited to a certain amount of elements to prevent haning on infinite streams.")),(0,t.yg)("h4",h({},{id:"definition-15"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function streamSourceHasher<T = any>(options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"itemHasher?: "),(0,t.yg)("a",h({parentName:"p"},{href:"/api/rimbu/hashed/Hasher/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Hasher")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"maxStepBits?: number;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",h({parentName:"p"},{href:"/api/rimbu/hashed/Hasher/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Hasher")),(0,t.yg)("inlineCode",{parentName:"p"},"<"),(0,t.yg)("a",h({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>>;"))),(0,t.yg)("h5",h({},{id:"type-parameters-5"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",h({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",h({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",h({parentName:"tr"},{align:null}),"T"),(0,t.yg)("td",h({parentName:"tr"},{align:null}),"the StreamSource element type")))),(0,t.yg)("h4",h({},{id:"parameters-4"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",h({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",h({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",h({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",h({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",h({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"itemHasher?: "),(0,t.yg)("a",h({parentName:"td"},{href:"/api/rimbu/hashed/Hasher/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Hasher")),(0,t.yg)("inlineCode",{parentName:"td"},"<T>;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"maxStepBits?: number;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",h({parentName:"tr"},{align:null}),"(optional) an object containing the following items:",(0,t.yg)("br",null)," - itemHasher: (optional) a Hasher instance used to hash elements in the array",(0,t.yg)("br",null)," - maxStepBits: (optional) the amount of bits to determine the maximum amount of array elements to process")))),(0,t.yg)("admonition",h({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",h({parentName:"pre"},{className:"language-ts"}),"const h = Hasher.streamSourceHasher()\nh.hash(Stream.random())\n// infinite stream but will not hang due to the max step limit\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",h({},{id:"stringcaseinsensitivehasher"}),(0,t.yg)("inlineCode",{parentName:"h3"},"stringCaseInsensitiveHasher")),(0,t.yg)("p",null,"undocumented")),(0,t.yg)("h4",h({},{id:"definition-16"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function stringCaseInsensitiveHasher(): "),(0,t.yg)("a",h({parentName:"p"},{href:"/api/rimbu/hashed/Hasher/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Hasher")),(0,t.yg)("inlineCode",{parentName:"p"},"<string>;")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",h({},{id:"stringhasher"}),(0,t.yg)("inlineCode",{parentName:"h3"},"stringHasher")),(0,t.yg)("p",null,"Returns a Hasher instance for string values.")),(0,t.yg)("h4",h({},{id:"definition-17"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function stringHasher(): "),(0,t.yg)("a",h({parentName:"p"},{href:"/api/rimbu/hashed/Hasher/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Hasher")),(0,t.yg)("inlineCode",{parentName:"p"},"<string>;"))),(0,t.yg)("admonition",h({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",h({parentName:"pre"},{className:"language-ts"}),"const h = Hasher.stringHasher()\nh.hash('abc')\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",h({},{id:"tuplesymmetric"}),(0,t.yg)("inlineCode",{parentName:"h3"},"tupleSymmetric")),(0,t.yg)("p",null,"Returns a Hasher that will return equal hash values for values in a tuple regardless of their order, and uses the given ",(0,t.yg)("inlineCode",{parentName:"p"},"hasher")," function to hash the tuple elements.")),(0,t.yg)("h4",h({},{id:"definition-18"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function tupleSymmetric<T>(hasher?: "),(0,t.yg)("a",h({parentName:"p"},{href:"/api/rimbu/hashed/Hasher/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Hasher")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>): "),(0,t.yg)("a",h({parentName:"p"},{href:"/api/rimbu/hashed/Hasher/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Hasher")),(0,t.yg)("inlineCode",{parentName:"p"},"<readonly [T, T]>;"))),(0,t.yg)("h5",h({},{id:"type-parameters-6"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",h({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",h({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",h({parentName:"tr"},{align:null}),"T"),(0,t.yg)("td",h({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",h({},{id:"parameters-5"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",h({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",h({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",h({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",h({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"hasher")),(0,t.yg)("td",h({parentName:"tr"},{align:null}),(0,t.yg)("a",h({parentName:"td"},{href:"/api/rimbu/hashed/Hasher/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Hasher")),(0,t.yg)("inlineCode",{parentName:"td"},"<T>")),(0,t.yg)("td",h({parentName:"tr"},{align:null}),"the Hasher instance to use for tuple elements")))),(0,t.yg)("admonition",h({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",h({parentName:"pre"},{className:"language-ts"}),"const h = Hasher.tupleSymmetric()\nconsole.log(h.hash(['abc', 'def']) === h.hash(['def', 'abc']))\n")))))}v.isMDXComponent=!0}}]);