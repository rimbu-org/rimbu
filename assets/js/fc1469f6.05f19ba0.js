"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[71378],{15680:(e,n,a)=>{a.d(n,{xA:()=>g,yg:()=>N});var t=a(96540);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function p(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var m=t.createContext({}),o=function(e){var n=t.useContext(m),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},g=function(e){var n=o(e.components);return t.createElement(m.Provider,{value:n},e.children)},d="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,l=e.originalType,m=e.parentName,g=p(e,["components","mdxType","originalType","parentName"]),d=o(a),u=r,N=d["".concat(m,".").concat(u)]||d[u]||y[u]||l;return a?t.createElement(N,i(i({ref:n},g),{},{components:a})):t.createElement(N,i({ref:n},g))}));function N(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=u;var p={};for(var m in n)hasOwnProperty.call(n,m)&&(p[m]=n[m]);p.originalType=e,p[d]="string"==typeof e?e:r,i[1]=p;for(var o=2;o<l;o++)i[o]=a[o];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},10128:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>h,contentTitle:()=>s,default:()=>C,frontMatter:()=>N,metadata:()=>c,toc:()=>f});var t=a(15680),r=Object.defineProperty,l=Object.defineProperties,i=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,m=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable,g=(e,n,a)=>n in e?r(e,n,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[n]=a,d=(e,n)=>{for(var a in n||(n={}))m.call(n,a)&&g(e,a,n[a]);if(p)for(var a of p(n))o.call(n,a)&&g(e,a,n[a]);return e},y=(e,n)=>l(e,i(n)),u=(e,n)=>{var a={};for(var t in e)m.call(e,t)&&n.indexOf(t)<0&&(a[t]=e[t]);if(null!=e&&p)for(var t of p(e))n.indexOf(t)<0&&o.call(e,t)&&(a[t]=e[t]);return a};const N={title:"Stream.NonEmpty<T>",slug:"/rimbu/stream/Stream/NonEmpty/interface"},s="interface Stream.NonEmpty<T>",c={unversionedId:"rimbu_stream/Stream/NonEmpty.interface",id:"rimbu_stream/Stream/NonEmpty.interface",title:"Stream.NonEmpty<T>",description:"A non-empty and possibly infinite sequence of elements of type T. See the Stream documentation and the Stream API documentation",source:"@site/api/rimbu_stream/Stream/NonEmpty.interface.mdx",sourceDirName:"rimbu_stream/Stream",slug:"/rimbu/stream/Stream/NonEmpty/interface",permalink:"/api/rimbu/stream/Stream/NonEmpty/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"Stream.NonEmpty<T>",slug:"/rimbu/stream/Stream/NonEmpty/interface"},sidebar:"defaultSidebar",previous:{title:"Stream (namespace)",permalink:"/api/rimbu/stream/Stream/namespace"},next:{title:"Stream<T>",permalink:"/api/rimbu/stream/Stream/interface"}},h={},f=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>[Symbol.iterator]</code>",id:"symboliterator",level:3},{value:"Definition",id:"definition",level:4},{value:"Overrides",id:"overrides",level:4},{value:"<code>append</code>",id:"append",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"<code>asNormal</code>",id:"asnormal",level:3},{value:"Definition",id:"definition-2",level:4},{value:"<code>assumeNonEmpty</code>",id:"assumenonempty",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"<code>collect</code>",id:"collect",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"<code>concat</code>",id:"concat",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Overrides",id:"overrides-4",level:4},{value:"<code>contains</code>",id:"contains",level:3},{value:"Definition",id:"definition-6",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Overrides",id:"overrides-5",level:4},{value:"<code>containsSlice</code>",id:"containsslice",level:3},{value:"Definition",id:"definition-7",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"Overrides",id:"overrides-6",level:4},{value:"<code>count</code>",id:"count",level:3},{value:"Definition",id:"definition-8",level:4},{value:"Overrides",id:"overrides-7",level:4},{value:"<code>countElement</code>",id:"countelement",level:3},{value:"Definition",id:"definition-9",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"Overrides",id:"overrides-8",level:4},{value:"<code>distinctPrevious</code>",id:"distinctprevious",level:3},{value:"Definition",id:"definition-10",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"Overrides",id:"overrides-9",level:4},{value:"<code>drop</code>",id:"drop",level:3},{value:"Definition",id:"definition-11",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"Overrides",id:"overrides-10",level:4},{value:"<code>dropWhile</code>",id:"dropwhile",level:3},{value:"Definition",id:"definition-12",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"Overrides",id:"overrides-11",level:4},{value:"<code>elementAt</code>",id:"elementat",level:3},{value:"Definitions",id:"definitions",level:4},{value:"Parameters",id:"parameters-9",level:4},{value:"Overrides",id:"overrides-12",level:4},{value:"<code>equals</code>",id:"equals",level:3},{value:"Definition",id:"definition-13",level:4},{value:"Parameters",id:"parameters-10",level:4},{value:"Overrides",id:"overrides-13",level:4},{value:"<code>every</code>",id:"every",level:3},{value:"Definition",id:"definition-14",level:4},{value:"Parameters",id:"parameters-11",level:4},{value:"Overrides",id:"overrides-14",level:4},{value:"<code>filter</code>",id:"filter",level:3},{value:"Definitions",id:"definitions-1",level:4},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Parameters",id:"parameters-12",level:4},{value:"Overrides",id:"overrides-15",level:4},{value:"<code>filterPure</code>",id:"filterpure",level:3},{value:"Definitions",id:"definitions-2",level:4},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"Parameters",id:"parameters-13",level:4},{value:"Overrides",id:"overrides-16",level:4},{value:"<code>find</code>",id:"find",level:3},{value:"Definitions",id:"definitions-3",level:4},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Parameters",id:"parameters-14",level:4},{value:"Overrides",id:"overrides-17",level:4},{value:"<code>first</code>",id:"first",level:3},{value:"Definition",id:"definition-15",level:4},{value:"Overrides",id:"overrides-18",level:4},{value:"<code>flatMap</code>",id:"flatmap",level:3},{value:"Definitions",id:"definitions-4",level:4},{value:"Type parameters",id:"type-parameters-6",level:4},{value:"Parameters",id:"parameters-15",level:4},{value:"Overrides",id:"overrides-19",level:4},{value:"<code>flatZip</code>",id:"flatzip",level:3},{value:"Definitions",id:"definitions-5",level:4},{value:"Type parameters",id:"type-parameters-7",level:4},{value:"Parameters",id:"parameters-16",level:4},{value:"Overrides",id:"overrides-20",level:4},{value:"<code>fold</code>",id:"fold",level:3},{value:"Definition",id:"definition-16",level:4},{value:"Type parameters",id:"type-parameters-8",level:4},{value:"Parameters",id:"parameters-17",level:4},{value:"Overrides",id:"overrides-21",level:4},{value:"<code>foldStream</code>",id:"foldstream",level:3},{value:"Definitions",id:"definitions-6",level:4},{value:"Type parameters",id:"type-parameters-9",level:4},{value:"Parameters",id:"parameters-18",level:4},{value:"Overrides",id:"overrides-22",level:4},{value:"<code>forEach</code>",id:"foreach",level:3},{value:"Definition",id:"definition-17",level:4},{value:"Parameters",id:"parameters-19",level:4},{value:"Overrides",id:"overrides-23",level:4},{value:"<code>forEachPure</code>",id:"foreachpure",level:3},{value:"Definition",id:"definition-18",level:4},{value:"Type parameters",id:"type-parameters-10",level:4},{value:"Parameters",id:"parameters-20",level:4},{value:"Overrides",id:"overrides-24",level:4},{value:"<code>groupBy</code>",id:"groupby",level:3},{value:"Definitions",id:"definitions-7",level:4},{value:"Type parameters",id:"type-parameters-11",level:4},{value:"Parameters",id:"parameters-21",level:4},{value:"Overrides",id:"overrides-25",level:4},{value:"<code>indexed</code>",id:"indexed",level:3},{value:"Definition",id:"definition-19",level:4},{value:"Parameters",id:"parameters-22",level:4},{value:"Overrides",id:"overrides-26",level:4},{value:"<code>indexOf</code>",id:"indexof",level:3},{value:"Definition",id:"definition-20",level:4},{value:"Parameters",id:"parameters-23",level:4},{value:"Overrides",id:"overrides-27",level:4},{value:"<code>indexWhere</code>",id:"indexwhere",level:3},{value:"Definition",id:"definition-21",level:4},{value:"Parameters",id:"parameters-24",level:4},{value:"Overrides",id:"overrides-28",level:4},{value:"<code>indicesOf</code>",id:"indicesof",level:3},{value:"Definition",id:"definition-22",level:4},{value:"Parameters",id:"parameters-25",level:4},{value:"Overrides",id:"overrides-29",level:4},{value:"<code>indicesWhere</code>",id:"indiceswhere",level:3},{value:"Definition",id:"definition-23",level:4},{value:"Parameters",id:"parameters-26",level:4},{value:"Overrides",id:"overrides-30",level:4},{value:"<code>intersperse</code>",id:"intersperse",level:3},{value:"Definition",id:"definition-24",level:4},{value:"Parameters",id:"parameters-27",level:4},{value:"Overrides",id:"overrides-31",level:4},{value:"<code>join</code>",id:"join",level:3},{value:"Definition",id:"definition-25",level:4},{value:"Parameters",id:"parameters-28",level:4},{value:"Overrides",id:"overrides-32",level:4},{value:"<code>last</code>",id:"last",level:3},{value:"Definition",id:"definition-26",level:4},{value:"Overrides",id:"overrides-33",level:4},{value:"<code>map</code>",id:"map",level:3},{value:"Definition",id:"definition-27",level:4},{value:"Type parameters",id:"type-parameters-12",level:4},{value:"Parameters",id:"parameters-29",level:4},{value:"Overrides",id:"overrides-34",level:4},{value:"<code>mapPure</code>",id:"mappure",level:3},{value:"Definition",id:"definition-28",level:4},{value:"Type parameters",id:"type-parameters-13",level:4},{value:"Parameters",id:"parameters-30",level:4},{value:"Overrides",id:"overrides-35",level:4},{value:"<code>max</code>",id:"max",level:3},{value:"Definition",id:"definition-29",level:4},{value:"Overrides",id:"overrides-36",level:4},{value:"<code>maxBy</code>",id:"maxby",level:3},{value:"Definition",id:"definition-30",level:4},{value:"Parameters",id:"parameters-31",level:4},{value:"Overrides",id:"overrides-37",level:4},{value:"<code>min</code>",id:"min",level:3},{value:"Definition",id:"definition-31",level:4},{value:"Overrides",id:"overrides-38",level:4},{value:"<code>minBy</code>",id:"minby",level:3},{value:"Definition",id:"definition-32",level:4},{value:"Parameters",id:"parameters-32",level:4},{value:"Overrides",id:"overrides-39",level:4},{value:"<code>mkGroup</code>",id:"mkgroup",level:3},{value:"Definition",id:"definition-33",level:4},{value:"Parameters",id:"parameters-33",level:4},{value:"Overrides",id:"overrides-40",level:4},{value:"<code>partition</code>",id:"partition",level:3},{value:"Definitions",id:"definitions-8",level:4},{value:"Type parameters",id:"type-parameters-14",level:4},{value:"Parameters",id:"parameters-34",level:4},{value:"Overrides",id:"overrides-41",level:4},{value:"<code>prepend</code>",id:"prepend",level:3},{value:"Definition",id:"definition-34",level:4},{value:"Parameters",id:"parameters-35",level:4},{value:"Overrides",id:"overrides-42",level:4},{value:"<code>reduce</code>",id:"reduce",level:3},{value:"Definitions",id:"definitions-9",level:4},{value:"Type parameters",id:"type-parameters-15",level:4},{value:"Parameters",id:"parameters-36",level:4},{value:"Overrides",id:"overrides-43",level:4},{value:"<code>reduceStream</code>",id:"reducestream",level:3},{value:"Definitions",id:"definitions-10",level:4},{value:"Type parameters",id:"type-parameters-16",level:4},{value:"Parameters",id:"parameters-37",level:4},{value:"Overrides",id:"overrides-44",level:4},{value:"<code>repeat</code>",id:"repeat",level:3},{value:"Definition",id:"definition-35",level:4},{value:"Parameters",id:"parameters-38",level:4},{value:"Overrides",id:"overrides-45",level:4},{value:"<code>single</code>",id:"single",level:3},{value:"Definitions",id:"definitions-11",level:4},{value:"Overrides",id:"overrides-46",level:4},{value:"<code>some</code>",id:"some",level:3},{value:"Definition",id:"definition-36",level:4},{value:"Parameters",id:"parameters-39",level:4},{value:"Overrides",id:"overrides-47",level:4},{value:"<code>splitOn</code>",id:"spliton",level:3},{value:"Definitions",id:"definitions-12",level:4},{value:"Type parameters",id:"type-parameters-17",level:4},{value:"Parameters",id:"parameters-40",level:4},{value:"Overrides",id:"overrides-48",level:4},{value:"<code>splitOnSlice</code>",id:"splitonslice",level:3},{value:"Definitions",id:"definitions-13",level:4},{value:"Type parameters",id:"type-parameters-18",level:4},{value:"Parameters",id:"parameters-41",level:4},{value:"Overrides",id:"overrides-49",level:4},{value:"<code>splitWhere</code>",id:"splitwhere",level:3},{value:"Definitions",id:"definitions-14",level:4},{value:"Type parameters",id:"type-parameters-19",level:4},{value:"Parameters",id:"parameters-42",level:4},{value:"Overrides",id:"overrides-50",level:4},{value:"<code>stream</code>",id:"stream",level:3},{value:"Definition",id:"definition-37",level:4},{value:"Overrides",id:"overrides-51",level:4},{value:"<code>take</code>",id:"take",level:3},{value:"Definition",id:"definition-38",level:4},{value:"Parameters",id:"parameters-43",level:4},{value:"Overrides",id:"overrides-52",level:4},{value:"<code>takeWhile</code>",id:"takewhile",level:3},{value:"Definition",id:"definition-39",level:4},{value:"Parameters",id:"parameters-44",level:4},{value:"Overrides",id:"overrides-53",level:4},{value:"<code>toArray</code>",id:"toarray",level:3},{value:"Definition",id:"definition-40",level:4},{value:"Overrides",id:"overrides-54",level:4},{value:"<code>toJSON</code>",id:"tojson",level:3},{value:"Definition",id:"definition-41",level:4},{value:"Overrides",id:"overrides-55",level:4},{value:"<code>toString</code>",id:"tostring",level:3},{value:"Definition",id:"definition-42",level:4},{value:"Overrides",id:"overrides-56",level:4},{value:"<code>transform</code>",id:"transform",level:3},{value:"Definitions",id:"definitions-15",level:4},{value:"Type parameters",id:"type-parameters-20",level:4},{value:"Parameters",id:"parameters-45",level:4},{value:"Overrides",id:"overrides-57",level:4},{value:"<code>window</code>",id:"window",level:3},{value:"Definitions",id:"definitions-16",level:4},{value:"Type parameters",id:"type-parameters-21",level:4},{value:"Parameters",id:"parameters-46",level:4},{value:"Overrides",id:"overrides-58",level:4},{value:"<code>withOnly</code>",id:"withonly",level:3},{value:"Definition",id:"definition-43",level:4},{value:"Type parameters",id:"type-parameters-22",level:4},{value:"Parameters",id:"parameters-47",level:4},{value:"Overrides",id:"overrides-59",level:4},{value:"<code>without</code>",id:"without",level:3},{value:"Definition",id:"definition-44",level:4},{value:"Type parameters",id:"type-parameters-23",level:4},{value:"Parameters",id:"parameters-48",level:4},{value:"Overrides",id:"overrides-60",level:4}],b={toc:f},v="wrapper";function C(e){var n=e,{components:a}=n,r=u(n,["components"]);return(0,t.yg)(v,y(d(d({},b),r),{components:a,mdxType:"MDXLayout"}),(0,t.yg)("h1",d({},{id:"interface-streamnonemptyt"}),(0,t.yg)("inlineCode",{parentName:"h1"},"interface Stream.NonEmpty<T>")),(0,t.yg)("p",null,"A non-empty and possibly infinite sequence of elements of type T. See the ",(0,t.yg)("a",d({parentName:"p"},{href:"https://rimbu.org/docs/collections/stream"}),"Stream documentation")," and the ",(0,t.yg)("a",d({parentName:"p"},{href:"https://rimbu.org/api/rimbu/stream/Stream/interface"}),"Stream API documentation")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Extends:")," ",(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Streamable/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Streamable.NonEmpty<T>")),", ",(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream<T>"))),(0,t.yg)("h2",d({},{id:"type-parameters"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"T"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the element type")))),(0,t.yg)("h2",d({},{id:"methods"}),"Methods"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"symboliterator"}),(0,t.yg)("inlineCode",{parentName:"h3"},"[Symbol.iterator]")),(0,t.yg)("p",null,"Returns a ",(0,t.yg)("inlineCode",{parentName:"p"},"FastIterator")," instance used to iterate over the values of this ",(0,t.yg)("inlineCode",{parentName:"p"},"Iterable"),".")),(0,t.yg)("h4",d({},{id:"definition"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"[Symbol.iterator](): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/FastIterator/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"FastIterator")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,t.yg)("h4",d({},{id:"overrides"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/FastIterable/interface#%5BSymbol.iterator%5D"}),"FastIterable.[Symbol.iterator]"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"append"}),(0,t.yg)("inlineCode",{parentName:"h3"},"append")),(0,t.yg)("p",null,"Returns the current stream succeeded by the given ",(0,t.yg)("inlineCode",{parentName:"p"},"value"))),(0,t.yg)("h4",d({},{id:"definition-1"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"append(value: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,t.yg)("h4",d({},{id:"parameters"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"value")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/OptLazy/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,t.yg)("inlineCode",{parentName:"td"},"<T>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the value to append")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3).append(4).toArray()\n// => [1, 2, 3, 4]\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(1)")),(0,t.yg)("h4",d({},{id:"overrides-1"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#append"}),"Stream.append"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"asnormal"}),(0,t.yg)("inlineCode",{parentName:"h3"},"asNormal")),(0,t.yg)("p",null,"Returns this collection typed as a 'possibly empty' collection.")),(0,t.yg)("h4",d({},{id:"definition-2"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"asNormal(): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(0, 1, 2).asNormal();  // type: Stream<number>\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"assumenonempty"}),(0,t.yg)("inlineCode",{parentName:"h3"},"assumeNonEmpty")),(0,t.yg)("p",null,"Returns the stream as a non-empty instance.")),(0,t.yg)("h4",d({},{id:"definition-3"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"assumeNonEmpty(): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,t.yg)("admonition",d({},{title:"throws",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"RimbuError.EmptyCollectionAssumedNonEmptyError if the stream is known to be empty.")),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.range({ amount: 100 }).assumeNonEmpty()\n// => type: Stream.NonEmpty<number>\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"the function does not actually check if the stream is empty, so treat with extra care  @note O(1)")),(0,t.yg)("h4",d({},{id:"overrides-2"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#assumeNonEmpty"}),"Stream.assumeNonEmpty"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"collect"}),(0,t.yg)("inlineCode",{parentName:"h3"},"collect")),(0,t.yg)("p",null,"Returns a Stream containing the resulting elements from applying the given ",(0,t.yg)("inlineCode",{parentName:"p"},"collectFun")," to each element in this Stream.")),(0,t.yg)("h4",d({},{id:"definition-4"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"collect<R>(collectFun: CollectFun<T, R>): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<R>;"))),(0,t.yg)("h4",d({},{id:"type-parameters-1"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"R"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the result element type")))),(0,t.yg)("h4",d({},{id:"parameters-1"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"collectFun")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"CollectFun<T, R>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"a function taking the parameters below and returning a new element or a skip token",(0,t.yg)("br",null)," - value: the next element",(0,t.yg)("br",null)," - index: the element index",(0,t.yg)("br",null)," - skip: an element that can be returned if the current element should be skipped",(0,t.yg)("br",null)," - halt: a function that, if called, ensures that no new elements are passed")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3).collect((v, i, skip, halt) => {\nif (i === 0) return skip;\nif (i === 1) halt();\nreturn String(v)\n}).toArray();\n// => ['1']\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(1)")),(0,t.yg)("h4",d({},{id:"overrides-3"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#collect"}),"Stream.collect"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"concat"}),(0,t.yg)("inlineCode",{parentName:"h3"},"concat")),(0,t.yg)("p",null,"Returns a Stream containing the elements of this Stream followed by all elements produced by the ",(0,t.yg)("inlineCode",{parentName:"p"},"others")," array of StreamSources.")),(0,t.yg)("h4",d({},{id:"definition-5"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"concat<T2 = T>(...others: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<"),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<T2>>): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<T "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," T2>;"))),(0,t.yg)("h4",d({},{id:"type-parameters-2"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"T2"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"T")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",d({},{id:"parameters-2"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"others")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,t.yg)("inlineCode",{parentName:"td"},"<"),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<T2>>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"a series of StreamSources to concatenate.")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3).concat([4, 5], [6, 7]).toArray()\n// [1, 2, 3, 4, 5, 6, 7]\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(1)")),(0,t.yg)("h4",d({},{id:"overrides-4"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#concat"}),"Stream.concat"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"contains"}),(0,t.yg)("inlineCode",{parentName:"h3"},"contains")),(0,t.yg)("p",null,"Returns true if the Stream contains given ",(0,t.yg)("inlineCode",{parentName:"p"},"amount")," instances of given ",(0,t.yg)("inlineCode",{parentName:"p"},"value"),", using given ",(0,t.yg)("inlineCode",{parentName:"p"},"eq")," function.")),(0,t.yg)("h4",d({},{id:"definition-6"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"contains(value: T, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"amount?: number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"eq?: Eq<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): boolean;"))),(0,t.yg)("h4",d({},{id:"parameters-3"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"value")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"T")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the value to search for")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"amount?: number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"eq?: Eq<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"(optional) object specifying the following properties",(0,t.yg)("br",null)," = amount: (default: 1) the amount of values the Stream should contain",(0,t.yg)("br",null)," - eq: (default: ",(0,t.yg)("inlineCode",{parentName:"td"},"Eq.objectIs"),") the ",(0,t.yg)("inlineCode",{parentName:"td"},"Eq")," instance to use to test equality of elements - negate: (default: false) when true will negate the given predicate")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.from('marmot').contains('m')                // => true\nStream.from('marmot').contains('m', { amount: 2 }) // => true\nStream.from('marmot').contains('m', { amount: 3 }) // => false\nStream.from('marmot').contains('q')                // => false\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N)")),(0,t.yg)("h4",d({},{id:"overrides-5"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#contains"}),"Stream.contains"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"containsslice"}),(0,t.yg)("inlineCode",{parentName:"h3"},"containsSlice")),(0,t.yg)("p",null,"Returns true if this stream contains the same sequence of elements as the given ",(0,t.yg)("inlineCode",{parentName:"p"},"source"),", false otherwise.")),(0,t.yg)("h4",d({},{id:"definition-7"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"containsSlice(source: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"eq?: Eq<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"amount?: number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): boolean;"))),(0,t.yg)("h4",d({},{id:"parameters-4"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"source")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"td"},"<T>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"a non-empty stream source containing the element sequence to find")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"eq?: Eq<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"amount?: number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"(optional) object specifying the following properties",(0,t.yg)("br",null)," - eq: (default: ",(0,t.yg)("inlineCode",{parentName:"td"},"Eq.objectIs"),") the function to use to test element equality")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3, 4, 5).containsSlice([2, 3, 4])\n// => true\nStream.of(1, 2, 3, 4, 5).containsSlice([4, 3, 2])\n// => false\n"))),(0,t.yg)("h4",d({},{id:"overrides-6"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#containsSlice"}),"Stream.containsSlice"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"count"}),(0,t.yg)("inlineCode",{parentName:"h3"},"count")),(0,t.yg)("p",null,"Returns the amount of elements in the Stream.")),(0,t.yg)("h4",d({},{id:"definition-8"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"count(): number;"))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3).count() // => 3\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N) for most types of Stream  @note be careful not to use on infinite streams")),(0,t.yg)("h4",d({},{id:"overrides-7"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#count"}),"Stream.count"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"countelement"}),(0,t.yg)("inlineCode",{parentName:"h3"},"countElement")),(0,t.yg)("p",null,"Returns the amount of elements that are equal according to the given ",(0,t.yg)("inlineCode",{parentName:"p"},"eq")," to the given ",(0,t.yg)("inlineCode",{parentName:"p"},"value")," in the Stream.")),(0,t.yg)("h4",d({},{id:"definition-9"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"countElement(value: T, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"eq?: Eq<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): number;"))),(0,t.yg)("h4",d({},{id:"parameters-5"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"value")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"T")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the value to compare to")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"eq?: Eq<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"(optional) object specifying the following properties",(0,t.yg)("br",null)," - eq: (default: ",(0,t.yg)("inlineCode",{parentName:"td"},"Eq.objectIs"),") the ",(0,t.yg)("inlineCode",{parentName:"td"},"Eq")," instance to use to test equality of elements",(0,t.yg)("br",null)," - negate: (default: false) when true will negate the given Eq function")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3).countElement(2) // => 1\nStream.of(1, 2, 3).countElement(2, { negate: true }) // => 2\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N) for most types of Stream  @note be careful not to use on infinite streams")),(0,t.yg)("h4",d({},{id:"overrides-8"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#countElement"}),"Stream.countElement"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"distinctprevious"}),(0,t.yg)("inlineCode",{parentName:"h3"},"distinctPrevious")),(0,t.yg)("p",null,"Returns a non-empty Stream containing non-repetitive elements of the source stream, where repetitive elements are compared using the optionally given ",(0,t.yg)("inlineCode",{parentName:"p"},"eq")," equality function.")),(0,t.yg)("h4",d({},{id:"definition-10"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"distinctPrevious(options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"eq?: Eq<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,t.yg)("h4",d({},{id:"parameters-6"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"eq?: Eq<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"(optional) object specifying the following properties",(0,t.yg)("br",null)," - eq: (default: ",(0,t.yg)("inlineCode",{parentName:"td"},"Eq.objectIs"),") the ",(0,t.yg)("inlineCode",{parentName:"td"},"Eq")," instance to use to test equality of elements",(0,t.yg)("br",null)," - negate: (default: false) when true will negate the given predicate")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 1, 2, 2, 3, 1).distinctPrevious().toArray()\n// => [1, 2, 3, 1]\n"))),(0,t.yg)("h4",d({},{id:"overrides-9"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#distinctPrevious"}),"Stream.distinctPrevious"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"drop"}),(0,t.yg)("inlineCode",{parentName:"h3"},"drop")),(0,t.yg)("p",null,"Returns a stream that skips the first ",(0,t.yg)("inlineCode",{parentName:"p"},"amount")," elements of this Stream and returns the rest.")),(0,t.yg)("h4",d({},{id:"definition-11"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"drop(amount: number): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,t.yg)("h4",d({},{id:"parameters-7"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"amount")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"number")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the amount of elements to skip")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3).drop(1).toArray()   // => [2, 3]\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N) for most types of Stream")),(0,t.yg)("h4",d({},{id:"overrides-10"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#drop"}),"Stream.drop"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"dropwhile"}),(0,t.yg)("inlineCode",{parentName:"h3"},"dropWhile")),(0,t.yg)("p",null,"Returns a Stream that contains the elements of this Stream starting from the first element that does not satisfy given ",(0,t.yg)("inlineCode",{parentName:"p"},"pred")," function.")),(0,t.yg)("h4",d({},{id:"definition-12"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"dropWhile(pred: (value: T, index: number) => boolean, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,t.yg)("h4",d({},{id:"parameters-8"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"pred")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(value: T, index: number) => boolean")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"a predicate function taking an element and its index")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"(optional) object specifying the following properties",(0,t.yg)("br",null)," - negate: (default: false) when true will negate the given predicate")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3).dropWhile(v => v < 2).toArray()\n// => [2, 3]\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N)")),(0,t.yg)("h4",d({},{id:"overrides-11"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#dropWhile"}),"Stream.dropWhile"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"elementat"}),(0,t.yg)("inlineCode",{parentName:"h3"},"elementAt")),(0,t.yg)("p",null,"Returns the element in the Stream at the given index, or a fallback value (default undefined) otherwise.")),(0,t.yg)("h4",d({},{id:"definitions"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"elementAt(index: number): T "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"elementAt<O>(index: number, otherwise: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,t.yg)("inlineCode",{parentName:"p"},"<O>): T "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," O;"))),(0,t.yg)("h4",d({},{id:"parameters-9"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"index")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"number")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the index of the element to retrieve")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3).elementAt(1)        // => 2\nStream.of(1, 2, 3).elementAt(5)        // => undefined\nStream.of(1, 2, 3).elementAt(5, 'a')   // => 'a'\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N) for most types of Stream")),(0,t.yg)("h4",d({},{id:"overrides-12"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#elementAt"}),"Stream.elementAt"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"equals"}),(0,t.yg)("inlineCode",{parentName:"h3"},"equals")),(0,t.yg)("p",null,"Returns true if the sequence of elements in this stream are equal to the sequence in the ",(0,t.yg)("inlineCode",{parentName:"p"},"other")," stream according to the provided ",(0,t.yg)("inlineCode",{parentName:"p"},"eq")," function.")),(0,t.yg)("h4",d({},{id:"definition-13"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"equals(other: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"eq?: Eq<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): boolean;"))),(0,t.yg)("h4",d({},{id:"parameters-10"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"other")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<T>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the other stream to compare")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"eq?: Eq<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"(optional) object specifying the following properties",(0,t.yg)("br",null)," - eq: (default: ",(0,t.yg)("inlineCode",{parentName:"td"},"Eq.objectIs"),") the ",(0,t.yg)("inlineCode",{parentName:"td"},"Eq")," instance to use to test equality of elements",(0,t.yg)("br",null)," - negate: (default: false) when true will negate the ",(0,t.yg)("inlineCode",{parentName:"td"},"eq")," function")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3).equals([1, 2, 3])     // => true\nStream.of(1, 2, 3, 4).equals([1, 2, 3])  // => false\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"don't use on potentially infinite streams  @note O(N)")),(0,t.yg)("h4",d({},{id:"overrides-13"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#equals"}),"Stream.equals"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"every"}),(0,t.yg)("inlineCode",{parentName:"h3"},"every")),(0,t.yg)("p",null,"Returns true if every element of the Stream satifies given ",(0,t.yg)("inlineCode",{parentName:"p"},"pred")," function.")),(0,t.yg)("h4",d({},{id:"definition-14"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"every(pred: (value: T, index: number) => boolean, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): boolean;"))),(0,t.yg)("h4",d({},{id:"parameters-11"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"pred")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(value: T, index: number) => boolean")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"a predicate function taking an element and its index")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"(optional) object specifying the following properties",(0,t.yg)("br",null)," - negate: (default: false) when true will negate the given predicate")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3).every((v, i) => v + i > 10)  // => false\nStream.of(1, 2, 3).every((v, i) => v + i < 10)  // => true\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N)")),(0,t.yg)("h4",d({},{id:"overrides-14"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#every"}),"Stream.every"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"filter"}),(0,t.yg)("inlineCode",{parentName:"h3"},"filter")),(0,t.yg)("p",null,"Returns a Stream containing only those elements from this Stream for which the given ",(0,t.yg)("inlineCode",{parentName:"p"},"pred")," function returns true.")),(0,t.yg)("h4",d({},{id:"definitions-1"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"filter<TF extends T>(pred: (value: T, index: number, halt: () => void) => value is TF, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate?: false "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<TF>;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"filter<TF extends T>(pred: (value: T, index: number, halt: () => void) => value is TF, options: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate: true;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<Exclude<T, TF>>;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"filter(pred: (value: T, index: number, halt: () => void) => boolean, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,t.yg)("h4",d({},{id:"type-parameters-3"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"TF"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"T")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",d({},{id:"parameters-12"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"pred")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(value: T, index: number, halt: () => void) => value is TF")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"a function taking an element and its index, and returning true if the element should be included in the resulting Stream.")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"negate?: false "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"(optional) object specifying the following properties",(0,t.yg)("br",null)," - negate: (default: false) when true will negate the given predicate")))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(1)")),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3).filter((v, i) => v + i !== 3).toArray()\n// => [1, 3]\nStream.of(1, 2, 3).filter((v, i) => v + i !== 3, { negate: true }).toArray()\n// => [2]\n"))),(0,t.yg)("h4",d({},{id:"overrides-15"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#filter"}),"Stream.filter"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"filterpure"}),(0,t.yg)("inlineCode",{parentName:"h3"},"filterPure")),(0,t.yg)("p",null,"Returns a Stream containing only those elements from this Stream for which the given ",(0,t.yg)("inlineCode",{parentName:"p"},"pred")," function returns true.")),(0,t.yg)("h4",d({},{id:"definitions-2"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"filterPure<A extends readonly unknown[], TF extends T>(options: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"pred: (value: T, ...args: A) => value is TF;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate?: false "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<TF>;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"filterPure<A extends readonly unknown[], TF extends T>(options: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"pred: (value: T, ...args: A) => value is TF;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate: true;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<Exclude<T, TF>>;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"filterPure<A extends readonly unknown[]>(options: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"pred: (value: T, ...args: A) => boolean;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}, ...args: A): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,t.yg)("h4",d({},{id:"type-parameters-4"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"A"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"readonly unknown[]")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the arguments to be supplied to the ",(0,t.yg)("inlineCode",{parentName:"td"},"pred")," function after each element")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"TF"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"T")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",d({},{id:"parameters-13"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"pred: (value: T, ...args: A) => value is TF;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"negate?: false "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"object specifying the following properties",(0,t.yg)("br",null)," - pred: a function taking an element the optionaly given ",(0,t.yg)("inlineCode",{parentName:"td"},"args"),", and returning true if the element should be included in the resulting Stream.",(0,t.yg)("br",null)," - negate: (default: false) when true will negate the given predicate")))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(1)")),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3).filterPure({ pred: Object.is }, 2).toArray()\n// => [2]\nStream.of(1, 2, 3).filterPure({ pred: Object.is, negate: true }, 2).toArray()\n// => [1, 3]\n"))),(0,t.yg)("h4",d({},{id:"overrides-16"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#filterPure"}),"Stream.filterPure"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"find"}),(0,t.yg)("inlineCode",{parentName:"h3"},"find")),(0,t.yg)("p",null,"Returns the first element for which the given ",(0,t.yg)("inlineCode",{parentName:"p"},"pred")," function returns true, or a fallback value otherwise.")),(0,t.yg)("h4",d({},{id:"definitions-3"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"find<O, TF extends T>(pred: (value: T, index: number) => value is TF, options: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"occurrance?: number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate?: false "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"otherwise: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,t.yg)("inlineCode",{parentName:"p"},"<O>;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): TF "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," O;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"find<O, TF extends T>(pred: (value: T, index: number) => value is TF, options: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"occurrance?: number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate: true;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"otherwise: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,t.yg)("inlineCode",{parentName:"p"},"<O>;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): Exclude<T, TF> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," O;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"find<TF extends T>(pred: (value: T, index: number) => value is TF, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"occurrance?: number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate?: false "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"otherwise?: undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): TF "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"find<TF extends T>(pred: (value: T, index: number) => value is TF, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"occurrance?: number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate: true;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"otherwise?: undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): Exclude<T, TF> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"find<O>(pred: (value: T, index: number) => boolean, options: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"occurrance?: number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"otherwise: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,t.yg)("inlineCode",{parentName:"p"},"<O>;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): T "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," O;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"find(pred: (value: T, index: number) => boolean, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"occurrance?: number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"otherwise?: undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): T "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"))),(0,t.yg)("h4",d({},{id:"type-parameters-5"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"O"),(0,t.yg)("td",d({parentName:"tr"},{align:null})),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the optional value type to return if no match is found")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"TF"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"T")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",d({},{id:"parameters-14"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"pred")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(value: T, index: number) => value is TF")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"a predicate function taking an element and its index")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"occurrance?: number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"negate?: false "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"otherwise: "),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/OptLazy/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,t.yg)("inlineCode",{parentName:"td"},"<O>;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"(optional) object specifying the following properties",(0,t.yg)("br",null)," - occurrance: (default: 1) the occurrance number to look for",(0,t.yg)("br",null)," - otherwise: (default: undefined) an ",(0,t.yg)("inlineCode",{parentName:"td"},"OptLazy")," value to be returned if the Stream is empty")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const isEven = (v: number) => v % 2 === 0\nStream.of(1, 2, 3, 4).find(isEven)           // => 2\nStream.of(1, 2, 3, 4).find(isEven, { occurrance: 2 })        // => 4\nStream.of(1, 2, 3, 4).find(isEven, { occurrance: 3 })        // => undefined\nStream.of(1, 2, 3, 4).find(isEven, { occurrance: 3, otherwise: 'a' })\n// => 'a'\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N) for most types of Stream")),(0,t.yg)("h4",d({},{id:"overrides-17"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#find"}),"Stream.find"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"first"}),(0,t.yg)("inlineCode",{parentName:"h3"},"first")),(0,t.yg)("p",null,"Returns the first element of the Stream.")),(0,t.yg)("h4",d({},{id:"definition-15"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"first(): T;"))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3).first()      // => 1\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(1)")),(0,t.yg)("h4",d({},{id:"overrides-18"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#first"}),"Stream.first"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"flatmap"}),(0,t.yg)("inlineCode",{parentName:"h3"},"flatMap")),(0,t.yg)("p",null,"Returns a Stream consisting of the concatenation of ",(0,t.yg)("inlineCode",{parentName:"p"},"flatMapFun")," applied to each element.")),(0,t.yg)("h4",d({},{id:"definitions-4"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"flatMap<T2>(flatMapFun: (value: T, index: number) => "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<T2>): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<T2>;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"flatMap<T2>(flatMapFun: (value: T, index: number, halt: () => void) => "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<T2>): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<T2>;"))),(0,t.yg)("h4",d({},{id:"type-parameters-6"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"T2"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the result element type")))),(0,t.yg)("h4",d({},{id:"parameters-15"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"flatMapFun")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(value: T, index: number) => "),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"td"},"<T2>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"a function receiving the inputs described below and returning a ",(0,t.yg)("inlineCode",{parentName:"td"},"StreamSource")," of new elements",(0,t.yg)("br",null)," - value: the next element",(0,t.yg)("br",null)," - index: the index of the element",(0,t.yg)("br",null)," - halt: a function that, if called, ensures that no new elements are passed")))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(1)")),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3).flatMap((v, i, halt) => {\nif (i >= 1) halt();\nreturn [v, i, v + i]\n}).toArray()\n// => [1, 0, 1, 2, 1, 3]\n"))),(0,t.yg)("h4",d({},{id:"overrides-19"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#flatMap"}),"Stream.flatMap"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"flatzip"}),(0,t.yg)("inlineCode",{parentName:"h3"},"flatZip")),(0,t.yg)("p",null,"Returns a Stream consisting of the concatenation of ",(0,t.yg)("inlineCode",{parentName:"p"},"flatMapFun")," applied to each element, zipped with the element that was provided to the function.")),(0,t.yg)("h4",d({},{id:"definitions-5"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"flatZip<T2>(flatMapFun: (value: T, index: number) => "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<T2>): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<[T, T2]>;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"flatZip<T2>(flatMapFun: (value: T, index: number, halt: () => void) => "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<T2>): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<[T, T2]>;"))),(0,t.yg)("h4",d({},{id:"type-parameters-7"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"T2"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the result element type")))),(0,t.yg)("h4",d({},{id:"parameters-16"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"flatMapFun")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(value: T, index: number) => "),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"td"},"<T2>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"a function receiving the inputs described below and returning a ",(0,t.yg)("inlineCode",{parentName:"td"},"StreamSource")," of new elements",(0,t.yg)("br",null)," - value: the next element",(0,t.yg)("br",null)," - index: the index of the element",(0,t.yg)("br",null)," - halt: a function that, if called, ensures that no new elements are passed")))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(1)")),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3).flatZip((v, i, halt) => {\nif (i >= 1) halt();\nreturn [v, i, v + i]\n}).toArray()\n// => [[1, 1], [1, 0], [1, 1], [2, 2], [2, 1], [2, 3]]\n"))),(0,t.yg)("h4",d({},{id:"overrides-20"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#flatZip"}),"Stream.flatZip"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"fold"}),(0,t.yg)("inlineCode",{parentName:"h3"},"fold")),(0,t.yg)("p",null,"Returns the value resulting from applying the given the given ",(0,t.yg)("inlineCode",{parentName:"p"},"next")," function to a current state (initially the given ",(0,t.yg)("inlineCode",{parentName:"p"},"init")," value), and the next Stream value, and returning the new state. When all elements are processed, the resulting state is returned.")),(0,t.yg)("h4",d({},{id:"definition-16"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"fold<R>(init: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,t.yg)("inlineCode",{parentName:"p"},"<R>, next: (current: R, value: T, index: number, halt: () => void) => R): R;"))),(0,t.yg)("h4",d({},{id:"type-parameters-8"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"R"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the resulting element type")))),(0,t.yg)("h4",d({},{id:"parameters-17"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"init")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/OptLazy/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,t.yg)("inlineCode",{parentName:"td"},"<R>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the initial result/state value")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"next")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(current: R, value: T, index: number, halt: () => void) => R")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"a function taking the parameters below and returning the new result/state value",(0,t.yg)("br",null)," - current: the current result/state value, initially ",(0,t.yg)("inlineCode",{parentName:"td"},"init"),".",(0,t.yg)("br",null)," - value: the next Stream value",(0,t.yg)("br",null)," - index: the index of the given value",(0,t.yg)("br",null)," - halt: a function that, if called, ensures that no new elements are passed")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"console.log(Stream.empty<number>().fold(5, (current, value) => current + value))\n// => 5\nconsole.log(Stream.of(1, 2, 3).fold(5, (current, value) => current + value))\n// => 11  (= 5 + 1 + 2 + 3)\n"))),(0,t.yg)("h4",d({},{id:"overrides-21"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#fold"}),"Stream.fold"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"foldstream"}),(0,t.yg)("inlineCode",{parentName:"h3"},"foldStream")),(0,t.yg)("p",null,"Returns a Stream containing the values resulting from applying the given the given ",(0,t.yg)("inlineCode",{parentName:"p"},"next")," function to a current state (initially the given ",(0,t.yg)("inlineCode",{parentName:"p"},"init")," value), and the next Stream value, and returning the new state.")),(0,t.yg)("h4",d({},{id:"definitions-6"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"foldStream<R>(init: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,t.yg)("inlineCode",{parentName:"p"},"<R>, next: (current: R, value: T, index: number) => R): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<R>;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"foldStream<R>(init: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,t.yg)("inlineCode",{parentName:"p"},"<R>, next: (current: R, value: T, index: number, halt: () => void) => R): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<R>;"))),(0,t.yg)("h4",d({},{id:"type-parameters-9"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"R"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the resulting element type")))),(0,t.yg)("h4",d({},{id:"parameters-18"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"init")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/OptLazy/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,t.yg)("inlineCode",{parentName:"td"},"<R>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the initial result/state value")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"next")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(current: R, value: T, index: number) => R")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"a function taking the parameters below and returning the new result/state value",(0,t.yg)("br",null)," - current: the current result/state value, initially ",(0,t.yg)("inlineCode",{parentName:"td"},"init"),".",(0,t.yg)("br",null)," - value: the next Stream value",(0,t.yg)("br",null)," - index: the index of the given value",(0,t.yg)("br",null)," - halt: a function that, if called, ensures that no new elements are passed")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"console.log(\nStream.empty<number>()\n.foldStream(5, (current, value) => current + value)\n.toArray()\n)\n// => []\nconsole.log(\nStream.of(1, 2, 3)\n.foldStream(5, (current, value) => current + value)\n.toArray()\n)\n// => [6, 8, 11]\n"))),(0,t.yg)("h4",d({},{id:"overrides-22"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#foldStream"}),"Stream.foldStream"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"foreach"}),(0,t.yg)("inlineCode",{parentName:"h3"},"forEach")),(0,t.yg)("p",null,"Performs given function ",(0,t.yg)("inlineCode",{parentName:"p"},"f")," for each element of the Stream, using given ",(0,t.yg)("inlineCode",{parentName:"p"},"state")," as initial traversal state.")),(0,t.yg)("h4",d({},{id:"definition-17"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"forEach(f: (value: T, index: number, halt: () => void) => void, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"state?: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/TraverseState/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"TraverseState")),(0,t.yg)("inlineCode",{parentName:"p"}," "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): void;"))),(0,t.yg)("h4",d({},{id:"parameters-19"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"f")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(value: T, index: number, halt: () => void) => void")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the function to perform for each element, receiving:",(0,t.yg)("br",null)," - value: the next element",(0,t.yg)("br",null)," - index: the index of the element",(0,t.yg)("br",null)," - halt: a function that, if called, ensures that no new elements are passed")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"state?: "),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/TraverseState/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"TraverseState")),(0,t.yg)("inlineCode",{parentName:"td"}," "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"(optional) object specifying the following properties",(0,t.yg)("br",null)," - state: (optional) the traverse state")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3).forEach((v, i, halt) => {\nconsole.log(v);\nif (i >= 1) halt();\n})\n// => 1, 2\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N)")),(0,t.yg)("h4",d({},{id:"overrides-23"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#forEach"}),"Stream.forEach"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"foreachpure"}),(0,t.yg)("inlineCode",{parentName:"h3"},"forEachPure")),(0,t.yg)("p",null,"Performs given function ",(0,t.yg)("inlineCode",{parentName:"p"},"f")," for each element of the Stream, with the optionally given ",(0,t.yg)("inlineCode",{parentName:"p"},"args")," as extra arguments.")),(0,t.yg)("h4",d({},{id:"definition-18"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"forEachPure<A extends readonly unknown[]>(f: (value: T, ...args: A) => void, ...args: A): void;"))),(0,t.yg)("h4",d({},{id:"type-parameters-10"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"A"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"readonly unknown[]")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the type of the extra arguments to pass")))),(0,t.yg)("h4",d({},{id:"parameters-20"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"f")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(value: T, ...args: A) => void")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the function to perform for each element, optionally receiving given extra ",(0,t.yg)("inlineCode",{parentName:"td"},"args"),".")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"args")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"A")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"a list of extra arguments to pass to given ",(0,t.yg)("inlineCode",{parentName:"td"},"f")," for each element when needed")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3).forEachPure(console.log, 'sheep')\n// => logs:\n// 1 sheep\n// 2 sheep\n// 3 sheep\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N)")),(0,t.yg)("h4",d({},{id:"overrides-24"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#forEachPure"}),"Stream.forEachPure"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"groupby"}),(0,t.yg)("inlineCode",{parentName:"h3"},"groupBy")),(0,t.yg)("p",null,"Returns the result of applying the ",(0,t.yg)("inlineCode",{parentName:"p"},"valueToKey")," function to calculate a key for each value, and feeding the tuple of the key and the value to the ",(0,t.yg)("inlineCode",{parentName:"p"},"collector")," reducer, and finally returning its result. If no collector is given, the default collector will return a JS multimap of the type ",(0,t.yg)("inlineCode",{parentName:"p"},"Map<K, V[]>"),".")),(0,t.yg)("h4",d({},{id:"definitions-7"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"groupBy<K, R, T2 extends readonly [K, T] = [K, T]>(valueToKey: (value: T, index: number) => K, options: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"collector: Reducer<[K, T] "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," T2, R>;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): R;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"groupBy<K>(valueToKey: (value: T, index: number) => K, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"collector?: undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): Map<K, T[]>;"))),(0,t.yg)("h4",d({},{id:"type-parameters-11"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"K"),(0,t.yg)("td",d({parentName:"tr"},{align:null})),(0,t.yg)("td",d({parentName:"tr"},{align:null})),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the key type")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"R"),(0,t.yg)("td",d({parentName:"tr"},{align:null})),(0,t.yg)("td",d({parentName:"tr"},{align:null})),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the collector output type")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"T2"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"readonly [K, T]")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"[K, T]")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",d({},{id:"parameters-21"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"valueToKey")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(value: T, index: number) => K")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"function taking a value and its index, and returning the corresponding key")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"collector: Reducer<[K, T] "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," T2, R>;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,t.yg)("br",null)," - collector: (default: Reducer.toArray()) a reducer that collects the incoming tuple of key and value, and provides the output")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3).groupBy((v) => v % 2)\n// => Map {0 => [2], 1 => [1, 3]}\n"))),(0,t.yg)("h4",d({},{id:"overrides-25"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#groupBy"}),"Stream.groupBy"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"indexed"}),(0,t.yg)("inlineCode",{parentName:"h3"},"indexed")),(0,t.yg)("p",null,"Returns a non-empty Stream where each element in this Stream is paired with its index")),(0,t.yg)("h4",d({},{id:"definition-19"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"indexed(options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"startIndex?: number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<[number, T]>;"))),(0,t.yg)("h4",d({},{id:"parameters-22"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"startIndex?: number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"(optional) object specifying the following properties",(0,t.yg)("br",null)," - startIndex: (optional) an alternative start index to use")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3).indexed().toArray()\n// => [[0, 1], [1, 2], [2, 3]]\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(1)")),(0,t.yg)("h4",d({},{id:"overrides-26"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#indexed"}),"Stream.indexed"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"indexof"}),(0,t.yg)("inlineCode",{parentName:"h3"},"indexOf")),(0,t.yg)("p",null,"Returns the index of the ",(0,t.yg)("inlineCode",{parentName:"p"},"occurrance")," instance of given ",(0,t.yg)("inlineCode",{parentName:"p"},"searchValue")," in the Stream, using given ",(0,t.yg)("inlineCode",{parentName:"p"},"eq")," function, or undefined if no such value is found.")),(0,t.yg)("h4",d({},{id:"definition-20"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"indexOf(searchValue: T, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"occurrance?: number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"eq?: Eq<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"))),(0,t.yg)("h4",d({},{id:"parameters-23"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"searchValue")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"T")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the element to search for")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"occurrance?: number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"eq?: Eq<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"(optional) object specifying the following properties",(0,t.yg)("br",null)," - occurrance: (default: 1) the occurrance to search for",(0,t.yg)("br",null)," - eq: (default: ",(0,t.yg)("inlineCode",{parentName:"td"},"Eq.objectIs"),") the ",(0,t.yg)("inlineCode",{parentName:"td"},"Eq")," instance to use to test equality of elements",(0,t.yg)("br",null)," - negate: (default: false) when true will negate the given Eq function")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const source = Stream.from('marmot')\nsource.indexOf('m')     // => 0\nsource.indexOf('m', 2)  // => 3\nsource.indexOf('m', 3)  // => undefined\nsource.indexOf('q')     // => undefined\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N)")),(0,t.yg)("h4",d({},{id:"overrides-27"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#indexOf"}),"Stream.indexOf"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"indexwhere"}),(0,t.yg)("inlineCode",{parentName:"h3"},"indexWhere")),(0,t.yg)("p",null,"Returns the index of the given ",(0,t.yg)("inlineCode",{parentName:"p"},"occurrance")," instance of the element in the Stream that satisfies given ",(0,t.yg)("inlineCode",{parentName:"p"},"pred")," function, or undefined if no such instance is found.")),(0,t.yg)("h4",d({},{id:"definition-21"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"indexWhere(pred: (value: T, index: number) => boolean, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"occurrance?: number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"))),(0,t.yg)("h4",d({},{id:"parameters-24"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"pred")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(value: T, index: number) => boolean")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"a predicate function taking an element and its index")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"occurrance?: number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"(optional) object specifying the following properties",(0,t.yg)("br",null)," - occurrance: (default: 1) the occurrance to search for",(0,t.yg)("br",null)," - negate: (default: false) when true will negate the given predicate")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3).indexWhere((v, i) => v + i > 2)      // => 1\nStream.of(1, 2, 3).indexWhere((v, i) => v + i > 2, 2)   // => 2\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N)")),(0,t.yg)("h4",d({},{id:"overrides-28"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#indexWhere"}),"Stream.indexWhere"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"indicesof"}),(0,t.yg)("inlineCode",{parentName:"h3"},"indicesOf")),(0,t.yg)("p",null,"Returns a Stream containing the indicies of the occurrance of the given ",(0,t.yg)("inlineCode",{parentName:"p"},"searchValue"),", according to given ",(0,t.yg)("inlineCode",{parentName:"p"},"eq")," function.")),(0,t.yg)("h4",d({},{id:"definition-22"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"indicesOf(searchValue: T, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"eq?: Eq<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<number>;"))),(0,t.yg)("h4",d({},{id:"parameters-25"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"searchValue")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"T")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the value to search for")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"eq?: Eq<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"(optional) object specifying the following properties",(0,t.yg)("br",null)," - eq: (default: ",(0,t.yg)("inlineCode",{parentName:"td"},"Eq.objectIs"),") the ",(0,t.yg)("inlineCode",{parentName:"td"},"Eq")," instance to use to test equality of elements",(0,t.yg)("br",null)," - negate: (default: false) when true will negate the given Eq function")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.from('marmot').indicesOf('m').toArray()\n// => [0, 3]\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N)")),(0,t.yg)("h4",d({},{id:"overrides-29"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#indicesOf"}),"Stream.indicesOf"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"indiceswhere"}),(0,t.yg)("inlineCode",{parentName:"h3"},"indicesWhere")),(0,t.yg)("p",null,"Returns a Stream containing the indices of the elements for which the given ",(0,t.yg)("inlineCode",{parentName:"p"},"pred")," function returns true.")),(0,t.yg)("h4",d({},{id:"definition-23"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"indicesWhere(pred: (value: T) => boolean, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<number>;"))),(0,t.yg)("h4",d({},{id:"parameters-26"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"pred")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(value: T) => boolean")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"a predicate function taking an element")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"(optional) object specifying the following properties",(0,t.yg)("br",null)," - negate: (default: false) when true will negate the given predicate")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3).indicesWhere((v, i) => v + i !== 3).toArray()\n// => [0, 2]\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N)")),(0,t.yg)("h4",d({},{id:"overrides-30"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#indicesWhere"}),"Stream.indicesWhere"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"intersperse"}),(0,t.yg)("inlineCode",{parentName:"h3"},"intersperse")),(0,t.yg)("p",null,"Returns a non-empty Stream with all elements from the given ",(0,t.yg)("inlineCode",{parentName:"p"},"sep")," StreamSource between two elements of this Stream.")),(0,t.yg)("h4",d({},{id:"definition-24"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"intersperse(sep: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,t.yg)("h4",d({},{id:"parameters-27"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"sep")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<T>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the StreamSource to insert between each element of this Stream")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3).intersperse(\"ab\").toArray()\n// => [1, 'a', 'b', 2, 'a', 'b', 3]\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(1)")),(0,t.yg)("h4",d({},{id:"overrides-31"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#intersperse"}),"Stream.intersperse"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"join"}),(0,t.yg)("inlineCode",{parentName:"h3"},"join")),(0,t.yg)("p",null,"Returns a string resulting from converting each element to string with ",(0,t.yg)("inlineCode",{parentName:"p"},"options.valueToString"),", interspersed with ",(0,t.yg)("inlineCode",{parentName:"p"},"options.sep"),", starting with ",(0,t.yg)("inlineCode",{parentName:"p"},"options.start")," and ending with ",(0,t.yg)("inlineCode",{parentName:"p"},"options.end"),".")),(0,t.yg)("h4",d({},{id:"definition-25"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"join(options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"sep?: string "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"start?: string "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"end?: string "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"valueToString?: ((value: T) => string) "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"ifEmpty?: string "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): string;"))),(0,t.yg)("h4",d({},{id:"parameters-28"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"sep?: string "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"start?: string "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"end?: string "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"valueToString?: ((value: T) => string) "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"ifEmpty?: string "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"(optional) object specifying the following properties",(0,t.yg)("br",null)," - sep: (optional) a seperator to insert between each Stream element",(0,t.yg)("br",null)," - start: (optional) a start string to prepend at the start",(0,t.yg)("br",null)," - end: (optional) an end string to append at the end",(0,t.yg)("br",null)," - valueToString: (default: String) a function converting a Stream element to a string",(0,t.yg)("br",null)," - ifEmpty: (optional) a string to return instead of the start and end tag if the stream is empty")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3).join({ start: '<', sep: ', ', end: '>' })\n// => '<1, 2, 3>'\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N)")),(0,t.yg)("h4",d({},{id:"overrides-32"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#join"}),"Stream.join"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"last"}),(0,t.yg)("inlineCode",{parentName:"h3"},"last")),(0,t.yg)("p",null,"Returns the last element of the Stream.")),(0,t.yg)("h4",d({},{id:"definition-26"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"last(): T;"))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3).last()      // => 3\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N) for most types of Stream")),(0,t.yg)("h4",d({},{id:"overrides-33"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#last"}),"Stream.last"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"map"}),(0,t.yg)("inlineCode",{parentName:"h3"},"map")),(0,t.yg)("p",null,"Returns a non-empty Stream where ",(0,t.yg)("inlineCode",{parentName:"p"},"mapFun")," is applied to each element.")),(0,t.yg)("h4",d({},{id:"definition-27"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"map<T2>(mapFun: (value: T, index: number) => T2): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<T2>;"))),(0,t.yg)("h4",d({},{id:"type-parameters-12"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"T2"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the result value type")))),(0,t.yg)("h4",d({},{id:"parameters-29"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"mapFun")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(value: T, index: number) => T2")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"a function taking an element and its index, and returning some new element")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3).map((v, i) => `[${i}]: ${v}`).toArray()\n// => ['[0]: 1', '[1]: 2', '[2]: 3']\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(1)")),(0,t.yg)("h4",d({},{id:"overrides-34"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#map"}),"Stream.map"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"mappure"}),(0,t.yg)("inlineCode",{parentName:"h3"},"mapPure")),(0,t.yg)("p",null,"Returns a non-empty tream where the given ",(0,t.yg)("inlineCode",{parentName:"p"},"mapFun")," is applied to each value in the stream, with optionally as extra arguments the given ",(0,t.yg)("inlineCode",{parentName:"p"},"args"),".")),(0,t.yg)("h4",d({},{id:"definition-28"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"mapPure<T2, A extends readonly unknown[]>(mapFun: (value: T, ...args: A) => T2, ...args: A): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<T2>;"))),(0,t.yg)("h4",d({},{id:"type-parameters-13"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"T2"),(0,t.yg)("td",d({parentName:"tr"},{align:null})),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the result element type")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"A"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"readonly unknown[]")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the type of the arguments to be passed to the ",(0,t.yg)("inlineCode",{parentName:"td"},"mapFun")," function after each element")))),(0,t.yg)("h4",d({},{id:"parameters-30"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"mapFun")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(value: T, ...args: A) => T2")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"a function taking an element and the given args, and returning the resulting stream value")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"args")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"A")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"(optional) the extra arguments to pass to the given ",(0,t.yg)("inlineCode",{parentName:"td"},"mapFun"))))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"is mostly aimed to increase performance so that an extra function is not required  @note can be used on function that really expect 1 argument, since the normal map will also pass more arguments")),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),'const s = Stream.of({ a: 1 }, { a: 2, c: { d: true } })\nconst s2 = s.mapPure(JSON.stringify, [\'a\'], 5)\n// when stream is evaluated, will call JSON.stringify on each stream element with the given extra arguments\nconsole.log(s2.toArray())\n// => ["{\\n \\"a\\": 1\\n}", "{\\n \\"a\\": 2\\n}"]\n'))),(0,t.yg)("h4",d({},{id:"overrides-35"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#mapPure"}),"Stream.mapPure"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"max"}),(0,t.yg)("inlineCode",{parentName:"h3"},"max")),(0,t.yg)("p",null,"Returns the maximum element of the Stream according to a default compare function.")),(0,t.yg)("h4",d({},{id:"definition-29"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"max(): T;"))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(5, 1, 3).max()         // => 5\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N)")),(0,t.yg)("h4",d({},{id:"overrides-36"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#max"}),"Stream.max"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"maxby"}),(0,t.yg)("inlineCode",{parentName:"h3"},"maxBy")),(0,t.yg)("p",null,"Returns the maximum element of the Stream according to the provided ",(0,t.yg)("inlineCode",{parentName:"p"},"compare")," function.")),(0,t.yg)("h4",d({},{id:"definition-30"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"maxBy(compare: (v1: T, v2: T) => number): T;"))),(0,t.yg)("h4",d({},{id:"parameters-31"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"compare")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(v1: T, v2: T) => number")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"function compareLength(a: string, b: string): number { return b.length - a.length };\nStream.of('abc', 'a', 'ab').maxBy(compareLength)   // => 'abc'\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N)")),(0,t.yg)("h4",d({},{id:"overrides-37"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#maxBy"}),"Stream.maxBy"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"min"}),(0,t.yg)("inlineCode",{parentName:"h3"},"min")),(0,t.yg)("p",null,"Returns the mimimum element of the Stream according to a default compare function.")),(0,t.yg)("h4",d({},{id:"definition-31"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"min(): T;"))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(5, 1, 3).min()         // => 1\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N)")),(0,t.yg)("h4",d({},{id:"overrides-38"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#min"}),"Stream.min"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"minby"}),(0,t.yg)("inlineCode",{parentName:"h3"},"minBy")),(0,t.yg)("p",null,"Returns the mimimum element of the Stream according to the provided ",(0,t.yg)("inlineCode",{parentName:"p"},"compare")," function.")),(0,t.yg)("h4",d({},{id:"definition-32"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"minBy(compare: (v1: T, v2: T) => number): T;"))),(0,t.yg)("h4",d({},{id:"parameters-32"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"compare")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(v1: T, v2: T) => number")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"function compareLength(a: string, b: string): number { return b.length - a.length };\nStream.of('abc', 'a', 'ab').minBy(compareLength)   // => 'a'\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N)")),(0,t.yg)("h4",d({},{id:"overrides-39"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#minBy"}),"Stream.minBy"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"mkgroup"}),(0,t.yg)("inlineCode",{parentName:"h3"},"mkGroup")),(0,t.yg)("p",null,"Returns a non-empty Stream starting with ",(0,t.yg)("inlineCode",{parentName:"p"},"options.sep"),", then returning the elements of this Stream interspersed with ",(0,t.yg)("inlineCode",{parentName:"p"},"options.sep"),", and ending with ",(0,t.yg)("inlineCode",{parentName:"p"},"options.end"),".")),(0,t.yg)("h4",d({},{id:"definition-33"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"mkGroup(options: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"sep?: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"start?: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"end?: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,t.yg)("h4",d({},{id:"parameters-33"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"sep?: "),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"start?: "),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"end?: "),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"object specifying the following properties",(0,t.yg)("br",null)," - sep: (optional) a seperator StreamSource to insert between each Stream element",(0,t.yg)("br",null)," - start: (optional) a start StreamSource to prepend",(0,t.yg)("br",null)," - end: (optional) an end StreamSource to append")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3).mkGroup({ start: '<<', sep: '-', end: '>>' }).toArray()\n// => ['<', '<', 1, '-', 2, '-', 3, '>', '>']\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N)")),(0,t.yg)("h4",d({},{id:"overrides-40"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#mkGroup"}),"Stream.mkGroup"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"partition"}),(0,t.yg)("inlineCode",{parentName:"h3"},"partition")),(0,t.yg)("p",null,"Returns a tuple of which the first element is the result of collecting the elements for which the given ",(0,t.yg)("inlineCode",{parentName:"p"},"predicate")," is true, and the second one the result of collecting the other elements. Own reducers can be provided as collectors, by default the values are collected into an array.")),(0,t.yg)("h4",d({},{id:"definitions-8"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"partition<T2 extends T, RT, RF>(pred: (value: T, index: number) => value is T2, options: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"collectorTrue: Reducer<T2, RT>;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"collectorFalse: Reducer<Exclude<T, T2>, RF>;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): [true: RT, false: RF];"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"partition<T2 extends T>(pred: (value: T, index: number) => value is T2, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"collectorTrue?: undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"collectorFalse?: undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): [true: T2[], false: Exclude<T, T2>[]];"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"partition<RT, RF, T2 extends T = T>(pred: (value: T, index: number) => boolean, options: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"collectorTrue: Reducer<T "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," T2, RT>;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"collectorFalse: Reducer<T "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," T2, RF>;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): [true: RT, false: RF];"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"partition(pred: (value: T, index: number) => boolean, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"collectorTrue?: undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"collectorFalse?: undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): [true: T[], false: T[]];"))),(0,t.yg)("h4",d({},{id:"type-parameters-14"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"T2"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"T")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"RT"),(0,t.yg)("td",d({parentName:"tr"},{align:null})),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the reducer result type for the ",(0,t.yg)("inlineCode",{parentName:"td"},"collectorTrue")," value")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"RF"),(0,t.yg)("td",d({parentName:"tr"},{align:null})),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the reducer result type for the ",(0,t.yg)("inlineCode",{parentName:"td"},"collectorFalse")," value")))),(0,t.yg)("h4",d({},{id:"parameters-34"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"pred")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(value: T, index: number) => value is T2")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"a predicate receiving the value and its index")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"collectorTrue: Reducer<T2, RT>;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"collectorFalse: Reducer<Exclude<T, T2>, RF>;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,t.yg)("br",null)," - collectorTrue: (default: Reducer.toArray()) a reducer that collects the values for which the predicate is true",(0,t.yg)("br",null)," - collectorFalse: (default: Reducer.toArray()) a reducer that collects the values for which the predicate is false")))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"if the predicate is a type guard, the return type is automatically inferred")),(0,t.yg)("h4",d({},{id:"overrides-41"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#partition"}),"Stream.partition"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"prepend"}),(0,t.yg)("inlineCode",{parentName:"h3"},"prepend")),(0,t.yg)("p",null,"Returns the current stream preceded by the given ",(0,t.yg)("inlineCode",{parentName:"p"},"value"))),(0,t.yg)("h4",d({},{id:"definition-34"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"prepend(value: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,t.yg)("h4",d({},{id:"parameters-35"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"value")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/OptLazy/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,t.yg)("inlineCode",{parentName:"td"},"<T>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the value to prepend")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3).prepend(0).toArray()\n// => [0, 1, 2, 3]\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(1)")),(0,t.yg)("h4",d({},{id:"overrides-42"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#prepend"}),"Stream.prepend"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"reduce"}),(0,t.yg)("inlineCode",{parentName:"h3"},"reduce")),(0,t.yg)("p",null,"Applies the given ",(0,t.yg)("inlineCode",{parentName:"p"},"reducer")," to each element in the Stream, and returns the final result.")),(0,t.yg)("h4",d({},{id:"definitions-9"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"reduce<R, T2 = T>(reducer: Reducer<T "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," T2, R>): R;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"reduce<const S extends "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Reducer/CombineShape/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Reducer.CombineShape")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>>(shape: S & "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Reducer/CombineShape/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Reducer.CombineShape")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Reducer/CombineResult/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Reducer.CombineResult")),(0,t.yg)("inlineCode",{parentName:"p"},"<S>;"))),(0,t.yg)("h4",d({},{id:"type-parameters-15"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"R"),(0,t.yg)("td",d({parentName:"tr"},{align:null})),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the result type")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"T2"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"T")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",d({},{id:"parameters-36"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"reducer")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"Reducer<T "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," T2, R>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the ",(0,t.yg)("inlineCode",{parentName:"td"},"Reducer")," instance to use to apply to all Stream elements.")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"console.log(Stream.of(1, 2, 4).reduce(Reducer.sum))\n// => 7\nconsole.log(Stream.of(1, 2, 4).reduce(Reducer.product))\n// => 8\n"))),(0,t.yg)("h4",d({},{id:"overrides-43"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#reduce"}),"Stream.reduce"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"reducestream"}),(0,t.yg)("inlineCode",{parentName:"h3"},"reduceStream")),(0,t.yg)("p",null,"Returns a Stream where the given ",(0,t.yg)("inlineCode",{parentName:"p"},"reducer")," is applied to each element in the Stream.")),(0,t.yg)("h4",d({},{id:"definitions-10"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"reduceStream<R, T2 = T>(reducer: Reducer<T "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"},"T2, R>):"),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<R>;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"reduceStream<const S extends "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Reducer/CombineShape/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Reducer.CombineShape")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>>(shape: S & "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Reducer/CombineShape/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Reducer.CombineShape")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<"),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Reducer/CombineResult/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Reducer.CombineResult")),(0,t.yg)("inlineCode",{parentName:"p"},"<S>>;"))),(0,t.yg)("h4",d({},{id:"type-parameters-16"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"R"),(0,t.yg)("td",d({parentName:"tr"},{align:null})),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the resulting element type")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"T2"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"T")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",d({},{id:"parameters-37"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"reducer")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"Reducer<T "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," T2, R>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the ",(0,t.yg)("inlineCode",{parentName:"td"},"Reducer")," instance to use to apply to all Stream elements.")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"console.log(\nStream.of(1, 2, 4)\n.reduceStream(Reducer.sum)\n.toArray()\n)\n// => [1, 3, 7]\nconsole.log(\nStream.of(1, 2, 4)\n.reduce(Reducer.product)\n.toArray()\n)\n// => [1, 2, 8]\n"))),(0,t.yg)("h4",d({},{id:"overrides-44"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#reduceStream"}),"Stream.reduceStream"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"repeat"}),(0,t.yg)("inlineCode",{parentName:"h3"},"repeat")),(0,t.yg)("p",null,"Returns a non-empty Stream that returns the elements from this Stream given ",(0,t.yg)("inlineCode",{parentName:"p"},"amount")," of times.")),(0,t.yg)("h4",d({},{id:"definition-35"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"repeat(amount?: number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"},"undefined):"),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,t.yg)("h4",d({},{id:"parameters-38"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"amount")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"(default: undefined) the amount of times to return this Stream")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3).repeat()              // => Stream(1, 2, 3, 1, 2, 3, 1, 2, ...)\nStream.of(1, 2, 3).repeat(1).toArray()   // => [1, 2, 3]\nStream.of(1, 2, 3).repeat(3).toArray()   // => [1, 2, 3, 1, 2, 3, 1, 2, 3]\nStream.of(1, 2, 3).repeat(-3).toArray()  // => [1, 2, 3]\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"amount = undefined means that the Stream is repeated indefintely  @note amount = 1 means that the Stream is not repeated  @note amount < 1 will be normalized to amount = 1  @note O(1)")),(0,t.yg)("h4",d({},{id:"overrides-45"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#repeat"}),"Stream.repeat"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"single"}),(0,t.yg)("inlineCode",{parentName:"h3"},"single")),(0,t.yg)("p",null,"Returns the first element of the Stream if it only has one element, or a fallback value if the Stream does not have exactly one value.")),(0,t.yg)("h4",d({},{id:"definitions-11"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"single(): T "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"single<O>(otherwise: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,t.yg)("inlineCode",{parentName:"p"},"<O>): T "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," O;"))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.empty<number>().single()  // => undefined\nStream.of(1, 2, 3).single()      // => undefined\nStream.of(1).single()            // => 1\nStream.of(1, 2, 3).single(0)     // => 0\n"))),(0,t.yg)("h4",d({},{id:"overrides-46"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#single"}),"Stream.single"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"some"}),(0,t.yg)("inlineCode",{parentName:"h3"},"some")),(0,t.yg)("p",null,"Returns true if any element of the Stream satifies given ",(0,t.yg)("inlineCode",{parentName:"p"},"pred")," function.")),(0,t.yg)("h4",d({},{id:"definition-36"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"some(pred: (value: T, index: number) => boolean, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): boolean;"))),(0,t.yg)("h4",d({},{id:"parameters-39"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"pred")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(value: T, index: number) => boolean")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"a predicate function taking an element and its index")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"(optional) object specifying the following properties",(0,t.yg)("br",null)," - negate: (default: false) when true will negate the given predicate")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3).some((v, i) => v + i > 10) // => false\nStream.of(1, 2, 3).some((v, i) => v + i > 1)  // => true\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N)")),(0,t.yg)("h4",d({},{id:"overrides-47"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#some"}),"Stream.some"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"spliton"}),(0,t.yg)("inlineCode",{parentName:"h3"},"splitOn")),(0,t.yg)("p",null,"Returns a Stream of collections of Stream elements, where each collection is filled with elements of this Stream up to the next element that equals given ",(0,t.yg)("inlineCode",{parentName:"p"},"sepElem")," according to the given ",(0,t.yg)("inlineCode",{parentName:"p"},"eq")," function.")),(0,t.yg)("h4",d({},{id:"definitions-12"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"splitOn<R, T2 extends T = T>(sepElem: T, options: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"eq?: Eq<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"collector: Reducer<T "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," T2, R>;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<R>;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"splitOn(sepElem: T, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"eq?: Eq<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"collector?: undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<T[]>;"))),(0,t.yg)("h4",d({},{id:"type-parameters-17"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"R"),(0,t.yg)("td",d({parentName:"tr"},{align:null})),(0,t.yg)("td",d({parentName:"tr"},{align:null})),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the result type of the collector and the resulting stream element type")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"T2"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"T")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"T")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",d({},{id:"parameters-40"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"sepElem")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"T")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the separator element to look for")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"eq?: Eq<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"collector: Reducer<T "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," T2, R>;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"(optional) object specifying the following properties",(0,t.yg)("br",null)," - eq: (default: ",(0,t.yg)("inlineCode",{parentName:"td"},"Eq.objectIs"),") the ",(0,t.yg)("inlineCode",{parentName:"td"},"Eq")," instance to use to test equality of elements",(0,t.yg)("br",null)," - negate: (default: false) when true will negate the given Eq function - collector: (default: ",(0,t.yg)("inlineCode",{parentName:"td"},"Reducer.toArray()"),") the reducer to use to collect the window values")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.from('marmot').splitOn('m').toArray()  // => [[], ['a', 'r'], ['o', 't']]\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(1)")),(0,t.yg)("h4",d({},{id:"overrides-48"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#splitOn"}),"Stream.splitOn"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"splitonslice"}),(0,t.yg)("inlineCode",{parentName:"h3"},"splitOnSlice")),(0,t.yg)("p",null,"Returns a Stream of collections of Stream elements, where each collection is filled with elements of this Stream up to the next sequence of elements that equal the given ",(0,t.yg)("inlineCode",{parentName:"p"},"sepSeq")," sequence of elements according to the given ",(0,t.yg)("inlineCode",{parentName:"p"},"eq")," function.")),(0,t.yg)("h4",d({},{id:"definitions-13"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"splitOnSlice<R, T2 extends T = T>(sepSlice: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>, options: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"eq?: Eq<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"collector: Reducer<T "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," T2, R>;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<R>;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"splitOnSlice(sepSlice: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"eq?: Eq<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"collector?: undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<T[]>;"))),(0,t.yg)("h4",d({},{id:"type-parameters-18"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"R"),(0,t.yg)("td",d({parentName:"tr"},{align:null})),(0,t.yg)("td",d({parentName:"tr"},{align:null})),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the result type of the collector and the resulting stream element type")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"T2"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"T")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"T")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",d({},{id:"parameters-41"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"sepSlice")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<T>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"a sequence of elements that serves as a separator")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"eq?: Eq<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"collector: Reducer<T "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," T2, R>;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"(optional) object specifying the following properties",(0,t.yg)("br",null)," - eq: (default: ",(0,t.yg)("inlineCode",{parentName:"td"},"Eq.objectIs"),") the ",(0,t.yg)("inlineCode",{parentName:"td"},"Eq")," instance to use to test equality of elements",(0,t.yg)("br",null)," - collector: (default: ",(0,t.yg)("inlineCode",{parentName:"td"},"Reducer.toArray()"),") the reducer to use to collect the window values")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.from('marmot').splitOnSlice('mo').toArray()  // => [['m', 'a', 'r'], ['t']]\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(1)")),(0,t.yg)("h4",d({},{id:"overrides-49"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#splitOnSlice"}),"Stream.splitOnSlice"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"splitwhere"}),(0,t.yg)("inlineCode",{parentName:"h3"},"splitWhere")),(0,t.yg)("p",null,"Returns a Stream of collections of Stream elements, where each collection is filled with elements of this Stream up to the next element that satisfies give function ",(0,t.yg)("inlineCode",{parentName:"p"},"pred"),".")),(0,t.yg)("h4",d({},{id:"definitions-14"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"splitWhere<R, T2 extends T = T>(pred: (value: T, index: number) => boolean, options: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"collector: Reducer<T "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," T2, R>;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<R>;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"splitWhere(pred: (value: T, index: number) => boolean, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"collector?: undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<T[]>;"))),(0,t.yg)("h4",d({},{id:"type-parameters-19"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"R"),(0,t.yg)("td",d({parentName:"tr"},{align:null})),(0,t.yg)("td",d({parentName:"tr"},{align:null})),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the result type of the collector and the resulting stream element type")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"T2"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"T")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"T")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",d({},{id:"parameters-42"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"pred")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(value: T, index: number) => boolean")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"a predicate function taking an element and its index")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"collector: Reducer<T "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," T2, R>;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"(optional) object specifying the following properties",(0,t.yg)("br",null)," - negate: (default: false) when true will negate the given predicate - collector: (default: ",(0,t.yg)("inlineCode",{parentName:"td"},"Reducer.toArray()"),") the reducer to use to collect the window values")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3, 4).splitWhere(v => v == 3).toArray()  // => [[1, 2], [4]]\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(1)")),(0,t.yg)("h4",d({},{id:"overrides-50"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#splitWhere"}),"Stream.splitWhere"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"stream"}),(0,t.yg)("inlineCode",{parentName:"h3"},"stream")),(0,t.yg)("p",null,"Returns a non-empty stream of elements of type T.")),(0,t.yg)("h4",d({},{id:"definition-37"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"stream(): this;"))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3).stream()\n// => returns itself\n"))),(0,t.yg)("h4",d({},{id:"overrides-51"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Streamable/NonEmpty/interface#stream"}),"NonEmpty.stream"),", ",(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#stream"}),"Stream.stream"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"take"}),(0,t.yg)("inlineCode",{parentName:"h3"},"take")),(0,t.yg)("p",null,"Returns a stream that contains the elements of this Stream up to a maximum of ",(0,t.yg)("inlineCode",{parentName:"p"},"amount")," elements.")),(0,t.yg)("h4",d({},{id:"definition-38"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"take(amount: number): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,t.yg)("h4",d({},{id:"parameters-43"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"amount")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"number")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the maximum amount of elements to return from the resulting Stream")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3).take(2).toArray()   // => [1, 2]\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N) for most types of Stream")),(0,t.yg)("h4",d({},{id:"overrides-52"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#take"}),"Stream.take"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"takewhile"}),(0,t.yg)("inlineCode",{parentName:"h3"},"takeWhile")),(0,t.yg)("p",null,"Returns a Stream that contains the elements of this Stream up to the first element that does not satisfy given ",(0,t.yg)("inlineCode",{parentName:"p"},"pred")," function.")),(0,t.yg)("h4",d({},{id:"definition-39"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"takeWhile(pred: (value: T, index: number) => boolean, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,t.yg)("h4",d({},{id:"parameters-44"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"pred")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(value: T, index: number) => boolean")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"a predicate function taking an element and its index")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"(optional) object specifying the following properties",(0,t.yg)("br",null)," - negate: (default: false) when true will negate the given predicate")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3).takeWhile(v => v < 3).toArray()\n// => [1, 2]\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N)")),(0,t.yg)("h4",d({},{id:"overrides-53"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#takeWhile"}),"Stream.takeWhile"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"toarray"}),(0,t.yg)("inlineCode",{parentName:"h3"},"toArray")),(0,t.yg)("p",null,"Returns a non-empty Array containing all elements in the Stream.")),(0,t.yg)("h4",d({},{id:"definition-40"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"toArray(): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3).toArray()   // => [1, 2, 3]\n"))),(0,t.yg)("h4",d({},{id:"overrides-54"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#toArray"}),"Stream.toArray"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"tojson"}),(0,t.yg)("inlineCode",{parentName:"h3"},"toJSON")),(0,t.yg)("p",null,"Returns a JSON representation of the Stream.  ")),(0,t.yg)("h4",d({},{id:"definition-41"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"toJSON(): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/ToJSON/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"ToJSON")),(0,t.yg)("inlineCode",{parentName:"p"},"<T[], 'Stream'>;"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"take care not to call on infinite Streams")),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3).toJSON()   // => { dataType: 'Stream', value: [1, 2, 3] }\n"))),(0,t.yg)("h4",d({},{id:"overrides-55"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#toJSON"}),"Stream.toJSON"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"tostring"}),(0,t.yg)("inlineCode",{parentName:"h3"},"toString")),(0,t.yg)("p",null,"Returns a string representation of the Stream.  ")),(0,t.yg)("h4",d({},{id:"definition-42"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"toString(): string;"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"to avoid issues with potentially infinite stream, this method does not list the Stream elements. To do this, use ",(0,t.yg)("inlineCode",{parentName:"p"},"join"),".")),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3).toString()   // => 'Stream(...<potentially empty>)'\n"))),(0,t.yg)("h4",d({},{id:"overrides-56"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#toString"}),"Stream.toString"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"transform"}),(0,t.yg)("inlineCode",{parentName:"h3"},"transform")),(0,t.yg)("p",null,"Returns a Stream consisting of the concatenation of StreamSource elements resulting from applying the given ",(0,t.yg)("inlineCode",{parentName:"p"},"reducer")," to each element.")),(0,t.yg)("h4",d({},{id:"definitions-15"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"transform<R, T2 extends T = T>(transformer: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Transformer/NonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Transformer.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<T "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"},"T2, R>):"),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<R>;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"transform<R, T2 extends T = T>(transformer: Transformer<T "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"},"T2, R>):"),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<R>;"))),(0,t.yg)("h4",d({},{id:"type-parameters-20"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"R"),(0,t.yg)("td",d({parentName:"tr"},{align:null})),(0,t.yg)("td",d({parentName:"tr"},{align:null})),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the resulting element type")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"T2"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"T")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"T")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",d({},{id:"parameters-45"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"transformer")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/stream/Transformer/NonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Transformer.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"td"},"<T "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," T2, R>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"a reducer taking elements ot type T as input, and returing a ",(0,t.yg)("inlineCode",{parentName:"td"},"StreamSource")," of element type R")))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(1)")),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3, 4, 5, 6)\n.transform(Transformer.window(3))\n.toArray()\n// => [[1, 2, 3], [4, 5, 6]]\n"))),(0,t.yg)("h4",d({},{id:"overrides-57"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#transform"}),"Stream.transform"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"window"}),(0,t.yg)("inlineCode",{parentName:"h3"},"window")),(0,t.yg)("p",null,"Returns a Stream containing ",(0,t.yg)("inlineCode",{parentName:"p"},"windows")," of ",(0,t.yg)("inlineCode",{parentName:"p"},"windowSize")," consecutive elements of the source stream, with each window starting ",(0,t.yg)("inlineCode",{parentName:"p"},"skipAmount")," elements after the previous one.")),(0,t.yg)("h4",d({},{id:"definitions-16"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"window<R, T2 extends T = T>(windowSize: number, options: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"skipAmount?: number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"collector: Reducer<T "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," T2, R>;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<R>;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"window(windowSize: number, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"skipAmount?: number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"collector?: undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<T[]>;"))),(0,t.yg)("h4",d({},{id:"type-parameters-21"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"R"),(0,t.yg)("td",d({parentName:"tr"},{align:null})),(0,t.yg)("td",d({parentName:"tr"},{align:null})),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the collector reducer result type")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"T2"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"T")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"T")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",d({},{id:"parameters-46"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"windowSize")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"number")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the size in elements of the windows")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"skipAmount?: number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"collector: Reducer<T "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," T2, R>;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"(optional) object specifying the following properties",(0,t.yg)("br",null)," - skipAmount: (default: ",(0,t.yg)("inlineCode",{parentName:"td"},"windowSize"),") the amount of elements to skip to start the next window - collector: (default: ",(0,t.yg)("inlineCode",{parentName:"td"},"Reducer.toArray()"),") the reducer to use to collect the window values")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"console.log(Stream.of(1, 2, 3, 4, 5, 6, 7).window(3).toArray())\n// => [[1, 2, 3], [4, 5, 6]]\nconsole.log(Stream.of(1, 2, 3, 4, 5).window(3, 1).toArray())\n// => [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\nconsole.log(Stream.of(1, 2, 3, 4).window(2, 2, Reducer.toJSSet()).toArray())\n// => [Set(1, 2), Set(3, 4)]\n"))),(0,t.yg)("h4",d({},{id:"overrides-58"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#window"}),"Stream.window"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"withonly"}),(0,t.yg)("inlineCode",{parentName:"h3"},"withOnly")),(0,t.yg)("p",null,"Returns a Stream containing only those elements that are in the given ",(0,t.yg)("inlineCode",{parentName:"p"},"values")," array.")),(0,t.yg)("h4",d({},{id:"definition-43"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"withOnly<F extends T>(values: F[]): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<F>;"))),(0,t.yg)("h4",d({},{id:"type-parameters-22"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"F"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"T")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"a subtype of T to indicate the resulting element type")))),(0,t.yg)("h4",d({},{id:"parameters-47"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"values")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"F[]")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"an array of values to include")))),(0,t.yg)("h4",d({},{id:"overrides-59"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#withOnly"}),"Stream.withOnly"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"without"}),(0,t.yg)("inlineCode",{parentName:"h3"},"without")),(0,t.yg)("p",null,"Returns a Stream containing all elements except the elements in the given ",(0,t.yg)("inlineCode",{parentName:"p"},"values")," array.")),(0,t.yg)("h4",d({},{id:"definition-44"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"without<F extends T>(values: F[]): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<T extends Exclude<T, F> ? T : Exclude<T, F>>;"))),(0,t.yg)("h4",d({},{id:"type-parameters-23"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"F"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"T")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"a subtype of T to indicate the resulting element type")))),(0,t.yg)("h4",d({},{id:"parameters-48"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"values")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"F[]")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"an array of values to exclude")))),(0,t.yg)("h4",d({},{id:"overrides-60"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface#without"}),"Stream.without"))))}C.isMDXComponent=!0}}]);