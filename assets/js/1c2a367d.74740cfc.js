"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[87342],{15680:(e,t,r)=>{r.d(t,{xA:()=>l,yg:()=>d});var n=r(96540);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var m=n.createContext({}),y=function(e){var t=n.useContext(m),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},l=function(e){var t=y(e.components);return n.createElement(m.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},s=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,m=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),c=y(r),s=a,d=c["".concat(m,".").concat(s)]||c[s]||u[s]||i;return r?n.createElement(d,o(o({ref:t},l),{},{components:r})):n.createElement(d,o({ref:t},l))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=s;var p={};for(var m in t)hasOwnProperty.call(t,m)&&(p[m]=t[m]);p.originalType=e,p[c]="string"==typeof e?e:a,o[1]=p;for(var y=2;y<i;y++)o[y]=r[y];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}s.displayName="MDXCreateElement"},61325:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>b,contentTitle:()=>f,default:()=>N,frontMatter:()=>d,metadata:()=>g,toc:()=>h});var n=r(15680),a=Object.defineProperty,i=Object.defineProperties,o=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,m=Object.prototype.hasOwnProperty,y=Object.prototype.propertyIsEnumerable,l=(e,t,r)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,c=(e,t)=>{for(var r in t||(t={}))m.call(t,r)&&l(e,r,t[r]);if(p)for(var r of p(t))y.call(t,r)&&l(e,r,t[r]);return e},u=(e,t)=>i(e,o(t)),s=(e,t)=>{var r={};for(var n in e)m.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&p)for(var n of p(e))t.indexOf(n)<0&&y.call(e,n)&&(r[n]=e[n]);return r};const d={title:"ProximityMap.NonEmpty<K,V>",slug:"/rimbu/proximity/map/ProximityMap/NonEmpty/interface"},f="interface ProximityMap.NonEmpty<K,V>",g={unversionedId:"rimbu_proximity/map/ProximityMap/NonEmpty.interface",id:"rimbu_proximity/map/ProximityMap/NonEmpty.interface",title:"ProximityMap.NonEmpty<K,V>",description:"A non-empty type-invariant immutable Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys.",source:"@site/api/rimbu_proximity/map/ProximityMap/NonEmpty.interface.mdx",sourceDirName:"rimbu_proximity/map/ProximityMap",slug:"/rimbu/proximity/map/ProximityMap/NonEmpty/interface",permalink:"/api/rimbu/proximity/map/ProximityMap/NonEmpty/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"ProximityMap.NonEmpty<K,V>",slug:"/rimbu/proximity/map/ProximityMap/NonEmpty/interface"},sidebar:"defaultSidebar",previous:{title:"ProximityMap.Context<UK>",permalink:"/api/rimbu/proximity/map/ProximityMap/Context/interface"},next:{title:"ProximityMap.Types",permalink:"/api/rimbu/proximity/map/ProximityMap/Types/interface"}},b={},h=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>stream</code>",id:"stream",level:3},{value:"Definition",id:"definition",level:4}],v={toc:h},x="wrapper";function N(e){var t=e,{components:r}=t,a=s(t,["components"]);return(0,n.yg)(x,u(c(c({},v),a),{components:r,mdxType:"MDXLayout"}),(0,n.yg)("h1",c({},{id:"interface-proximitymapnonemptykv"}),(0,n.yg)("inlineCode",{parentName:"h1"},"interface ProximityMap.NonEmpty<K,V>")),(0,n.yg)("p",null,"A ",(0,n.yg)("strong",{parentName:"p"},"non-empty")," type-invariant immutable Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys.\nSee the ",(0,n.yg)("a",c({parentName:"p"},{href:"/docs/collections/map"}),"Map documentation")," and the ",(0,n.yg)("a",c({parentName:"p"},{href:"/api/rimbu/proximity/map/ProximityMap/interface"}),"ProximityMap API documentation")),(0,n.yg)("h2",c({},{id:"type-parameters"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",c({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",c({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",c({parentName:"tr"},{align:null}),"K"),(0,n.yg)("td",c({parentName:"tr"},{align:null}),"the key type")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",c({parentName:"tr"},{align:null}),"V"),(0,n.yg)("td",c({parentName:"tr"},{align:null}),"the value type")))),(0,n.yg)("admonition",c({},{title:"note",type:"note"}),(0,n.yg)("p",{parentName:"admonition"},"The ",(0,n.yg)("inlineCode",{parentName:"p"},"get()")," method is designed to perform a linear scan of all the keys, returning the value associated with the key having the least distance from the input key; however, optimized distance functions can greatly improve efficiency by preventing a full scan.")),(0,n.yg)("admonition",c({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",c({parentName:"pre"},{className:"language-ts"}),"const m1 = ProximityMap.empty<number, string>()\nconst m2 = ProximityMap.of([1, 'a'], [2, 'b'])\n"))),(0,n.yg)("h2",c({},{id:"methods"}),"Methods"),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",c({},{id:"stream"}),(0,n.yg)("inlineCode",{parentName:"h3"},"stream")),(0,n.yg)("p",null,"undocumented")),(0,n.yg)("h4",c({},{id:"definition"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"stream(): "),(0,n.yg)("a",c({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,n.yg)("inlineCode",{parentName:"p"},"<readonly [K, V]>;")))))}N.isMDXComponent=!0}}]);