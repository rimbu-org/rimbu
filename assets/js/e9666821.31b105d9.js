"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[55774],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>N});var n=a(67294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var m=n.createContext({}),o=function(e){var t=n.useContext(m),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},d=function(e){var t=o(e.components);return n.createElement(m.Provider,{value:t},e.children)},k="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},s=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,i=e.originalType,m=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),k=o(a),s=l,N=k["".concat(m,".").concat(s)]||k[s]||u[s]||i;return a?n.createElement(N,r(r({ref:t},d),{},{components:a})):n.createElement(N,r({ref:t},d))}));function N(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=a.length,r=new Array(i);r[0]=s;var p={};for(var m in t)hasOwnProperty.call(t,m)&&(p[m]=t[m]);p.originalType=e,p[k]="string"==typeof e?e:l,r[1]=p;for(var o=2;o<i;o++)r[o]=a[o];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}s.displayName="MDXCreateElement"},98373:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>y,default:()=>b,frontMatter:()=>N,metadata:()=>h,toc:()=>f});var n=a(3905),l=Object.defineProperty,i=Object.defineProperties,r=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,m=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable,d=(e,t,a)=>t in e?l(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,k=(e,t)=>{for(var a in t||(t={}))m.call(t,a)&&d(e,a,t[a]);if(p)for(var a of p(t))o.call(t,a)&&d(e,a,t[a]);return e},u=(e,t)=>i(e,r(t)),s=(e,t)=>{var a={};for(var n in e)m.call(e,n)&&t.indexOf(n)<0&&(a[n]=e[n]);if(null!=e&&p)for(var n of p(e))t.indexOf(n)<0&&o.call(e,n)&&(a[n]=e[n]);return a};const N={title:"BiMultiMapBase<K,V,Tp>",slug:"/rimbu/bimultimap/custom/BiMultiMapBase/interface"},y="interface BiMultiMapBase<K,V,Tp>",h={unversionedId:"rimbu_bimultimap/custom/BiMultiMapBase.interface",id:"rimbu_bimultimap/custom/BiMultiMapBase.interface",title:"BiMultiMapBase<K,V,Tp>",description:"undocumented",source:"@site/api/rimbu_bimultimap/custom/BiMultiMapBase.interface.mdx",sourceDirName:"rimbu_bimultimap/custom",slug:"/rimbu/bimultimap/custom/BiMultiMapBase/interface",permalink:"/api/rimbu/bimultimap/custom/BiMultiMapBase/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"BiMultiMapBase<K,V,Tp>",slug:"/rimbu/bimultimap/custom/BiMultiMapBase/interface"},sidebar:"defaultSidebar",previous:{title:"BiMultiMapBase.Types",permalink:"/api/rimbu/bimultimap/custom/BiMultiMapBase/Types/interface"},next:{title:"BiMultiMapBuilder<K,V,Tp,TpG>",permalink:"/api/rimbu/bimultimap/custom/BiMultiMapBuilder/class"}},c={},f=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>context</code>",id:"context",level:3},{value:"Definition",id:"definition",level:4},{value:"<code>isEmpty</code>",id:"isempty",level:3},{value:"Definition",id:"definition-1",level:4},{value:"<code>keySize</code>",id:"keysize",level:3},{value:"Definition",id:"definition-2",level:4},{value:"<code>keyValueMultiMap</code>",id:"keyvaluemultimap",level:3},{value:"Definition",id:"definition-3",level:4},{value:"<code>size</code>",id:"size",level:3},{value:"Definition",id:"definition-4",level:4},{value:"<code>valueKeyMultiMap</code>",id:"valuekeymultimap",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Methods",id:"methods",level:2},{value:"<code>[Symbol.iterator]</code>",id:"symboliterator",level:3},{value:"Definition",id:"definition-6",level:4},{value:"Overrides",id:"overrides",level:4},{value:"<code>add</code>",id:"add",level:3},{value:"Definition",id:"definition-7",level:4},{value:"Parameters",id:"parameters",level:4},{value:"<code>addEntries</code>",id:"addentries",level:3},{value:"Definitions",id:"definitions",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>assumeNonEmpty</code>",id:"assumenonempty",level:3},{value:"Definition",id:"definition-8",level:4},{value:"<code>filter</code>",id:"filter",level:3},{value:"Definition",id:"definition-9",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"<code>forEach</code>",id:"foreach",level:3},{value:"Definition",id:"definition-10",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"<code>getKeys</code>",id:"getkeys",level:3},{value:"Definition",id:"definition-11",level:4},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"<code>getValues</code>",id:"getvalues",level:3},{value:"Definition",id:"definition-12",level:4},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"<code>hasEntry</code>",id:"hasentry",level:3},{value:"Definition",id:"definition-13",level:4},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"<code>hasKey</code>",id:"haskey",level:3},{value:"Definition",id:"definition-14",level:4},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"<code>hasValue</code>",id:"hasvalue",level:3},{value:"Definition",id:"definition-15",level:4},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"<code>nonEmpty</code>",id:"nonempty",level:3},{value:"Definition",id:"definition-16",level:4},{value:"<code>removeEntries</code>",id:"removeentries",level:3},{value:"Definition",id:"definition-17",level:4},{value:"Type parameters",id:"type-parameters-6",level:4},{value:"Parameters",id:"parameters-9",level:4},{value:"<code>removeEntry</code>",id:"removeentry",level:3},{value:"Definition",id:"definition-18",level:4},{value:"Type parameters",id:"type-parameters-7",level:4},{value:"Parameters",id:"parameters-10",level:4},{value:"<code>removeKey</code>",id:"removekey",level:3},{value:"Definition",id:"definition-19",level:4},{value:"Type parameters",id:"type-parameters-8",level:4},{value:"Parameters",id:"parameters-11",level:4},{value:"<code>removeKeys</code>",id:"removekeys",level:3},{value:"Definition",id:"definition-20",level:4},{value:"Type parameters",id:"type-parameters-9",level:4},{value:"Parameters",id:"parameters-12",level:4},{value:"<code>removeValue</code>",id:"removevalue",level:3},{value:"Definition",id:"definition-21",level:4},{value:"Type parameters",id:"type-parameters-10",level:4},{value:"Parameters",id:"parameters-13",level:4},{value:"<code>removeValues</code>",id:"removevalues",level:3},{value:"Definition",id:"definition-22",level:4},{value:"Type parameters",id:"type-parameters-11",level:4},{value:"Parameters",id:"parameters-14",level:4},{value:"<code>setKeys</code>",id:"setkeys",level:3},{value:"Definitions",id:"definitions-1",level:4},{value:"Parameters",id:"parameters-15",level:4},{value:"<code>setValues</code>",id:"setvalues",level:3},{value:"Definitions",id:"definitions-2",level:4},{value:"Parameters",id:"parameters-16",level:4},{value:"<code>stream</code>",id:"stream",level:3},{value:"Definition",id:"definition-23",level:4},{value:"<code>streamKeys</code>",id:"streamkeys",level:3},{value:"Definition",id:"definition-24",level:4},{value:"<code>streamValues</code>",id:"streamvalues",level:3},{value:"Definition",id:"definition-25",level:4},{value:"<code>toArray</code>",id:"toarray",level:3},{value:"Definition",id:"definition-26",level:4},{value:"<code>toBuilder</code>",id:"tobuilder",level:3},{value:"Definition",id:"definition-27",level:4},{value:"<code>toJSON</code>",id:"tojson",level:3},{value:"Definition",id:"definition-28",level:4},{value:"<code>toString</code>",id:"tostring",level:3},{value:"Definition",id:"definition-29",level:4}],v={toc:f},g="wrapper";function b(e){var t=e,{components:a}=t,l=s(t,["components"]);return(0,n.kt)(g,u(k(k({},v),l),{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",k({},{id:"interface-bimultimapbasekvtp"}),(0,n.kt)("inlineCode",{parentName:"h1"},"interface BiMultiMapBase<K,V,Tp>")),(0,n.kt)("p",null,"undocumented"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Companion namespace:")," ",(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimultimap/custom/BiMultiMapBase/namespace"}),"BiMultiMapBase")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Extends:")," ",(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/FastIterable/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"FastIterable<T>"))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Implemented by:")," ",(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/core/HashBiMultiMap/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"HashBiMultiMap<K,V>")),", ",(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimultimap/BiMultiMap/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"BiMultiMap<K,V>")),", ",(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/core/SortedBiMultiMap/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"SortedBiMultiMap<K,V>")),", ",(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/core/BiMultiMap/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"BiMultiMap<K,V>")),", ",(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimultimap/custom/BiMultiMapEmpty/class"}),(0,n.kt)("inlineCode",{parentName:"a"},"BiMultiMapEmpty<K,V,Tp>")),", ",(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimultimap/HashBiMultiMap/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"HashBiMultiMap<K,V>")),", ",(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimultimap/SortedBiMultiMap/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"SortedBiMultiMap<K,V>")),", ",(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/bimultimap/custom/BiMultiMapBase/NonEmpty/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"BiMultiMapBase.NonEmpty<K,V,Tp>"))),(0,n.kt)("h2",k({},{id:"type-parameters"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Constraints"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Default"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"K"),(0,n.kt)("td",k({parentName:"tr"},{align:null})),(0,n.kt)("td",k({parentName:"tr"},{align:null})),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"undocumented")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"V"),(0,n.kt)("td",k({parentName:"tr"},{align:null})),(0,n.kt)("td",k({parentName:"tr"},{align:null})),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"undocumented")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"Tp"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/bimultimap/custom/BiMultiMapBase/Types/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"BiMultiMapBase.Types"))),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/bimultimap/custom/BiMultiMapBase/Types/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"BiMultiMapBase.Types"))),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"undocumented")))),(0,n.kt)("h2",k({},{id:"properties"}),"Properties"),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"context"}),(0,n.kt)("inlineCode",{parentName:"h3"},"context")),(0,n.kt)("p",null,"Returns the ",(0,n.kt)("inlineCode",{parentName:"p"},"context")," associated to this collection instance.")),(0,n.kt)("h4",k({},{id:"definition"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly context: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, K, V>['context'];")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"isempty"}),(0,n.kt)("inlineCode",{parentName:"h3"},"isEmpty")),(0,n.kt)("p",null,"Returns false since this collection is known to be non-empty.")),(0,n.kt)("h4",k({},{id:"definition-1"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly isEmpty: boolean;"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"HashBiMultiMap.of([1, 1], [2, 2]).isEmpty   // => false\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"keysize"}),(0,n.kt)("inlineCode",{parentName:"h3"},"keySize")),(0,n.kt)("p",null,"Returns the number of keys")),(0,n.kt)("h4",k({},{id:"definition-2"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly keySize: number;"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"HashBiMultiMap.of([1, 10], [1, 20]).keySize       // => 1\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"keyvaluemultimap"}),(0,n.kt)("inlineCode",{parentName:"h3"},"keyValueMultiMap")),(0,n.kt)("p",null,"Returns the MultiMap representation of the key to value mapping.")),(0,n.kt)("h4",k({},{id:"definition-3"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly keyValueMultiMap: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, K, V>['keyValueMultiMap'];"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"HashBiMultiMap.of([1, 10], [1, 20]).keyValueMap.toArray()\n// => [[1, [10, 20]]\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"size"}),(0,n.kt)("inlineCode",{parentName:"h3"},"size")),(0,n.kt)("p",null,"Returns the number of entries")),(0,n.kt)("h4",k({},{id:"definition-4"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly size: number;"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"HashBiMultiMap.of([1, 10], [2, 10]).keySize       // => 2\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"valuekeymultimap"}),(0,n.kt)("inlineCode",{parentName:"h3"},"valueKeyMultiMap")),(0,n.kt)("p",null,"Returns the MultiMap representation of the value to key mapping.")),(0,n.kt)("h4",k({},{id:"definition-5"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly valueKeyMultiMap: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, K, V>['valueKeyMultiMap'];"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"HashBiMultiMap.of([10, 1], [20, 1]).valueKeyMap.toArray()\n// => [[1, [10, 20]]\n")))),(0,n.kt)("h2",k({},{id:"methods"}),"Methods"),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"symboliterator"}),(0,n.kt)("inlineCode",{parentName:"h3"},"[Symbol.iterator]")),(0,n.kt)("p",null,"Returns a ",(0,n.kt)("inlineCode",{parentName:"p"},"FastIterator")," instance used to iterate over the values of this ",(0,n.kt)("inlineCode",{parentName:"p"},"Iterable"),".")),(0,n.kt)("h4",k({},{id:"definition-6"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"[Symbol.iterator](): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/FastIterator/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"FastIterator")),(0,n.kt)("inlineCode",{parentName:"p"},"<T>;"))),(0,n.kt)("h4",k({},{id:"overrides"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/FastIterable/interface#%5BSymbol.iterator%5D"}),"FastIterable.[Symbol.iterator]"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"add"}),(0,n.kt)("inlineCode",{parentName:"h3"},"add")),(0,n.kt)("p",null,"Returns the collection with the given ",(0,n.kt)("inlineCode",{parentName:"p"},"key")," associated to the given ",(0,n.kt)("inlineCode",{parentName:"p"},"value"),".")),(0,n.kt)("h4",k({},{id:"definition-7"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"add(key: K, value: V): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, K, V>['nonEmpty'];"))),(0,n.kt)("h4",k({},{id:"parameters"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"key")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"K")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the entry key to add")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"value")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"V")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the entry value to add")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"HashBiMultiMap.of([1, 1], [2, 2]).add(1, 2).toArray()\n// => [[1, 1], [1, 2], [2, 2]]\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"addentries"}),(0,n.kt)("inlineCode",{parentName:"h3"},"addEntries")),(0,n.kt)("p",null,"Returns the collection with the entries from the given ",(0,n.kt)("inlineCode",{parentName:"p"},"StreamSource")," ",(0,n.kt)("inlineCode",{parentName:"p"},"entries")," added.")),(0,n.kt)("h4",k({},{id:"definitions"}),"Definitions"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"addEntries(entries: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,n.kt)("inlineCode",{parentName:"p"},"<readonly [K, V]>): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, K, V>['nonEmpty'];"))),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"addEntries(entries: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.kt)("inlineCode",{parentName:"p"},"<readonly [K, V]>): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,n.kt)("h4",k({},{id:"parameters-1"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"entries")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,n.kt)("inlineCode",{parentName:"td"},"<readonly [K, V]>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"a ",(0,n.kt)("inlineCode",{parentName:"td"},"StreamSource")," containing tuples with a key and value")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"HashBiMultiMap.of([1, 1]).addEntries([[2, 2], [1, 3]]).toArray()\n// => [[1, 1], [1, 3], [2, 2]]\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"assumenonempty"}),(0,n.kt)("inlineCode",{parentName:"h3"},"assumeNonEmpty")),(0,n.kt)("p",null,"Returns the collection as a .NonEmpty type")),(0,n.kt)("h4",k({},{id:"definition-8"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"assumeNonEmpty(): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, K, V>['nonEmpty'];"))),(0,n.kt)("admonition",k({},{title:"throws",type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"RimbuError.EmptyCollectionAssumedNonEmptyError if the collection is empty")),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"HashBiMultiMap.empty<number, number>().assumeNonEmpty()   // => throws\nconst m: HashBiMultiMap<number, number> = HashBiMultiMap.of([1, 1], [2, 2])\nconst m2: HashBiMultiMap.NonEmpty<number, number> = m     // => compiler error\nconst m3: HashBiMultiMap.NonEmpty<number, number> = m.assumeNonEmpty()\n"))),(0,n.kt)("admonition",k({},{title:"note",type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"returns reference to this collection"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"filter"}),(0,n.kt)("inlineCode",{parentName:"h3"},"filter")),(0,n.kt)("p",null,"Returns a collection containing only those entries that satisfy given ",(0,n.kt)("inlineCode",{parentName:"p"},"pred")," predicate.")),(0,n.kt)("h4",k({},{id:"definition-9"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"filter(pred: (entry: [K, V], index: number, halt: () => void) => boolean, options?: {"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"negate?: boolean;"),(0,n.kt)("br",null),"\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"}): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,n.kt)("h4",k({},{id:"parameters-2"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"pred")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"(entry: [K, V], index: number, halt: () => void) => boolean")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"a predicate function receiving:",(0,n.kt)("br",null)," - ",(0,n.kt)("inlineCode",{parentName:"td"},"entry"),": the next entry",(0,n.kt)("br",null)," - ",(0,n.kt)("inlineCode",{parentName:"td"},"index"),": the entry index",(0,n.kt)("br",null)," - ",(0,n.kt)("inlineCode",{parentName:"td"},"halt"),": a function that, when called, ensures no next elements are passed")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"options")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"{"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"td"},"negate?: boolean;"),(0,n.kt)("br",null),"\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"td"},"}")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,n.kt)("br",null)," - negate: (default: false) when true will negate the given predicate")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"HashBiMultiMap.of([1, 'a'], [2, 'b'], [3, 'c']).filter(entry => entry[0] === 2 || entry[1] === 'c').toArray()\n// => [[2, 'b'], [3, 'c']]\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"foreach"}),(0,n.kt)("inlineCode",{parentName:"h3"},"forEach")),(0,n.kt)("p",null,"Performs given function ",(0,n.kt)("inlineCode",{parentName:"p"},"f")," for each entry of the collection, using given ",(0,n.kt)("inlineCode",{parentName:"p"},"state")," as initial traversal state.")),(0,n.kt)("h4",k({},{id:"definition-10"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"forEach(f: (entry: [K, V], index: number, halt: () => void) => void, options?: {"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"state?: TraverseState;"),(0,n.kt)("br",null),"\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"}): void;"))),(0,n.kt)("h4",k({},{id:"parameters-3"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"f")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"(entry: [K, V], index: number, halt: () => void) => void")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the function to perform for each entry, receiving:",(0,n.kt)("br",null)," - ",(0,n.kt)("inlineCode",{parentName:"td"},"entry"),": the next tuple of a key and value",(0,n.kt)("br",null)," - ",(0,n.kt)("inlineCode",{parentName:"td"},"index"),": the index of the element",(0,n.kt)("br",null)," - ",(0,n.kt)("inlineCode",{parentName:"td"},"halt"),": a function that, if called, ensures that no new elements are passed")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"options")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"{"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"td"},"state?: TraverseState;"),(0,n.kt)("br",null),"\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"td"},"}")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,n.kt)("br",null)," - state: (optional) the traversal state")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"HashBiMultiMap.of([1, 'a'], [2, 'b'], [3, 'c']).forEach((entry, i, halt) => {\nconsole.log([entry[1], entry[0]]);\nif (i >= 1) halt();\n})\n// => logs ['a', 1]  ['b', 2]\n"))),(0,n.kt)("admonition",k({},{title:"note",type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"O(N)"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"getkeys"}),(0,n.kt)("inlineCode",{parentName:"h3"},"getKeys")),(0,n.kt)("p",null,"Returns a collection containing the keys associated with the given ",(0,n.kt)("inlineCode",{parentName:"p"},"value"),".")),(0,n.kt)("h4",k({},{id:"definition-11"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"getKeys<UV = V>(value: RelatedTo<V, UV>): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, K, V>['valueMultiMapValues'];"))),(0,n.kt)("h4",k({},{id:"type-parameters-1"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Default"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"UV"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"V")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-4"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"value")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"RelatedTo<V, UV>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the value of which to find the keys")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const m = HashBiMultiMap.of([1, 1], [2, 1]);\nm.getKeys(1).toArray()\n// => [1, 2]\nm.getKeys(5).toArray()\n// => []\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"getvalues"}),(0,n.kt)("inlineCode",{parentName:"h3"},"getValues")),(0,n.kt)("p",null,"Returns a collection containing the values associated with the given ",(0,n.kt)("inlineCode",{parentName:"p"},"key"),".")),(0,n.kt)("h4",k({},{id:"definition-12"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"getValues<UK = K>(key: RelatedTo<K, UK>): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, K, V>['keyMultiMapValues'];"))),(0,n.kt)("h4",k({},{id:"type-parameters-2"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Default"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"UK"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"K")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-5"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"key")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"RelatedTo<K, UK>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the key of which to find the values")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const m = HashBiMultiMap.of([1, 1], [1, 2]);\nm.getValues(1).toArray()\n// => [1, 2]\nm.getValues(5).toArray()\n// => []\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"hasentry"}),(0,n.kt)("inlineCode",{parentName:"h3"},"hasEntry")),(0,n.kt)("p",null,"Returns true if the given key and value entry is in the collection.")),(0,n.kt)("h4",k({},{id:"definition-13"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"hasEntry<UK = K, UV = V>(key: RelatedTo<K, UK>, value: RelatedTo<V, UV>): boolean;"))),(0,n.kt)("h4",k({},{id:"type-parameters-3"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Default"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"UK"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"K")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"UV"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"V")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-6"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"key")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"RelatedTo<K, UK>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the entry key to look for")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"value")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"RelatedTo<V, UV>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the entry value to look for")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const m = HashBiMultiMap.of([1, 'a'], [2, 'b'])\nm.hasEntry(2, 'b')    // => true\nm.hasEntry(2, 'c')    // => false\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"haskey"}),(0,n.kt)("inlineCode",{parentName:"h3"},"hasKey")),(0,n.kt)("p",null,"Returns true if the given ",(0,n.kt)("inlineCode",{parentName:"p"},"key")," is present in the collection.")),(0,n.kt)("h4",k({},{id:"definition-14"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"hasKey<UK = K>(key: RelatedTo<K, UK>): boolean;"))),(0,n.kt)("h4",k({},{id:"type-parameters-4"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Default"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"UK"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"K")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-7"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"key")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"RelatedTo<K, UK>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the key to look for")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const m = HashBiMultiMap.of([1, 'a'], [2, 'b'])\nm.hasKey(2)    // => true\nm.hasKey(3)    // => false\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"hasvalue"}),(0,n.kt)("inlineCode",{parentName:"h3"},"hasValue")),(0,n.kt)("p",null,"Returns true if the given ",(0,n.kt)("inlineCode",{parentName:"p"},"value")," is present in the collection.")),(0,n.kt)("h4",k({},{id:"definition-15"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"hasValue<UV = V>(key: RelatedTo<V, UV>): boolean;"))),(0,n.kt)("h4",k({},{id:"type-parameters-5"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Default"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"UV"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"V")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-8"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"key")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"RelatedTo<V, UV>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const m = HashBiMultiMap.of([1, 'a'], [2, 'b'])\nm.hasKey('a')    // => true\nm.hasKey('z')    // => false\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"nonempty"}),(0,n.kt)("inlineCode",{parentName:"h3"},"nonEmpty")),(0,n.kt)("p",null,"Returns true if there is at least one entry in the collection, and instructs the compiler to treat the collection as a .NonEmpty type.")),(0,n.kt)("h4",k({},{id:"definition-16"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"nonEmpty(): this is "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, K, V>['nonEmpty'];"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const m: HashBiMultiMap<number, number> = HashBiMultiMap.of([1, 1], [2, 2])\nm.stream().first(0)     // compiler allows fallback value since the Stream may be empty\nif (m.nonEmpty()) {\nm.stream().first(0)   // compiler error: fallback value not allowed since Stream is not empty\n}\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"removeentries"}),(0,n.kt)("inlineCode",{parentName:"h3"},"removeEntries")),(0,n.kt)("p",null,"Returns the collection where the entries in the given ",(0,n.kt)("inlineCode",{parentName:"p"},"entries")," StreamSource are removed if present.")),(0,n.kt)("h4",k({},{id:"definition-17"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"removeEntries<UK = K, UV = V>(entries: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.kt)("inlineCode",{parentName:"p"},"<[RelatedTo<K, UK>, RelatedTo<V, UV>]>): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,n.kt)("h4",k({},{id:"type-parameters-6"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Default"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"UK"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"K")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"UV"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"V")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-9"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"entries")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.kt)("inlineCode",{parentName:"td"},"<[RelatedTo<K, UK>, RelatedTo<V, UV>]>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"a StreamSource containing entries to remove")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const m = HashBiMultiMap.of([1, 1], [2, 2])\nm.removeEntries([[2, 2], [2, 3]]).toArray()     // => [[1, 1]]\nm.removeEntries([[1, 2], [4, 3]]).toArray()     // => [[1, 1], [2, 2]]\nm.removeEntries([[3, 3]]) === m                 // => true\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"removeentry"}),(0,n.kt)("inlineCode",{parentName:"h3"},"removeEntry")),(0,n.kt)("p",null,"Returns the collection where the entry with given ",(0,n.kt)("inlineCode",{parentName:"p"},"key")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"value")," is removed if present.")),(0,n.kt)("h4",k({},{id:"definition-18"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"removeEntry<UK = K, UV = V>(key: RelatedTo<K, UK>, value: RelatedTo<V, UV>): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,n.kt)("h4",k({},{id:"type-parameters-7"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Default"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"UK"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"K")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"UV"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"V")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-10"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"key")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"RelatedTo<K, UK>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the entry key")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"value")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"RelatedTo<V, UV>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the entry value")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const m = HashBiMultiMap.of([1, 1], [2, 2])\nm.removeEntry(2, 2).toArray()     // => [[1, 1]]\nm.removeEntry(1, 2).toArray()     // => [[1, 1], [2, 2]]\nm.removeEntry(3, 3) === m         // => true\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"removekey"}),(0,n.kt)("inlineCode",{parentName:"h3"},"removeKey")),(0,n.kt)("p",null,"Returns the collection where the entries associated with given ",(0,n.kt)("inlineCode",{parentName:"p"},"key")," are removed if it was part of the collection.")),(0,n.kt)("h4",k({},{id:"definition-19"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"removeKey<UK = K>(key: RelatedTo<K, UK>): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,n.kt)("h4",k({},{id:"type-parameters-8"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Default"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"UK"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"K")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-11"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"key")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"RelatedTo<K, UK>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the key of the entries to remove")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const m = HashBiMultiMap.of([1, 1], [1, 2])\nm.removeKey(2).toArray()   // => [1, 2]\nm.removeKey(3) === m       // true\n"))),(0,n.kt)("admonition",k({},{title:"note",type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"guarantees same object reference if the key is not present"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"removekeys"}),(0,n.kt)("inlineCode",{parentName:"h3"},"removeKeys")),(0,n.kt)("p",null,"Returns the collection where the entries associated with each key in given ",(0,n.kt)("inlineCode",{parentName:"p"},"keys")," are removed if they were present.")),(0,n.kt)("h4",k({},{id:"definition-20"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"removeKeys<UK = K>(keys: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.kt)("inlineCode",{parentName:"p"},"<RelatedTo<K, UK>>): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,n.kt)("h4",k({},{id:"type-parameters-9"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Default"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"UK"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"K")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-12"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"keys")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.kt)("inlineCode",{parentName:"td"},"<RelatedTo<K, UK>>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"a ",(0,n.kt)("inlineCode",{parentName:"td"},"StreamSource")," of keys to remove")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const m = HashBiMultiMap.of([1, 1], [2, 2])\nm.removeKeys([1, 3]).toArray()     // => [[2, 2]]\nm.removeKeys([1, 3, 2]).toArray()  // => []\nm.removeKeys([3, 4, 5]) === m      // => true\n"))),(0,n.kt)("admonition",k({},{title:"note",type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"guarantees same object reference if none of the keys are present"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"removevalue"}),(0,n.kt)("inlineCode",{parentName:"h3"},"removeValue")),(0,n.kt)("p",null,"Returns the collection where the entries associated with given ",(0,n.kt)("inlineCode",{parentName:"p"},"value")," are removed if it was part of the collection.")),(0,n.kt)("h4",k({},{id:"definition-21"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"removeValue<UV = V>(value: RelatedTo<V, UV>): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,n.kt)("h4",k({},{id:"type-parameters-10"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Default"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"UV"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"V")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-13"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"value")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"RelatedTo<V, UV>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the value of the entries to remove")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const m = HashBiMultiMap.of([1, 2], [2, 2])\nm.removeValue(2).toArray()   // => [1, 2]\nm.removeValue(3) === m       // true\n"))),(0,n.kt)("admonition",k({},{title:"note",type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"guarantees same object reference if the key is not present"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"removevalues"}),(0,n.kt)("inlineCode",{parentName:"h3"},"removeValues")),(0,n.kt)("p",null,"Returns the collection where the entries associated with each value in given ",(0,n.kt)("inlineCode",{parentName:"p"},"values")," are removed if they were present.")),(0,n.kt)("h4",k({},{id:"definition-22"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"removeValues<UV = V>(values: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.kt)("inlineCode",{parentName:"p"},"<RelatedTo<V, UV>>): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,n.kt)("h4",k({},{id:"type-parameters-11"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Default"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"UV"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"V")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-14"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"values")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.kt)("inlineCode",{parentName:"td"},"<RelatedTo<V, UV>>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"a ",(0,n.kt)("inlineCode",{parentName:"td"},"StreamSource")," of values to remove")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const m = HashBiMultiMap.of([1, 1], [2, 2])\nm.removeValues([1, 3]).toArray()     // => [[2, 2]]\nm.removeValues([1, 3, 2]).toArray()  // => []\nm.removeValues([3, 4, 5]) === m      // => true\n"))),(0,n.kt)("admonition",k({},{title:"note",type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"guarantees same object reference if none of the keys are present"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"setkeys"}),(0,n.kt)("inlineCode",{parentName:"h3"},"setKeys")),(0,n.kt)("p",null,"Returns the collection with the keys from the given ",(0,n.kt)("inlineCode",{parentName:"p"},"keys")," StreamSource associated with the given ",(0,n.kt)("inlineCode",{parentName:"p"},"value"),".")),(0,n.kt)("h4",k({},{id:"definitions-1"}),"Definitions"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"setKeys(value: V, keys: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,n.kt)("inlineCode",{parentName:"p"},"<K>): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, K, V>['nonEmpty'];"))),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"setKeys(value: V, keys: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.kt)("inlineCode",{parentName:"p"},"<K>): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,n.kt)("h4",k({},{id:"parameters-15"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"value")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"V")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the entry value")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"keys")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,n.kt)("inlineCode",{parentName:"td"},"<K>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"a ",(0,n.kt)("inlineCode",{parentName:"td"},"StreamSource")," containing keys to associate with the given ",(0,n.kt)("inlineCode",{parentName:"td"},"value"))))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"HashBiMultiMap.of([1, 1]).setKeys(1, [2, 3]).toArray()\n// => [[1, 1], [2, 1], [3, 1]]\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"setvalues"}),(0,n.kt)("inlineCode",{parentName:"h3"},"setValues")),(0,n.kt)("p",null,"Returns the collection with the values from the given ",(0,n.kt)("inlineCode",{parentName:"p"},"values")," StreamSource associated with the given ",(0,n.kt)("inlineCode",{parentName:"p"},"key"),".")),(0,n.kt)("h4",k({},{id:"definitions-2"}),"Definitions"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"setValues(key: K, values: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,n.kt)("inlineCode",{parentName:"p"},"<V>): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, K, V>['nonEmpty'];"))),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"setValues(key: K, values: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.kt)("inlineCode",{parentName:"p"},"<V>): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,n.kt)("h4",k({},{id:"parameters-16"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"key")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"K")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the entry key")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"values")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,n.kt)("inlineCode",{parentName:"td"},"<V>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"a ",(0,n.kt)("inlineCode",{parentName:"td"},"StreamSource")," containing values to associate with the given ",(0,n.kt)("inlineCode",{parentName:"td"},"key"))))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"HashBiMultiMap.of([1, 1]).setValues(1, [2, 3]).toArray()\n// => [[1, 1], [1, 2], [1, 3]]\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"stream"}),(0,n.kt)("inlineCode",{parentName:"h3"},"stream")),(0,n.kt)("p",null,"Returns a ",(0,n.kt)("inlineCode",{parentName:"p"},"Stream")," containing all entries of this collection as tuples of key and value.")),(0,n.kt)("h4",k({},{id:"definition-23"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"stream(): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Stream")),(0,n.kt)("inlineCode",{parentName:"p"},"<[K, V]>;"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"HashBiMultiMap.of([1, 10], [1, 20]).stream().toArray()  // => [[1, 10], [1, 20]]\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"streamkeys"}),(0,n.kt)("inlineCode",{parentName:"h3"},"streamKeys")),(0,n.kt)("p",null,"Returns a ",(0,n.kt)("inlineCode",{parentName:"p"},"Stream")," containing all keys of this collection.")),(0,n.kt)("h4",k({},{id:"definition-24"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"streamKeys(): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Stream")),(0,n.kt)("inlineCode",{parentName:"p"},"<K>;"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"HashBiMultiMap.of([[1, 'a'], [2, 'b']]).streamKeys().toArray()   // => [1, 2]\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"streamvalues"}),(0,n.kt)("inlineCode",{parentName:"h3"},"streamValues")),(0,n.kt)("p",null,"Returns a ",(0,n.kt)("inlineCode",{parentName:"p"},"Stream")," containing all values of this collection.")),(0,n.kt)("h4",k({},{id:"definition-25"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"streamValues(): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Stream")),(0,n.kt)("inlineCode",{parentName:"p"},"<V>;"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"HashBiMultiMap.of([[1, 'a'], [2, 'b']]).streamValues().toArray()   // => ['a', 'b']\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"toarray"}),(0,n.kt)("inlineCode",{parentName:"h3"},"toArray")),(0,n.kt)("p",null,"Returns an array containing all entries in this collection.")),(0,n.kt)("h4",k({},{id:"definition-26"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"toArray(): [K, V][];"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"HashBiMultiMap.of([1, 'a'], [2, 'b']).toArray()   // => [[1, 'a'], [2, 'b']]\n"))),(0,n.kt)("admonition",k({},{title:"note",type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"O(log(N))"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"tobuilder"}),(0,n.kt)("inlineCode",{parentName:"h3"},"toBuilder")),(0,n.kt)("p",null,"Returns a builder object containing the entries of this collection.")),(0,n.kt)("h4",k({},{id:"definition-27"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"toBuilder(): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, K, V>['builder'];"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const builder: HashBiMultiMap.Builder<number, string> = HashBiMultiMap.of([1, 'a'], [2, 'b']).toBuilder()\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"tojson"}),(0,n.kt)("inlineCode",{parentName:"h3"},"toJSON")),(0,n.kt)("p",null,"Returns a JSON representation of this collection.")),(0,n.kt)("h4",k({},{id:"definition-28"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"toJSON(): ToJSON<[K, V[]][], this['context']['typeTag']>;"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"HashBiMultiMap.of([1, 'a'], [2, 'b']).toJSON()   // => { dataType: 'HashBiMultiMap', value: [[1, ['a']], [2, ['b']]] }\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"tostring"}),(0,n.kt)("inlineCode",{parentName:"h3"},"toString")),(0,n.kt)("p",null,"Returns a string representation of this collection.")),(0,n.kt)("h4",k({},{id:"definition-29"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"toString(): string;"))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"HashBiMultiMap.of([1, 'a'], [2, 'b']).toString()   // => HashBiMultiMap(1 <=> ['a'], 2 <=> ['b'])\n")))))}b.isMDXComponent=!0}}]);