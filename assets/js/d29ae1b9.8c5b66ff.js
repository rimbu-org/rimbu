"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[57874],{15680:(e,t,n)=>{n.d(t,{xA:()=>s,yg:()=>f});var r=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=u(n),d=a,f=p["".concat(l,".").concat(d)]||p[d]||m[d]||i;return n?r.createElement(f,o(o({ref:t},s),{},{components:n})):r.createElement(f,o({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[p]="string"==typeof e?e:a,o[1]=c;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},94041:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>y,default:()=>O,frontMatter:()=>f,metadata:()=>g,toc:()=>b});var r=n(15680),a=Object.defineProperty,i=Object.defineProperties,o=Object.getOwnPropertyDescriptors,c=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,s=(e,t,n)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,p=(e,t)=>{for(var n in t||(t={}))l.call(t,n)&&s(e,n,t[n]);if(c)for(var n of c(t))u.call(t,n)&&s(e,n,t[n]);return e},m=(e,t)=>i(e,o(t)),d=(e,t)=>{var n={};for(var r in e)l.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&c)for(var r of c(e))t.indexOf(r)<0&&u.call(e,r)&&(n[r]=e[r]);return n};const f={title:"Mutex (namespace)",slug:"/rimbu/channel/Mutex/namespace"},y="namespace Mutex",g={unversionedId:"rimbu_channel/Mutex/index",id:"rimbu_channel/Mutex/index",title:"Mutex (namespace)",description:"A Mutex is used to restrict access to a shared resource in a concurrent environment. The Mutex can be used to acquire a lock for the resource, preventing others using the Mutext from accessing the resource. When finished using the resource, the lock can be released, allowing other waiting processes to acquire a lock.",source:"@site/api/rimbu_channel/Mutex/index.mdx",sourceDirName:"rimbu_channel/Mutex",slug:"/rimbu/channel/Mutex/namespace",permalink:"/api/rimbu/channel/Mutex/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"Mutex (namespace)",slug:"/rimbu/channel/Mutex/namespace"},sidebar:"defaultSidebar",previous:{title:"CrossChannel<TSend,TReceive>",permalink:"/api/rimbu/channel/CrossChannel/interface"},next:{title:"Mutex.Constructors",permalink:"/api/rimbu/channel/Mutex/Constructors/interface"}},h={},b=[{value:"Interfaces",id:"interfaces",level:2},{value:"Static Methods",id:"static-methods",level:2},{value:"<code>create</code>",id:"create",level:3},{value:"Definition",id:"definition",level:4}],x={toc:b},v="wrapper";function O(e){var t=e,{components:n}=t,a=d(t,["components"]);return(0,r.yg)(v,m(p(p({},x),a),{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",p({},{id:"namespace-mutex"}),(0,r.yg)("inlineCode",{parentName:"h1"},"namespace Mutex")),(0,r.yg)("p",null,"A Mutex is used to restrict access to a shared resource in a concurrent environment. The Mutex can be used to acquire a lock for the resource, preventing others using the Mutext from accessing the resource. When finished using the resource, the lock can be released, allowing other waiting processes to acquire a lock."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Companion interface:")," ",(0,r.yg)("a",p({parentName:"p"},{href:"/api/rimbu/channel/Mutex/interface"}),(0,r.yg)("inlineCode",{parentName:"a"},"Mutex"))),(0,r.yg)("h2",p({},{id:"interfaces"}),"Interfaces"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",p({parentName:"tr"},{align:null}),"Name"),(0,r.yg)("th",p({parentName:"tr"},{align:null}),"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",p({parentName:"tr"},{align:null}),(0,r.yg)("a",p({parentName:"td"},{href:"/api/rimbu/channel/Mutex/Constructors/interface"}),(0,r.yg)("inlineCode",{parentName:"a"},"Mutex.Constructors"))),(0,r.yg)("td",p({parentName:"tr"},{align:null}),"Defines the static ",(0,r.yg)("inlineCode",{parentName:"td"},"Mutex")," API.")))),(0,r.yg)("h2",p({},{id:"static-methods"}),"Static Methods"),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("h3",p({},{id:"create"}),(0,r.yg)("inlineCode",{parentName:"h3"},"create")),(0,r.yg)("p",null,"Returns a new ",(0,r.yg)("inlineCode",{parentName:"p"},"Mutex")," instance that can be used to enforce single access to a shared resource.")),(0,r.yg)("h4",p({},{id:"definition"}),"Definition"),(0,r.yg)("code",null,(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"create(): "),(0,r.yg)("a",p({parentName:"p"},{href:"/api/rimbu/channel/Mutex/interface"}),(0,r.yg)("inlineCode",{parentName:"a"},"Mutex")),(0,r.yg)("inlineCode",{parentName:"p"},";")))))}O.isMDXComponent=!0}}]);