"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[21674],{15680:(e,n,a)=>{a.d(n,{xA:()=>o,yg:()=>u});var t=a(96540);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function m(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var y=t.createContext({}),p=function(e){var n=t.useContext(y),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},o=function(e){var n=p(e.components);return t.createElement(y.Provider,{value:n},e.children)},g="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},s=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,y=e.parentName,o=m(e,["components","mdxType","originalType","parentName"]),g=p(a),s=r,u=g["".concat(y,".").concat(s)]||g[s]||d[s]||i;return a?t.createElement(u,l(l({ref:n},o),{},{components:a})):t.createElement(u,l({ref:n},o))}));function u(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=s;var m={};for(var y in n)hasOwnProperty.call(n,y)&&(m[y]=n[y]);m.originalType=e,m[g]="string"==typeof e?e:r,l[1]=m;for(var p=2;p<i;p++)l[p]=a[p];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}s.displayName="MDXCreateElement"},49306:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>h,contentTitle:()=>c,default:()=>C,frontMatter:()=>u,metadata:()=>N,toc:()=>f});var t=a(15680),r=Object.defineProperty,i=Object.defineProperties,l=Object.getOwnPropertyDescriptors,m=Object.getOwnPropertySymbols,y=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,o=(e,n,a)=>n in e?r(e,n,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[n]=a,g=(e,n)=>{for(var a in n||(n={}))y.call(n,a)&&o(e,a,n[a]);if(m)for(var a of m(n))p.call(n,a)&&o(e,a,n[a]);return e},d=(e,n)=>i(e,l(n)),s=(e,n)=>{var a={};for(var t in e)y.call(e,t)&&n.indexOf(t)<0&&(a[t]=e[t]);if(null!=e&&m)for(var t of m(e))n.indexOf(t)<0&&p.call(e,t)&&(a[t]=e[t]);return a};const u={title:"AsyncStream.NonEmpty<T>",slug:"/rimbu/stream/AsyncStream/NonEmpty/interface"},c="interface AsyncStream.NonEmpty<T>",N={unversionedId:"rimbu_stream/AsyncStream/NonEmpty.interface",id:"rimbu_stream/AsyncStream/NonEmpty.interface",title:"AsyncStream.NonEmpty<T>",description:"A non-empty and possibly infinite asynchronous sequence of elements of type T. See the Stream documentation and the AsyncStream API documentation",source:"@site/api/rimbu_stream/AsyncStream/NonEmpty.interface.mdx",sourceDirName:"rimbu_stream/AsyncStream",slug:"/rimbu/stream/AsyncStream/NonEmpty/interface",permalink:"/api/rimbu/stream/AsyncStream/NonEmpty/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"AsyncStream.NonEmpty<T>",slug:"/rimbu/stream/AsyncStream/NonEmpty/interface"},sidebar:"defaultSidebar",previous:{title:"AsyncStream (namespace)",permalink:"/api/rimbu/stream/AsyncStream/namespace"},next:{title:"AsyncStream<T>",permalink:"/api/rimbu/stream/AsyncStream/interface"}},h={},f=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>asNormal</code>",id:"asnormal",level:3},{value:"Definition",id:"definition",level:4},{value:"<code>asyncStream</code>",id:"asyncstream",level:3},{value:"Definition",id:"definition-1",level:4},{value:"<code>concat</code>",id:"concat",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters",level:4},{value:"<code>distinctPrevious</code>",id:"distinctprevious",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>first</code>",id:"first",level:3},{value:"Definition",id:"definition-4",level:4},{value:"<code>flatMap</code>",id:"flatmap",level:3},{value:"Definitions",id:"definitions",level:4},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"<code>flatZip</code>",id:"flatzip",level:3},{value:"Definitions",id:"definitions-1",level:4},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"<code>foldStream</code>",id:"foldstream",level:3},{value:"Definitions",id:"definitions-2",level:4},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"<code>indexed</code>",id:"indexed",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"<code>intersperse</code>",id:"intersperse",level:3},{value:"Definition",id:"definition-6",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"<code>last</code>",id:"last",level:3},{value:"Definition",id:"definition-7",level:4},{value:"<code>map</code>",id:"map",level:3},{value:"Definition",id:"definition-8",level:4},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"<code>mapPure</code>",id:"mappure",level:3},{value:"Definition",id:"definition-9",level:4},{value:"Type parameters",id:"type-parameters-6",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"<code>max</code>",id:"max",level:3},{value:"Definition",id:"definition-10",level:4},{value:"<code>maxBy</code>",id:"maxby",level:3},{value:"Definition",id:"definition-11",level:4},{value:"Parameters",id:"parameters-9",level:4},{value:"<code>min</code>",id:"min",level:3},{value:"Definition",id:"definition-12",level:4},{value:"<code>minBy</code>",id:"minby",level:3},{value:"Definition",id:"definition-13",level:4},{value:"Parameters",id:"parameters-10",level:4},{value:"<code>mkGroup</code>",id:"mkgroup",level:3},{value:"Definition",id:"definition-14",level:4},{value:"Parameters",id:"parameters-11",level:4},{value:"<code>repeat</code>",id:"repeat",level:3},{value:"Definition",id:"definition-15",level:4},{value:"Parameters",id:"parameters-12",level:4},{value:"<code>toArray</code>",id:"toarray",level:3},{value:"Definition",id:"definition-16",level:4},{value:"<code>transform</code>",id:"transform",level:3},{value:"Definitions",id:"definitions-3",level:4},{value:"Type parameters",id:"type-parameters-7",level:4},{value:"Parameters",id:"parameters-13",level:4}],b={toc:f},v="wrapper";function C(e){var n=e,{components:a}=n,r=s(n,["components"]);return(0,t.yg)(v,d(g(g({},b),r),{components:a,mdxType:"MDXLayout"}),(0,t.yg)("h1",g({},{id:"interface-asyncstreamnonemptyt"}),(0,t.yg)("inlineCode",{parentName:"h1"},"interface AsyncStream.NonEmpty<T>")),(0,t.yg)("p",null,"A non-empty and possibly infinite asynchronous sequence of elements of type T. See the ",(0,t.yg)("a",g({parentName:"p"},{href:"https://rimbu.org/docs/collections/stream"}),"Stream documentation")," and the ",(0,t.yg)("a",g({parentName:"p"},{href:"https://rimbu.org/api/rimbu/stream/async/AsyncStream/interface"}),"AsyncStream API documentation")),(0,t.yg)("h2",g({},{id:"type-parameters"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"T"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the element type")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const s1 = AsyncStream.empty<number>()\nconst s2 = AsyncStream.of(1, 3, 2)\nconst s3 = AsyncStream.from(Stream.range({ start: 10, amount: 15 }))\n"))),(0,t.yg)("h2",g({},{id:"methods"}),"Methods"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"asnormal"}),(0,t.yg)("inlineCode",{parentName:"h3"},"asNormal")),(0,t.yg)("p",null,"Returns this collection typed as a 'possibly empty' collection.")),(0,t.yg)("h4",g({},{id:"definition"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"asNormal(): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStream")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"AsyncStream.of(0, 1, 2).asNormal();  // type: AsyncStream<number>\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"asyncstream"}),(0,t.yg)("inlineCode",{parentName:"h3"},"asyncStream")),(0,t.yg)("p",null,"Returns a non-empty async stream of elements of type T.")),(0,t.yg)("h4",g({},{id:"definition-1"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"asyncStream(): this;"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"AsyncStream.of(1, 2, 3).asyncStream()\n// => returns itself\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"concat"}),(0,t.yg)("inlineCode",{parentName:"h3"},"concat")),(0,t.yg)("p",null,"Returns a non-empty AsyncStream containing the elements of this stream followed by all elements produced by the ",(0,t.yg)("inlineCode",{parentName:"p"},"others")," array of AsyncStreamSources.")),(0,t.yg)("h4",g({},{id:"definition-2"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"concat<T2 = T>(...others: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<"),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>>): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<T "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," T2>;"))),(0,t.yg)("h4",g({},{id:"type-parameters-1"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"T2"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"T")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the result value type")))),(0,t.yg)("h4",g({},{id:"parameters"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"others")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,t.yg)("inlineCode",{parentName:"td"},"<"),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<T>>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"a series of AsyncStreamSources to concatenate.")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"await AsyncStream.of(1, 2, 3).concat([4, 5], () => [6, 7]).toArray()\n// [1, 2, 3, 4, 5, 6, 7]\n"))),(0,t.yg)("admonition",g({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(1)"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"distinctprevious"}),(0,t.yg)("inlineCode",{parentName:"h3"},"distinctPrevious")),(0,t.yg)("p",null,"Returns a non-empty AsyncStream containing non-repetitive elements of the source stream, where repetitive elements are compared using the optionally given ",(0,t.yg)("inlineCode",{parentName:"p"},"eq")," equality function.")),(0,t.yg)("h4",g({},{id:"definition-3"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"distinctPrevious(options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"eq?: Eq<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,t.yg)("h4",g({},{id:"parameters-1"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"eq?: Eq<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"(optional) object specifying the following properties",(0,t.yg)("br",null)," - eq: (default: ",(0,t.yg)("inlineCode",{parentName:"td"},"Eq.objectIs"),") the ",(0,t.yg)("inlineCode",{parentName:"td"},"Eq")," instance to use to test equality of elements",(0,t.yg)("br",null)," - negate: (default: false) when true will negate the given predicate")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"await AsyncStream.of(1, 1, 2, 2, 3, 1).distinctPrevious().toArray()\n// => [1, 2, 3, 1]\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"first"}),(0,t.yg)("inlineCode",{parentName:"h3"},"first")),(0,t.yg)("p",null,"Returns the first element of the AsyncStream.")),(0,t.yg)("h4",g({},{id:"definition-4"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"first(): Promise<T>;"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"await AsyncStream.of(1, 2, 3).first()      // => 1\n"))),(0,t.yg)("admonition",g({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(1)"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"flatmap"}),(0,t.yg)("inlineCode",{parentName:"h3"},"flatMap")),(0,t.yg)("p",null,"Returns an AsyncStream consisting of the concatenation of ",(0,t.yg)("inlineCode",{parentName:"p"},"flatMapFun")," applied to each element.")),(0,t.yg)("h4",g({},{id:"definitions"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"flatMap<T2>(flatMapFun: (value: T, index: number) => "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStreamSource/NonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStreamSource.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<T2>): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<T2>;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"flatMap<T2>(flatMapFun: (value: T, index: number, halt: () => void) => "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<T2>): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStream")),(0,t.yg)("inlineCode",{parentName:"p"},"<T2>;"))),(0,t.yg)("h4",g({},{id:"type-parameters-2"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"T2"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the result value type")))),(0,t.yg)("h4",g({},{id:"parameters-2"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"flatMapFun")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(value: T, index: number) => "),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncStreamSource/NonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStreamSource.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"td"},"<T2>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"a potentially asynchronous function receiving the inputs described below and returning a ",(0,t.yg)("inlineCode",{parentName:"td"},"StreamSource")," of new elements",(0,t.yg)("br",null)," - value: the next element",(0,t.yg)("br",null)," - index: the index of the element",(0,t.yg)("br",null)," - halt: a function that, if called, ensures that no new elements are passed")))),(0,t.yg)("admonition",g({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(1)")),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"await AsyncStream.of(1, 2, 3).flatMap(async (v, i, halt) => {\nif (i >= 1) halt();\nreturn [v, i, v + i]\n}).toArray()\n// => [1, 0, 1, 2, 1, 3]\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"flatzip"}),(0,t.yg)("inlineCode",{parentName:"h3"},"flatZip")),(0,t.yg)("p",null,"Returns an AsyncStream consisting of the concatenation of ",(0,t.yg)("inlineCode",{parentName:"p"},"flatMapFun")," applied to each element, zipped with the element that was provided to the function.")),(0,t.yg)("h4",g({},{id:"definitions-1"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"flatZip<T2>(flatMapFun: (value: T, index: number) => "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStreamSource/NonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStreamSource.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<T2>): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<[T, T2]>;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"flatZip<T2>(flatMapFun: (value: T, index: number, halt: () => void) => "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<T2>): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStream")),(0,t.yg)("inlineCode",{parentName:"p"},"<[T, T2]>;"))),(0,t.yg)("h4",g({},{id:"type-parameters-3"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"T2"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the result element type")))),(0,t.yg)("h4",g({},{id:"parameters-3"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"flatMapFun")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(value: T, index: number) => "),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncStreamSource/NonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStreamSource.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"td"},"<T2>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"a function receiving the inputs described below and returning a ",(0,t.yg)("inlineCode",{parentName:"td"},"StreamSource")," of new elements",(0,t.yg)("br",null)," - value: the next element",(0,t.yg)("br",null)," - index: the index of the element",(0,t.yg)("br",null)," - halt: a function that, if called, ensures that no new elements are passed")))),(0,t.yg)("admonition",g({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(1)")),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"await AsyncStream.of(1, 2, 3).flatZip((v, i, halt) => {\nif (i >= 1) halt();\nreturn [v, i, v + i]\n}).toArray()\n// => [[1, 1], [1, 0], [1, 1], [2, 2], [2, 1], [2, 3]]\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"foldstream"}),(0,t.yg)("inlineCode",{parentName:"h3"},"foldStream")),(0,t.yg)("p",null,"Returns an AsyncStream containing the values resulting from applying the given the given ",(0,t.yg)("inlineCode",{parentName:"p"},"next")," function to a current state (initially the given ",(0,t.yg)("inlineCode",{parentName:"p"},"init")," value), and the next stream value, and returning the new state.")),(0,t.yg)("h4",g({},{id:"definitions-2"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"foldStream<R>(init: AsyncOptLazy<R>, next: (current: R, value: T, index: number) => "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"p"},"<R>): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<R>;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"foldStream<R>(init: AsyncOptLazy<R>, next: (current: R, value: T, index: number, halt: () => void) => "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"p"},"<R>): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStream")),(0,t.yg)("inlineCode",{parentName:"p"},"<R>;"))),(0,t.yg)("h4",g({},{id:"type-parameters-4"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"R"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the resulting element type")))),(0,t.yg)("h4",g({},{id:"parameters-4"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"init")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"AsyncOptLazy<R>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the initial result/state value")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"next")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(current: R, value: T, index: number) => "),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"td"},"<R>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"a function taking the parameters below and returning the new result/state value",(0,t.yg)("br",null)," - current: the current result/state value, initially ",(0,t.yg)("inlineCode",{parentName:"td"},"init"),".",(0,t.yg)("br",null)," - value: the next Stream value",(0,t.yg)("br",null)," - index: the index of the given value",(0,t.yg)("br",null)," - halt: a function that, if called, ensures that no new elements are passed")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"console.log(\nawait AsyncStream.empty<number>()\n.foldStream(5, async (current, value) => current + value)\n.toArray()\n)\n// => []\nconsole.log(\nawait AsyncStream.of(1, 2, 3)\n.foldStream(() => 5, (current, value) => current + value)\n.toArray()\n)\n// => [6, 8, 11]\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"indexed"}),(0,t.yg)("inlineCode",{parentName:"h3"},"indexed")),(0,t.yg)("p",null,"Returns a non-empty AsyncStream where each element in this stream is paired with its index")),(0,t.yg)("h4",g({},{id:"definition-5"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"indexed(options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"startIndex?: number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<[number, T]>;"))),(0,t.yg)("h4",g({},{id:"parameters-5"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"startIndex?: number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"(optional) object specifying the following properties",(0,t.yg)("br",null)," - startIndex: (optional) an alternative start index to use")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"await AsyncStream.of(1, 2, 3).indexed().toArray()\n// => [[0, 1], [1, 2], [2, 3]]\n"))),(0,t.yg)("admonition",g({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(1)"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"intersperse"}),(0,t.yg)("inlineCode",{parentName:"h3"},"intersperse")),(0,t.yg)("p",null,"Returns a non-empty AsyncStream with all elements from the given ",(0,t.yg)("inlineCode",{parentName:"p"},"sep")," AsyncStreamSource between two elements of this stream.")),(0,t.yg)("h4",g({},{id:"definition-6"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"intersperse(sep: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,t.yg)("h4",g({},{id:"parameters-6"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"sep")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<T>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the AsyncStreamSource to insert between each element of this Stream")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"await AsyncStream.of(1, 2, 3).intersperse(\"ab\").toArray()\n// => [1, 'a', 'b', 2, 'a', 'b', 3]\n"))),(0,t.yg)("admonition",g({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(1)"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"last"}),(0,t.yg)("inlineCode",{parentName:"h3"},"last")),(0,t.yg)("p",null,"Returns the last element of the AsyncStream.")),(0,t.yg)("h4",g({},{id:"definition-7"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"last(): Promise<T>;"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"await AsyncStream.of(1, 2, 3).last()      // => 3\n"))),(0,t.yg)("admonition",g({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N)"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"map"}),(0,t.yg)("inlineCode",{parentName:"h3"},"map")),(0,t.yg)("p",null,"Returns a non-empty AsyncStream where ",(0,t.yg)("inlineCode",{parentName:"p"},"mapFun")," is applied to each element.")),(0,t.yg)("h4",g({},{id:"definition-8"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"map<T2>(mapFun: (value: T, index: number) => "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"p"},"<T2>): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<T2>;"))),(0,t.yg)("h4",g({},{id:"type-parameters-5"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"T2"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the result element type")))),(0,t.yg)("h4",g({},{id:"parameters-7"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"mapFun")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(value: T, index: number) => "),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"td"},"<T2>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"a potentially asynchronous function taking an element and its index, and returning some new element")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"await AsyncStream.of(1, 2, 3).map(async (v, i) => `[${i}]: ${v}`).toArray()\n// => ['[0]: 1', '[1]: 2', '[2]: 3']\n"))),(0,t.yg)("admonition",g({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(1)"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"mappure"}),(0,t.yg)("inlineCode",{parentName:"h3"},"mapPure")),(0,t.yg)("p",null,"Returns a non-empty AsyncStream where the given ",(0,t.yg)("inlineCode",{parentName:"p"},"mapFun")," is applied to each value in the stream, with optionally as extra arguments the given ",(0,t.yg)("inlineCode",{parentName:"p"},"args"),".")),(0,t.yg)("h4",g({},{id:"definition-9"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"mapPure<T2, A extends readonly unknown[]>(mapFun: (value: T, ...args: A) => "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"p"},"<T2>, ...args: A): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<T2>;"))),(0,t.yg)("h4",g({},{id:"type-parameters-6"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"T2"),(0,t.yg)("td",g({parentName:"tr"},{align:null})),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the result value type")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"A"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"readonly unknown[]")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the type of the arguments to be passed to the ",(0,t.yg)("inlineCode",{parentName:"td"},"mapFun")," function after each element")))),(0,t.yg)("h4",g({},{id:"parameters-8"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"mapFun")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(value: T, ...args: A) => "),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"td"},"<T2>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"a potentially asynchronous function taking an element and the given args, and returning the resulting stream value")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"args")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"A")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"(optional) the extra arguments to pass to the given ",(0,t.yg)("inlineCode",{parentName:"td"},"mapFun"))))),(0,t.yg)("admonition",g({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"is mostly aimed to increase performance so that an extra function is not required  @note can be used on function that really expect 1 argument, since the normal map will also pass more arguments")),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),'const s = AsyncStream.of({ a: 1 }, { a: 2, c: { d: true } })\nconst s2 = s.mapPure(JSON.stringify, [\'a\'], 5)\n// when stream is evaluated, will call JSON.stringify on each stream element with the given extra arguments\nconsole.log(await s2.toArray())\n// => ["{\\n \\"a\\": 1\\n}", "{\\n \\"a\\": 2\\n}"]\n')))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"max"}),(0,t.yg)("inlineCode",{parentName:"h3"},"max")),(0,t.yg)("p",null,"Returns the maximum element of the AsyncStream according to a default compare function.")),(0,t.yg)("h4",g({},{id:"definition-10"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"max(): Promise<T>;"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"await AsyncStream.of(5, 1, 3).max()         // => 5\n"))),(0,t.yg)("admonition",g({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N)"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"maxby"}),(0,t.yg)("inlineCode",{parentName:"h3"},"maxBy")),(0,t.yg)("p",null,"Returns the maximum element of the AsyncStream according to the provided ",(0,t.yg)("inlineCode",{parentName:"p"},"compare")," function.")),(0,t.yg)("h4",g({},{id:"definition-11"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"maxBy(compare: (v1: T, v2: T) => number): Promise<T>;"))),(0,t.yg)("h4",g({},{id:"parameters-9"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"compare")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(v1: T, v2: T) => number")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"function compareLength(a: string, b: string): number { return b.length - a.length };\nawait AsyncStream.of('abc', 'a', 'ab').maxBy(compareLength)   // => 'abc'\n"))),(0,t.yg)("admonition",g({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N)"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"min"}),(0,t.yg)("inlineCode",{parentName:"h3"},"min")),(0,t.yg)("p",null,"Returns the mimimum element of the AsyncStream according to a default compare function.")),(0,t.yg)("h4",g({},{id:"definition-12"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"min(): Promise<T>;"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"await AsyncStream.of(5, 1, 3).min()         // => 1\n"))),(0,t.yg)("admonition",g({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N)"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"minby"}),(0,t.yg)("inlineCode",{parentName:"h3"},"minBy")),(0,t.yg)("p",null,"Returns the mimimum element of the AsyncStream according to the provided ",(0,t.yg)("inlineCode",{parentName:"p"},"compare")," function.")),(0,t.yg)("h4",g({},{id:"definition-13"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"minBy(compare: (v1: T, v2: T) => number): Promise<T>;"))),(0,t.yg)("h4",g({},{id:"parameters-10"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"compare")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(v1: T, v2: T) => number")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"function compareLength(a: string, b: string): number { return b.length - a.length };\nawait AsyncStream.of('abc', 'a', 'ab').minBy(compareLength)   // => 'a'\n"))),(0,t.yg)("admonition",g({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N)"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"mkgroup"}),(0,t.yg)("inlineCode",{parentName:"h3"},"mkGroup")),(0,t.yg)("p",null,"Returns a non-empty AsyncStream starting with ",(0,t.yg)("inlineCode",{parentName:"p"},"options.sep"),", then returning the elements of this Stream interspersed with ",(0,t.yg)("inlineCode",{parentName:"p"},"options.sep"),", and ending with ",(0,t.yg)("inlineCode",{parentName:"p"},"options.end"),".")),(0,t.yg)("h4",g({},{id:"definition-14"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"mkGroup(options: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"sep?: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"start?: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"end?: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,t.yg)("h4",g({},{id:"parameters-11"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"sep?: "),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"start?: "),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"end?: "),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"object specifying the following properties",(0,t.yg)("br",null)," - sep: (optional) a seperator StreamSource to insert between each Stream element",(0,t.yg)("br",null)," - start: (optional) a start StreamSource to prepend",(0,t.yg)("br",null)," - end: (optional) an end StreamSource to append")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"await AsyncStream.of(1, 2, 3).mkGroup({ start: '<<', sep: '-', end: '>>' }).toArray()\n// => ['<', '<', 1, '-', 2, '-', 3, '>', '>']\n"))),(0,t.yg)("admonition",g({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N)"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"repeat"}),(0,t.yg)("inlineCode",{parentName:"h3"},"repeat")),(0,t.yg)("p",null,"Returns a non-empty AsyncStream that returns the elements from this stream given ",(0,t.yg)("inlineCode",{parentName:"p"},"amount")," of times.")),(0,t.yg)("h4",g({},{id:"definition-15"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"repeat(amount?: number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"},"undefined):"),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,t.yg)("h4",g({},{id:"parameters-12"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"amount")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"(default: undefined) the amount of times to return this Stream")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const source = AsyncStream.of(1, 2, 3)\nsource.repeat()              // => AsyncStream(1, 2, 3, 1, 2, 3, 1, 2, ...)\nawait source.repeat(1).toArray()   // => [1, 2, 3]\nawait source.repeat(3).toArray()   // => [1, 2, 3, 1, 2, 3, 1, 2, 3]\nawait source.repeat(-3).toArray()  // => [1, 2, 3]\n"))),(0,t.yg)("admonition",g({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"amount = undefined means that the AsyncStream is repeated indefintely  @note amount = 1 means that the Stream is not repeated  @note amount < 1 will be normalized to amount = 1  @note O(1)"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"toarray"}),(0,t.yg)("inlineCode",{parentName:"h3"},"toArray")),(0,t.yg)("p",null,"Returns a non-empty Array containing all elements in the AsyncStream.")),(0,t.yg)("h4",g({},{id:"definition-16"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"toArray(): Promise<"),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>>;"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"await AsyncStream.of(1, 2, 3).toArray()   // => [1, 2, 3]\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"transform"}),(0,t.yg)("inlineCode",{parentName:"h3"},"transform")),(0,t.yg)("p",null,"Returns an AsyncStream consisting of the concatenation of AsyncStreamSource elements resulting from applying the given ",(0,t.yg)("inlineCode",{parentName:"p"},"reducer")," to each element.")),(0,t.yg)("h4",g({},{id:"definitions-3"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"transform<R, T2 extends T = T>(transformer: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncTransformer/AcceptNonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncTransformer.AcceptNonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<T "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"},"T2, R>):"),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<R>;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"transform<R, T2 extends T = T>(transformer: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncTransformer/Accept/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncTransformer.Accept")),(0,t.yg)("inlineCode",{parentName:"p"},"<T "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"},"T2, R>):"),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStream")),(0,t.yg)("inlineCode",{parentName:"p"},"<R>;"))),(0,t.yg)("h4",g({},{id:"type-parameters-7"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"R"),(0,t.yg)("td",g({parentName:"tr"},{align:null})),(0,t.yg)("td",g({parentName:"tr"},{align:null})),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the resulting element type")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"T2"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"T")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"T")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",g({},{id:"parameters-13"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"transformer")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncTransformer/AcceptNonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncTransformer.AcceptNonEmpty")),(0,t.yg)("inlineCode",{parentName:"td"},"<T "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," T2, R>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"an async reducer taking elements ot type T as input, and returing an ",(0,t.yg)("inlineCode",{parentName:"td"},"AsyncStreamSource")," of element type R.")))),(0,t.yg)("admonition",g({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(1)")),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"await AsyncStream.of(1, 2, 3, 4, 5, 6).transform(AsyncTransformer.window(3)).toArray()\n// => [[1, 2, 3], [4, 5, 6]]\n")))))}C.isMDXComponent=!0}}]);