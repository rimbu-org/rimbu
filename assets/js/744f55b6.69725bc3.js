"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[66338],{15680:(e,a,t)=>{t.d(a,{xA:()=>y,yg:()=>s});var n=t(96540);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function p(e,a){if(null==e)return{};var t,n,i=function(e,a){if(null==e)return{};var t,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(i[t]=e[t]);return i}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=n.createContext({}),m=function(e){var a=n.useContext(o),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},y=function(e){var a=m(e.components);return n.createElement(o.Provider,{value:a},e.children)},g="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},u=n.forwardRef((function(e,a){var t=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,y=p(e,["components","mdxType","originalType","parentName"]),g=m(t),u=i,s=g["".concat(o,".").concat(u)]||g[u]||d[u]||r;return t?n.createElement(s,l(l({ref:a},y),{},{components:t})):n.createElement(s,l({ref:a},y))}));function s(e,a){var t=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=u;var p={};for(var o in a)hasOwnProperty.call(a,o)&&(p[o]=a[o]);p.originalType=e,p[g]="string"==typeof e?e:i,l[1]=p;for(var m=2;m<r;m++)l[m]=t[m];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},34014:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>h,contentTitle:()=>N,default:()=>M,frontMatter:()=>s,metadata:()=>c,toc:()=>v});var n=t(15680),i=Object.defineProperty,r=Object.defineProperties,l=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable,y=(e,a,t)=>a in e?i(e,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[a]=t,g=(e,a)=>{for(var t in a||(a={}))o.call(a,t)&&y(e,t,a[t]);if(p)for(var t of p(a))m.call(a,t)&&y(e,t,a[t]);return e},d=(e,a)=>r(e,l(a)),u=(e,a)=>{var t={};for(var n in e)o.call(e,n)&&a.indexOf(n)<0&&(t[n]=e[n]);if(null!=e&&p)for(var n of p(e))a.indexOf(n)<0&&m.call(e,n)&&(t[n]=e[n]);return t};const s={title:"VariantMultiMapBase.NonEmpty<K,V,Tp>",slug:"/rimbu/multimap/custom/VariantMultiMapBase/NonEmpty/interface"},N="interface VariantMultiMapBase.NonEmpty<K,V,Tp>",c={unversionedId:"rimbu_multimap/custom/VariantMultiMapBase/NonEmpty.interface",id:"rimbu_multimap/custom/VariantMultiMapBase/NonEmpty.interface",title:"VariantMultiMapBase.NonEmpty<K,V,Tp>",description:"undocumented",source:"@site/api/rimbu_multimap/custom/VariantMultiMapBase/NonEmpty.interface.mdx",sourceDirName:"rimbu_multimap/custom/VariantMultiMapBase",slug:"/rimbu/multimap/custom/VariantMultiMapBase/NonEmpty/interface",permalink:"/api/rimbu/multimap/custom/VariantMultiMapBase/NonEmpty/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"VariantMultiMapBase.NonEmpty<K,V,Tp>",slug:"/rimbu/multimap/custom/VariantMultiMapBase/NonEmpty/interface"},sidebar:"defaultSidebar",previous:{title:"VariantMultiMapBase (namespace)",permalink:"/api/rimbu/multimap/custom/VariantMultiMapBase/namespace"},next:{title:"VariantMultiMapBase.Types",permalink:"/api/rimbu/multimap/custom/VariantMultiMapBase/Types/interface"}},h={},v=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>isEmpty</code>",id:"isempty",level:3},{value:"Definition",id:"definition",level:4},{value:"Overrides",id:"overrides",level:4},{value:"<code>keyMap</code>",id:"keymap",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"<code>keySize</code>",id:"keysize",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"<code>size</code>",id:"size",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"Methods",id:"methods",level:2},{value:"<code>[Symbol.iterator]</code>",id:"symboliterator",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Overrides",id:"overrides-4",level:4},{value:"<code>asNormal</code>",id:"asnormal",level:3},{value:"Definition",id:"definition-5",level:4},{value:"<code>assumeNonEmpty</code>",id:"assumenonempty",level:3},{value:"Definition",id:"definition-6",level:4},{value:"Overrides",id:"overrides-5",level:4},{value:"<code>filter</code>",id:"filter",level:3},{value:"Definition",id:"definition-7",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Overrides",id:"overrides-6",level:4},{value:"<code>forEach</code>",id:"foreach",level:3},{value:"Definition",id:"definition-8",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Overrides",id:"overrides-7",level:4},{value:"<code>getValues</code>",id:"getvalues",level:3},{value:"Definition",id:"definition-9",level:4},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Overrides",id:"overrides-8",level:4},{value:"<code>hasEntry</code>",id:"hasentry",level:3},{value:"Definition",id:"definition-10",level:4},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Overrides",id:"overrides-9",level:4},{value:"<code>hasKey</code>",id:"haskey",level:3},{value:"Definition",id:"definition-11",level:4},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"Overrides",id:"overrides-10",level:4},{value:"<code>nonEmpty</code>",id:"nonempty",level:3},{value:"Definition",id:"definition-12",level:4},{value:"Overrides",id:"overrides-11",level:4},{value:"<code>removeEntries</code>",id:"removeentries",level:3},{value:"Definition",id:"definition-13",level:4},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"Overrides",id:"overrides-12",level:4},{value:"<code>removeEntry</code>",id:"removeentry",level:3},{value:"Definition",id:"definition-14",level:4},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"Overrides",id:"overrides-13",level:4},{value:"<code>removeKey</code>",id:"removekey",level:3},{value:"Definition",id:"definition-15",level:4},{value:"Type parameters",id:"type-parameters-6",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"Overrides",id:"overrides-14",level:4},{value:"<code>removeKeyAndGet</code>",id:"removekeyandget",level:3},{value:"Definition",id:"definition-16",level:4},{value:"Type parameters",id:"type-parameters-7",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"Overrides",id:"overrides-15",level:4},{value:"<code>removeKeys</code>",id:"removekeys",level:3},{value:"Definition",id:"definition-17",level:4},{value:"Type parameters",id:"type-parameters-8",level:4},{value:"Parameters",id:"parameters-9",level:4},{value:"Overrides",id:"overrides-16",level:4},{value:"<code>stream</code>",id:"stream",level:3},{value:"Definition",id:"definition-18",level:4},{value:"Overrides",id:"overrides-17",level:4},{value:"<code>streamKeys</code>",id:"streamkeys",level:3},{value:"Definition",id:"definition-19",level:4},{value:"Overrides",id:"overrides-18",level:4},{value:"<code>streamValues</code>",id:"streamvalues",level:3},{value:"Definition",id:"definition-20",level:4},{value:"Overrides",id:"overrides-19",level:4},{value:"<code>toArray</code>",id:"toarray",level:3},{value:"Definition",id:"definition-21",level:4},{value:"Overrides",id:"overrides-20",level:4},{value:"<code>toJSON</code>",id:"tojson",level:3},{value:"Definition",id:"definition-22",level:4},{value:"Overrides",id:"overrides-21",level:4},{value:"<code>toString</code>",id:"tostring",level:3},{value:"Definition",id:"definition-23",level:4},{value:"Overrides",id:"overrides-22",level:4}],f={toc:v},b="wrapper";function M(e){var a=e,{components:t}=a,i=u(a,["components"]);return(0,n.yg)(b,d(g(g({},f),i),{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",g({},{id:"interface-variantmultimapbasenonemptykvtp"}),(0,n.yg)("inlineCode",{parentName:"h1"},"interface VariantMultiMapBase.NonEmpty<K,V,Tp>")),(0,n.yg)("p",null,"undocumented"),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Extends:")," ",(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/Streamable/NonEmpty/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"Streamable.NonEmpty<T>")),", ",(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"VariantMultiMapBase<K,V,Tp>"))),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Implemented by:")," ",(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/multimap/custom/MultiMapBase/NonEmpty/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"MultiMapBase.NonEmpty<K,V,Tp>"))),(0,n.yg)("h2",g({},{id:"type-parameters"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Constraints"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),"K"),(0,n.yg)("td",g({parentName:"tr"},{align:null})),(0,n.yg)("td",g({parentName:"tr"},{align:null})),(0,n.yg)("td",g({parentName:"tr"},{align:null}),"undocumented")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),"V"),(0,n.yg)("td",g({parentName:"tr"},{align:null})),(0,n.yg)("td",g({parentName:"tr"},{align:null})),(0,n.yg)("td",g({parentName:"tr"},{align:null}),"undocumented")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),"Tp"),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("a",g({parentName:"td"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/Types/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"VariantMultiMapBase.Types"))),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("a",g({parentName:"td"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/Types/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"VariantMultiMapBase.Types"))),(0,n.yg)("td",g({parentName:"tr"},{align:null}),"undocumented")))),(0,n.yg)("h2",g({},{id:"properties"}),"Properties"),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"isempty"}),(0,n.yg)("inlineCode",{parentName:"h3"},"isEmpty")),(0,n.yg)("p",null,"Returns false since this collection is known to be non-empty")),(0,n.yg)("h4",g({},{id:"definition"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"readonly isEmpty: false;"))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashMultiMapHashValue.of([1, 1], [2, 2]).isEmpty   // => false\n"))),(0,n.yg)("h4",g({},{id:"overrides"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#isEmpty"}),"VariantMultiMapBase.isEmpty"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"keymap"}),(0,n.yg)("inlineCode",{parentName:"h3"},"keyMap")),(0,n.yg)("p",null,"Returns the non-empty Map representation of this collection.")),(0,n.yg)("h4",g({},{id:"definition-1"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"readonly keyMap: "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['keyMapNonEmpty'];"))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const m = HashMultiMapHashValue.of([1, 1], [2, 2])\nconst map: HashMap.NonEmpty<number, HashSet.NonEmpty<number>> = m.keyMap\n"))),(0,n.yg)("h4",g({},{id:"overrides-1"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#keyMap"}),"VariantMultiMapBase.keyMap"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"keysize"}),(0,n.yg)("inlineCode",{parentName:"h3"},"keySize")),(0,n.yg)("p",null,"Returns the number of keys in the collection.")),(0,n.yg)("h4",g({},{id:"definition-2"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"readonly keySize: number;"))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashMultiMapHashValue.of([1, 1], [2, 2]).keySize      // => 2\nHashMultiMapHashValue.of([1, 1], [1, 2]).keySize      // => 1\n"))),(0,n.yg)("h4",g({},{id:"overrides-2"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#keySize"}),"VariantMultiMapBase.keySize"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"size"}),(0,n.yg)("inlineCode",{parentName:"h3"},"size")),(0,n.yg)("p",null,"Returns the number of unique key-value combinations in this collection.")),(0,n.yg)("h4",g({},{id:"definition-3"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"readonly size: number;"))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashMultiMapHashValue.of([1, 1], [2, 2]).size       // => 2\nHashMultiMapHashValue.of([1, 1], [1, 2]).size       // => 2\n"))),(0,n.yg)("h4",g({},{id:"overrides-3"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#size"}),"VariantMultiMapBase.size"))),(0,n.yg)("h2",g({},{id:"methods"}),"Methods"),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"symboliterator"}),(0,n.yg)("inlineCode",{parentName:"h3"},"[Symbol.iterator]")),(0,n.yg)("p",null,"Returns a ",(0,n.yg)("inlineCode",{parentName:"p"},"FastIterator")," instance used to iterate over the values of this ",(0,n.yg)("inlineCode",{parentName:"p"},"Iterable"),".")),(0,n.yg)("h4",g({},{id:"definition-4"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"[Symbol.iterator](): "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/FastIterator/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"FastIterator")),(0,n.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,n.yg)("h4",g({},{id:"overrides-4"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/FastIterable/interface#%5BSymbol.iterator%5D"}),"FastIterable.[Symbol.iterator]"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"asnormal"}),(0,n.yg)("inlineCode",{parentName:"h3"},"asNormal")),(0,n.yg)("p",null,"Returns this collection typed as a 'possibly empty' collection.")),(0,n.yg)("h4",g({},{id:"definition-5"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"asNormal(): "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashMultiMapHashValue.of([1, 1], [2, 2]).asNormal();  // type: HashMultiMapHashValue<number, number>\n")))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"assumenonempty"}),(0,n.yg)("inlineCode",{parentName:"h3"},"assumeNonEmpty")),(0,n.yg)("p",null,"Returns a self reference since this collection is known to be non-empty.")),(0,n.yg)("h4",g({},{id:"definition-6"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"assumeNonEmpty(): this;"))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const m = HashMultiMapHashValue.of([1, 1], [2, 2]);\nm === m.assumeNonEmpty()  // => true\n"))),(0,n.yg)("h4",g({},{id:"overrides-5"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#assumeNonEmpty"}),"VariantMultiMapBase.assumeNonEmpty"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"filter"}),(0,n.yg)("inlineCode",{parentName:"h3"},"filter")),(0,n.yg)("p",null,"Returns a collection containing only those entries that satisfy given ",(0,n.yg)("inlineCode",{parentName:"p"},"pred")," predicate.")),(0,n.yg)("h4",g({},{id:"definition-7"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"filter(pred: (entry: [K, V], index: number, halt: () => void) => boolean, options?: {"),(0,n.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"p"},"negate?: boolean;"),(0,n.yg)("br",null),"\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"p"},"}): "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,n.yg)("h4",g({},{id:"parameters"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"pred")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"(entry: [K, V], index: number, halt: () => void) => boolean")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),"a predicate function receiving:",(0,n.yg)("br",null)," - ",(0,n.yg)("inlineCode",{parentName:"td"},"entry"),": the next entry",(0,n.yg)("br",null)," - ",(0,n.yg)("inlineCode",{parentName:"td"},"index"),": the entry index",(0,n.yg)("br",null)," - ",(0,n.yg)("inlineCode",{parentName:"td"},"halt"),": a function that, when called, ensures no next entries are passed")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"options")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"{"),(0,n.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"td"},"negate?: boolean;"),(0,n.yg)("br",null),"\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"td"},"}")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,n.yg)("br",null)," - negate: (default: false) when true will negate the predicate")))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashMultiMapHashValue.of([1, 'a'], [2, 'b'], [1, 'c'])\n.filter(entry => entry[0] === 2 || entry[1] === 'c')\n.toArray()\n// => [[2, 'b'], [1, 'c']]\n"))),(0,n.yg)("h4",g({},{id:"overrides-6"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#filter"}),"VariantMultiMapBase.filter"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"foreach"}),(0,n.yg)("inlineCode",{parentName:"h3"},"forEach")),(0,n.yg)("p",null,"Performs given function ",(0,n.yg)("inlineCode",{parentName:"p"},"f")," for each entry of the collection, using given ",(0,n.yg)("inlineCode",{parentName:"p"},"state")," as initial traversal state.")),(0,n.yg)("h4",g({},{id:"definition-8"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"forEach(f: (entry: [K, V], index: number, halt: () => void) => void, options?: {"),(0,n.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"p"},"state?: "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/TraverseState/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"TraverseState")),(0,n.yg)("inlineCode",{parentName:"p"},";"),(0,n.yg)("br",null),"\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"p"},"}): void;"))),(0,n.yg)("h4",g({},{id:"parameters-1"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"f")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"(entry: [K, V], index: number, halt: () => void) => void")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),"the function to perform for each element, receiving:",(0,n.yg)("br",null)," - ",(0,n.yg)("inlineCode",{parentName:"td"},"entry"),": the next tuple of a key and value",(0,n.yg)("br",null)," - ",(0,n.yg)("inlineCode",{parentName:"td"},"index"),": the index of the element",(0,n.yg)("br",null)," - ",(0,n.yg)("inlineCode",{parentName:"td"},"halt"),": a function that, if called, ensures that no new elements are passed")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"options")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"{"),(0,n.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"td"},"state?: "),(0,n.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/TraverseState/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"TraverseState")),(0,n.yg)("inlineCode",{parentName:"td"},";"),(0,n.yg)("br",null),"\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"td"},"}")),(0,n.yg)("td",g({parentName:"tr"},{align:null}))))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashMultiMapHashValue.of([1, 'a'], [2, 'b'], [1, 'c']).forEach((entry, i, halt) => {\nconsole.log([entry[1], entry[0]]);\nif (i >= 1) halt();\n})\n// => logs ['a', 1]  ['c', 1]  (or other order)\n"))),(0,n.yg)("admonition",g({},{title:"note",type:"note"}),(0,n.yg)("p",{parentName:"admonition"},"O(N)")),(0,n.yg)("h4",g({},{id:"overrides-7"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#forEach"}),"VariantMultiMapBase.forEach"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"getvalues"}),(0,n.yg)("inlineCode",{parentName:"h3"},"getValues")),(0,n.yg)("p",null,"Returns the value collection associated to the given ",(0,n.yg)("inlineCode",{parentName:"p"},"key"),".")),(0,n.yg)("h4",g({},{id:"definition-9"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"getValues<UK = K>(key: "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"p"},"<K, UK>): "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['keyMapValues'];"))),(0,n.yg)("h4",g({},{id:"type-parameters-1"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),"UK"),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"K")),(0,n.yg)("td",g({parentName:"tr"},{align:null}))))),(0,n.yg)("h4",g({},{id:"parameters-2"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"key")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"td"},"<K, UK>")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),"the key to look for")))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const m = HashMultiMapHashValue.of([1, 'a'], [2, 'b'])\nm.getValues(1).toArray()    // => ['a']\nm.getValues(10).toArray()   // => []\n"))),(0,n.yg)("h4",g({},{id:"overrides-8"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#getValues"}),"VariantMultiMapBase.getValues"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"hasentry"}),(0,n.yg)("inlineCode",{parentName:"h3"},"hasEntry")),(0,n.yg)("p",null,"Returns true if the given ",(0,n.yg)("inlineCode",{parentName:"p"},"key")," has the given ",(0,n.yg)("inlineCode",{parentName:"p"},"value")," as one of its values in the collection.")),(0,n.yg)("h4",g({},{id:"definition-10"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"hasEntry<UK = K>(key: "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"p"},"<K, UK>, value: V): boolean;"))),(0,n.yg)("h4",g({},{id:"type-parameters-2"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),"UK"),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"K")),(0,n.yg)("td",g({parentName:"tr"},{align:null}))))),(0,n.yg)("h4",g({},{id:"parameters-3"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"key")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"td"},"<K, UK>")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),"the key to look for")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"value")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"V")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),"the value to look for")))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const m = HashMultiMapHashValue.of([1, 'a'], [2, 'b'])\nm.hasEntry(1, 'a')    // => true\nm.hasEntry(1, 'b')    // => false\n"))),(0,n.yg)("h4",g({},{id:"overrides-9"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#hasEntry"}),"VariantMultiMapBase.hasEntry"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"haskey"}),(0,n.yg)("inlineCode",{parentName:"h3"},"hasKey")),(0,n.yg)("p",null,"Returns true if the given ",(0,n.yg)("inlineCode",{parentName:"p"},"key")," is present in the collection.")),(0,n.yg)("h4",g({},{id:"definition-11"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"hasKey<UK = K>(key: "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"p"},"<K, UK>): boolean;"))),(0,n.yg)("h4",g({},{id:"type-parameters-3"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),"UK"),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"K")),(0,n.yg)("td",g({parentName:"tr"},{align:null}))))),(0,n.yg)("h4",g({},{id:"parameters-4"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"key")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"td"},"<K, UK>")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),"the key to look for")))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const m = HashMultiMapHashValue.of([1, 'a'], [2, 'b'])\nm.hasKey(2)    // => true\nm.hasKey(3)    // => false\n"))),(0,n.yg)("h4",g({},{id:"overrides-10"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#hasKey"}),"VariantMultiMapBase.hasKey"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"nonempty"}),(0,n.yg)("inlineCode",{parentName:"h3"},"nonEmpty")),(0,n.yg)("p",null,"Returns true since this collection is known to be non-empty")),(0,n.yg)("h4",g({},{id:"definition-12"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"nonEmpty(): this is "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['nonEmpty'];"))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashMultiMapHashValue.of([1, 1], [2, 2]).nonEmpty()   // => true\n"))),(0,n.yg)("h4",g({},{id:"overrides-11"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#nonEmpty"}),"VariantMultiMapBase.nonEmpty"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"removeentries"}),(0,n.yg)("inlineCode",{parentName:"h3"},"removeEntries")),(0,n.yg)("p",null,"Returns the collection where given ",(0,n.yg)("inlineCode",{parentName:"p"},"entries")," are removed.")),(0,n.yg)("h4",g({},{id:"definition-13"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"removeEntries<UK = K, UV = V>(entries: "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.yg)("inlineCode",{parentName:"p"},"<["),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"p"},"<K, UK>, "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"p"},"<V, UV>]>): "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,n.yg)("h4",g({},{id:"type-parameters-4"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),"UK"),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"K")),(0,n.yg)("td",g({parentName:"tr"},{align:null}))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),"UV"),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"V")),(0,n.yg)("td",g({parentName:"tr"},{align:null}))))),(0,n.yg)("h4",g({},{id:"parameters-5"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"entries")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("a",g({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.yg)("inlineCode",{parentName:"td"},"<["),(0,n.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"td"},"<K, UK>, "),(0,n.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"td"},"<V, UV>]>")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),"a ",(0,n.yg)("inlineCode",{parentName:"td"},"StreamSource")," containing key-value entries to remove")))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const m = HashMultiMapHashValue.of([1, 'a'], [2, 'b'], [1, 'c'])\nm.removeEntries([[2, 'b'], [1, 'd']]).toArray()   // => [[1, 'a'], [1, 'c']]\nm.removeEntries([2, 'q']).toArray()               // => [[1, 'a'], [2, 'b'], [1, 'c']]\nm.removeEntries(3) === m              // true\n"))),(0,n.yg)("admonition",g({},{title:"note",type:"note"}),(0,n.yg)("p",{parentName:"admonition"},"guarantees same object reference if the key is not present")),(0,n.yg)("h4",g({},{id:"overrides-12"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#removeEntries"}),"VariantMultiMapBase.removeEntries"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"removeentry"}),(0,n.yg)("inlineCode",{parentName:"h3"},"removeEntry")),(0,n.yg)("p",null,"Returns the collection where given ",(0,n.yg)("inlineCode",{parentName:"p"},"value")," if removed from the values associated with given ",(0,n.yg)("inlineCode",{parentName:"p"},"key"),".")),(0,n.yg)("h4",g({},{id:"definition-14"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"removeEntry<UK = K, UV = V>(key: "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"p"},"<K, UK>, value: "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"p"},"<V, UV>): "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,n.yg)("h4",g({},{id:"type-parameters-5"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),"UK"),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"K")),(0,n.yg)("td",g({parentName:"tr"},{align:null}))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),"UV"),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"V")),(0,n.yg)("td",g({parentName:"tr"},{align:null}))))),(0,n.yg)("h4",g({},{id:"parameters-6"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"key")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"td"},"<K, UK>")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),"the key of the entry to remove")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"value")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"td"},"<V, UV>")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),"the value of the entry to remove")))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const m = HashMultiMapHashValue.of([1, 'a'], [2, 'b'], [1, 'c'])\nm.removeEntry(2, 'b').toArray()   // => [[1, 'a'], [1, 'c']]\nm.removeEntry(2, 'q').toArray()   // => [[1, 'a'], [2, 'b'], [1, 'c']]\nm.removeEntry(3, 'a') === m       // true\n"))),(0,n.yg)("admonition",g({},{title:"note",type:"note"}),(0,n.yg)("p",{parentName:"admonition"},"guarantees same object reference if the key is not present")),(0,n.yg)("h4",g({},{id:"overrides-13"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#removeEntry"}),"VariantMultiMapBase.removeEntry"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"removekey"}),(0,n.yg)("inlineCode",{parentName:"h3"},"removeKey")),(0,n.yg)("p",null,"Returns the collection where the values associated with given ",(0,n.yg)("inlineCode",{parentName:"p"},"key")," are removed.")),(0,n.yg)("h4",g({},{id:"definition-15"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"removeKey<UK = K>(key: "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"p"},"<K, UK>): "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,n.yg)("h4",g({},{id:"type-parameters-6"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),"UK"),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"K")),(0,n.yg)("td",g({parentName:"tr"},{align:null}))))),(0,n.yg)("h4",g({},{id:"parameters-7"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"key")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"td"},"<K, UK>")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),"the key of the entries to remove")))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const m = HashMultiMapHashValue.of([1, 'a'], [2, 'b'], [1, 'c'])\nm.removeKey(2).toArray()   // => [[1, 'a'], [1, 'c']]\nm.removeKey(3) === m       // true\n"))),(0,n.yg)("admonition",g({},{title:"note",type:"note"}),(0,n.yg)("p",{parentName:"admonition"},"guarantees same object reference if the key is not present")),(0,n.yg)("h4",g({},{id:"overrides-14"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#removeKey"}),"VariantMultiMapBase.removeKey"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"removekeyandget"}),(0,n.yg)("inlineCode",{parentName:"h3"},"removeKeyAndGet")),(0,n.yg)("p",null,"Returns a tuple containing the collection of which the given ",(0,n.yg)("inlineCode",{parentName:"p"},"key")," is removed, and the values that are associated with that key. If the key is not present, it will return undefined instead.")),(0,n.yg)("h4",g({},{id:"definition-16"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"removeKeyAndGet<UK = K>(key: "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"p"},"<K, UK>): ["),(0,n.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'],"),(0,n.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['keyMapValuesNonEmpty']"),(0,n.yg)("br",null),"\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"p"},"] "),(0,n.yg)("code",null,"|"),(0,n.yg)("inlineCode",{parentName:"p"}," undefined;"))),(0,n.yg)("h4",g({},{id:"type-parameters-7"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),"UK"),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"K")),(0,n.yg)("td",g({parentName:"tr"},{align:null}))))),(0,n.yg)("h4",g({},{id:"parameters-8"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"key")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"td"},"<K, UK>")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),"the key of the entry to remove")))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const m = HashMultiMapHashValue.of([1, 'a'], [2, 'b'])\nconst result = m.removeKeyAndGet(2)\nif (result !== undefined) console.log([result[0].toString(), result[1]])    // => logs [HashMultiMapHashValue(1 => 'a'), HashSet('b')]\nconsole.log(m.removeKeyAndGet(3))                                           // => logs undefined\n"))),(0,n.yg)("h4",g({},{id:"overrides-15"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#removeKeyAndGet"}),"VariantMultiMapBase.removeKeyAndGet"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"removekeys"}),(0,n.yg)("inlineCode",{parentName:"h3"},"removeKeys")),(0,n.yg)("p",null,"Returns the collection where the values associated with given ",(0,n.yg)("inlineCode",{parentName:"p"},"keys")," are removed.")),(0,n.yg)("h4",g({},{id:"definition-17"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"removeKeys<UK = K>(keys: "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.yg)("inlineCode",{parentName:"p"},"<"),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"p"},"<K, UK>>): "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,n.yg)("h4",g({},{id:"type-parameters-8"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),"UK"),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"K")),(0,n.yg)("td",g({parentName:"tr"},{align:null}))))),(0,n.yg)("h4",g({},{id:"parameters-9"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"keys")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("a",g({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.yg)("inlineCode",{parentName:"td"},"<"),(0,n.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"td"},"<K, UK>>")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),"a ",(0,n.yg)("inlineCode",{parentName:"td"},"StreamSource")," of keys to remove")))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const m = HashMultiMapHashValue.of([1, 'a'], [2, 'b'], [1, 'c'])\nm.removeKeys([2, 10]).toArray()   // => [[1, 'a'], [1, 'c']]\nm.removeKeys([10, 11]) === m      // true\n"))),(0,n.yg)("admonition",g({},{title:"note",type:"note"}),(0,n.yg)("p",{parentName:"admonition"},"guarantees same object reference if the key is not present")),(0,n.yg)("h4",g({},{id:"overrides-16"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#removeKeys"}),"VariantMultiMapBase.removeKeys"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"stream"}),(0,n.yg)("inlineCode",{parentName:"h3"},"stream")),(0,n.yg)("p",null,"Returns a non-empty Stream containing all entries of this collection as tuples of key and value.")),(0,n.yg)("h4",g({},{id:"definition-18"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"stream(): "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,n.yg)("inlineCode",{parentName:"p"},"<[K, V]>;"))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashMultiMapHashValue.of([1, 1], [2, 2]).stream().toArray()  // => [[1, 1], [2, 2]]\n"))),(0,n.yg)("h4",g({},{id:"overrides-17"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/Streamable/NonEmpty/interface#stream"}),"NonEmpty.stream"),", ",(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#stream"}),"VariantMultiMapBase.stream"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"streamkeys"}),(0,n.yg)("inlineCode",{parentName:"h3"},"streamKeys")),(0,n.yg)("p",null,"Returns a non-empty Stream containing all keys of this collection.")),(0,n.yg)("h4",g({},{id:"definition-19"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"streamKeys(): "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,n.yg)("inlineCode",{parentName:"p"},"<K>;"))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashMultiMapHashValue.of([[1, 'a'], [2, 'b']]).streamKeys().toArray()   // => [1, 2]\n"))),(0,n.yg)("h4",g({},{id:"overrides-18"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#streamKeys"}),"VariantMultiMapBase.streamKeys"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"streamvalues"}),(0,n.yg)("inlineCode",{parentName:"h3"},"streamValues")),(0,n.yg)("p",null,"Returns a non-empty Stream containing all values of this collection.")),(0,n.yg)("h4",g({},{id:"definition-20"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"streamValues(): "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,n.yg)("inlineCode",{parentName:"p"},"<V>;"))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashMultiMapHashValue.of([[1, 'a'], [2, 'b']]).streamValues().toArray()   // => ['a', 'b']\n"))),(0,n.yg)("h4",g({},{id:"overrides-19"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#streamValues"}),"VariantMultiMapBase.streamValues"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"toarray"}),(0,n.yg)("inlineCode",{parentName:"h3"},"toArray")),(0,n.yg)("p",null,"Returns a non-empty array containing all entries in this collection.")),(0,n.yg)("h4",g({},{id:"definition-21"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"toArray(): "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,n.yg)("inlineCode",{parentName:"p"},"<[K, V]>;"))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashMultiMapHashValue.of([1, 'a'], [2, 'b'], [1, 'c']).toArray()   // => [[1, 'a'], [1, 'c'], [2, 'b']]\n"))),(0,n.yg)("admonition",g({},{title:"note",type:"note"}),(0,n.yg)("p",{parentName:"admonition"},"O(log(N))  @note it is safe to mutate the returned array, however, the array elements are not copied, thus should be treated as read-only")),(0,n.yg)("h4",g({},{id:"overrides-20"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#toArray"}),"VariantMultiMapBase.toArray"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"tojson"}),(0,n.yg)("inlineCode",{parentName:"h3"},"toJSON")),(0,n.yg)("p",null,"Returns a JSON representation of this collection.")),(0,n.yg)("h4",g({},{id:"definition-22"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"toJSON(): "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/ToJSON/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"ToJSON")),(0,n.yg)("inlineCode",{parentName:"p"},"<[K, V[]][]>;"))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashMultiMapHashValue.of([1, 'a'], [2, 'b'], [1, 'c']).toJSON()\n// => { dataType: 'HashMultiMapHashValue', value: [[1, ['a', 'c']], [2, ['b']]] }\n"))),(0,n.yg)("h4",g({},{id:"overrides-21"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#toJSON"}),"VariantMultiMapBase.toJSON"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"tostring"}),(0,n.yg)("inlineCode",{parentName:"h3"},"toString")),(0,n.yg)("p",null,"Returns a string representation of this collection.")),(0,n.yg)("h4",g({},{id:"definition-23"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"toString(): string;"))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashMultiMapHashValue.of([1, 'a'], [2, 'b'], [1, 'c']).toString()\n// => HashMultiMapHashValue(1 => ['a', 'c'], 2 => ['b'])\n"))),(0,n.yg)("h4",g({},{id:"overrides-22"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#toString"}),"VariantMultiMapBase.toString"))))}M.isMDXComponent=!0}}]);