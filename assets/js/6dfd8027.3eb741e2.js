"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[52018],{15680:(e,t,n)=>{n.d(t,{xA:()=>o,yg:()=>s});var a=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var g=a.createContext({}),y=function(e){var t=a.useContext(g),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},o=function(e){var t=y(e.components);return a.createElement(g.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,g=e.parentName,o=p(e,["components","mdxType","originalType","parentName"]),m=y(n),u=r,s=m["".concat(g,".").concat(u)]||m[u]||d[u]||l;return n?a.createElement(s,i(i({ref:t},o),{},{components:n})):a.createElement(s,i({ref:t},o))}));function s(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=u;var p={};for(var g in t)hasOwnProperty.call(t,g)&&(p[g]=t[g]);p.originalType=e,p[m]="string"==typeof e?e:r,i[1]=p;for(var y=2;y<l;y++)i[y]=n[y];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},51188:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>N,default:()=>v,frontMatter:()=>s,metadata:()=>c,toc:()=>f});var a=n(15680),r=Object.defineProperty,l=Object.defineProperties,i=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,g=Object.prototype.hasOwnProperty,y=Object.prototype.propertyIsEnumerable,o=(e,t,n)=>t in e?r(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,m=(e,t)=>{for(var n in t||(t={}))g.call(t,n)&&o(e,n,t[n]);if(p)for(var n of p(t))y.call(t,n)&&o(e,n,t[n]);return e},d=(e,t)=>l(e,i(t)),u=(e,t)=>{var n={};for(var a in e)g.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&p)for(var a of p(e))t.indexOf(a)<0&&y.call(e,a)&&(n[a]=e[a]);return n};const s={title:"Transformer (namespace)",slug:"/rimbu/stream/Transformer/namespace"},N="namespace Transformer",c={unversionedId:"rimbu_stream/Transformer/index",id:"rimbu_stream/Transformer/index",title:"Transformer (namespace)",description:"A Reducer that produces instances of StreamSource.",source:"@site/api/rimbu_stream/Transformer/index.mdx",sourceDirName:"rimbu_stream/Transformer",slug:"/rimbu/stream/Transformer/namespace",permalink:"/api/rimbu/stream/Transformer/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"Transformer (namespace)",slug:"/rimbu/stream/Transformer/namespace"},sidebar:"defaultSidebar",previous:{title:"Streamable<T>",permalink:"/api/rimbu/stream/Streamable/interface"},next:{title:"NonEmpty",permalink:"/api/rimbu/stream/Transformer/NonEmpty/type"}},h={},f=[{value:"Functions",id:"functions",level:2},{value:"<code>collect</code>",id:"collect",level:3},{value:"Definition",id:"definition",level:4},{value:"Type parameters",id:"type-parameters",level:5},{value:"Parameters",id:"parameters",level:4},{value:"<code>distinctPrevious</code>",id:"distinctprevious",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Type parameters",id:"type-parameters-1",level:5},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>flatMap</code>",id:"flatmap",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Type parameters",id:"type-parameters-2",level:5},{value:"Parameters",id:"parameters-2",level:4},{value:"<code>flatZip</code>",id:"flatzip",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Type parameters",id:"type-parameters-3",level:5},{value:"Parameters",id:"parameters-3",level:4},{value:"<code>indicesOf</code>",id:"indicesof",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Type parameters",id:"type-parameters-4",level:5},{value:"Parameters",id:"parameters-4",level:4},{value:"<code>indicesWhere</code>",id:"indiceswhere",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Type parameters",id:"type-parameters-5",level:5},{value:"Parameters",id:"parameters-5",level:4},{value:"<code>intersperse</code>",id:"intersperse",level:3},{value:"Definition",id:"definition-6",level:4},{value:"Type parameters",id:"type-parameters-6",level:5},{value:"Parameters",id:"parameters-6",level:4},{value:"<code>splitOn</code>",id:"spliton",level:3},{value:"Definition",id:"definition-7",level:4},{value:"Type parameters",id:"type-parameters-7",level:5},{value:"Parameters",id:"parameters-7",level:4},{value:"<code>splitOnSlice</code>",id:"splitonslice",level:3},{value:"Definition",id:"definition-8",level:4},{value:"Type parameters",id:"type-parameters-8",level:5},{value:"Parameters",id:"parameters-8",level:4},{value:"<code>splitWhere</code>",id:"splitwhere",level:3},{value:"Definition",id:"definition-9",level:4},{value:"Type parameters",id:"type-parameters-9",level:5},{value:"Parameters",id:"parameters-9",level:4},{value:"Constants",id:"constants",level:2}],b={toc:f},C="wrapper";function v(e){var t=e,{components:n}=t,r=u(t,["components"]);return(0,a.yg)(C,d(m(m({},b),r),{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",m({},{id:"namespace-transformer"}),(0,a.yg)("inlineCode",{parentName:"h1"},"namespace Transformer")),(0,a.yg)("p",null,"A Reducer that produces instances of ",(0,a.yg)("inlineCode",{parentName:"p"},"StreamSource"),"."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Companion type:")," ",(0,a.yg)("a",m({parentName:"p"},{href:"/api/rimbu/stream/Transformer/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"Transformer<T,R>"))),(0,a.yg)("h2",m({},{id:"functions"}),"Functions"),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",m({},{id:"collect"}),(0,a.yg)("inlineCode",{parentName:"h3"},"collect")),(0,a.yg)("p",null,"Returns a ",(0,a.yg)("inlineCode",{parentName:"p"},"Transformer")," instance that converts or filters its input values using given ",(0,a.yg)("inlineCode",{parentName:"p"},"collectFun")," before passing them to the reducer.")),(0,a.yg)("h4",m({},{id:"definition"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"function collect<T, R>(collectFun: CollectFun<T, R>): "),(0,a.yg)("a",m({parentName:"p"},{href:"/api/rimbu/stream/Transformer/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"Transformer")),(0,a.yg)("inlineCode",{parentName:"p"},"<T, R>;"))),(0,a.yg)("h5",m({},{id:"type-parameters"}),"Type parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",m({parentName:"tr"},{align:null}),"T"),(0,a.yg)("td",m({parentName:"tr"},{align:null}),"the input element type")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",m({parentName:"tr"},{align:null}),"R"),(0,a.yg)("td",m({parentName:"tr"},{align:null}),"the result element type")))),(0,a.yg)("h4",m({},{id:"parameters"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",m({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"collectFun")),(0,a.yg)("td",m({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"CollectFun<T, R>")),(0,a.yg)("td",m({parentName:"tr"},{align:null}),"a function receiving the following arguments, and returns a new value or ",(0,a.yg)("inlineCode",{parentName:"td"},"skip")," if the value should be skipped:",(0,a.yg)("br",null)," - ",(0,a.yg)("inlineCode",{parentName:"td"},"value"),": the next value",(0,a.yg)("br",null)," - ",(0,a.yg)("inlineCode",{parentName:"td"},"index"),": the value index",(0,a.yg)("br",null)," - ",(0,a.yg)("inlineCode",{parentName:"td"},"skip"),": a token that, when returned, will not add a value to the resulting collection",(0,a.yg)("br",null)," - ",(0,a.yg)("inlineCode",{parentName:"td"},"halt"),": a function that, when called, ensures no next elements are passed"))))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",m({},{id:"distinctprevious"}),(0,a.yg)("inlineCode",{parentName:"h3"},"distinctPrevious")),(0,a.yg)("p",null,"Returns a transformer that returns only those elements from the input that are different to previous element according to the optionally given ",(0,a.yg)("inlineCode",{parentName:"p"},"eq")," function.")),(0,a.yg)("h4",m({},{id:"definition-1"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"function distinctPrevious<T>(options?: {"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"eq?: Eq<T> "),(0,a.yg)("code",null,"|"),(0,a.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"negate?: boolean "),(0,a.yg)("code",null,"|"),(0,a.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,a.yg)("br",null),"\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"}): "),(0,a.yg)("a",m({parentName:"p"},{href:"/api/rimbu/stream/Transformer/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"Transformer")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.yg)("h5",m({},{id:"type-parameters-1"}),"Type parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",m({parentName:"tr"},{align:null}),"T"),(0,a.yg)("td",m({parentName:"tr"},{align:null}))))),(0,a.yg)("h4",m({},{id:"parameters-1"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",m({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"options")),(0,a.yg)("td",m({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"{"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"eq?: Eq<T> "),(0,a.yg)("code",null,"|"),(0,a.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"negate?: boolean "),(0,a.yg)("code",null,"|"),(0,a.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,a.yg)("br",null),"\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"}")),(0,a.yg)("td",m({parentName:"tr"},{align:null}),": - eq - (default: ",(0,a.yg)("inlineCode",{parentName:"td"},"Eq.objectIs"),") the equality testing function - negate: (default: false) when true will negate the given predicate",(0,a.yg)("br",null))))),(0,a.yg)("admonition",m({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 1, 2, 3, 2, 2)\n.transform(Transformer.distinctPrevious())\n.toArray()\n// => [1, 2, 3, 2]\n")))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",m({},{id:"flatmap"}),(0,a.yg)("inlineCode",{parentName:"h3"},"flatMap")),(0,a.yg)("p",null,"Returns a transformer that applies the given flatMap function to each element of the input stream, and concatenates all the resulting resulting streams into one stream.")),(0,a.yg)("h4",m({},{id:"definition-2"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"function flatMap<T, T2>(flatMapFun: (value: T, index: number, halt: () => void) => "),(0,a.yg)("a",m({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,a.yg)("inlineCode",{parentName:"p"},"<T2>): "),(0,a.yg)("a",m({parentName:"p"},{href:"/api/rimbu/stream/Transformer/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"Transformer")),(0,a.yg)("inlineCode",{parentName:"p"},"<T, T2>;"))),(0,a.yg)("h5",m({},{id:"type-parameters-2"}),"Type parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",m({parentName:"tr"},{align:null}),"T"),(0,a.yg)("td",m({parentName:"tr"},{align:null}),"the input element type")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",m({parentName:"tr"},{align:null}),"T2"),(0,a.yg)("td",m({parentName:"tr"},{align:null}),"the output element type")))),(0,a.yg)("h4",m({},{id:"parameters-2"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",m({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"flatMapFun")),(0,a.yg)("td",m({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"(value: T, index: number, halt: () => void) => "),(0,a.yg)("a",m({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,a.yg)("inlineCode",{parentName:"td"},"<T2>")),(0,a.yg)("td",m({parentName:"tr"},{align:null}),"a function that maps each input element to an ",(0,a.yg)("inlineCode",{parentName:"td"},"StreamSource")," or a promise resolving to a ",(0,a.yg)("inlineCode",{parentName:"td"},"StreamSource"),". The function receives three parameters:",(0,a.yg)("br",null)," - ",(0,a.yg)("inlineCode",{parentName:"td"},"value"),": the current element being processed",(0,a.yg)("br",null)," - ",(0,a.yg)("inlineCode",{parentName:"td"},"index"),": the index of the current element in the input stream",(0,a.yg)("br",null)," - ",(0,a.yg)("inlineCode",{parentName:"td"},"halt"),": a function that can be called to halt further processing of the input stream",(0,a.yg)("br",null)))))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",m({},{id:"flatzip"}),(0,a.yg)("inlineCode",{parentName:"h3"},"flatZip")),(0,a.yg)("p",null,"Returns a transformer that applies the given flatMap function to each element of the input stream, and concatenates all the resulting resulting streams into one stream, where each resulting element is tupled with the originating input element.")),(0,a.yg)("h4",m({},{id:"definition-3"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"function flatZip<T, T2>(flatMapFun: (value: T, index: number, halt: () => void) => "),(0,a.yg)("a",m({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,a.yg)("inlineCode",{parentName:"p"},"<T2>): "),(0,a.yg)("a",m({parentName:"p"},{href:"/api/rimbu/stream/Transformer/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"Transformer")),(0,a.yg)("inlineCode",{parentName:"p"},"<T, [T, T2]>;"))),(0,a.yg)("h5",m({},{id:"type-parameters-3"}),"Type parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",m({parentName:"tr"},{align:null}),"T"),(0,a.yg)("td",m({parentName:"tr"},{align:null}),"the input element type")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",m({parentName:"tr"},{align:null}),"T2"),(0,a.yg)("td",m({parentName:"tr"},{align:null}),"the output element type")))),(0,a.yg)("h4",m({},{id:"parameters-3"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",m({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"flatMapFun")),(0,a.yg)("td",m({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"(value: T, index: number, halt: () => void) => "),(0,a.yg)("a",m({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,a.yg)("inlineCode",{parentName:"td"},"<T2>")),(0,a.yg)("td",m({parentName:"tr"},{align:null}),"a function that maps each input element to an ",(0,a.yg)("inlineCode",{parentName:"td"},"StreamSource")," or a promise resolving to an ",(0,a.yg)("inlineCode",{parentName:"td"},"StreamSource"),". The function receives three parameters:",(0,a.yg)("br",null)," - ",(0,a.yg)("inlineCode",{parentName:"td"},"value"),": the current element being processed",(0,a.yg)("br",null)," - ",(0,a.yg)("inlineCode",{parentName:"td"},"index"),": the index of the current element in the input stream",(0,a.yg)("br",null)," - ",(0,a.yg)("inlineCode",{parentName:"td"},"halt"),": a function that can be called to halt further processing of the input stream",(0,a.yg)("br",null)))))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",m({},{id:"indicesof"}),(0,a.yg)("inlineCode",{parentName:"h3"},"indicesOf")),(0,a.yg)("p",null,"Returns a ",(0,a.yg)("inlineCode",{parentName:"p"},"Transformer")," that outputs the index of each received element that is equal to the given ",(0,a.yg)("inlineCode",{parentName:"p"},"searchValue")," value, according to the ",(0,a.yg)("inlineCode",{parentName:"p"},"eq")," equality function.")),(0,a.yg)("h4",m({},{id:"definition-4"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"function indicesOf<T>(searchValue: T, options?: {"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"eq?: Eq<T> "),(0,a.yg)("code",null,"|"),(0,a.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"negate?: boolean "),(0,a.yg)("code",null,"|"),(0,a.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,a.yg)("br",null),"\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"}): "),(0,a.yg)("a",m({parentName:"p"},{href:"/api/rimbu/stream/Transformer/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"Transformer")),(0,a.yg)("inlineCode",{parentName:"p"},"<T, number>;"))),(0,a.yg)("h5",m({},{id:"type-parameters-4"}),"Type parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",m({parentName:"tr"},{align:null}),"T"),(0,a.yg)("td",m({parentName:"tr"},{align:null}),"the input element type")))),(0,a.yg)("h4",m({},{id:"parameters-4"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",m({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"searchValue")),(0,a.yg)("td",m({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"T")),(0,a.yg)("td",m({parentName:"tr"},{align:null}),"the value to match input values to")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",m({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"options")),(0,a.yg)("td",m({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"{"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"eq?: Eq<T> "),(0,a.yg)("code",null,"|"),(0,a.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"negate?: boolean "),(0,a.yg)("code",null,"|"),(0,a.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,a.yg)("br",null),"\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"}")),(0,a.yg)("td",m({parentName:"tr"},{align:null}),"(optional) object specifying the following properties",(0,a.yg)("br",null)," - eq - (default: ",(0,a.yg)("inlineCode",{parentName:"td"},"Eq.objectIs"),") the equality testing function - negate: (default: false) when true will negate the given predicate"))))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",m({},{id:"indiceswhere"}),(0,a.yg)("inlineCode",{parentName:"h3"},"indicesWhere")),(0,a.yg)("p",null,"Returns a ",(0,a.yg)("inlineCode",{parentName:"p"},"Transformer")," that outputs the index of each received element that satisfies the given predicate.")),(0,a.yg)("h4",m({},{id:"definition-5"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"function indicesWhere<T>(pred: (value: T) => boolean, options?: {"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"negate?: boolean "),(0,a.yg)("code",null,"|"),(0,a.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,a.yg)("br",null),"\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"}): "),(0,a.yg)("a",m({parentName:"p"},{href:"/api/rimbu/stream/Transformer/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"Transformer")),(0,a.yg)("inlineCode",{parentName:"p"},"<T, number>;"))),(0,a.yg)("h5",m({},{id:"type-parameters-5"}),"Type parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",m({parentName:"tr"},{align:null}),"T"),(0,a.yg)("td",m({parentName:"tr"},{align:null}),"the input element type")))),(0,a.yg)("h4",m({},{id:"parameters-5"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",m({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"pred")),(0,a.yg)("td",m({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"(value: T) => boolean")),(0,a.yg)("td",m({parentName:"tr"},{align:null}),"a predicate function taking an element")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",m({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"options")),(0,a.yg)("td",m({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"{"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"negate?: boolean "),(0,a.yg)("code",null,"|"),(0,a.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,a.yg)("br",null),"\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"}")),(0,a.yg)("td",m({parentName:"tr"},{align:null}),"(optional) object specifying the following properties",(0,a.yg)("br",null)," - negate: (default: false) when true will negate the given predicate"))))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",m({},{id:"intersperse"}),(0,a.yg)("inlineCode",{parentName:"h3"},"intersperse")),(0,a.yg)("p",null,"Returns a ",(0,a.yg)("inlineCode",{parentName:"p"},"Transfoemr")," that inserts the given ",(0,a.yg)("inlineCode",{parentName:"p"},"sep")," stream source elements between each received input element.")),(0,a.yg)("h4",m({},{id:"definition-6"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"function intersperse<T>(sep: "),(0,a.yg)("a",m({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>): "),(0,a.yg)("a",m({parentName:"p"},{href:"/api/rimbu/stream/Transformer/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"Transformer")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.yg)("h5",m({},{id:"type-parameters-6"}),"Type parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",m({parentName:"tr"},{align:null}),"T"),(0,a.yg)("td",m({parentName:"tr"},{align:null}),"the input and output element type")))),(0,a.yg)("h4",m({},{id:"parameters-6"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",m({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"sep")),(0,a.yg)("td",m({parentName:"tr"},{align:null}),(0,a.yg)("a",m({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,a.yg)("inlineCode",{parentName:"td"},"<T>")),(0,a.yg)("td",m({parentName:"tr"},{align:null}),"the StreamSource to insert between each received element"))))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",m({},{id:"spliton"}),(0,a.yg)("inlineCode",{parentName:"h3"},"splitOn")),(0,a.yg)("p",null,"Returns a ",(0,a.yg)("inlineCode",{parentName:"p"},"Transformer")," that collects the received elements into a ",(0,a.yg)("inlineCode",{parentName:"p"},"collector")," that will be returned as output every time the input matches the given ",(0,a.yg)("inlineCode",{parentName:"p"},"sepElem")," value.")),(0,a.yg)("h4",m({},{id:"definition-7"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"function splitOn<T, R>(sepElem: T, options?: {"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"eq?: Eq<T> "),(0,a.yg)("code",null,"|"),(0,a.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"negate?: boolean "),(0,a.yg)("code",null,"|"),(0,a.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"collector?: Reducer<T, R> "),(0,a.yg)("code",null,"|"),(0,a.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,a.yg)("br",null),"\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"}): "),(0,a.yg)("a",m({parentName:"p"},{href:"/api/rimbu/stream/Transformer/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"Transformer")),(0,a.yg)("inlineCode",{parentName:"p"},"<T, R>;"))),(0,a.yg)("h5",m({},{id:"type-parameters-7"}),"Type parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",m({parentName:"tr"},{align:null}),"T"),(0,a.yg)("td",m({parentName:"tr"},{align:null}),"the input element type")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",m({parentName:"tr"},{align:null}),"R"),(0,a.yg)("td",m({parentName:"tr"},{align:null}),"the collector result type")))),(0,a.yg)("h4",m({},{id:"parameters-7"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",m({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"sepElem")),(0,a.yg)("td",m({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"T")),(0,a.yg)("td",m({parentName:"tr"},{align:null}))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",m({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"options")),(0,a.yg)("td",m({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"{"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"eq?: Eq<T> "),(0,a.yg)("code",null,"|"),(0,a.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"negate?: boolean "),(0,a.yg)("code",null,"|"),(0,a.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"collector?: Reducer<T, R> "),(0,a.yg)("code",null,"|"),(0,a.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,a.yg)("br",null),"\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"}")),(0,a.yg)("td",m({parentName:"tr"},{align:null}),"(optional) object specifying the following properties",(0,a.yg)("br",null)," - eq - (default: ",(0,a.yg)("inlineCode",{parentName:"td"},"Eq.objectIs"),") the equality testing function - negate: (default: false) when true will negate the given predicate",(0,a.yg)("br",null)," - collector: (default: Reducer.toArray()) an AsyncReducer that can accept multiple values and reduce them into a single value of type ",(0,a.yg)("inlineCode",{parentName:"td"},"R"),"."))))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",m({},{id:"splitonslice"}),(0,a.yg)("inlineCode",{parentName:"h3"},"splitOnSlice")),(0,a.yg)("p",null,"Returns a ",(0,a.yg)("inlineCode",{parentName:"p"},"Transformer")," that collects the received elements into a ",(0,a.yg)("inlineCode",{parentName:"p"},"collector")," that will be returned as output every time the input matches the given ",(0,a.yg)("inlineCode",{parentName:"p"},"sepSlice")," sequence of elements.")),(0,a.yg)("h4",m({},{id:"definition-8"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"function splitOnSlice<T, R>(sepSlice: "),(0,a.yg)("a",m({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>, options?: {"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"eq?: Eq<T> "),(0,a.yg)("code",null,"|"),(0,a.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"collector?: Reducer<T, R> "),(0,a.yg)("code",null,"|"),(0,a.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,a.yg)("br",null),"\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"}): "),(0,a.yg)("a",m({parentName:"p"},{href:"/api/rimbu/stream/Transformer/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"Transformer")),(0,a.yg)("inlineCode",{parentName:"p"},"<T, R>;"))),(0,a.yg)("h5",m({},{id:"type-parameters-8"}),"Type parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",m({parentName:"tr"},{align:null}),"T"),(0,a.yg)("td",m({parentName:"tr"},{align:null}),"the input element type")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",m({parentName:"tr"},{align:null}),"R"),(0,a.yg)("td",m({parentName:"tr"},{align:null}),"the collector result type")))),(0,a.yg)("h4",m({},{id:"parameters-8"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",m({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"sepSlice")),(0,a.yg)("td",m({parentName:"tr"},{align:null}),(0,a.yg)("a",m({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,a.yg)("inlineCode",{parentName:"td"},"<T>")),(0,a.yg)("td",m({parentName:"tr"},{align:null}))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",m({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"options")),(0,a.yg)("td",m({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"{"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"eq?: Eq<T> "),(0,a.yg)("code",null,"|"),(0,a.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"collector?: Reducer<T, R> "),(0,a.yg)("code",null,"|"),(0,a.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,a.yg)("br",null),"\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"}")),(0,a.yg)("td",m({parentName:"tr"},{align:null}),"(optional) object specifying the following properties",(0,a.yg)("br",null)," - eq - (default: ",(0,a.yg)("inlineCode",{parentName:"td"},"Eq.objectIs"),") the equality testing function - collector: (default: Reducer.toArray()) an AsyncReducer that can accept multiple values and reduce them into a single value of type ",(0,a.yg)("inlineCode",{parentName:"td"},"R"),"."))))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",m({},{id:"splitwhere"}),(0,a.yg)("inlineCode",{parentName:"h3"},"splitWhere")),(0,a.yg)("p",null,"Returns a ",(0,a.yg)("inlineCode",{parentName:"p"},"Transformer")," that applies the given ",(0,a.yg)("inlineCode",{parentName:"p"},"pred")," function to each received element, and collects the received elements into a ",(0,a.yg)("inlineCode",{parentName:"p"},"collector")," that will be returned as output every time the predicate returns true.")),(0,a.yg)("h4",m({},{id:"definition-9"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"function splitWhere<T, R>(pred: (value: T, index: number) => boolean, options?: {"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"negate?: boolean "),(0,a.yg)("code",null,"|"),(0,a.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"collector?: Reducer<T, R> "),(0,a.yg)("code",null,"|"),(0,a.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,a.yg)("br",null),"\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"}): "),(0,a.yg)("a",m({parentName:"p"},{href:"/api/rimbu/stream/Transformer/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"Transformer")),(0,a.yg)("inlineCode",{parentName:"p"},"<T, R>;"))),(0,a.yg)("h5",m({},{id:"type-parameters-9"}),"Type parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",m({parentName:"tr"},{align:null}),"T"),(0,a.yg)("td",m({parentName:"tr"},{align:null}),"the input element type")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",m({parentName:"tr"},{align:null}),"R"),(0,a.yg)("td",m({parentName:"tr"},{align:null}),"the collector result type")))),(0,a.yg)("h4",m({},{id:"parameters-9"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",m({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"pred")),(0,a.yg)("td",m({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"(value: T, index: number) => boolean")),(0,a.yg)("td",m({parentName:"tr"},{align:null}),"a predicate function taking an element")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",m({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"options")),(0,a.yg)("td",m({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"{"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"negate?: boolean "),(0,a.yg)("code",null,"|"),(0,a.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"collector?: Reducer<T, R> "),(0,a.yg)("code",null,"|"),(0,a.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,a.yg)("br",null),"\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"}")),(0,a.yg)("td",m({parentName:"tr"},{align:null}),"(optional) object specifying the following properties",(0,a.yg)("br",null)," - negate: (default: false) when true will negate the given predicate",(0,a.yg)("br",null)," - collector: (default: Reducer.toArray()) a Reducer that can accept multiple values and reduce them into a single value of type ",(0,a.yg)("inlineCode",{parentName:"td"},"R"),"."))))),(0,a.yg)("h2",m({},{id:"constants"}),"Constants"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",m({parentName:"tr"},{align:null}),"filter"),(0,a.yg)("td",m({parentName:"tr"},{align:null}),"Returns a transformer that filters elements from the input stream based on the provided predicate function.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",m({parentName:"tr"},{align:null}),"window"),(0,a.yg)("td",m({parentName:"tr"},{align:null}),"Returns a transformer that produces windows/collections of ",(0,a.yg)("inlineCode",{parentName:"td"},"windowSize")," size, each window starting ",(0,a.yg)("inlineCode",{parentName:"td"},"skipAmount")," of elements after the previous, and optionally collected by a custom reducer.")))))}v.isMDXComponent=!0}}]);