"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[15352],{15680:(e,n,a)=>{a.d(n,{xA:()=>g,yg:()=>N});var t=a(96540);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=t.createContext({}),d=function(e){var n=t.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},g=function(e){var n=d(e.components);return t.createElement(p.Provider,{value:n},e.children)},m="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,g=o(e,["components","mdxType","originalType","parentName"]),m=d(a),u=r,N=m["".concat(p,".").concat(u)]||m[u]||y[u]||l;return a?t.createElement(N,i(i({ref:n},g),{},{components:a})):t.createElement(N,i({ref:n},g))}));function N(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=u;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[m]="string"==typeof e?e:r,i[1]=o;for(var d=2;d<l;d++)i[d]=a[d];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},44798:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>h,contentTitle:()=>s,default:()=>C,frontMatter:()=>N,metadata:()=>c,toc:()=>b});var t=a(15680),r=Object.defineProperty,l=Object.defineProperties,i=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,d=Object.prototype.propertyIsEnumerable,g=(e,n,a)=>n in e?r(e,n,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[n]=a,m=(e,n)=>{for(var a in n||(n={}))p.call(n,a)&&g(e,a,n[a]);if(o)for(var a of o(n))d.call(n,a)&&g(e,a,n[a]);return e},y=(e,n)=>l(e,i(n)),u=(e,n)=>{var a={};for(var t in e)p.call(e,t)&&n.indexOf(t)<0&&(a[t]=e[t]);if(null!=e&&o)for(var t of o(e))n.indexOf(t)<0&&d.call(e,t)&&(a[t]=e[t]);return a};const N={title:"GraphBase.Builder<N,Tp>",slug:"/rimbu/graph/custom/GraphBase/Builder/interface"},s="interface GraphBase.Builder<N,Tp>",c={unversionedId:"rimbu_graph/custom/GraphBase/Builder.interface",id:"rimbu_graph/custom/GraphBase/Builder.interface",title:"GraphBase.Builder<N,Tp>",description:"undocumented",source:"@site/api/rimbu_graph/custom/GraphBase/Builder.interface.mdx",sourceDirName:"rimbu_graph/custom/GraphBase",slug:"/rimbu/graph/custom/GraphBase/Builder/interface",permalink:"/api/rimbu/graph/custom/GraphBase/Builder/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"GraphBase.Builder<N,Tp>",slug:"/rimbu/graph/custom/GraphBase/Builder/interface"},sidebar:"defaultSidebar",previous:{title:"GraphBase (namespace)",permalink:"/api/rimbu/graph/custom/GraphBase/namespace"},next:{title:"GraphBase.Context<UN,Tp>",permalink:"/api/rimbu/graph/custom/GraphBase/Context/interface"}},h={},b=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>connectionSize</code>",id:"connectionsize",level:3},{value:"Definition",id:"definition",level:4},{value:"<code>context</code>",id:"context",level:3},{value:"Definition",id:"definition-1",level:4},{value:"<code>isEmpty</code>",id:"isempty",level:3},{value:"Definition",id:"definition-2",level:4},{value:"<code>nodeSize</code>",id:"nodesize",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Methods",id:"methods",level:2},{value:"<code>addGraphElement</code>",id:"addgraphelement",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Parameters",id:"parameters",level:4},{value:"<code>addGraphElements</code>",id:"addgraphelements",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>addNode</code>",id:"addnode",level:3},{value:"Definition",id:"definition-6",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"<code>addNodes</code>",id:"addnodes",level:3},{value:"Definition",id:"definition-7",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"<code>build</code>",id:"build",level:3},{value:"Definition",id:"definition-8",level:4},{value:"<code>connect</code>",id:"connect",level:3},{value:"Definition",id:"definition-9",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"<code>connectAll</code>",id:"connectall",level:3},{value:"Definition",id:"definition-10",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"<code>connectIfNodesExist</code>",id:"connectifnodesexist",level:3},{value:"Definition",id:"definition-11",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"<code>disconnect</code>",id:"disconnect",level:3},{value:"Definition",id:"definition-12",level:4},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"<code>disconnectAll</code>",id:"disconnectall",level:3},{value:"Definition",id:"definition-13",level:4},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"<code>forEach</code>",id:"foreach",level:3},{value:"Definition",id:"definition-14",level:4},{value:"Parameters",id:"parameters-9",level:4},{value:"<code>hasConnection</code>",id:"hasconnection",level:3},{value:"Definition",id:"definition-15",level:4},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Parameters",id:"parameters-10",level:4},{value:"<code>hasNode</code>",id:"hasnode",level:3},{value:"Definition",id:"definition-16",level:4},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"Parameters",id:"parameters-11",level:4},{value:"<code>removeNode</code>",id:"removenode",level:3},{value:"Definition",id:"definition-17",level:4},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Parameters",id:"parameters-12",level:4},{value:"<code>removeNodes</code>",id:"removenodes",level:3},{value:"Definition",id:"definition-18",level:4},{value:"Type parameters",id:"type-parameters-6",level:4},{value:"Parameters",id:"parameters-13",level:4}],f={toc:b},v="wrapper";function C(e){var n=e,{components:a}=n,r=u(n,["components"]);return(0,t.yg)(v,y(m(m({},f),r),{components:a,mdxType:"MDXLayout"}),(0,t.yg)("h1",m({},{id:"interface-graphbasebuilderntp"}),(0,t.yg)("inlineCode",{parentName:"h1"},"interface GraphBase.Builder<N,Tp>")),(0,t.yg)("p",null,"undocumented"),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Implemented by:")," ",(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/graph/custom/ArrowGraphBase/Builder/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"ArrowGraphBase.Builder<N,Tp>")),", ",(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/graph/custom/EdgeGraphBase/Builder/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"EdgeGraphBase.Builder<N,Tp>"))),(0,t.yg)("h2",m({},{id:"type-parameters"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"N"),(0,t.yg)("td",m({parentName:"tr"},{align:null})),(0,t.yg)("td",m({parentName:"tr"},{align:null})),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"undocumented")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"Tp"),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/graph/custom/GraphBase/Types/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"GraphBase.Types"))),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/graph/custom/GraphBase/Types/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"GraphBase.Types"))),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"undocumented")))),(0,t.yg)("h2",m({},{id:"properties"}),"Properties"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"connectionsize"}),(0,t.yg)("inlineCode",{parentName:"h3"},"connectionSize")),(0,t.yg)("p",null,"Returns the amount of connections in the graph.")),(0,t.yg)("h4",m({},{id:"definition"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly connectionSize: number;"))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"ArrowGraphHashed\n.of([[1, 2], [2, 3]])\n.toBuilder()\n.connectionsSize\n// => 2\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"context"}),(0,t.yg)("inlineCode",{parentName:"h3"},"context")),(0,t.yg)("p",null,"Returns the ",(0,t.yg)("inlineCode",{parentName:"p"},"context")," associated to this collection instance.")),(0,t.yg)("h4",m({},{id:"definition-1"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly context: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, unknown>['context'];")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"isempty"}),(0,t.yg)("inlineCode",{parentName:"h3"},"isEmpty")),(0,t.yg)("p",null,"Returns true if there are no entries in the builder.")),(0,t.yg)("h4",m({},{id:"definition-2"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly isEmpty: boolean;"))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"ArrowGraphHashed\n.of([[1, 2], [2, 3]])\n.toBuilder()\n.isEmpty\n// => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"nodesize"}),(0,t.yg)("inlineCode",{parentName:"h3"},"nodeSize")),(0,t.yg)("p",null,"Returns the amount of nodes in the graph.")),(0,t.yg)("h4",m({},{id:"definition-3"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly nodeSize: number;"))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"ArrowGraphHashed\n.of([[1, 2], [2, 3]])\n.toBuilder()\n.nodeSize\n// => 3\n")))),(0,t.yg)("h2",m({},{id:"methods"}),"Methods"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"addgraphelement"}),(0,t.yg)("inlineCode",{parentName:"h3"},"addGraphElement")),(0,t.yg)("p",null,"Adds the given ",(0,t.yg)("inlineCode",{parentName:"p"},"element")," graph element to the builder, where a graph element is either a one-element tuple containing a node, or a two-element tuple containing two nodes indicating a connection.")),(0,t.yg)("h4",m({},{id:"definition-4"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"addGraphElement(element: GraphElement<N>): boolean;"))),(0,t.yg)("h4",m({},{id:"parameters"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"element")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"GraphElement<N>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const b = ArrowGraphHashed\n.of([[1, 2], [2, 3]])\n.toBuilder()\nb.addGraphElement([1])  // => false\nb.addGraphElement([4])  // => true\nb.addGraphElement([2, 3])  // => false\nb.addGraphElement([4, 1])  // => true\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"addgraphelements"}),(0,t.yg)("inlineCode",{parentName:"h3"},"addGraphElements")),(0,t.yg)("p",null,"Adds the graph elements in the given ",(0,t.yg)("inlineCode",{parentName:"p"},"elements")," StreamSource to the graph.")),(0,t.yg)("h4",m({},{id:"definition-5"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"addGraphElements(elements: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<GraphElement<N>>): boolean;"))),(0,t.yg)("h4",m({},{id:"parameters-1"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"elements")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<GraphElement<N>>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const b = ArrowGraphHashed\n.of([[1, 2], [2, 3]])\n.toBuilder()\nb.addGraphElements([[4], [5]])      // => true\nb.addGraphElements([[3, 1], [1]])  // => true\nb.addGraphElements([[1, 2], [1]])  // => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"addnode"}),(0,t.yg)("inlineCode",{parentName:"h3"},"addNode")),(0,t.yg)("p",null,"Adds the given ",(0,t.yg)("inlineCode",{parentName:"p"},"node")," to the graph.")),(0,t.yg)("h4",m({},{id:"definition-6"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"addNode(node: N): boolean;"))),(0,t.yg)("h4",m({},{id:"parameters-2"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const b = ArrowGraphHashed\n.of([[1, 2], [2, 3]])\n.toBuilder()\nb.addNode(6)   // => true\nb.addNode(1)   // => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"addnodes"}),(0,t.yg)("inlineCode",{parentName:"h3"},"addNodes")),(0,t.yg)("p",null,"Adds the given ",(0,t.yg)("inlineCode",{parentName:"p"},"nodes")," to the builder.")),(0,t.yg)("h4",m({},{id:"definition-7"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"addNodes(nodes: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<N>): boolean;"))),(0,t.yg)("h4",m({},{id:"parameters-3"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"nodes")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<N>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const b = ArrowGraphHashed\n.of([[1, 2], [2, 3]])\n.toBuilder()\nb.addNodes([3, 4, 5]) // => true\nb.addNodes([1, 2])    // => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"build"}),(0,t.yg)("inlineCode",{parentName:"h3"},"build")),(0,t.yg)("p",null,"Returns an immutable Graph containing the links in this Builder instance.")),(0,t.yg)("h4",m({},{id:"definition-8"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"build(): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, unknown>['normal'];"))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const b = ArrowGraphHashed.builder<number, number>()\nb.connect(1, 2)\nb.addNode(3)\nconst g = b.build()\nconsole.log(g.toArray())\n// => [[1, 2], [3]]\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"connect"}),(0,t.yg)("inlineCode",{parentName:"h3"},"connect")),(0,t.yg)("p",null,"Adds a connection between ",(0,t.yg)("inlineCode",{parentName:"p"},"node1")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"node2")," to the graph.")),(0,t.yg)("h4",m({},{id:"definition-9"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"connect(node1: N, node2: N): boolean;"))),(0,t.yg)("h4",m({},{id:"parameters-4"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node1")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the first connection node")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node2")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const b = ArrowGraphHashed\n.of([[1, 2], [2, 3]])\n.toBuilder()\nb.connect(3, 1)  // => true\nb.connect(1, 2)  // => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"connectall"}),(0,t.yg)("inlineCode",{parentName:"h3"},"connectAll")),(0,t.yg)("p",null,"Adds the connections in given ",(0,t.yg)("inlineCode",{parentName:"p"},"connections")," ",(0,t.yg)("inlineCode",{parentName:"p"},"StreamSource")," to the graph.")),(0,t.yg)("h4",m({},{id:"definition-10"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"connectAll(connections: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<"),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, unknown>['link']>): boolean;"))),(0,t.yg)("h4",m({},{id:"parameters-5"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"connections")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<"),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"td"},"<Tp, N, unknown>['link']>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const b = ArrowGraphHashed\n.of([[1, 2], [2, 3]])\n.toBuilder()\nb.connectAll([[1, 2], [3, 1]])   // => true\nb.connectAll([[1, 2]])           // => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"connectifnodesexist"}),(0,t.yg)("inlineCode",{parentName:"h3"},"connectIfNodesExist")),(0,t.yg)("p",null,"Returns true if the graph has changed")),(0,t.yg)("h4",m({},{id:"definition-11"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"connectIfNodesExist(node1: N, node2: N): boolean;"))),(0,t.yg)("h4",m({},{id:"parameters-6"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node1")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node2")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const b = ArrowGraphHashed\n.of([[1, 2], [2, 3]])\n.toBuilder()\nb.connectIfNodesExist(3, 1)   // => true\nb.connectIfNodesExist(3, 4)   // => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"disconnect"}),(0,t.yg)("inlineCode",{parentName:"h3"},"disconnect")),(0,t.yg)("p",null,"Removes the connection between given ",(0,t.yg)("inlineCode",{parentName:"p"},"node1")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"node2")," if the connection was present.")),(0,t.yg)("h4",m({},{id:"definition-12"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"disconnect<UN = N>(node1: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>, node2: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>): boolean;"))),(0,t.yg)("h4",m({},{id:"type-parameters-1"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"UN"),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",m({},{id:"parameters-7"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node1")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the first connection node")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node2")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const b = ArrowGraphHashed\n.of([[1, 2], [2, 3]])\n.toBuilder()\nb.disconnect(1, 2)  // => true\nb.disconnect(3, 4)  // => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"disconnectall"}),(0,t.yg)("inlineCode",{parentName:"h3"},"disconnectAll")),(0,t.yg)("p",null,"Removes all connections from the given ",(0,t.yg)("inlineCode",{parentName:"p"},"connections")," ",(0,t.yg)("inlineCode",{parentName:"p"},"StreamSource")," from the graph.")),(0,t.yg)("h4",m({},{id:"definition-13"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"disconnectAll<UN = N>(connections: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<Link<"),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>>>): boolean;"))),(0,t.yg)("h4",m({},{id:"type-parameters-2"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"UN"),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",m({},{id:"parameters-8"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"connections")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<Link<"),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>>>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const b = ArrowGraphHashed\n.of([[1, 2], [2, 3]])\n.toBuilder()\nb.disconnectAll([[1, 2], [3, 4]])  // => true\nb.disconnectAll([[3, 4], [5, 6]])  // => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"foreach"}),(0,t.yg)("inlineCode",{parentName:"h3"},"forEach")),(0,t.yg)("p",null,"Performs given function ",(0,t.yg)("inlineCode",{parentName:"p"},"f")," for each entry of the collection, using given ",(0,t.yg)("inlineCode",{parentName:"p"},"state")," as initial traversal state.")),(0,t.yg)("h4",m({},{id:"definition-14"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"forEach(f: (entry: [N] "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, unknown>['link'], index: number, halt: () => void) => void, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"state?: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/TraverseState/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"TraverseState")),(0,t.yg)("inlineCode",{parentName:"p"},";"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): void;"))),(0,t.yg)("h4",m({},{id:"parameters-9"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"f")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(entry: [N] "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," "),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"td"},"<Tp, N, unknown>['link'], index: number, halt: () => void) => void")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the function to perform for each entry, receiving:",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"entry"),": the next graph element",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"index"),": the index of the element",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"halt"),": a function that, if called, ensures that no new elements are passed")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"state?: "),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/common/TraverseState/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"TraverseState")),(0,t.yg)("inlineCode",{parentName:"td"},";"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"object containing the following",(0,t.yg)("br",null)," - state: (optional) the traverse state")))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const b = ArrowGraphHashed.of([1], [2, 3], [4]).toBuilder();\nb.forEach((entry, i, halt) => {\nconsole.log([entry]);\nif (i >= 1) halt();\n})\n// => logs [1]  [2, 3]\n"))),(0,t.yg)("admonition",m({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N)"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"hasconnection"}),(0,t.yg)("inlineCode",{parentName:"h3"},"hasConnection")),(0,t.yg)("p",null,"Returns true if the graph has a connection between given nodes ",(0,t.yg)("inlineCode",{parentName:"p"},"node1")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"node2"),".")),(0,t.yg)("h4",m({},{id:"definition-15"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"hasConnection<UN = N>(node1: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>, node2: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>): boolean;"))),(0,t.yg)("h4",m({},{id:"type-parameters-3"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"UN"),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",m({},{id:"parameters-10"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node1")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the first connection node")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node2")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the second connection node")))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const b = ArrowGraphHashed\n.of([[1, 2], [2, 3]])\n.toBuilder()\nb.hasConnection(1, 2)   // => true\nb.hasConnection(6, 7)   // => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"hasnode"}),(0,t.yg)("inlineCode",{parentName:"h3"},"hasNode")),(0,t.yg)("p",null,"Returns true if the graph contains the given ",(0,t.yg)("inlineCode",{parentName:"p"},"node"),".")),(0,t.yg)("h4",m({},{id:"definition-16"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"hasNode<UN = N>(node: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>): boolean;"))),(0,t.yg)("h4",m({},{id:"type-parameters-4"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"UN"),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",m({},{id:"parameters-11"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the node to search")))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const b = ArrowGraphHashed\n.of([[1, 2], [2, 3]])\n.toBuilder()\nb.hasNode(1)   // => true\nb.hasNode(6)   // => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"removenode"}),(0,t.yg)("inlineCode",{parentName:"h3"},"removeNode")),(0,t.yg)("p",null,"Removes the given ",(0,t.yg)("inlineCode",{parentName:"p"},"node"),", and any of its connections, from the graph.")),(0,t.yg)("h4",m({},{id:"definition-17"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"removeNode<UN = N>(node: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>): boolean;"))),(0,t.yg)("h4",m({},{id:"type-parameters-5"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"UN"),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",m({},{id:"parameters-12"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const b = ArrowGraphHashed\n.of([[1, 2], [2, 3]])\n.toBuilder()\nb.removeNode(1)  // => true\nb.removeNode(6)  // => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"removenodes"}),(0,t.yg)("inlineCode",{parentName:"h3"},"removeNodes")),(0,t.yg)("p",null,"Removes the given ",(0,t.yg)("inlineCode",{parentName:"p"},"nodes"),", and any of their connections, from the graph.")),(0,t.yg)("h4",m({},{id:"definition-18"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"removeNodes<UN = N>(nodes: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<"),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>>): boolean;"))),(0,t.yg)("h4",m({},{id:"type-parameters-6"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"UN"),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",m({},{id:"parameters-13"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"nodes")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<"),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const b = ArrowGraphHashed\n.of([[1, 2], [2, 3]])\n.toBuilder()\nb.removeNodes([1, 6, 7])  // => true\nb.removeNodes([6, 7])     // => false\n")))))}C.isMDXComponent=!0}}]);