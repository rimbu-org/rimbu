"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[14368],{15680:(e,t,n)=>{n.d(t,{xA:()=>m,yg:()=>d});var a=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),p=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(u.Provider,{value:t},e.children)},c="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=p(n),s=r,d=c["".concat(u,".").concat(s)]||c[s]||y[s]||i;return n?a.createElement(d,l(l({ref:t},m),{},{components:n})):a.createElement(d,l({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=s;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o[c]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},6141:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>b,contentTitle:()=>g,default:()=>S,frontMatter:()=>d,metadata:()=>f,toc:()=>h});var a=n(15680),r=Object.defineProperty,i=Object.defineProperties,l=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,u=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,m=(e,t,n)=>t in e?r(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,c=(e,t)=>{for(var n in t||(t={}))u.call(t,n)&&m(e,n,t[n]);if(o)for(var n of o(t))p.call(t,n)&&m(e,n,t[n]);return e},y=(e,t)=>i(e,l(t)),s=(e,t)=>{var n={};for(var a in e)u.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&o)for(var a of o(e))t.indexOf(a)<0&&p.call(e,a)&&(n[a]=e[a]);return n};const d={title:"MultiSet (namespace)",slug:"/rimbu/multiset/MultiSet/namespace"},g="namespace MultiSet",f={unversionedId:"rimbu_multiset/MultiSet/index",id:"rimbu_multiset/MultiSet/index",title:"MultiSet (namespace)",description:"A type-invariant immutable MultiSet of value type T. In the MultiSet, each value can occur multiple times. See the MultiSet documentation and the MultiSet API documentation",source:"@site/api/rimbu_multiset/MultiSet/index.mdx",sourceDirName:"rimbu_multiset/MultiSet",slug:"/rimbu/multiset/MultiSet/namespace",permalink:"/api/rimbu/multiset/MultiSet/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"MultiSet (namespace)",slug:"/rimbu/multiset/MultiSet/namespace"},sidebar:"defaultSidebar",previous:{title:"HashMultiSet<T>",permalink:"/api/rimbu/multiset/HashMultiSet/interface"},next:{title:"MultiSet.Builder<T>",permalink:"/api/rimbu/multiset/MultiSet/Builder/interface"}},b={},h=[{value:"Interfaces",id:"interfaces",level:2},{value:"Static Methods",id:"static-methods",level:2},{value:"<code>createContext</code>",id:"createcontext",level:3},{value:"Definition",id:"definition",level:4},{value:"Type parameters",id:"type-parameters",level:4},{value:"Parameters",id:"parameters",level:4}],N={toc:h},M="wrapper";function S(e){var t=e,{components:n}=t,r=s(t,["components"]);return(0,a.yg)(M,y(c(c({},N),r),{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",c({},{id:"namespace-multiset"}),(0,a.yg)("inlineCode",{parentName:"h1"},"namespace MultiSet")),(0,a.yg)("p",null,"A type-invariant immutable MultiSet of value type T. In the MultiSet, each value can occur multiple times. See the ",(0,a.yg)("a",c({parentName:"p"},{href:"https://rimbu.org/docs/collections/multiset"}),"MultiSet documentation")," and the ",(0,a.yg)("a",c({parentName:"p"},{href:"https://rimbu.org/api/rimbu/multiset/MultiSet/interface"}),"MultiSet API documentation")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Companion interface:")," ",(0,a.yg)("a",c({parentName:"p"},{href:"/api/rimbu/multiset/MultiSet/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"MultiSet<T>"))),(0,a.yg)("h2",c({},{id:"interfaces"}),"Interfaces"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",c({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",c({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",c({parentName:"tr"},{align:null}),(0,a.yg)("a",c({parentName:"td"},{href:"/api/rimbu/multiset/MultiSet/Builder/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"MultiSet.Builder<T>"))),(0,a.yg)("td",c({parentName:"tr"},{align:null}),"A mutable ",(0,a.yg)("inlineCode",{parentName:"td"},"MultiSet")," builder used to efficiently create new immutable instances. See the ",(0,a.yg)("a",c({parentName:"td"},{href:"https://rimbu.org/docs/collections/multiset"}),"MultiSet documentation")," and the ",(0,a.yg)("a",c({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multiset/MultiSet/Builder/interface"}),"MultiSet.Builder API documentation"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",c({parentName:"tr"},{align:null}),(0,a.yg)("a",c({parentName:"td"},{href:"/api/rimbu/multiset/MultiSet/Context/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"MultiSet.Context<UT>"))),(0,a.yg)("td",c({parentName:"tr"},{align:null}),"A context instance for ",(0,a.yg)("inlineCode",{parentName:"td"},"MultiSet")," implementations that acts as a factory for every instance of this type of collection.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",c({parentName:"tr"},{align:null}),(0,a.yg)("a",c({parentName:"td"},{href:"/api/rimbu/multiset/MultiSet/NonEmpty/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"MultiSet.NonEmpty<T>"))),(0,a.yg)("td",c({parentName:"tr"},{align:null}),"A non-empty type-invariant immutable MultiSet of value type T. In the MultiSet, each value can occur multiple times. See the ",(0,a.yg)("a",c({parentName:"td"},{href:"https://rimbu.org/docs/collections/multiset"}),"MultiSet documentation")," and the ",(0,a.yg)("a",c({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multiset/MultiSet/interface"}),"MultiSet API documentation"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",c({parentName:"tr"},{align:null}),(0,a.yg)("a",c({parentName:"td"},{href:"/api/rimbu/multiset/MultiSet/Types/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"MultiSet.Types"))),(0,a.yg)("td",c({parentName:"tr"},{align:null}),"Utility interface that provides higher-kinded types for this collection.")))),(0,a.yg)("h2",c({},{id:"static-methods"}),"Static Methods"),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",c({},{id:"createcontext"}),(0,a.yg)("inlineCode",{parentName:"h3"},"createContext")),(0,a.yg)("p",null,"Returns a new MultiSet context instance based on the given ",(0,a.yg)("inlineCode",{parentName:"p"},"options"),".")),(0,a.yg)("h4",c({},{id:"definition"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"createContext<UT>(options: {"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"countMapContext: "),(0,a.yg)("a",c({parentName:"p"},{href:"/api/rimbu/collection-types/map/RMap/Context/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"RMap.Context")),(0,a.yg)("inlineCode",{parentName:"p"},"<UT>;"),(0,a.yg)("br",null),"\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"}): MultiSet.Context<UT>;"))),(0,a.yg)("h4",c({},{id:"type-parameters"}),"Type parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",c({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",c({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",c({parentName:"tr"},{align:null}),"UT"),(0,a.yg)("td",c({parentName:"tr"},{align:null}),"the upper element type for which the context can create instances")))),(0,a.yg)("h4",c({},{id:"parameters"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",c({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",c({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",c({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",c({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"options")),(0,a.yg)("td",c({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"{"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"countMapContext: "),(0,a.yg)("a",c({parentName:"td"},{href:"/api/rimbu/collection-types/map/RMap/Context/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"RMap.Context")),(0,a.yg)("inlineCode",{parentName:"td"},"<UT>;"),(0,a.yg)("br",null),"\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"}")),(0,a.yg)("td",c({parentName:"tr"},{align:null}),"an object containing the following properties:",(0,a.yg)("br",null)," - countMapContext: the map context to use for key to count mapping"))))))}S.isMDXComponent=!0}}]);