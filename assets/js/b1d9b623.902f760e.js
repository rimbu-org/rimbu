"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[9236],{15680:(e,n,a)=>{a.d(n,{xA:()=>g,yg:()=>s});var t=a(96540);function l(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){l(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,l=function(e,n){if(null==e)return{};var a,t,l={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(l[a]=e[a]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var d=t.createContext({}),p=function(e){var n=t.useContext(d),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},g=function(e){var n=p(e.components);return t.createElement(d.Provider,{value:n},e.children)},y="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var a=e.components,l=e.mdxType,r=e.originalType,d=e.parentName,g=o(e,["components","mdxType","originalType","parentName"]),y=p(a),m=l,s=y["".concat(d,".").concat(m)]||y[m]||u[m]||r;return a?t.createElement(s,i(i({ref:n},g),{},{components:a})):t.createElement(s,i({ref:n},g))}));function s(e,n){var a=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=a.length,i=new Array(r);i[0]=m;var o={};for(var d in n)hasOwnProperty.call(n,d)&&(o[d]=n[d]);o.originalType=e,o[y]="string"==typeof e?e:l,i[1]=o;for(var p=2;p<r;p++)i[p]=a[p];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"},60803:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>f,contentTitle:()=>c,default:()=>v,frontMatter:()=>s,metadata:()=>h,toc:()=>b});var t=a(15680),l=Object.defineProperty,r=Object.defineProperties,i=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,d=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,g=(e,n,a)=>n in e?l(e,n,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[n]=a,y=(e,n)=>{for(var a in n||(n={}))d.call(n,a)&&g(e,a,n[a]);if(o)for(var a of o(n))p.call(n,a)&&g(e,a,n[a]);return e},u=(e,n)=>r(e,i(n)),m=(e,n)=>{var a={};for(var t in e)d.call(e,t)&&n.indexOf(t)<0&&(a[t]=e[t]);if(null!=e&&o)for(var t of o(e))n.indexOf(t)<0&&p.call(e,t)&&(a[t]=e[t]);return a};const s={title:"Channel.Write<T>",slug:"/rimbu/channel/Channel/Write/interface"},c="interface Channel.Write<T>",h={unversionedId:"rimbu_channel/Channel/Write.interface",id:"rimbu_channel/Channel/Write.interface",title:"Channel.Write<T>",description:"A write-only Channel that can perform blocking writes. This means that a send call will block until the channel has capacity to send a message.",source:"@site/api/rimbu_channel/Channel/Write.interface.mdx",sourceDirName:"rimbu_channel/Channel",slug:"/rimbu/channel/Channel/Write/interface",permalink:"/api/rimbu/channel/Channel/Write/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"Channel.Write<T>",slug:"/rimbu/channel/Channel/Write/interface"},sidebar:"defaultSidebar",previous:{title:"Channel.Read<T>",permalink:"/api/rimbu/channel/Channel/Read/interface"},next:{title:"Channel<T>",permalink:"/api/rimbu/channel/Channel/interface"}},f={},b=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>isClosed</code>",id:"isclosed",level:3},{value:"Definition",id:"definition",level:4},{value:"Methods",id:"methods",level:2},{value:"<code>close</code>",id:"close",level:3},{value:"Definition",id:"definition-1",level:4},{value:"<code>send</code>",id:"send",level:3},{value:"Definitions",id:"definitions",level:4},{value:"Parameters",id:"parameters",level:4},{value:"<code>sendAll</code>",id:"sendall",level:3},{value:"Definitions",id:"definitions-1",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>writable</code>",id:"writable",level:3},{value:"Definition",id:"definition-2",level:4}],N={toc:b},C="wrapper";function v(e){var n=e,{components:a}=n,l=m(n,["components"]);return(0,t.yg)(C,u(y(y({},N),l),{components:a,mdxType:"MDXLayout"}),(0,t.yg)("h1",y({},{id:"interface-channelwritet"}),(0,t.yg)("inlineCode",{parentName:"h1"},"interface Channel.Write<T>")),(0,t.yg)("p",null,"A write-only Channel that can perform blocking writes. This means that a ",(0,t.yg)("inlineCode",{parentName:"p"},"send")," call will block until the channel has capacity to send a message."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Implemented by:")," ",(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/channel/CrossChannel/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"CrossChannel<TSend,TReceive>")),", ",(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/channel/Channel/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Channel<T>"))),(0,t.yg)("h2",y({},{id:"type-parameters"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",y({parentName:"tr"},{align:null}),"T"),(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"void")),(0,t.yg)("td",y({parentName:"tr"},{align:null}),"the channel message type")))),(0,t.yg)("h2",y({},{id:"properties"}),"Properties"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",y({},{id:"isclosed"}),(0,t.yg)("inlineCode",{parentName:"h3"},"isClosed")),(0,t.yg)("p",null,"Returns true if the Channel is closed.")),(0,t.yg)("h4",y({},{id:"definition"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"get isClosed(): boolean;")))),(0,t.yg)("h2",y({},{id:"methods"}),"Methods"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",y({},{id:"close"}),(0,t.yg)("inlineCode",{parentName:"h3"},"close")),(0,t.yg)("p",null,"Closes the channel. After a close, further send actions will throw.")),(0,t.yg)("h4",y({},{id:"definition-1"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"close(): void;")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",y({},{id:"send"}),(0,t.yg)("inlineCode",{parentName:"h3"},"send")),(0,t.yg)("p",null,"Send the given ",(0,t.yg)("inlineCode",{parentName:"p"},"value")," message to the Channel. Blocks if the Channel is already at maximum capacity.")),(0,t.yg)("h4",y({},{id:"definitions"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"send(value: T, options: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"signal?: AbortSignal "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"timeoutMs?: number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"catchChannelErrors?: false "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): Promise<void>;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"send(value: T, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"signal?: AbortSignal "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"timeoutMs?: number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"catchChannelErrors: boolean;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): Promise<undefined "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," "),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/channel/Channel/Error/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Channel.Error")),(0,t.yg)("inlineCode",{parentName:"p"},">;"))),(0,t.yg)("h4",y({},{id:"parameters"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"value")),(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"T")),(0,t.yg)("td",y({parentName:"tr"},{align:null}),"the message to send to the channel")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"signal?: AbortSignal "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"timeoutMs?: number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"catchChannelErrors?: false "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",y({parentName:"tr"},{align:null}),"(optional) the message send options",(0,t.yg)("br",null)," - signal: (optional) an abort signal to cancel sending",(0,t.yg)("br",null)," - timeoutMs: (optional) amount of milliseconds to wait for being able to send message",(0,t.yg)("br",null)," - recover: (optional) a function that can be supplied to recover from a channel error"))))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",y({},{id:"sendall"}),(0,t.yg)("inlineCode",{parentName:"h3"},"sendAll")),(0,t.yg)("p",null,"Sequentially send all the values in the given ",(0,t.yg)("inlineCode",{parentName:"p"},"source")," to the channel. Blocks until all the values are sent.")),(0,t.yg)("h4",y({},{id:"definitions-1"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"sendAll(source: "),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>, options: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"signal?: AbortSignal "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"timeoutMs?: number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"catchChannelErrors?: false "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): Promise<void>;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"sendAll(source: "),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"signal?: AbortSignal "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"timeoutMs?: number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"catchChannelErrors: boolean;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): Promise<undefined "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," "),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/channel/Channel/Error/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Channel.Error")),(0,t.yg)("inlineCode",{parentName:"p"},">;"))),(0,t.yg)("h4",y({},{id:"parameters-1"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"source")),(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("a",y({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<T>")),(0,t.yg)("td",y({parentName:"tr"},{align:null}),"a stream source containing the values to send")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"signal?: AbortSignal "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"timeoutMs?: number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"catchChannelErrors?: false "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",y({parentName:"tr"},{align:null}),"the message send options",(0,t.yg)("br",null)," - signal: (optional) an abort signal to cancel sending",(0,t.yg)("br",null)," - timeoutMs: (optional) amount of milliseconds to wait for being able to send message, for each separate message in the source",(0,t.yg)("br",null)," - recover: (optional) a function that can be supplied to recover from a channel error"))))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",y({},{id:"writable"}),(0,t.yg)("inlineCode",{parentName:"h3"},"writable")),(0,t.yg)("p",null,"Returns the Channel as a write-only Channel.Write instance.")),(0,t.yg)("h4",y({},{id:"definition-2"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"writable(): "),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/channel/Channel/Write/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Channel.Write")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;")))))}v.isMDXComponent=!0}}]);