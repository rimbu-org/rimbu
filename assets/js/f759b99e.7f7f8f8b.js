"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[49245],{15680:(e,n,r)=>{r.d(n,{xA:()=>y,yg:()=>m});var t=r(96540);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function p(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=t.createContext({}),c=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},y=function(e){var n=c(e.components);return t.createElement(l.Provider,{value:n},e.children)},u="mdxType",s={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,y=p(e,["components","mdxType","originalType","parentName"]),u=c(r),d=a,m=u["".concat(l,".").concat(d)]||u[d]||s[d]||i;return r?t.createElement(m,o(o({ref:n},y),{},{components:r})):t.createElement(m,o({ref:n},y))}));function m(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=d;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p[u]="string"==typeof e?e:a,o[1]=p;for(var c=2;c<i;c++)o[c]=r[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4227:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>b,contentTitle:()=>g,default:()=>C,frontMatter:()=>m,metadata:()=>f,toc:()=>v});var t=r(15680),a=Object.defineProperty,i=Object.defineProperties,o=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,y=(e,n,r)=>n in e?a(e,n,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[n]=r,u=(e,n)=>{for(var r in n||(n={}))l.call(n,r)&&y(e,r,n[r]);if(p)for(var r of p(n))c.call(n,r)&&y(e,r,n[r]);return e},s=(e,n)=>i(e,o(n)),d=(e,n)=>{var r={};for(var t in e)l.call(e,t)&&n.indexOf(t)<0&&(r[t]=e[t]);if(null!=e&&p)for(var t of p(e))n.indexOf(t)<0&&c.call(e,t)&&(r[t]=e[t]);return r};const m={title:"partition",slug:"/rimbu/stream/AsyncReducer/partition/var"},g="type partition",f={unversionedId:"rimbu_stream/async/AsyncReducer/partition.var",id:"rimbu_stream/async/AsyncReducer/partition.var",title:"partition",description:"Returns an AsyncReducer that splits the incoming values into two separate outputs based on the given pred predicate. Values for which the predicate is true are fed into the collectorTrue reducer, and other values are fed into the collectorFalse instance. If no collectors are provided the values are collected into arrays.",source:"@site/api/rimbu_stream/async/AsyncReducer/partition.var.mdx",sourceDirName:"rimbu_stream/async/AsyncReducer",slug:"/rimbu/stream/AsyncReducer/partition/var",permalink:"/api/rimbu/stream/AsyncReducer/partition/var",draft:!1,tags:[],version:"current",frontMatter:{title:"partition",slug:"/rimbu/stream/AsyncReducer/partition/var"},sidebar:"defaultSidebar",previous:{title:"nonEmpty",permalink:"/api/rimbu/stream/AsyncReducer/nonEmpty/var"},next:{title:"pipe",permalink:"/api/rimbu/stream/AsyncReducer/pipe/var"}},b={},v=[{value:"Definition",id:"definition",level:2}],N={toc:v},T="wrapper";function C(e){var n=e,{components:r}=n,a=d(n,["components"]);return(0,t.yg)(T,s(u(u({},N),a),{components:r,mdxType:"MDXLayout"}),(0,t.yg)("h1",u({},{id:"type-partition"}),(0,t.yg)("inlineCode",{parentName:"h1"},"type partition")),(0,t.yg)("p",null,"Returns an ",(0,t.yg)("inlineCode",{parentName:"p"},"AsyncReducer")," that splits the incoming values into two separate outputs based on the given ",(0,t.yg)("inlineCode",{parentName:"p"},"pred")," predicate. Values for which the predicate is true are fed into the ",(0,t.yg)("inlineCode",{parentName:"p"},"collectorTrue")," reducer, and other values are fed into the ",(0,t.yg)("inlineCode",{parentName:"p"},"collectorFalse")," instance. If no collectors are provided the values are collected into arrays."),(0,t.yg)("admonition",u({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"if the predicate is a type guard, the return type is automatically inferred ```")),(0,t.yg)("h2",u({},{id:"definition"}),"Definition"),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"partition: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"<T, T2 extends T, RT, RF = RT>(pred: (value: T, index: number) => value is T2, options: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"collectorTrue: "),(0,t.yg)("a",u({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,t.yg)("inlineCode",{parentName:"p"},"<T2, RT>;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"collectorFalse: "),(0,t.yg)("a",u({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,t.yg)("inlineCode",{parentName:"p"},"<Exclude<T, T2>, RF>;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",u({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,t.yg)("inlineCode",{parentName:"p"},"<T, [true: RT, false: RF]>;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"<T, T2 extends T>(pred: (value: T, index: number) => value is T2, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"collectorTrue?: undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"collectorFalse?: undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",u({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,t.yg)("inlineCode",{parentName:"p"},"<T, [true: T2[], false: Exclude<T, T2>[]]>;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"<T, RT, RF = RT>(pred: (value: T, index: number) => "),(0,t.yg)("a",u({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"p"},"<boolean>, options: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"collectorTrue: "),(0,t.yg)("a",u({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,t.yg)("inlineCode",{parentName:"p"},"<T, RT>;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"collectorFalse: "),(0,t.yg)("a",u({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,t.yg)("inlineCode",{parentName:"p"},"<T, RF>;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",u({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,t.yg)("inlineCode",{parentName:"p"},"<T, [true: RT, false: RF]>;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"<T>(pred: (value: T, index: number) => "),(0,t.yg)("a",u({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"p"},"<boolean>, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"collectorTrue?: undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"collectorFalse?: undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",u({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,t.yg)("inlineCode",{parentName:"p"},"<T, [true: T[], false: T[]]>;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}")))}C.isMDXComponent=!0}}]);