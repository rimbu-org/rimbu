"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[85383],{15680:(e,t,a)=>{a.d(t,{xA:()=>u,yg:()=>d});var r=a(96540);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=r.createContext({}),m=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},u=function(e){var t=m(e.components);return r.createElement(o.Provider,{value:t},e.children)},y="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),y=m(a),c=n,d=y["".concat(o,".").concat(c)]||y[c]||s[c]||i;return a?r.createElement(d,p(p({ref:t},u),{},{components:a})):r.createElement(d,p({ref:t},u))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,p=new Array(i);p[0]=c;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[y]="string"==typeof e?e:n,p[1]=l;for(var m=2;m<i;m++)p[m]=a[m];return r.createElement.apply(null,p)}return r.createElement.apply(null,a)}c.displayName="MDXCreateElement"},96196:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>g,contentTitle:()=>f,default:()=>N,frontMatter:()=>d,metadata:()=>b,toc:()=>h});var r=a(15680),n=Object.defineProperty,i=Object.defineProperties,p=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable,u=(e,t,a)=>t in e?n(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,y=(e,t)=>{for(var a in t||(t={}))o.call(t,a)&&u(e,a,t[a]);if(l)for(var a of l(t))m.call(t,a)&&u(e,a,t[a]);return e},s=(e,t)=>i(e,p(t)),c=(e,t)=>{var a={};for(var r in e)o.call(e,r)&&t.indexOf(r)<0&&(a[r]=e[r]);if(null!=e&&l)for(var r of l(e))t.indexOf(r)<0&&m.call(e,r)&&(a[r]=e[r]);return a};const d={title:"HashBiMultiMap.NonEmpty<K,V>",slug:"/rimbu/bimultimap/HashBiMultiMap/NonEmpty/interface"},f="interface HashBiMultiMap.NonEmpty<K,V>",b={unversionedId:"rimbu_bimultimap/HashBiMultiMap/NonEmpty.interface",id:"rimbu_bimultimap/HashBiMultiMap/NonEmpty.interface",title:"HashBiMultiMap.NonEmpty<K,V>",description:"A non-empty type-invariant immutable bi-directional MultiMap where keys and values have a many-to-many mapping. Its keys and values are hashed. See the BiMultiMap documentation and the HashBiMultiMap API documentation",source:"@site/api/rimbu_bimultimap/HashBiMultiMap/NonEmpty.interface.mdx",sourceDirName:"rimbu_bimultimap/HashBiMultiMap",slug:"/rimbu/bimultimap/HashBiMultiMap/NonEmpty/interface",permalink:"/api/rimbu/bimultimap/HashBiMultiMap/NonEmpty/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"HashBiMultiMap.NonEmpty<K,V>",slug:"/rimbu/bimultimap/HashBiMultiMap/NonEmpty/interface"},sidebar:"defaultSidebar",previous:{title:"HashBiMultiMap.Context<UK,UV>",permalink:"/api/rimbu/bimultimap/HashBiMultiMap/Context/interface"},next:{title:"HashBiMultiMap.Types",permalink:"/api/rimbu/bimultimap/HashBiMultiMap/Types/interface"}},g={},h=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>stream</code>",id:"stream",level:3},{value:"Definition",id:"definition",level:4},{value:"Overrides",id:"overrides",level:4}],M={toc:h},v="wrapper";function N(e){var t=e,{components:a}=t,n=c(t,["components"]);return(0,r.yg)(v,s(y(y({},M),n),{components:a,mdxType:"MDXLayout"}),(0,r.yg)("h1",y({},{id:"interface-hashbimultimapnonemptykv"}),(0,r.yg)("inlineCode",{parentName:"h1"},"interface HashBiMultiMap.NonEmpty<K,V>")),(0,r.yg)("p",null,"A non-empty type-invariant immutable bi-directional MultiMap where keys and values have a many-to-many mapping. Its keys and values are hashed. See the ",(0,r.yg)("a",y({parentName:"p"},{href:"https://rimbu.org/docs/collections/bimultimap"}),"BiMultiMap documentation")," and the ",(0,r.yg)("a",y({parentName:"p"},{href:"https://rimbu.org/api/rimbu/bimultimap/HashBiMultiMap/interface"}),"HashBiMultiMap API documentation")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Extends:")," ",(0,r.yg)("a",y({parentName:"p"},{href:"/api/rimbu/stream/Streamable/NonEmpty/interface"}),(0,r.yg)("inlineCode",{parentName:"a"},"Streamable.NonEmpty<T>")),", ",(0,r.yg)("a",y({parentName:"p"},{href:"/api/rimbu/bimultimap/HashBiMultiMap/interface"}),(0,r.yg)("inlineCode",{parentName:"a"},"HashBiMultiMap<K,V>"))),(0,r.yg)("h2",y({},{id:"type-parameters"}),"Type parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,r.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",y({parentName:"tr"},{align:null}),"K"),(0,r.yg)("td",y({parentName:"tr"},{align:null}),"the key type")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",y({parentName:"tr"},{align:null}),"V"),(0,r.yg)("td",y({parentName:"tr"},{align:null}),"the value type")))),(0,r.yg)("h2",y({},{id:"methods"}),"Methods"),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("h3",y({},{id:"stream"}),(0,r.yg)("inlineCode",{parentName:"h3"},"stream")),(0,r.yg)("p",null,"Returns a non-empty ",(0,r.yg)("inlineCode",{parentName:"p"},"Stream")," of the elements in this collection.")),(0,r.yg)("h4",y({},{id:"definition"}),"Definition"),(0,r.yg)("code",null,(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"stream(): "),(0,r.yg)("a",y({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,r.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,r.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,r.yg)("h4",y({},{id:"overrides"}),"Overrides"),(0,r.yg)("p",null,(0,r.yg)("a",y({parentName:"p"},{href:"/api/rimbu/stream/Streamable/NonEmpty/interface#stream"}),"NonEmpty.stream"))))}N.isMDXComponent=!0}}]);