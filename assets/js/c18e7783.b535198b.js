"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[62475],{15680:(e,t,a)=>{a.d(t,{xA:()=>g,yg:()=>s});var n=a(96540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var y=n.createContext({}),o=function(e){var t=n.useContext(y),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},g=function(e){var t=o(e.components);return n.createElement(y.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,y=e.parentName,g=p(e,["components","mdxType","originalType","parentName"]),m=o(a),u=r,s=m["".concat(y,".").concat(u)]||m[u]||d[u]||l;return a?n.createElement(s,i(i({ref:t},g),{},{components:a})):n.createElement(s,i({ref:t},g))}));function s(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=u;var p={};for(var y in t)hasOwnProperty.call(t,y)&&(p[y]=t[y]);p.originalType=e,p[m]="string"==typeof e?e:r,i[1]=p;for(var o=2;o<l;o++)i[o]=a[o];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},44585:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>b,contentTitle:()=>c,default:()=>v,frontMatter:()=>s,metadata:()=>N,toc:()=>f});var n=a(15680),r=Object.defineProperty,l=Object.defineProperties,i=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,y=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable,g=(e,t,a)=>t in e?r(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,m=(e,t)=>{for(var a in t||(t={}))y.call(t,a)&&g(e,a,t[a]);if(p)for(var a of p(t))o.call(t,a)&&g(e,a,t[a]);return e},d=(e,t)=>l(e,i(t)),u=(e,t)=>{var a={};for(var n in e)y.call(e,n)&&t.indexOf(n)<0&&(a[n]=e[n]);if(null!=e&&p)for(var n of p(e))t.indexOf(n)<0&&o.call(e,n)&&(a[n]=e[n]);return a};const s={title:"Spy (namespace)",slug:"/rimbu/spy/Spy/namespace"},c="namespace Spy",N={unversionedId:"rimbu_spy/Spy/index",id:"rimbu_spy/Spy/index",title:"Spy (namespace)",description:"Contains functions that can be used to Spy, Stub, and partially Mock functions, objects and classes.",source:"@site/api/rimbu_spy/Spy/index.mdx",sourceDirName:"rimbu_spy/Spy",slug:"/rimbu/spy/Spy/namespace",permalink:"/api/rimbu/spy/Spy/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"Spy (namespace)",slug:"/rimbu/spy/Spy/namespace"},sidebar:"defaultSidebar",previous:{title:"PromiseValue",permalink:"/api/rimbu/spy/PromiseValue/type"},next:{title:"Cls",permalink:"/api/rimbu/spy/Spy/Cls/type"}},b={},f=[{value:"Interfaces",id:"interfaces",level:2},{value:"Functions",id:"functions",level:2},{value:"<code>cls</code>",id:"cls",level:3},{value:"Definition",id:"definition",level:4},{value:"Type parameters",id:"type-parameters",level:5},{value:"Parameters",id:"parameters",level:4},{value:"<code>fn</code>",id:"fn",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Type parameters",id:"type-parameters-1",level:5},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>obj</code>",id:"obj",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Type parameters",id:"type-parameters-2",level:5},{value:"Parameters",id:"parameters-2",level:4},{value:"Constants",id:"constants",level:2}],h={toc:f},C="wrapper";function v(e){var t=e,{components:a}=t,r=u(t,["components"]);return(0,n.yg)(C,d(m(m({},h),r),{components:a,mdxType:"MDXLayout"}),(0,n.yg)("h1",m({},{id:"namespace-spy"}),(0,n.yg)("inlineCode",{parentName:"h1"},"namespace Spy")),(0,n.yg)("p",null,"Contains functions that can be used to Spy, Stub, and partially Mock functions, objects and classes."),(0,n.yg)("h2",m({},{id:"interfaces"}),"Interfaces"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",m({parentName:"tr"},{align:null}),(0,n.yg)("a",m({parentName:"td"},{href:"/api/rimbu/spy/Spy/ClsMeta/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"Spy.ClsMeta<C,A>"))),(0,n.yg)("td",m({parentName:"tr"},{align:null}),"The metadata object type for a spied class.")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",m({parentName:"tr"},{align:null}),(0,n.yg)("a",m({parentName:"td"},{href:"/api/rimbu/spy/Spy/ClsObjMeta/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"Spy.ClsObjMeta<T,A>"))),(0,n.yg)("td",m({parentName:"tr"},{align:null}),"undocumented")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",m({parentName:"tr"},{align:null}),(0,n.yg)("a",m({parentName:"td"},{href:"/api/rimbu/spy/Spy/Fn/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"Spy.Fn<F>"))),(0,n.yg)("td",m({parentName:"tr"},{align:null}),"The spied function type containing extra information about the function calls.")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",m({parentName:"tr"},{align:null}),(0,n.yg)("a",m({parentName:"td"},{href:"/api/rimbu/spy/Spy/FnMeta/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"Spy.FnMeta<F>"))),(0,n.yg)("td",m({parentName:"tr"},{align:null}),"The extra information added to spied functions.")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",m({parentName:"tr"},{align:null}),(0,n.yg)("a",m({parentName:"td"},{href:"/api/rimbu/spy/Spy/ObjMeta/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"Spy.ObjMeta<T>"))),(0,n.yg)("td",m({parentName:"tr"},{align:null}),"The additional information available for spied objects.")))),(0,n.yg)("h2",m({},{id:"functions"}),"Functions"),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",m({},{id:"cls"}),(0,n.yg)("inlineCode",{parentName:"h3"},"cls")),(0,n.yg)("p",null,"Returns a tuple containing a spied class and an object containing extra information about the created class instances.")),(0,n.yg)("h4",m({},{id:"definition"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"function cls<I, A extends any[] = I extends "),(0,n.yg)("a",m({parentName:"p"},{href:"/api/rimbu/spy/Construct/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"Construct")),(0,n.yg)("inlineCode",{parentName:"p"},"? ConstructorParameters<I> : []>(originalClass?:"),(0,n.yg)("a",m({parentName:"p"},{href:"/api/rimbu/spy/Construct/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"Construct")),(0,n.yg)("inlineCode",{parentName:"p"},"<A, I>, originalStubs?: Partial<I>, originalConstructorStub?: "),(0,n.yg)("a",m({parentName:"p"},{href:"/api/rimbu/spy/Func/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"Func")),(0,n.yg)("inlineCode",{parentName:"p"},"<A, I>): "),(0,n.yg)("a",m({parentName:"p"},{href:"/api/rimbu/spy/Spy/Cls/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"Cls")),(0,n.yg)("inlineCode",{parentName:"p"},"<I, A>;"))),(0,n.yg)("h5",m({},{id:"type-parameters"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",m({parentName:"tr"},{align:null}),"I"),(0,n.yg)("td",m({parentName:"tr"},{align:null}),"the class instance type")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",m({parentName:"tr"},{align:null}),"A"),(0,n.yg)("td",m({parentName:"tr"},{align:null}),"the constructor parameter types")))),(0,n.yg)("h4",m({},{id:"parameters"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",m({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"originalClass")),(0,n.yg)("td",m({parentName:"tr"},{align:null}),(0,n.yg)("a",m({parentName:"td"},{href:"/api/rimbu/spy/Construct/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"Construct")),(0,n.yg)("inlineCode",{parentName:"td"},"<A, I>")),(0,n.yg)("td",m({parentName:"tr"},{align:null}),"(optional) the class to spy on")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",m({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"originalStubs")),(0,n.yg)("td",m({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"Partial<I>")),(0,n.yg)("td",m({parentName:"tr"},{align:null}),"(optional) the default stubs to use for each created instance")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",m({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"originalConstructorStub")),(0,n.yg)("td",m({parentName:"tr"},{align:null}),(0,n.yg)("a",m({parentName:"td"},{href:"/api/rimbu/spy/Func/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"Func")),(0,n.yg)("inlineCode",{parentName:"td"},"<A, I>")),(0,n.yg)("td",m({parentName:"tr"},{align:null}),"(optional) a function to call instead of the class constructor"))))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",m({},{id:"fn"}),(0,n.yg)("inlineCode",{parentName:"h3"},"fn")),(0,n.yg)("p",null,"Returns a spied function instance that tracks the function calls and optionally uses some original or stub implementation.")),(0,n.yg)("h4",m({},{id:"definition-1"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"function fn<F extends "),(0,n.yg)("a",m({parentName:"p"},{href:"/api/rimbu/spy/Func/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"Func")),(0,n.yg)("inlineCode",{parentName:"p"},">(originalFn?: F, originalStub?: "),(0,n.yg)("a",m({parentName:"p"},{href:"/api/rimbu/spy/Spy/FnStub/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"Spy.FnStub")),(0,n.yg)("inlineCode",{parentName:"p"},"<F>, onCall?: (args: Parameters<F>) => void): "),(0,n.yg)("a",m({parentName:"p"},{href:"/api/rimbu/spy/Spy/Fn/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"Spy.Fn")),(0,n.yg)("inlineCode",{parentName:"p"},"<F>;"))),(0,n.yg)("h5",m({},{id:"type-parameters-1"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",m({parentName:"tr"},{align:null}),"F"),(0,n.yg)("td",m({parentName:"tr"},{align:null}),"the type of function to spy on")))),(0,n.yg)("h4",m({},{id:"parameters-1"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",m({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"originalFn")),(0,n.yg)("td",m({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"F")),(0,n.yg)("td",m({parentName:"tr"},{align:null}),"(optional) the original function to spy on, if stubbed still useful to supply to get the correct types")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",m({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"originalStub")),(0,n.yg)("td",m({parentName:"tr"},{align:null}),(0,n.yg)("a",m({parentName:"td"},{href:"/api/rimbu/spy/Spy/FnStub/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"Spy.FnStub")),(0,n.yg)("inlineCode",{parentName:"td"},"<F>")),(0,n.yg)("td",m({parentName:"tr"},{align:null}),"(optional) the default stub implementation to use when the function is called")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",m({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"onCall")),(0,n.yg)("td",m({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"(args: Parameters<F>) => void")),(0,n.yg)("td",m({parentName:"tr"},{align:null}),"(optional) a callback function that receives the parameters used on each function call")))),(0,n.yg)("admonition",m({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"function f(x: number, y: number) {\nreturn x + y;\n}\nconst spy = Spy.fn(f, (x) => -x);\nspy(4, 5);\n// => -4\nspy.nrCalls;\n// => 1\nspy.calls;\n// => [[4, 5]]\n")))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",m({},{id:"obj"}),(0,n.yg)("inlineCode",{parentName:"h3"},"obj")),(0,n.yg)("p",null,"Returns a tuple containing the spied object, and the metadata object giving more information about the stubbed object.")),(0,n.yg)("h4",m({},{id:"definition-2"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"function obj<T extends {"),(0,n.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"p"},"readonly [key: string "),(0,n.yg)("code",null,"|"),(0,n.yg)("inlineCode",{parentName:"p"},"number"),(0,n.yg)("code",null,"|"),(0,n.yg)("inlineCode",{parentName:"p"}," symbol]: any;"),(0,n.yg)("br",null),"\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"p"},"}>(originalObj?: T, stubs?: "),(0,n.yg)("a",m({parentName:"p"},{href:"/api/rimbu/spy/Spy/ObjStub/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"Spy.ObjStub")),(0,n.yg)("inlineCode",{parentName:"p"},"<T>): "),(0,n.yg)("a",m({parentName:"p"},{href:"/api/rimbu/spy/Spy/Obj/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"Spy.Obj")),(0,n.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,n.yg)("h5",m({},{id:"type-parameters-2"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",m({parentName:"tr"},{align:null}),"T"),(0,n.yg)("td",m({parentName:"tr"},{align:null}),"the object type to spy on")))),(0,n.yg)("h4",m({},{id:"parameters-2"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",m({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"originalObj")),(0,n.yg)("td",m({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"T")),(0,n.yg)("td",m({parentName:"tr"},{align:null}),"(optional) the original object to spy on")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",m({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"stubs")),(0,n.yg)("td",m({parentName:"tr"},{align:null}),(0,n.yg)("a",m({parentName:"td"},{href:"/api/rimbu/spy/Spy/ObjStub/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"Spy.ObjStub")),(0,n.yg)("inlineCode",{parentName:"td"},"<T>")),(0,n.yg)("td",m({parentName:"tr"},{align:null}),"(optional) a partial implementation of the object type containing default stubs"))))),(0,n.yg)("h2",m({},{id:"constants"}),"Constants"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",m({parentName:"tr"},{align:null}),"META"),(0,n.yg)("td",m({parentName:"tr"},{align:null}),"undocumented")))))}v.isMDXComponent=!0}}]);