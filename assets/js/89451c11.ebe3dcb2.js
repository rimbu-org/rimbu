"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[52587],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>N});var n=a(67294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var o=n.createContext({}),m=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=m(e.components);return n.createElement(o.Provider,{value:t},e.children)},k="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},s=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),k=m(a),s=l,N=k["".concat(o,".").concat(s)]||k[s]||u[s]||r;return a?n.createElement(N,i(i({ref:t},d),{},{components:a})):n.createElement(N,i({ref:t},d))}));function N(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,i=new Array(r);i[0]=s;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[k]="string"==typeof e?e:l,i[1]=p;for(var m=2;m<r;m++)i[m]=a[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}s.displayName="MDXCreateElement"},38377:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>y,contentTitle:()=>c,default:()=>g,frontMatter:()=>N,metadata:()=>h,toc:()=>v});var n=a(3905),l=Object.defineProperty,r=Object.defineProperties,i=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable,d=(e,t,a)=>t in e?l(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,k=(e,t)=>{for(var a in t||(t={}))o.call(t,a)&&d(e,a,t[a]);if(p)for(var a of p(t))m.call(t,a)&&d(e,a,t[a]);return e},u=(e,t)=>r(e,i(t)),s=(e,t)=>{var a={};for(var n in e)o.call(e,n)&&t.indexOf(n)<0&&(a[n]=e[n]);if(null!=e&&p)for(var n of p(e))t.indexOf(n)<0&&m.call(e,n)&&(a[n]=e[n]);return a};const N={title:"HashMapContext<UK>",slug:"/rimbu/hashed/map-custom/HashMapContext/class"},c="class HashMapContext<UK>",h={unversionedId:"rimbu_hashed/map-custom/HashMapContext.class",id:"rimbu_hashed/map-custom/HashMapContext.class",title:"HashMapContext<UK>",description:"undocumented",source:"@site/api/rimbu_hashed/map-custom/HashMapContext.class.mdx",sourceDirName:"rimbu_hashed/map-custom",slug:"/rimbu/hashed/map-custom/HashMapContext/class",permalink:"/api/rimbu/hashed/map-custom/HashMapContext/class",draft:!1,tags:[],version:"current",frontMatter:{title:"HashMapContext<UK>",slug:"/rimbu/hashed/map-custom/HashMapContext/class"},sidebar:"defaultSidebar",previous:{title:"HashMapCollisionBuilder<K,V>",permalink:"/api/rimbu/hashed/map-custom/HashMapCollisionBuilder/class"},next:{title:"HashMapCreators",permalink:"/api/rimbu/hashed/map-custom/HashMapCreators/interface"}},y={},v=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>_empty</code>",id:"_empty",level:3},{value:"Definition",id:"definition",level:4},{value:"Overrides",id:"overrides",level:4},{value:"<code>_emptyBlock</code>",id:"_emptyblock",level:3},{value:"Definition",id:"definition-1",level:4},{value:"<code>_fixedKeyType</code>",id:"_fixedkeytype",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"<code>_types</code>",id:"_types",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"<code>blockCapacity</code>",id:"blockcapacity",level:3},{value:"Definition",id:"definition-4",level:4},{value:"<code>blockMask</code>",id:"blockmask",level:3},{value:"Definition",id:"definition-5",level:4},{value:"<code>blockSizeBits</code>",id:"blocksizebits",level:3},{value:"Definition",id:"definition-6",level:4},{value:"<code>builder</code>",id:"builder",level:3},{value:"Definition",id:"definition-7",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"<code>empty</code>",id:"empty",level:3},{value:"Definition",id:"definition-8",level:4},{value:"Overrides",id:"overrides-4",level:4},{value:"<code>eq</code>",id:"eq",level:3},{value:"Definition",id:"definition-9",level:4},{value:"Overrides",id:"overrides-5",level:4},{value:"<code>from</code>",id:"from",level:3},{value:"Definition",id:"definition-10",level:4},{value:"Overrides",id:"overrides-6",level:4},{value:"<code>hasher</code>",id:"hasher",level:3},{value:"Definition",id:"definition-11",level:4},{value:"Overrides",id:"overrides-7",level:4},{value:"<code>listContext</code>",id:"listcontext",level:3},{value:"Definition",id:"definition-12",level:4},{value:"<code>maxDepth</code>",id:"maxdepth",level:3},{value:"Definition",id:"definition-13",level:4},{value:"<code>merge</code>",id:"merge",level:3},{value:"Definition",id:"definition-14",level:4},{value:"Overrides",id:"overrides-8",level:4},{value:"<code>mergeAll</code>",id:"mergeall",level:3},{value:"Definition",id:"definition-15",level:4},{value:"Overrides",id:"overrides-9",level:4},{value:"<code>mergeAllWith</code>",id:"mergeallwith",level:3},{value:"Definition",id:"definition-16",level:4},{value:"Overrides",id:"overrides-10",level:4},{value:"<code>mergeWith</code>",id:"mergewith",level:3},{value:"Definition",id:"definition-17",level:4},{value:"Overrides",id:"overrides-11",level:4},{value:"<code>of</code>",id:"of",level:3},{value:"Definition",id:"definition-18",level:4},{value:"Overrides",id:"overrides-12",level:4},{value:"<code>reducer</code>",id:"reducer",level:3},{value:"Definition",id:"definition-19",level:4},{value:"Overrides",id:"overrides-13",level:4},{value:"<code>typeTag</code>",id:"typetag",level:3},{value:"Definition",id:"definition-20",level:4},{value:"Overrides",id:"overrides-14",level:4},{value:"Methods",id:"methods",level:2},{value:"<code>block</code>",id:"block",level:3},{value:"Definition",id:"definition-21",level:4},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters",level:4},{value:"<code>builder</code>",id:"builder-1",level:3},{value:"Definition",id:"definition-22",level:4},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"Overrides",id:"overrides-15",level:4},{value:"<code>collision</code>",id:"collision",level:3},{value:"Definition",id:"definition-23",level:4},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>createBuilder</code>",id:"createbuilder",level:3},{value:"Definition",id:"definition-24",level:4},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"<code>empty</code>",id:"empty-1",level:3},{value:"Definition",id:"definition-25",level:4},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Overrides",id:"overrides-16",level:4},{value:"<code>emptyBlock</code>",id:"emptyblock",level:3},{value:"Definition",id:"definition-26",level:4},{value:"Type parameters",id:"type-parameters-6",level:4},{value:"<code>from</code>",id:"from-1",level:3},{value:"Definitions",id:"definitions",level:4},{value:"Type parameters",id:"type-parameters-7",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Overrides",id:"overrides-17",level:4},{value:"<code>getKeyIndex</code>",id:"getkeyindex",level:3},{value:"Definition",id:"definition-27",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"<code>hash</code>",id:"hash",level:3},{value:"Definition",id:"definition-28",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"<code>isHashMapBlock</code>",id:"ishashmapblock",level:3},{value:"Definition",id:"definition-29",level:4},{value:"Type parameters",id:"type-parameters-8",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"<code>isHashMapBlockBuilder</code>",id:"ishashmapblockbuilder",level:3},{value:"Definition",id:"definition-30",level:4},{value:"Type parameters",id:"type-parameters-9",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"<code>isNonEmptyInstance</code>",id:"isnonemptyinstance",level:3},{value:"Definition",id:"definition-31",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"Overrides",id:"overrides-18",level:4},{value:"<code>isValidKey</code>",id:"isvalidkey",level:3},{value:"Definition",id:"definition-32",level:4},{value:"Parameters",id:"parameters-9",level:4},{value:"Overrides",id:"overrides-19",level:4},{value:"<code>merge</code>",id:"merge-1",level:3},{value:"Definitions",id:"definitions-1",level:4},{value:"Type parameters",id:"type-parameters-10",level:4},{value:"Parameters",id:"parameters-10",level:4},{value:"Overrides",id:"overrides-20",level:4},{value:"<code>mergeAll</code>",id:"mergeall-1",level:3},{value:"Definitions",id:"definitions-2",level:4},{value:"Type parameters",id:"type-parameters-11",level:4},{value:"Parameters",id:"parameters-11",level:4},{value:"Overrides",id:"overrides-21",level:4},{value:"<code>mergeAllWith</code>",id:"mergeallwith-1",level:3},{value:"Definitions",id:"definitions-3",level:4},{value:"Type parameters",id:"type-parameters-12",level:4},{value:"Parameters",id:"parameters-12",level:4},{value:"Overrides",id:"overrides-22",level:4},{value:"<code>mergeWith</code>",id:"mergewith-1",level:3},{value:"Definitions",id:"definitions-4",level:4},{value:"Type parameters",id:"type-parameters-13",level:4},{value:"Parameters",id:"parameters-13",level:4},{value:"Overrides",id:"overrides-23",level:4},{value:"<code>of</code>",id:"of-1",level:3},{value:"Definition",id:"definition-33",level:4},{value:"Type parameters",id:"type-parameters-14",level:4},{value:"Parameters",id:"parameters-14",level:4},{value:"Overrides",id:"overrides-24",level:4},{value:"<code>reducer</code>",id:"reducer-1",level:3},{value:"Definition",id:"definition-34",level:4},{value:"Type parameters",id:"type-parameters-15",level:4},{value:"Parameters",id:"parameters-15",level:4},{value:"Overrides",id:"overrides-25",level:4}],b={toc:v},f="wrapper";function g(e){var t=e,{components:a}=t,l=s(t,["components"]);return(0,n.kt)(f,u(k(k({},b),l),{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",k({},{id:"class-hashmapcontextuk"}),(0,n.kt)("inlineCode",{parentName:"h1"},"class HashMapContext<UK>")),(0,n.kt)("p",null,"undocumented"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Extends:")," ",(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/ContextBase/class"}),(0,n.kt)("inlineCode",{parentName:"a"},"ContextBase<UK,Tp>"))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Implements:")," ",(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/hashed/map/HashMap/Context/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"HashMap.Context<UK>"))),(0,n.kt)("h2",k({},{id:"type-parameters"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"UK"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"undocumented")))),(0,n.kt)("h2",k({},{id:"properties"}),"Properties"),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"_empty"}),(0,n.kt)("inlineCode",{parentName:"h3"},"_empty")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",k({},{id:"definition"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly _empty: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/hashed/map/HashMap/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"HashMap")),(0,n.kt)("inlineCode",{parentName:"p"},"<any, any>;"))),(0,n.kt)("h4",k({},{id:"overrides"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/ContextBase/class#_empty"}),"ContextBase._empty"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"_emptyblock"}),(0,n.kt)("inlineCode",{parentName:"h3"},"_emptyBlock")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",k({},{id:"definition-1"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly _emptyBlock: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/hashed/map-custom/HashMapBlock/class"}),(0,n.kt)("inlineCode",{parentName:"a"},"HashMapBlock")),(0,n.kt)("inlineCode",{parentName:"p"},"<any, any>;")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"_fixedkeytype"}),(0,n.kt)("inlineCode",{parentName:"h3"},"_fixedKeyType")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",k({},{id:"definition-2"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"_fixedKeyType: any;"))),(0,n.kt)("h4",k({},{id:"overrides-1"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Context/interface#_fixedKeyType"}),"Context._fixedKeyType"),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/ContextBase/class#_fixedKeyType"}),"ContextBase._fixedKeyType"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"_types"}),(0,n.kt)("inlineCode",{parentName:"h3"},"_types")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",k({},{id:"definition-3"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"get _types(): Tp;"))),(0,n.kt)("h4",k({},{id:"overrides-2"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Context/interface#_types"}),"Context._types"),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/ContextBase/class#_types"}),"ContextBase._types"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"blockcapacity"}),(0,n.kt)("inlineCode",{parentName:"h3"},"blockCapacity")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",k({},{id:"definition-4"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly blockCapacity: number;")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"blockmask"}),(0,n.kt)("inlineCode",{parentName:"h3"},"blockMask")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",k({},{id:"definition-5"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly blockMask: number;")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"blocksizebits"}),(0,n.kt)("inlineCode",{parentName:"h3"},"blockSizeBits")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",k({},{id:"definition-6"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly blockSizeBits: number;")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"builder"}),(0,n.kt)("inlineCode",{parentName:"h3"},"builder")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",k({},{id:"definition-7"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly builder: <K extends UK, V>() => "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/hashed/map/HashMap/Builder/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"HashMap.Builder")),(0,n.kt)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,n.kt)("h4",k({},{id:"overrides-3"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/ContextBase/class#builder"}),"ContextBase.builder"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"empty"}),(0,n.kt)("inlineCode",{parentName:"h3"},"empty")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",k({},{id:"definition-8"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly empty: <K extends UK, V>() => "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},'<Tp, K, V>["normal"];'))),(0,n.kt)("h4",k({},{id:"overrides-4"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/ContextBase/class#empty"}),"ContextBase.empty"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"eq"}),(0,n.kt)("inlineCode",{parentName:"h3"},"eq")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",k({},{id:"definition-9"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly eq: Eq<UK>;"))),(0,n.kt)("h4",k({},{id:"overrides-5"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/hashed/map/HashMap/Context/interface#eq"}),"Context.eq"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"from"}),(0,n.kt)("inlineCode",{parentName:"h3"},"from")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",k({},{id:"definition-10"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly from: any;"))),(0,n.kt)("h4",k({},{id:"overrides-6"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/ContextBase/class#from"}),"ContextBase.from"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"hasher"}),(0,n.kt)("inlineCode",{parentName:"h3"},"hasher")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",k({},{id:"definition-11"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly hasher: Hasher<UK>;"))),(0,n.kt)("h4",k({},{id:"overrides-7"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/hashed/map/HashMap/Context/interface#hasher"}),"Context.hasher"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"listcontext"}),(0,n.kt)("inlineCode",{parentName:"h3"},"listContext")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",k({},{id:"definition-12"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly listContext: List.Context;")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"maxdepth"}),(0,n.kt)("inlineCode",{parentName:"h3"},"maxDepth")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",k({},{id:"definition-13"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly maxDepth: number;")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"merge"}),(0,n.kt)("inlineCode",{parentName:"h3"},"merge")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",k({},{id:"definition-14"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly merge: any;"))),(0,n.kt)("h4",k({},{id:"overrides-8"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/ContextBase/class#merge"}),"ContextBase.merge"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"mergeall"}),(0,n.kt)("inlineCode",{parentName:"h3"},"mergeAll")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",k({},{id:"definition-15"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly mergeAll: any;"))),(0,n.kt)("h4",k({},{id:"overrides-9"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/ContextBase/class#mergeAll"}),"ContextBase.mergeAll"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"mergeallwith"}),(0,n.kt)("inlineCode",{parentName:"h3"},"mergeAllWith")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",k({},{id:"definition-16"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly mergeAllWith: any;"))),(0,n.kt)("h4",k({},{id:"overrides-10"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/ContextBase/class#mergeAllWith"}),"ContextBase.mergeAllWith"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"mergewith"}),(0,n.kt)("inlineCode",{parentName:"h3"},"mergeWith")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",k({},{id:"definition-17"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly mergeWith: any;"))),(0,n.kt)("h4",k({},{id:"overrides-11"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/ContextBase/class#mergeWith"}),"ContextBase.mergeWith"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"of"}),(0,n.kt)("inlineCode",{parentName:"h3"},"of")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",k({},{id:"definition-18"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly of: <K extends UK, V>(values_0: readonly [K, V], ...values_1: (readonly [K, V])[]) => K extends UK ? "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},'<Tp, K, V>["nonEmpty"] : never;'))),(0,n.kt)("h4",k({},{id:"overrides-12"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/ContextBase/class#of"}),"ContextBase.of"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"reducer"}),(0,n.kt)("inlineCode",{parentName:"h3"},"reducer")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",k({},{id:"definition-19"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly reducer: <K extends UK, V>(source?: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.kt)("inlineCode",{parentName:"p"},"<readonly [K, V]>) => Reducer<readonly [K, V], "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},'<Tp, K, V>["normal"]>;'))),(0,n.kt)("h4",k({},{id:"overrides-13"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/ContextBase/class#reducer"}),"ContextBase.reducer"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"typetag"}),(0,n.kt)("inlineCode",{parentName:"h3"},"typeTag")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",k({},{id:"definition-20"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},'readonly typeTag = "HashMap";'))),(0,n.kt)("h4",k({},{id:"overrides-14"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/ContextBase/class#typeTag"}),"ContextBase.typeTag"),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/hashed/map/HashMap/Context/interface#typeTag"}),"Context.typeTag"))),(0,n.kt)("h2",k({},{id:"methods"}),"Methods"),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"block"}),(0,n.kt)("inlineCode",{parentName:"h3"},"block")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",k({},{id:"definition-21"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"block<V>(entries: (readonly [UK, V])[] "),(0,n.kt)("code",null,"|"),(0,n.kt)("inlineCode",{parentName:"p"},"null, entrySets:"),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/hashed/map-custom/MapEntrySet/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"MapEntrySet")),(0,n.kt)("inlineCode",{parentName:"p"},"<UK, V>[] "),(0,n.kt)("code",null,"|"),(0,n.kt)("inlineCode",{parentName:"p"},"null, size: number, level: number):"),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/hashed/map-custom/HashMapBlock/class"}),(0,n.kt)("inlineCode",{parentName:"a"},"HashMapBlock")),(0,n.kt)("inlineCode",{parentName:"p"},"<UK, V>;"))),(0,n.kt)("h4",k({},{id:"type-parameters-1"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"V"),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"entries")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"(readonly [UK, V])[] "),(0,n.kt)("code",null,"|"),(0,n.kt)("inlineCode",{parentName:"td"}," null")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"entrySets")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/hashed/map-custom/MapEntrySet/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"MapEntrySet")),(0,n.kt)("inlineCode",{parentName:"td"},"<UK, V>[] "),(0,n.kt)("code",null,"|"),(0,n.kt)("inlineCode",{parentName:"td"}," null")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"size")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"number")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"level")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"number")),(0,n.kt)("td",k({parentName:"tr"},{align:null})))))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"builder-1"}),(0,n.kt)("inlineCode",{parentName:"h3"},"builder")),(0,n.kt)("p",null,"Returns an empty builder instance for this type of collection and context.")),(0,n.kt)("h4",k({},{id:"definition-22"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"builder<K extends UK, V>(): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, K, V>['builder'];"))),(0,n.kt)("h4",k({},{id:"type-parameters-2"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Constraints"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"K"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"UK")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"V"),(0,n.kt)("td",k({parentName:"tr"},{align:null})),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"HashMap.builder<number, string>()    // => HashMap.Builder<number, string>\n"))),(0,n.kt)("h4",k({},{id:"overrides-15"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Factory/interface#builder"}),"Factory.builder"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"collision"}),(0,n.kt)("inlineCode",{parentName:"h3"},"collision")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",k({},{id:"definition-23"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"collision<V>(entries: List.NonEmpty<readonly [UK, V]>): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/hashed/map-custom/HashMapCollision/class"}),(0,n.kt)("inlineCode",{parentName:"a"},"HashMapCollision")),(0,n.kt)("inlineCode",{parentName:"p"},"<UK, V>;"))),(0,n.kt)("h4",k({},{id:"type-parameters-3"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"V"),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-1"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"entries")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"List.NonEmpty<readonly [UK, V]>")),(0,n.kt)("td",k({parentName:"tr"},{align:null})))))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"createbuilder"}),(0,n.kt)("inlineCode",{parentName:"h3"},"createBuilder")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",k({},{id:"definition-24"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"createBuilder<K extends UK, V>(source?: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/hashed/map/HashMap/NonEmpty/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"HashMap.NonEmpty")),(0,n.kt)("inlineCode",{parentName:"p"},"<K, V>): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/hashed/map/HashMap/Builder/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"HashMap.Builder")),(0,n.kt)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,n.kt)("h4",k({},{id:"type-parameters-4"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Constraints"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"K"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"UK")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"V"),(0,n.kt)("td",k({parentName:"tr"},{align:null})),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-2"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"source")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/hashed/map/HashMap/NonEmpty/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"HashMap.NonEmpty")),(0,n.kt)("inlineCode",{parentName:"td"},"<K, V>")),(0,n.kt)("td",k({parentName:"tr"},{align:null})))))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"empty-1"}),(0,n.kt)("inlineCode",{parentName:"h3"},"empty")),(0,n.kt)("p",null,"Returns the (singleton) empty instance of this type and context with given key and value types.")),(0,n.kt)("h4",k({},{id:"definition-25"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"empty<K extends UK, V>(): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,n.kt)("h4",k({},{id:"type-parameters-5"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Constraints"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"K"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"UK")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"V"),(0,n.kt)("td",k({parentName:"tr"},{align:null})),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"HashMap.empty<number, string>()    // => HashMap<number, string>\nHashMap.empty<string, boolean>()   // => HashMap<string, boolean>\n"))),(0,n.kt)("h4",k({},{id:"overrides-16"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Factory/interface#empty"}),"Factory.empty"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"emptyblock"}),(0,n.kt)("inlineCode",{parentName:"h3"},"emptyBlock")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",k({},{id:"definition-26"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"emptyBlock<V>(): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/hashed/map-custom/HashMapBlock/class"}),(0,n.kt)("inlineCode",{parentName:"a"},"HashMapBlock")),(0,n.kt)("inlineCode",{parentName:"p"},"<UK, V>;"))),(0,n.kt)("h4",k({},{id:"type-parameters-6"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"V"),(0,n.kt)("td",k({parentName:"tr"},{align:null})))))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"from-1"}),(0,n.kt)("inlineCode",{parentName:"h3"},"from")),(0,n.kt)("p",null,"Returns an immutable map of this type and context, containing the entries in the given ",(0,n.kt)("inlineCode",{parentName:"p"},"sources")," ",(0,n.kt)("inlineCode",{parentName:"p"},"StreamSource")," instances.")),(0,n.kt)("h4",k({},{id:"definitions"}),"Definitions"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"from<K extends UK, V>(...sources: ArrayNonEmpty<"),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,n.kt)("inlineCode",{parentName:"p"},"<readonly [K, V]>>): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, K, V>['nonEmpty'];"))),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"from<K, V>(...sources: ArrayNonEmpty<"),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.kt)("inlineCode",{parentName:"p"},"<readonly [K, V]>>): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,n.kt)("h4",k({},{id:"type-parameters-7"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Constraints"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"K"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"UK")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"V"),(0,n.kt)("td",k({parentName:"tr"},{align:null})),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-3"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"sources")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"ArrayNonEmpty<"),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,n.kt)("inlineCode",{parentName:"td"},"<readonly [K, V]>>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"an array of ",(0,n.kt)("inlineCode",{parentName:"td"},"StreamSource")," instances containing key-value entries")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"HashMap.from([[1, 'a'], [2, 'b']])    // => HashMap.NonEmpty<number, string>\n"))),(0,n.kt)("h4",k({},{id:"overrides-17"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Factory/interface#from"}),"Factory.from"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"getkeyindex"}),(0,n.kt)("inlineCode",{parentName:"h3"},"getKeyIndex")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",k({},{id:"definition-27"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"getKeyIndex(level: number, hash: number): number;"))),(0,n.kt)("h4",k({},{id:"parameters-4"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"level")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"number")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"hash")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"number")),(0,n.kt)("td",k({parentName:"tr"},{align:null})))))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"hash"}),(0,n.kt)("inlineCode",{parentName:"h3"},"hash")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",k({},{id:"definition-28"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"hash(value: UK): number;"))),(0,n.kt)("h4",k({},{id:"parameters-5"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"value")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"UK")),(0,n.kt)("td",k({parentName:"tr"},{align:null})))))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"ishashmapblock"}),(0,n.kt)("inlineCode",{parentName:"h3"},"isHashMapBlock")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",k({},{id:"definition-29"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"isHashMapBlock<K, V>(obj: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/hashed/map-custom/MapEntrySet/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"MapEntrySet")),(0,n.kt)("inlineCode",{parentName:"p"},"<K, V>): obj is "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/hashed/map-custom/HashMapBlock/class"}),(0,n.kt)("inlineCode",{parentName:"a"},"HashMapBlock")),(0,n.kt)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,n.kt)("h4",k({},{id:"type-parameters-8"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"K"),(0,n.kt)("td",k({parentName:"tr"},{align:null}))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"V"),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-6"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"obj")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/hashed/map-custom/MapEntrySet/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"MapEntrySet")),(0,n.kt)("inlineCode",{parentName:"td"},"<K, V>")),(0,n.kt)("td",k({parentName:"tr"},{align:null})))))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"ishashmapblockbuilder"}),(0,n.kt)("inlineCode",{parentName:"h3"},"isHashMapBlockBuilder")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",k({},{id:"definition-30"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"isHashMapBlockBuilder<K, V>(obj: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/hashed/map-custom/MapBlockBuilderEntry/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"MapBlockBuilderEntry")),(0,n.kt)("inlineCode",{parentName:"p"},"<K, V>): obj is "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/hashed/map-custom/HashMapBlockBuilder/class"}),(0,n.kt)("inlineCode",{parentName:"a"},"HashMapBlockBuilder")),(0,n.kt)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,n.kt)("h4",k({},{id:"type-parameters-9"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"K"),(0,n.kt)("td",k({parentName:"tr"},{align:null}))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"V"),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-7"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"obj")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/hashed/map-custom/MapBlockBuilderEntry/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"MapBlockBuilderEntry")),(0,n.kt)("inlineCode",{parentName:"td"},"<K, V>")),(0,n.kt)("td",k({parentName:"tr"},{align:null})))))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"isnonemptyinstance"}),(0,n.kt)("inlineCode",{parentName:"h3"},"isNonEmptyInstance")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",k({},{id:"definition-31"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"isNonEmptyInstance(source: any): source is any;"))),(0,n.kt)("h4",k({},{id:"parameters-8"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"source")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"any")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"overrides-18"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/ContextBase/class#isNonEmptyInstance"}),"ContextBase.isNonEmptyInstance"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"isvalidkey"}),(0,n.kt)("inlineCode",{parentName:"h3"},"isValidKey")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",k({},{id:"definition-32"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"isValidKey(key: unknown): key is UK;"))),(0,n.kt)("h4",k({},{id:"parameters-9"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"key")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"unknown")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"overrides-19"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/ContextBase/class#isValidKey"}),"ContextBase.isValidKey"),", ",(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Context/interface#isValidKey"}),"Context.isValidKey"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"merge-1"}),(0,n.kt)("inlineCode",{parentName:"h3"},"merge")),(0,n.kt)("p",null,"Returns a Map containing the common keys from this map and all the given ",(0,n.kt)("inlineCode",{parentName:"p"},"sources")," key-value stream sources, and as values tuples of all the corresponding values for each common key. If a source doesn't have a key, the key will be skipped.")),(0,n.kt)("h4",k({},{id:"definitions-1"}),"Definitions"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"merge<K extends UK, I extends readonly [unknown, unknown, ...unknown[]]>(...sources: {"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"[KT in keyof I]: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,n.kt)("inlineCode",{parentName:"p"},"<readonly [K, I[KT]]>;"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"} & unknown[]): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, K, {"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"[KT in keyof I]: I[KT];"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"}>['nonEmpty'];"))),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"merge<K extends UK, I extends readonly [unknown, unknown, ...unknown[]]>(...sources: {"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"[KT in keyof I]: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.kt)("inlineCode",{parentName:"p"},"<readonly [K, I[KT]]>;"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"} & unknown[]): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, K, {"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"[KT in keyof I]: I[KT];"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"}>['normal'];"))),(0,n.kt)("h4",k({},{id:"type-parameters-10"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Constraints"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"K"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"UK")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the common key type")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"I"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"readonly [unknown, unknown, ...unknown[]]")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the array of input source value types")))),(0,n.kt)("h4",k({},{id:"parameters-10"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"sources")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"{"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"td"},"[KT in keyof I]: "),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,n.kt)("inlineCode",{parentName:"td"},"<readonly [K, I[KT]]>;"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"td"},"} & unknown[]")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"a non-empty set of StreamSouces containing tuples of keys and values")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b'])\nconst m2 = HashMap.merge(m, [[2, true]], HashMap.of([2, 15]))\n// type of m2: HashMap<number, [string, boolean, number]>\nconsole.log(m2.toArray())\n// => [[2, ['b', true, 15]]]\n"))),(0,n.kt)("h4",k({},{id:"overrides-20"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Factory/interface#merge"}),"Factory.merge"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"mergeall-1"}),(0,n.kt)("inlineCode",{parentName:"h3"},"mergeAll")),(0,n.kt)("p",null,"Returns a Map containing all keys from this map and all the given ",(0,n.kt)("inlineCode",{parentName:"p"},"sources")," key-value stream sources, and as values tuples of all the corresponding values for each key. If a source doesn't have a key, the tuple will be filled with the given ",(0,n.kt)("inlineCode",{parentName:"p"},"fillValue"),".")),(0,n.kt)("h4",k({},{id:"definitions-2"}),"Definitions"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"mergeAll<O, I extends readonly [unknown, unknown, ...unknown[]], K extends UK>(fillValue: O, ...sources: {"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"[KT in keyof I]: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,n.kt)("inlineCode",{parentName:"p"},"<readonly [K, I[KT]]>;"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"} & unknown[]): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, K, {"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"[KT in keyof I]: I[KT] "),(0,n.kt)("code",null,"|"),(0,n.kt)("inlineCode",{parentName:"p"}," O;"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"}>['nonEmpty'];"))),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"mergeAll<O, I extends readonly [unknown, unknown, ...unknown[]], K extends UK>(fillValue: O, ...sources: {"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"[KT in keyof I]: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.kt)("inlineCode",{parentName:"p"},"<readonly [K, I[KT]]>;"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"} & unknown[]): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, K, {"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"[KT in keyof I]: I[KT] "),(0,n.kt)("code",null,"|"),(0,n.kt)("inlineCode",{parentName:"p"}," O;"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"}>['normal'];"))),(0,n.kt)("h4",k({},{id:"type-parameters-11"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Constraints"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"O"),(0,n.kt)("td",k({parentName:"tr"},{align:null})),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the type of the fill value")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"I"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"readonly [unknown, unknown, ...unknown[]]")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the array of input source value types")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"K"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"UK")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the common key type")))),(0,n.kt)("h4",k({},{id:"parameters-11"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"fillValue")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"O")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the value to use for the result tuple if a source does not have a certain key")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"sources")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"{"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"td"},"[KT in keyof I]: "),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,n.kt)("inlineCode",{parentName:"td"},"<readonly [K, I[KT]]>;"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"td"},"} & unknown[]")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"a non-empty set of StreamSouces containing tuples of keys and values")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b'])\nconst m2 = HashMap.mergeAll('none', m, [[2, true]], HashMap.of([3, 15]))\n// type of m2: HashMap<number, [string, boolean | string, number | string]>\nconsole.log(m2.toArray())\n// => [[1, ['a', 'none', 'none']], [2, ['b', true, 'none']], [3, ['none', 'none', 15]]]\n"))),(0,n.kt)("h4",k({},{id:"overrides-21"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Factory/interface#mergeAll"}),"Factory.mergeAll"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"mergeallwith-1"}),(0,n.kt)("inlineCode",{parentName:"h3"},"mergeAllWith")),(0,n.kt)("p",null,"Returns a Map containing all keys from this map and all the given ",(0,n.kt)("inlineCode",{parentName:"p"},"sources")," key-value stream sources, and as values the result of applying the given ",(0,n.kt)("inlineCode",{parentName:"p"},"mergeFun")," to the key and all the corresponding values for each key. If a source doesn't have a key, the given tuple will be filled with the given ",(0,n.kt)("inlineCode",{parentName:"p"},"fillValue"),".")),(0,n.kt)("h4",k({},{id:"definitions-3"}),"Definitions"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"mergeAllWith<I extends readonly [unknown, unknown, ...unknown[]], K extends UK>(...sources: {"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"[KT in keyof I]: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,n.kt)("inlineCode",{parentName:"p"},"<readonly [K, I[KT]]>;"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"} & unknown[]): <O, R>(fillValue: O, mergeFun: (key: K, ...values: {"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"[KT in keyof I]: I[KT] "),(0,n.kt)("code",null,"|"),(0,n.kt)("inlineCode",{parentName:"p"}," O;"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"}) => R) => "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, K, R>['nonEmpty'];"))),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"mergeAllWith<I extends readonly [unknown, unknown, ...unknown[]], K extends UK>(...sources: {"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"[KT in keyof I]: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.kt)("inlineCode",{parentName:"p"},"<readonly [K, I[KT]]>;"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"} & unknown[]): <O, R>(fillValue: O, mergeFun: (key: K, ...values: {"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"[KT in keyof I]: I[KT] "),(0,n.kt)("code",null,"|"),(0,n.kt)("inlineCode",{parentName:"p"}," O;"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"}) => R) => "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, K, R>['normal'];"))),(0,n.kt)("h4",k({},{id:"type-parameters-12"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Constraints"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"I"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"readonly [unknown, unknown, ...unknown[]]")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the array of input source value types")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"K"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"UK")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the common key type")))),(0,n.kt)("h4",k({},{id:"parameters-12"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"sources")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"{"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"td"},"[KT in keyof I]: "),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,n.kt)("inlineCode",{parentName:"td"},"<readonly [K, I[KT]]>;"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"td"},"} & unknown[]")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"a non-empty set of StreamSouces containing tuples of keys and values")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b'])\nconst m2 = HashMap.mergeAllWith(\nm\n[[2, 'c']],\nHashMap.of([3, 'd'])\n)(\n'q',\n(key, v1, v2, v3) => `${key}${v1}${v2}${v3}`\n)\n// type of m2: HashMap<number, string>\nconsole.log(m2.toArray())\n// => [[1, '1aqq'], [2, '2bcq'], [3, '3qqd']]\n"))),(0,n.kt)("h4",k({},{id:"overrides-22"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Factory/interface#mergeAllWith"}),"Factory.mergeAllWith"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"mergewith-1"}),(0,n.kt)("inlineCode",{parentName:"h3"},"mergeWith")),(0,n.kt)("p",null,"Returns a Map containing the common keys from this map and all the given ",(0,n.kt)("inlineCode",{parentName:"p"},"sources")," key-value stream sources, and as values the result of applying given ",(0,n.kt)("inlineCode",{parentName:"p"},"mergeFun")," to the key and values of all the corresponding values for each common key. If a source doesn't have a key, the key will be skipped.")),(0,n.kt)("h4",k({},{id:"definitions-4"}),"Definitions"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"mergeWith<I extends readonly [unknown, unknown, ...unknown[]], K extends UK>(...sources: {"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"[KT in keyof I]: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,n.kt)("inlineCode",{parentName:"p"},"<readonly [K, I[KT]]>;"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"} & unknown[]): <R>(mergeFun: (key: K, ...values: I) => R) => "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, K, R>['nonEmpty'];"))),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"mergeWith<I extends readonly [unknown, unknown, ...unknown[]], K extends UK>(...sources: {"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"[KT in keyof I]: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.kt)("inlineCode",{parentName:"p"},"<readonly [K, I[KT]]>;"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"} & unknown[]): <R>(mergeFun: (key: K, ...values: I) => R) => "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, K, R>['normal'];"))),(0,n.kt)("h4",k({},{id:"type-parameters-13"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Constraints"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"I"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"readonly [unknown, unknown, ...unknown[]]")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the array of input source value types")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"K"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"UK")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the common key type")))),(0,n.kt)("h4",k({},{id:"parameters-13"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"sources")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"{"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"td"},"[KT in keyof I]: "),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,n.kt)("inlineCode",{parentName:"td"},"<readonly [K, I[KT]]>;"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"td"},"} & unknown[]")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"a non-empty set of StreamSouces containing tuples of keys and values")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b'])\nconst m2 = HashMap.mergeWith(\nm,\n[[2, true]],\nHashMap.of([2, 15])\n)(\n(key, v1, v2) => `${key}${v1}${v2}`,\n)\n// type of m2: HashMap<number, string>\nconsole.log(m2.toArray())\n// => [[2, '2true15']]\n"))),(0,n.kt)("h4",k({},{id:"overrides-23"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Factory/interface#mergeWith"}),"Factory.mergeWith"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"of-1"}),(0,n.kt)("inlineCode",{parentName:"h3"},"of")),(0,n.kt)("p",null,"Returns an immutable map of this collection type and context, containing the given ",(0,n.kt)("inlineCode",{parentName:"p"},"entries"),".")),(0,n.kt)("h4",k({},{id:"definition-33"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"of<K extends UK, V>(...entries: ArrayNonEmpty<readonly [K, V]>): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, K, V>['nonEmpty'];"))),(0,n.kt)("h4",k({},{id:"type-parameters-14"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Constraints"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"K"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"UK")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"V"),(0,n.kt)("td",k({parentName:"tr"},{align:null})),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-14"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"entries")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"ArrayNonEmpty<readonly [K, V]>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"a non-empty array of key-value entries")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 'a'], [2, 'b'])    // => HashMap.NonEmpty<number, string>\n"))),(0,n.kt)("h4",k({},{id:"overrides-24"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Factory/interface#of"}),"Factory.of"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"reducer-1"}),(0,n.kt)("inlineCode",{parentName:"h3"},"reducer")),(0,n.kt)("p",null,"Returns a ",(0,n.kt)("inlineCode",{parentName:"p"},"Reducer")," that adds received tuples to an RMap and returns the RMap as a result. When a ",(0,n.kt)("inlineCode",{parentName:"p"},"source")," is given, the reducer will first create an RMap from the source, and then add tuples to it.")),(0,n.kt)("h4",k({},{id:"definition-34"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"reducer<K extends UK, V>(source?: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.kt)("inlineCode",{parentName:"p"},"<readonly [K, V]>): Reducer<readonly [K, V], "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.kt)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal']>;"))),(0,n.kt)("h4",k({},{id:"type-parameters-15"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Constraints"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"K"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"UK")),(0,n.kt)("td",k({parentName:"tr"},{align:null}))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"V"),(0,n.kt)("td",k({parentName:"tr"},{align:null})),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-15"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"source")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.kt)("inlineCode",{parentName:"td"},"<readonly [K, V]>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"(optional) an initial source of tuples to add to")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const someSource = HashMap.of([1, 'a'], [2, 'b']);\nconst result = Stream.of([1, 'c'], [3, 'a']).reduce(HashMap.reducer(someSource))\nresult.toArray()   // => [[1, 'c'], [2, 'b'], [3, 'a']]\n"))),(0,n.kt)("admonition",k({},{title:"note",type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"uses a builder under the hood. If the given ",(0,n.kt)("inlineCode",{parentName:"p"},"source")," is an RMap in the same context, it will directly call ",(0,n.kt)("inlineCode",{parentName:"p"},".toBuilder()"),".")),(0,n.kt)("h4",k({},{id:"overrides-25"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Factory/interface#reducer"}),"Factory.reducer"))))}g.isMDXComponent=!0}}]);