"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[95046],{15680:(e,t,a)=>{a.d(t,{xA:()=>u,yg:()=>d});var r=a(96540);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var m=r.createContext({}),p=function(e){var t=r.useContext(m),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=p(e.components);return r.createElement(m.Provider,{value:t},e.children)},y="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,m=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),y=p(a),c=n,d=y["".concat(m,".").concat(c)]||y[c]||s[c]||o;return a?r.createElement(d,l(l({ref:t},u),{},{components:a})):r.createElement(d,l({ref:t},u))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,l=new Array(o);l[0]=c;var i={};for(var m in t)hasOwnProperty.call(t,m)&&(i[m]=t[m]);i.originalType=e,i[y]="string"==typeof e?e:n,l[1]=i;for(var p=2;p<o;p++)l[p]=a[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}c.displayName="MDXCreateElement"},58917:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>f,contentTitle:()=>b,default:()=>C,frontMatter:()=>d,metadata:()=>h,toc:()=>g});var r=a(15680),n=Object.defineProperty,o=Object.defineProperties,l=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,m=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,u=(e,t,a)=>t in e?n(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,y=(e,t)=>{for(var a in t||(t={}))m.call(t,a)&&u(e,a,t[a]);if(i)for(var a of i(t))p.call(t,a)&&u(e,a,t[a]);return e},s=(e,t)=>o(e,l(t)),c=(e,t)=>{var a={};for(var r in e)m.call(e,r)&&t.indexOf(r)<0&&(a[r]=e[r]);if(null!=e&&i)for(var r of i(e))t.indexOf(r)<0&&p.call(e,r)&&(a[r]=e[r]);return a};const d={title:"HashTableSortedColumn.NonEmpty<R,C,V>",slug:"/rimbu/table/hash-row/HashTableSortedColumn/NonEmpty/interface"},b="interface HashTableSortedColumn.NonEmpty<R,C,V>",h={unversionedId:"rimbu_table/hash-row/HashTableSortedColumn/NonEmpty.interface",id:"rimbu_table/hash-row/HashTableSortedColumn/NonEmpty.interface",title:"HashTableSortedColumn.NonEmpty<R,C,V>",description:"A non-empty type-invariant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the Table documentation and the HashTableSortedColumn API documentation",source:"@site/api/rimbu_table/hash-row/HashTableSortedColumn/NonEmpty.interface.mdx",sourceDirName:"rimbu_table/hash-row/HashTableSortedColumn",slug:"/rimbu/table/hash-row/HashTableSortedColumn/NonEmpty/interface",permalink:"/api/rimbu/table/hash-row/HashTableSortedColumn/NonEmpty/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"HashTableSortedColumn.NonEmpty<R,C,V>",slug:"/rimbu/table/hash-row/HashTableSortedColumn/NonEmpty/interface"},sidebar:"defaultSidebar",previous:{title:"HashTableSortedColumn.Context<UR,UC>",permalink:"/api/rimbu/table/hash-row/HashTableSortedColumn/Context/interface"},next:{title:"HashTableSortedColumn.Types",permalink:"/api/rimbu/table/hash-row/HashTableSortedColumn/Types/interface"}},f={},g=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>stream</code>",id:"stream",level:3},{value:"Definition",id:"definition",level:4},{value:"Overrides",id:"overrides",level:4}],N={toc:g},v="wrapper";function C(e){var t=e,{components:a}=t,n=c(t,["components"]);return(0,r.yg)(v,s(y(y({},N),n),{components:a,mdxType:"MDXLayout"}),(0,r.yg)("h1",y({},{id:"interface-hashtablesortedcolumnnonemptyrcv"}),(0,r.yg)("inlineCode",{parentName:"h1"},"interface HashTableSortedColumn.NonEmpty<R,C,V>")),(0,r.yg)("p",null,"A non-empty type-invariant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the ",(0,r.yg)("a",y({parentName:"p"},{href:"https://rimbu.org/docs/collections/table"}),"Table documentation")," and the ",(0,r.yg)("a",y({parentName:"p"},{href:"https://rimbu.org/api/rimbu/table/hash-row/HashTableSortedColumn/interface"}),"HashTableSortedColumn API documentation"),"  "),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Extends:")," ",(0,r.yg)("a",y({parentName:"p"},{href:"/api/rimbu/stream/Streamable/NonEmpty/interface"}),(0,r.yg)("inlineCode",{parentName:"a"},"Streamable.NonEmpty<T>")),", ",(0,r.yg)("a",y({parentName:"p"},{href:"/api/rimbu/table/hash-row/HashTableSortedColumn/interface"}),(0,r.yg)("inlineCode",{parentName:"a"},"HashTableSortedColumn<R,C,V>"))),(0,r.yg)("h2",y({},{id:"type-parameters"}),"Type parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,r.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",y({parentName:"tr"},{align:null}),"R"),(0,r.yg)("td",y({parentName:"tr"},{align:null}),"the row key type")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",y({parentName:"tr"},{align:null}),"C"),(0,r.yg)("td",y({parentName:"tr"},{align:null}),"the column key type")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",y({parentName:"tr"},{align:null}),"V"),(0,r.yg)("td",y({parentName:"tr"},{align:null}),"the value type")))),(0,r.yg)("admonition",y({},{title:"note",type:"note"}),(0,r.yg)("ul",{parentName:"admonition"},(0,r.yg)("li",{parentName:"ul"},"The HashTableSortedColumn uses a HashMap to map row keys to column. - The HashTableSortedColumn uses SortedMaps to map column keys to values."))),(0,r.yg)("admonition",y({},{title:"example",type:"note"}),(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"const t1 = HashTableSortedColumn.empty<number, string, boolean>()\nconst t2 = HashTableSortedColumn.of([1, 'a', true], [2, 'a', false])\n"))),(0,r.yg)("h2",y({},{id:"methods"}),"Methods"),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("h3",y({},{id:"stream"}),(0,r.yg)("inlineCode",{parentName:"h3"},"stream")),(0,r.yg)("p",null,"Returns a non-empty ",(0,r.yg)("inlineCode",{parentName:"p"},"Stream")," of the elements in this collection.")),(0,r.yg)("h4",y({},{id:"definition"}),"Definition"),(0,r.yg)("code",null,(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"stream(): "),(0,r.yg)("a",y({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,r.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,r.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,r.yg)("h4",y({},{id:"overrides"}),"Overrides"),(0,r.yg)("p",null,(0,r.yg)("a",y({parentName:"p"},{href:"/api/rimbu/stream/Streamable/NonEmpty/interface#stream"}),"NonEmpty.stream"))))}C.isMDXComponent=!0}}]);