"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[17032],{15680:(e,a,n)=>{n.d(a,{xA:()=>d,yg:()=>s});var t=n(96540);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function l(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?l(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function y(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=t.createContext({}),m=function(e){var a=t.useContext(p),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},d=function(e){var a=m(e.components);return t.createElement(p.Provider,{value:a},e.children)},o="mdxType",g={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},u=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,d=y(e,["components","mdxType","originalType","parentName"]),o=m(n),u=r,s=o["".concat(p,".").concat(u)]||o[u]||g[u]||l;return n?t.createElement(s,i(i({ref:a},d),{},{components:n})):t.createElement(s,i({ref:a},d))}));function s(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=u;var y={};for(var p in a)hasOwnProperty.call(a,p)&&(y[p]=a[p]);y.originalType=e,y[o]="string"==typeof e?e:r,i[1]=y;for(var m=2;m<l;m++)i[m]=n[m];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},98396:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>h,contentTitle:()=>c,default:()=>v,frontMatter:()=>s,metadata:()=>N,toc:()=>b});var t=n(15680),r=Object.defineProperty,l=Object.defineProperties,i=Object.getOwnPropertyDescriptors,y=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable,d=(e,a,n)=>a in e?r(e,a,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[a]=n,o=(e,a)=>{for(var n in a||(a={}))p.call(a,n)&&d(e,n,a[n]);if(y)for(var n of y(a))m.call(a,n)&&d(e,n,a[n]);return e},g=(e,a)=>l(e,i(a)),u=(e,a)=>{var n={};for(var t in e)p.call(e,t)&&a.indexOf(t)<0&&(n[t]=e[t]);if(null!=e&&y)for(var t of y(e))a.indexOf(t)<0&&m.call(e,t)&&(n[t]=e[t]);return n};const s={title:"AsyncReducer (namespace)",slug:"/rimbu/stream/async/AsyncReducer/namespace"},c="namespace AsyncReducer",N={unversionedId:"rimbu_stream/async/AsyncReducer/index",id:"rimbu_stream/async/AsyncReducer/index",title:"AsyncReducer (namespace)",description:"An AsyncReducer is a stand-alone asynchronous calculation that takes input values of type I, and, when requested, produces an output value of type O.",source:"@site/api/rimbu_stream/async/AsyncReducer/index.mdx",sourceDirName:"rimbu_stream/async/AsyncReducer",slug:"/rimbu/stream/async/AsyncReducer/namespace",permalink:"/api/rimbu/stream/async/AsyncReducer/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"AsyncReducer (namespace)",slug:"/rimbu/stream/async/AsyncReducer/namespace"},sidebar:"defaultSidebar",previous:{title:"AsyncFastIterator<T>",permalink:"/api/rimbu/stream/async/AsyncFastIterator/interface"},next:{title:"Accept",permalink:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}},h={},b=[{value:"Interfaces",id:"interfaces",level:2},{value:"Classes",id:"classes",level:2},{value:"Functions",id:"functions",level:2},{value:"<code>combine</code>",id:"combine",level:3},{value:"Definition",id:"definition",level:4},{value:"Type parameters",id:"type-parameters",level:5},{value:"Parameters",id:"parameters",level:4},{value:"<code>containsSlice</code>",id:"containsslice",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Type parameters",id:"type-parameters-1",level:5},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>create</code>",id:"create",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Type parameters",id:"type-parameters-2",level:5},{value:"Parameters",id:"parameters-2",level:4},{value:"<code>createMono</code>",id:"createmono",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Type parameters",id:"type-parameters-3",level:5},{value:"Parameters",id:"parameters-3",level:4},{value:"<code>createOutput</code>",id:"createoutput",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Type parameters",id:"type-parameters-4",level:5},{value:"Parameters",id:"parameters-4",level:4},{value:"<code>endsWithSlice</code>",id:"endswithslice",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Type parameters",id:"type-parameters-5",level:5},{value:"Parameters",id:"parameters-5",level:4},{value:"<code>equals</code>",id:"equals",level:3},{value:"Definition",id:"definition-6",level:4},{value:"Type parameters",id:"type-parameters-6",level:5},{value:"Parameters",id:"parameters-6",level:4},{value:"<code>every</code>",id:"every",level:3},{value:"Definition",id:"definition-7",level:4},{value:"Type parameters",id:"type-parameters-7",level:5},{value:"Parameters",id:"parameters-7",level:4},{value:"<code>fold</code>",id:"fold",level:3},{value:"Definition",id:"definition-8",level:4},{value:"Type parameters",id:"type-parameters-8",level:5},{value:"Parameters",id:"parameters-8",level:4},{value:"<code>from</code>",id:"from",level:3},{value:"Definition",id:"definition-9",level:4},{value:"Type parameters",id:"type-parameters-9",level:5},{value:"Parameters",id:"parameters-9",level:4},{value:"<code>some</code>",id:"some",level:3},{value:"Definition",id:"definition-10",level:4},{value:"Type parameters",id:"type-parameters-10",level:5},{value:"Parameters",id:"parameters-10",level:4},{value:"<code>startsWithSlice</code>",id:"startswithslice",level:3},{value:"Definition",id:"definition-11",level:4},{value:"Type parameters",id:"type-parameters-11",level:5},{value:"Parameters",id:"parameters-11",level:4},{value:"Constants",id:"constants",level:2}],C={toc:b},f="wrapper";function v(e){var a=e,{components:n}=a,r=u(a,["components"]);return(0,t.yg)(f,g(o(o({},C),r),{components:n,mdxType:"MDXLayout"}),(0,t.yg)("h1",o({},{id:"namespace-asyncreducer"}),(0,t.yg)("inlineCode",{parentName:"h1"},"namespace AsyncReducer")),(0,t.yg)("p",null,"An ",(0,t.yg)("inlineCode",{parentName:"p"},"AsyncReducer")," is a stand-alone asynchronous calculation that takes input values of type I, and, when requested, produces an output value of type O."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Companion type:")," ",(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer<I,O>"))),(0,t.yg)("h2",o({},{id:"interfaces"}),"Interfaces"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncReducer/Impl/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer.Impl<I,O,S>"))),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"The AsyncReducer implementation interface defining the required methods.")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncReducer/Instance/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer.Instance<I,O>"))),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"An async reducer instance that manages its own state based on the reducer definition that was used to create this instance.")))),(0,t.yg)("h2",o({},{id:"classes"}),"Classes"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncReducer/Base/class"}),(0,t.yg)("inlineCode",{parentName:"a"},"Base"))),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"A base class that can be used to easily create ",(0,t.yg)("inlineCode",{parentName:"td"},"AsyncReducer")," instances.")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncReducer/InstanceImpl/class"}),(0,t.yg)("inlineCode",{parentName:"a"},"InstanceImpl"))),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"The default ",(0,t.yg)("inlineCode",{parentName:"td"},"AsyncReducer.Impl")," implementation.")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncReducer/InvalidCombineShapeError/class"}),(0,t.yg)("inlineCode",{parentName:"a"},"InvalidCombineShapeError"))),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"undocumented")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncReducer/ReducerClosedError/class"}),(0,t.yg)("inlineCode",{parentName:"a"},"ReducerClosedError"))),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"undocumented")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncReducer/ReducerHaltedError/class"}),(0,t.yg)("inlineCode",{parentName:"a"},"ReducerHaltedError"))),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"undocumented")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncReducer/ReducerNotInitializedError/class"}),(0,t.yg)("inlineCode",{parentName:"a"},"ReducerNotInitializedError"))),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"undocumented")))),(0,t.yg)("h2",o({},{id:"functions"}),"Functions"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"combine"}),(0,t.yg)("inlineCode",{parentName:"h3"},"combine")),(0,t.yg)("p",null,"Returns an ",(0,t.yg)("inlineCode",{parentName:"p"},"AsyncReducer")," that combines multiple input ",(0,t.yg)("inlineCode",{parentName:"p"},"reducers"),' according to the given "shape" by providing input values to all of them and collecting the outputs in the shape.')),(0,t.yg)("h4",o({},{id:"definition"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function combine<T, const S extends "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/CombineShape/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer.CombineShape")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>>(shape: S & "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/CombineShape/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer.CombineShape")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>): "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,t.yg)("inlineCode",{parentName:"p"},"<T, "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/CombineResult/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer.CombineResult")),(0,t.yg)("inlineCode",{parentName:"p"},"<S>>;"))),(0,t.yg)("h5",o({},{id:"type-parameters"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"T"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the input value type for all the reducers")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"S"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the desired result shape type")))),(0,t.yg)("h4",o({},{id:"parameters"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"shape")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"S & "),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncReducer/CombineShape/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer.CombineShape")),(0,t.yg)("inlineCode",{parentName:"td"},"<T>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"a shape defining where reducer outputs will be located in the result. It can consist of a single reducer, an array of shapes, or an object with string keys and shapes as values."))))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"containsslice"}),(0,t.yg)("inlineCode",{parentName:"h3"},"containsSlice")),(0,t.yg)("p",null,"Returns an ",(0,t.yg)("inlineCode",{parentName:"p"},"AsyncReducer")," that returns true if the input values contain the given ",(0,t.yg)("inlineCode",{parentName:"p"},"slice")," sequence ",(0,t.yg)("inlineCode",{parentName:"p"},"amount")," times. Otherwise, returns false.")),(0,t.yg)("h4",o({},{id:"definition-1"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function containsSlice<T>(slice: "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"eq?: Eq<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"amount?: number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,t.yg)("inlineCode",{parentName:"p"},"<T, boolean>;"))),(0,t.yg)("h5",o({},{id:"type-parameters-1"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"T"),(0,t.yg)("td",o({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",o({},{id:"parameters-1"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"slice")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<T>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"a async sequence of elements to match against")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"eq?: Eq<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"amount?: number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,t.yg)("br",null)," - amount: (detaulf: 1) the amount of elements to find - eq: (default: Eq.objectIs) the ",(0,t.yg)("inlineCode",{parentName:"td"},"Eq")," instance to use to compare elements"))))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"create"}),(0,t.yg)("inlineCode",{parentName:"h3"},"create")),(0,t.yg)("p",null,"Returns an ",(0,t.yg)("inlineCode",{parentName:"p"},"AsyncReducer")," with the given options:")),(0,t.yg)("h4",o({},{id:"definition-2"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function create<I, O = I, S = O>(init: (initHalt: () => void) => "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"p"},"<S>, next: (current: S, next: I, index: number, halt: () => void) => "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"p"},"<S>, stateToResult: (state: S, index: number, halted: boolean) => "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"p"},"<O>, onClose?: (state: S, error?: unknown) => "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"p"},"<void>): "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,t.yg)("inlineCode",{parentName:"p"},"<I, O>;"))),(0,t.yg)("h5",o({},{id:"type-parameters-2"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"I"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the input value type")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"O"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the output value type")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"S"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the internal state type")))),(0,t.yg)("h4",o({},{id:"parameters-2"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"init")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(initHalt: () => void) => "),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"td"},"<S>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the optionally lazy and/or promised initial state value")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"next")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(current: S, next: I, index: number, halt: () => void) => "),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"td"},"<S>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"returns (potentially asynchronously) the next state value based on the given inputs:",(0,t.yg)("br",null)," - current: the current state",(0,t.yg)("br",null)," - next: the current input value",(0,t.yg)("br",null)," - index: the input index value",(0,t.yg)("br",null)," - halt: function that, when called, ensures no more elements are passed to the reducer")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"stateToResult")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(state: S, index: number, halted: boolean) => "),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"td"},"<O>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"a potentially asynchronous function that converts the current state to an output value")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"onClose")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(state: S, error?: unknown) => "),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"td"},"<void>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"(optional) a function that will be called when the reducer will no longer receive values"))))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"createmono"}),(0,t.yg)("inlineCode",{parentName:"h3"},"createMono")),(0,t.yg)("p",null,"Returns an ",(0,t.yg)("inlineCode",{parentName:"p"},"AsyncReducer")," of which the input, state, and output types are the same.")),(0,t.yg)("h4",o({},{id:"definition-3"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function createMono<T>(init: (initHalt: () => void) => "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>, next: (current: T, next: T, index: number, halt: () => void) => "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>, stateToResult?: (state: T, index: number, halted: boolean) => "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>, onClose?: (state: T, error?: unknown) => "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"p"},"<void>): "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,t.yg)("h5",o({},{id:"type-parameters-3"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"T"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the overall value type")))),(0,t.yg)("h4",o({},{id:"parameters-3"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"init")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(initHalt: () => void) => "),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"td"},"<T>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the optionally lazy and/or promised initial state value")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"next")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(current: T, next: T, index: number, halt: () => void) => "),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"td"},"<T>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"returns (potentially asynchronously) the next state value based on the given inputs:",(0,t.yg)("br",null)," - current: the current state",(0,t.yg)("br",null)," - next: the current input value",(0,t.yg)("br",null)," - index: the input index value",(0,t.yg)("br",null)," - halt: function that, when called, ensures no more elements are passed to the reducer")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"stateToResult")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(state: T, index: number, halted: boolean) => "),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"td"},"<T>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"a potentially asynchronous function that converts the current state to an output value")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"onClose")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(state: T, error?: unknown) => "),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"td"},"<void>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"(optional) a function that will be called when the reducer will no longer receive values"))))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"createoutput"}),(0,t.yg)("inlineCode",{parentName:"h3"},"createOutput")),(0,t.yg)("p",null,"Returns an ",(0,t.yg)("inlineCode",{parentName:"p"},"AsyncReducer")," of which the state and output types are the same.")),(0,t.yg)("h4",o({},{id:"definition-4"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function createOutput<I, O = I>(init: (initHalt: () => void) => "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"p"},"<O>, next: (current: O, next: I, index: number, halt: () => void) => "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"p"},"<O>, stateToResult?: (state: O, index: number, halted: boolean) => "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"p"},"<O>, onClose?: (state: O, error?: unknown) => "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"p"},"<void>): "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,t.yg)("inlineCode",{parentName:"p"},"<I, O>;"))),(0,t.yg)("h5",o({},{id:"type-parameters-4"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"I"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the input value type")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"O"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the output value type")))),(0,t.yg)("h4",o({},{id:"parameters-4"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"init")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(initHalt: () => void) => "),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"td"},"<O>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the optionally lazy and/or promised initial state value")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"next")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(current: O, next: I, index: number, halt: () => void) => "),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"td"},"<O>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"returns (potentially asynchronously) the next state value based on the given inputs:",(0,t.yg)("br",null)," - current: the current state",(0,t.yg)("br",null)," - next: the current input value",(0,t.yg)("br",null)," - index: the input index value",(0,t.yg)("br",null)," - halt: function that, when called, ensures no more elements are passed to the reducer")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"stateToResult")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(state: O, index: number, halted: boolean) => "),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"td"},"<O>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"a potentially asynchronous function that converts the current state to an output value")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"onClose")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(state: O, error?: unknown) => "),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"td"},"<void>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"(optional) a function that will be called when the reducer will no longer receive values"))))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"endswithslice"}),(0,t.yg)("inlineCode",{parentName:"h3"},"endsWithSlice")),(0,t.yg)("p",null,"Returns an ",(0,t.yg)("inlineCode",{parentName:"p"},"AsyncReducer")," that returns true if the last input values match the given ",(0,t.yg)("inlineCode",{parentName:"p"},"slice")," values repeated ",(0,t.yg)("inlineCode",{parentName:"p"},"amount")," times. Otherwise, returns false.")),(0,t.yg)("h4",o({},{id:"definition-5"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function endsWithSlice<T>(slice: "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"eq?: Eq<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"amount?: number;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,t.yg)("inlineCode",{parentName:"p"},"<T, boolean>;"))),(0,t.yg)("h5",o({},{id:"type-parameters-5"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"T"),(0,t.yg)("td",o({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",o({},{id:"parameters-5"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"slice")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<T>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"a async sequence of elements to match against")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"eq?: Eq<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"amount?: number;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,t.yg)("br",null)," - amount: (detaulf: 1) the amount of elements to find - eq: (default: Eq.objectIs) the ",(0,t.yg)("inlineCode",{parentName:"td"},"Eq")," instance to use to compare elements"))))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"equals"}),(0,t.yg)("inlineCode",{parentName:"h3"},"equals")),(0,t.yg)("p",null,"Returns an ",(0,t.yg)("inlineCode",{parentName:"p"},"AsyncReducer")," that ouputs true when the received elements match the given ",(0,t.yg)("inlineCode",{parentName:"p"},"other")," async stream source according to the ",(0,t.yg)("inlineCode",{parentName:"p"},"eq")," instance, false otherwise.")),(0,t.yg)("h4",o({},{id:"definition-6"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function equals<T>(other: "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"eq?: Eq<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,t.yg)("inlineCode",{parentName:"p"},"<T, boolean>;"))),(0,t.yg)("h5",o({},{id:"type-parameters-6"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"T"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the element type")))),(0,t.yg)("h4",o({},{id:"parameters-6"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"other")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<T>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"an async stream source containg elements to match against")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"eq?: Eq<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,t.yg)("br",null)," - eq: (default: Eq.objectIs) the ",(0,t.yg)("inlineCode",{parentName:"td"},"Eq")," instance to use to compare elements - negate: (default: false) when true will invert the given predicate"))))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"every"}),(0,t.yg)("inlineCode",{parentName:"h3"},"every")),(0,t.yg)("p",null,"Returns an ",(0,t.yg)("inlineCode",{parentName:"p"},"AsyncReducer")," that ouputs true as long as all input values satisfy the given ",(0,t.yg)("inlineCode",{parentName:"p"},"pred"),", false otherwise.")),(0,t.yg)("h4",o({},{id:"definition-7"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function every<T>(pred: (value: T, index: number) => "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"p"},"<boolean>, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,t.yg)("inlineCode",{parentName:"p"},"<T, boolean>;"))),(0,t.yg)("h5",o({},{id:"type-parameters-7"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"T"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the element type")))),(0,t.yg)("h4",o({},{id:"parameters-7"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"pred")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(value: T, index: number) => "),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"td"},"<boolean>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"a potentially async function taking an input value and its index, and returning true if the value satisfies the predicate")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,t.yg)("br",null)," - negate: (default: false) when true will invert the given predicate"))))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"fold"}),(0,t.yg)("inlineCode",{parentName:"h3"},"fold")),(0,t.yg)("p",null,"Returns an ",(0,t.yg)("inlineCode",{parentName:"p"},"AsyncReducer")," that uses the given ",(0,t.yg)("inlineCode",{parentName:"p"},"init")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"next")," values to fold the input values into result values.")),(0,t.yg)("h4",o({},{id:"definition-8"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function fold<T, R>(init: AsyncOptLazy<R>, next: (current: R, value: T, index: number, halt: () => void) => "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"p"},"<R>): "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,t.yg)("inlineCode",{parentName:"p"},"<T, R>;"))),(0,t.yg)("h5",o({},{id:"type-parameters-8"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"T"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the input type")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"R"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the output type")))),(0,t.yg)("h4",o({},{id:"parameters-8"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"init")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"AsyncOptLazy<R>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"an (optionally lazy) initial result value")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"next")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(current: R, value: T, index: number, halt: () => void) => "),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"td"},"<R>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"a (potentially async) function taking the following arguments:",(0,t.yg)("br",null)," - current - the current result value",(0,t.yg)("br",null)," - value - the next input value",(0,t.yg)("br",null)," - index: the input index value",(0,t.yg)("br",null)," - halt: function that, when called, ensures no more elements are passed to the reducer"))))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"from"}),(0,t.yg)("inlineCode",{parentName:"h3"},"from")),(0,t.yg)("p",null,"Returns an ",(0,t.yg)("inlineCode",{parentName:"p"},"AsyncReducer")," from a given ",(0,t.yg)("inlineCode",{parentName:"p"},"Reducer")," or ",(0,t.yg)("inlineCode",{parentName:"p"},"AsyncReducer")," instance.")),(0,t.yg)("h4",o({},{id:"definition-9"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function from<I, O>(reducer: "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,t.yg)("inlineCode",{parentName:"p"},"<I, O>): "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,t.yg)("inlineCode",{parentName:"p"},"<I, O>;"))),(0,t.yg)("h5",o({},{id:"type-parameters-9"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"I"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the input element type")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"O"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the output element type")))),(0,t.yg)("h4",o({},{id:"parameters-9"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"reducer")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,t.yg)("inlineCode",{parentName:"td"},"<I, O>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the input reducer to convert"))))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"some"}),(0,t.yg)("inlineCode",{parentName:"h3"},"some")),(0,t.yg)("p",null,"Returns an ",(0,t.yg)("inlineCode",{parentName:"p"},"AsyncReducer")," that ouputs false as long as no input value satisfies given ",(0,t.yg)("inlineCode",{parentName:"p"},"pred"),", true otherwise.")),(0,t.yg)("h4",o({},{id:"definition-10"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function some<T>(pred: (value: T, index: number) => "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"p"},"<boolean>, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,t.yg)("inlineCode",{parentName:"p"},"<T, boolean>;"))),(0,t.yg)("h5",o({},{id:"type-parameters-10"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"T"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the element type")))),(0,t.yg)("h4",o({},{id:"parameters-10"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"pred")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(value: T, index: number) => "),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"td"},"<boolean>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"a potentiall async function taking an input value and its index, and returning true if the value satisfies the predicate")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,t.yg)("br",null)," - negate: (default: false) when true will invert the given predicate"))))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"startswithslice"}),(0,t.yg)("inlineCode",{parentName:"h3"},"startsWithSlice")),(0,t.yg)("p",null,"Returns a ",(0,t.yg)("inlineCode",{parentName:"p"},"AsyncReducer")," that returns true if the first input values match the given ",(0,t.yg)("inlineCode",{parentName:"p"},"slice")," values repeated ",(0,t.yg)("inlineCode",{parentName:"p"},"amount")," times. Otherwise, returns false.")),(0,t.yg)("h4",o({},{id:"definition-11"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function startsWithSlice<T>(slice: "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"eq?: Eq<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"amount?: number;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,t.yg)("inlineCode",{parentName:"p"},"<T, boolean>;"))),(0,t.yg)("h5",o({},{id:"type-parameters-11"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"T"),(0,t.yg)("td",o({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",o({},{id:"parameters-11"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"slice")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<T>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"a async sequence of elements to match against")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"eq?: Eq<T> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"amount?: number;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,t.yg)("br",null)," - amount: (detaulf: 1) the amount of elements to find - eq: (default: Eq.objectIs) the ",(0,t.yg)("inlineCode",{parentName:"td"},"Eq")," instance to use to compare elements"))))),(0,t.yg)("h2",o({},{id:"constants"}),"Constants"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"first"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"Returns an ",(0,t.yg)("inlineCode",{parentName:"td"},"AsyncReducer")," that remembers the first input value.")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"groupBy"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"Returns an ",(0,t.yg)("inlineCode",{parentName:"td"},"AsyncReducer")," that uses the ",(0,t.yg)("inlineCode",{parentName:"td"},"valueToKey")," function to calculate a key for each value, and feeds the tuple of the key and the value to the ",(0,t.yg)("inlineCode",{parentName:"td"},"collector")," reducer. Finally, it returns the output of the ",(0,t.yg)("inlineCode",{parentName:"td"},"collector"),". If no collector is given, the default collector will return a JS multimap of the type ",(0,t.yg)("inlineCode",{parentName:"td"},"Map<K, V[]>"),".")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"isEmpty"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"An ",(0,t.yg)("inlineCode",{parentName:"td"},"AsyncReducer")," that outputs true if no input values are received, false otherwise.")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"last"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"Returns an ",(0,t.yg)("inlineCode",{parentName:"td"},"AsyncReducer")," that remembers the last input value.")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"max"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"Returns a ",(0,t.yg)("inlineCode",{parentName:"td"},"Reducer")," that remembers the maximum value of the numberic inputs.")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"maxBy"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"Returns a ",(0,t.yg)("inlineCode",{parentName:"td"},"Reducer")," that remembers the maximum value of the inputs using the given ",(0,t.yg)("inlineCode",{parentName:"td"},"compFun")," to compare input values")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"min"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"Returns a ",(0,t.yg)("inlineCode",{parentName:"td"},"Reducer")," that remembers the minimum value of the numberic inputs.")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"minBy"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"Returns a ",(0,t.yg)("inlineCode",{parentName:"td"},"Reducer")," that remembers the minimum value of the inputs using the given ",(0,t.yg)("inlineCode",{parentName:"td"},"compFun")," to compare input values")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"nonEmpty"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"An ",(0,t.yg)("inlineCode",{parentName:"td"},"AsyncReducer")," that outputs true if one or more input values are received, false otherwise.")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"partition"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"Returns an ",(0,t.yg)("inlineCode",{parentName:"td"},"AsyncReducer")," that splits the incoming values into two separate outputs based on the given ",(0,t.yg)("inlineCode",{parentName:"td"},"pred")," predicate. Values for which the predicate is true are fed into the ",(0,t.yg)("inlineCode",{parentName:"td"},"collectorTrue")," reducer, and other values are fed into the ",(0,t.yg)("inlineCode",{parentName:"td"},"collectorFalse")," instance. If no collectors are provided the values are collected into arrays.")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"pipe"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"Returns an ",(0,t.yg)("inlineCode",{parentName:"td"},"AsyncReducer")," instance that first applies this reducer, and then applies the given ",(0,t.yg)("inlineCode",{parentName:"td"},"next")," reducer to each output produced by the previous reducer.")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"race"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"Returns an ",(0,t.yg)("inlineCode",{parentName:"td"},"AsyncReducer")," that feeds incoming values to all reducers in the provided ",(0,t.yg)("inlineCode",{parentName:"td"},"reducers")," source, and halts when the first reducer in the array is halted and returns the output of that reducer. Returns the ",(0,t.yg)("inlineCode",{parentName:"td"},"otherwise")," value if no reducer is yet halted.")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"single"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"Returns an AsyncReducer that only produces an output value when having receives exactly one input value, otherwise will return the ",(0,t.yg)("inlineCode",{parentName:"td"},"otherwise")," value or undefined.")))))}v.isMDXComponent=!0}}]);