"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[68521],{15680:(e,n,t)=>{t.d(n,{xA:()=>m,yg:()=>s});var a=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),d=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=d(e.components);return a.createElement(c.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},f=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=d(t),f=r,s=u["".concat(c,".").concat(f)]||u[f]||p[f]||i;return t?a.createElement(s,o(o({ref:n},m),{},{components:t})):a.createElement(s,o({ref:n},m))}));function s(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=f;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=t[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}f.displayName="MDXCreateElement"},9694:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>y,contentTitle:()=>h,default:()=>O,frontMatter:()=>s,metadata:()=>g,toc:()=>C});var a=t(15680),r=Object.defineProperty,i=Object.defineProperties,o=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,c=Object.prototype.hasOwnProperty,d=Object.prototype.propertyIsEnumerable,m=(e,n,t)=>n in e?r(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,u=(e,n)=>{for(var t in n||(n={}))c.call(n,t)&&m(e,t,n[t]);if(l)for(var t of l(n))d.call(n,t)&&m(e,t,n[t]);return e},p=(e,n)=>i(e,o(n)),f=(e,n)=>{var t={};for(var a in e)c.call(e,a)&&n.indexOf(a)<0&&(t[a]=e[a]);if(null!=e&&l)for(var a of l(e))n.indexOf(a)<0&&d.call(e,a)&&(t[a]=e[a]);return t};const s={title:"RemoteChannel.ReadConfig",slug:"/rimbu/channel/RemoteChannel/ReadConfig/interface"},h="interface RemoteChannel.ReadConfig",g={unversionedId:"rimbu_channel/RemoteChannel/ReadConfig.interface",id:"rimbu_channel/RemoteChannel/ReadConfig.interface",title:"RemoteChannel.ReadConfig",description:"Interface defining the read configuration for a RemoteChannel.",source:"@site/api/rimbu_channel/RemoteChannel/ReadConfig.interface.mdx",sourceDirName:"rimbu_channel/RemoteChannel",slug:"/rimbu/channel/RemoteChannel/ReadConfig/interface",permalink:"/api/rimbu/channel/RemoteChannel/ReadConfig/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"RemoteChannel.ReadConfig",slug:"/rimbu/channel/RemoteChannel/ReadConfig/interface"},sidebar:"defaultSidebar",previous:{title:"RemoteChannel.CrossConfig",permalink:"/api/rimbu/channel/RemoteChannel/CrossConfig/interface"},next:{title:"RemoteChannel.SimpleMessagePort",permalink:"/api/rimbu/channel/RemoteChannel/SimpleMessagePort/interface"}},y={},C=[{value:"Properties",id:"properties",level:2},{value:"<code>channelId</code>",id:"channelid",level:3},{value:"Definition",id:"definition",level:4},{value:"<code>handshakeAttemptTimeoutMs</code>",id:"handshakeattempttimeoutms",level:3},{value:"Definition",id:"definition-1",level:4},{value:"<code>maxHandshakeAttempts</code>",id:"maxhandshakeattempts",level:3},{value:"Definition",id:"definition-2",level:4},{value:"<code>validator</code>",id:"validator",level:3},{value:"Definition",id:"definition-3",level:4}],b={toc:C},v="wrapper";function O(e){var n=e,{components:t}=n,r=f(n,["components"]);return(0,a.yg)(v,p(u(u({},b),r),{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",u({},{id:"interface-remotechannelreadconfig"}),(0,a.yg)("inlineCode",{parentName:"h1"},"interface RemoteChannel.ReadConfig")),(0,a.yg)("p",null,"Interface defining the read configuration for a RemoteChannel."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Implemented by:")," ",(0,a.yg)("a",u({parentName:"p"},{href:"/api/rimbu/channel/RemoteChannelClient/ReadChannelConfig/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"RemoteChannelClient.ReadChannelConfig"))),(0,a.yg)("h2",u({},{id:"properties"}),"Properties"),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",u({},{id:"channelid"}),(0,a.yg)("inlineCode",{parentName:"h3"},"channelId")),(0,a.yg)("p",null,"An ID used for the client and server to connect the correct channels to each other.")),(0,a.yg)("h4",u({},{id:"definition"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"channelId: string;")))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",u({},{id:"handshakeattempttimeoutms"}),(0,a.yg)("inlineCode",{parentName:"h3"},"handshakeAttemptTimeoutMs")),(0,a.yg)("p",null,"The amount of milliseconds to wait for a reponse to each handshake.")),(0,a.yg)("h4",u({},{id:"definition-1"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"handshakeAttemptTimeoutMs?: number;")))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",u({},{id:"maxhandshakeattempts"}),(0,a.yg)("inlineCode",{parentName:"h3"},"maxHandshakeAttempts")),(0,a.yg)("p",null,"The amount of handshake attempts to make before failing.")),(0,a.yg)("h4",u({},{id:"definition-2"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"maxHandshakeAttempts?: number;")))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",u({},{id:"validator"}),(0,a.yg)("inlineCode",{parentName:"h3"},"validator")),(0,a.yg)("p",null,"A function taking a message and returning true if the message is of a valid type, false otherwise")),(0,a.yg)("h4",u({},{id:"definition-3"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"validator?: (value: any) => boolean;")))))}O.isMDXComponent=!0}}]);