"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[1001],{15680:(e,n,a)=>{a.d(n,{xA:()=>m,yg:()=>N});var t=a(96540);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function y(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=t.createContext({}),g=function(e){var n=t.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},m=function(e){var n=g(e.components);return t.createElement(p.Provider,{value:n},e.children)},o="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,m=y(e,["components","mdxType","originalType","parentName"]),o=g(a),u=r,N=o["".concat(p,".").concat(u)]||o[u]||d[u]||l;return a?t.createElement(N,i(i({ref:n},m),{},{components:a})):t.createElement(N,i({ref:n},m))}));function N(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=u;var y={};for(var p in n)hasOwnProperty.call(n,p)&&(y[p]=n[p]);y.originalType=e,y[o]="string"==typeof e?e:r,i[1]=y;for(var g=2;g<l;g++)i[g]=a[g];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},13563:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>h,contentTitle:()=>s,default:()=>v,frontMatter:()=>N,metadata:()=>c,toc:()=>b});var t=a(15680),r=Object.defineProperty,l=Object.defineProperties,i=Object.getOwnPropertyDescriptors,y=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,g=Object.prototype.propertyIsEnumerable,m=(e,n,a)=>n in e?r(e,n,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[n]=a,o=(e,n)=>{for(var a in n||(n={}))p.call(n,a)&&m(e,a,n[a]);if(y)for(var a of y(n))g.call(n,a)&&m(e,a,n[a]);return e},d=(e,n)=>l(e,i(n)),u=(e,n)=>{var a={};for(var t in e)p.call(e,t)&&n.indexOf(t)<0&&(a[t]=e[t]);if(null!=e&&y)for(var t of y(e))n.indexOf(t)<0&&g.call(e,t)&&(a[t]=e[t]);return a};const N={title:"Stream (namespace)",slug:"/rimbu/stream/Stream/namespace"},s="namespace Stream",c={unversionedId:"rimbu_stream/Stream/index",id:"rimbu_stream/Stream/index",title:"Stream (namespace)",description:"A possibly infinite sequence of elements of type T. See the Stream documentation and the Stream API documentation",source:"@site/api/rimbu_stream/Stream/index.mdx",sourceDirName:"rimbu_stream/Stream",slug:"/rimbu/stream/Stream/namespace",permalink:"/api/rimbu/stream/Stream/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"Stream (namespace)",slug:"/rimbu/stream/Stream/namespace"},sidebar:"defaultSidebar",previous:{title:"Reducer",permalink:"/api/rimbu/stream/Reducer/type"},next:{title:"Stream.NonEmpty<T>",permalink:"/api/rimbu/stream/Stream/NonEmpty/interface"}},h={},b=[{value:"Interfaces",id:"interfaces",level:2},{value:"Static Methods",id:"static-methods",level:2},{value:"<code>always</code>",id:"always",level:3},{value:"Definition",id:"definition",level:4},{value:"Type parameters",id:"type-parameters",level:4},{value:"Parameters",id:"parameters",level:4},{value:"<code>applyFilter</code>",id:"applyfilter",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>applyForEach</code>",id:"applyforeach",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"<code>applyMap</code>",id:"applymap",level:3},{value:"Definitions",id:"definitions",level:4},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"<code>empty</code>",id:"empty",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"<code>flatten</code>",id:"flatten",level:3},{value:"Definitions",id:"definitions-1",level:4},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"<code>from</code>",id:"from",level:3},{value:"Definitions",id:"definitions-2",level:4},{value:"Type parameters",id:"type-parameters-6",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"<code>fromArray</code>",id:"fromarray",level:3},{value:"Definitions",id:"definitions-3",level:4},{value:"Type parameters",id:"type-parameters-7",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"<code>fromObject</code>",id:"fromobject",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Type parameters",id:"type-parameters-8",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"<code>fromObjectKeys</code>",id:"fromobjectkeys",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Type parameters",id:"type-parameters-9",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"<code>fromObjectValues</code>",id:"fromobjectvalues",level:3},{value:"Definition",id:"definition-6",level:4},{value:"Type parameters",id:"type-parameters-10",level:4},{value:"Parameters",id:"parameters-9",level:4},{value:"<code>fromString</code>",id:"fromstring",level:3},{value:"Definitions",id:"definitions-4",level:4},{value:"Type parameters",id:"type-parameters-11",level:4},{value:"Parameters",id:"parameters-10",level:4},{value:"<code>of</code>",id:"of",level:3},{value:"Definition",id:"definition-7",level:4},{value:"Type parameters",id:"type-parameters-12",level:4},{value:"Parameters",id:"parameters-11",level:4},{value:"<code>random</code>",id:"random",level:3},{value:"Definition",id:"definition-8",level:4},{value:"<code>randomInt</code>",id:"randomint",level:3},{value:"Definition",id:"definition-9",level:4},{value:"Parameters",id:"parameters-12",level:4},{value:"<code>range</code>",id:"range",level:3},{value:"Definition",id:"definition-10",level:4},{value:"Parameters",id:"parameters-13",level:4},{value:"<code>unfold</code>",id:"unfold",level:3},{value:"Definition",id:"definition-11",level:4},{value:"Type parameters",id:"type-parameters-13",level:4},{value:"Parameters",id:"parameters-14",level:4},{value:"<code>unzip</code>",id:"unzip",level:3},{value:"Definitions",id:"definitions-5",level:4},{value:"Type parameters",id:"type-parameters-14",level:4},{value:"Parameters",id:"parameters-15",level:4},{value:"<code>zip</code>",id:"zip",level:3},{value:"Definitions",id:"definitions-6",level:4},{value:"Type parameters",id:"type-parameters-15",level:4},{value:"Parameters",id:"parameters-16",level:4},{value:"<code>zipAll</code>",id:"zipall",level:3},{value:"Definitions",id:"definitions-7",level:4},{value:"Type parameters",id:"type-parameters-16",level:4},{value:"Parameters",id:"parameters-17",level:4},{value:"<code>zipAllWith</code>",id:"zipallwith",level:3},{value:"Definitions",id:"definitions-8",level:4},{value:"Type parameters",id:"type-parameters-17",level:4},{value:"Parameters",id:"parameters-18",level:4},{value:"<code>zipWith</code>",id:"zipwith",level:3},{value:"Definitions",id:"definitions-9",level:4},{value:"Type parameters",id:"type-parameters-18",level:4},{value:"Parameters",id:"parameters-19",level:4}],f={toc:b},C="wrapper";function v(e){var n=e,{components:a}=n,r=u(n,["components"]);return(0,t.yg)(C,d(o(o({},f),r),{components:a,mdxType:"MDXLayout"}),(0,t.yg)("h1",o({},{id:"namespace-stream"}),(0,t.yg)("inlineCode",{parentName:"h1"},"namespace Stream")),(0,t.yg)("p",null,"A possibly infinite sequence of elements of type T. See the ",(0,t.yg)("a",o({parentName:"p"},{href:"https://rimbu.org/docs/collections/stream"}),"Stream documentation")," and the ",(0,t.yg)("a",o({parentName:"p"},{href:"https://rimbu.org/api/rimbu/stream/Stream/interface"}),"Stream API documentation")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Companion interface:")," ",(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream<T>"))),(0,t.yg)("h2",o({},{id:"interfaces"}),"Interfaces"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty<T>"))),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"A non-empty and possibly infinite sequence of elements of type T. See the ",(0,t.yg)("a",o({parentName:"td"},{href:"https://rimbu.org/docs/collections/stream"}),"Stream documentation")," and the ",(0,t.yg)("a",o({parentName:"td"},{href:"https://rimbu.org/api/rimbu/stream/Stream/interface"}),"Stream API documentation"))))),(0,t.yg)("h2",o({},{id:"static-methods"}),"Static Methods"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"always"}),(0,t.yg)("inlineCode",{parentName:"h3"},"always")),(0,t.yg)("p",null,"Returns a Stream that eternally returns the given ",(0,t.yg)("inlineCode",{parentName:"p"},"value"),".")),(0,t.yg)("h4",o({},{id:"definition"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"always<T>(value: T): Stream.NonEmpty<T>;"))),(0,t.yg)("h4",o({},{id:"type-parameters"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"T"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the element type")))),(0,t.yg)("h4",o({},{id:"parameters"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"value")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"T")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the value to return")))),(0,t.yg)("admonition",o({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"console.log(Stream.always(5).take(4).toArray())\n=> [5, 5, 5, 5]\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"applyfilter"}),(0,t.yg)("inlineCode",{parentName:"h3"},"applyFilter")),(0,t.yg)("p",null,"For a Stream of tuples in given ",(0,t.yg)("inlineCode",{parentName:"p"},"source"),", returns a Stream where the result of supplying each tuple element as an argument to given ",(0,t.yg)("inlineCode",{parentName:"p"},"mapFun")," function for each element of the Stream, with the optionally given ",(0,t.yg)("inlineCode",{parentName:"p"},"args")," as extra arguments, is true.")),(0,t.yg)("h4",o({},{id:"definition-1"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"applyFilter<T extends readonly unknown[], A extends readonly unknown[]>(source: StreamSource<Readonly<T>>, options: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"pred: (...args: [...T, ...A]) => boolean;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate?: boolean;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}, ...args: A): Stream<T>;"))),(0,t.yg)("h4",o({},{id:"type-parameters-1"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"T"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"readonly unknown[]")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the Stream element type, should be a tuple")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"A"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"readonly unknown[]")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the optional arguments type")))),(0,t.yg)("h4",o({},{id:"parameters-1"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"source")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"StreamSource<Readonly<T>>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"a Stream of tuples")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"pred: (...args: [...T, ...A]) => boolean;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"negate?: boolean;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the options used to create the Stream, containing:",(0,t.yg)("br",null)," - pred: a function receiving the tuple elements as arguments, and optionally receiving given extra ",(0,t.yg)("inlineCode",{parentName:"td"},"args"),", and returning true if the element should be included in the result stream.",(0,t.yg)("br",null)," - negate: (default: false) if true will negate the predicate")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"args")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"A")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),": given extra arguments to supply to the predicated if needed")))),(0,t.yg)("admonition",o({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"used mostly for performance since a new function is not needed to spread the tuples to arguments")),(0,t.yg)("admonition",o({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"function sumEq(a: number, b: number, total: number): boolean {\nreturn a + b === total\n}\nconst s = Stream.applyFilter([[1, 3], [2, 4], [3, 3]], { pred: sumEq }, 6)\nconsole.log(s.toArray())\n// => [[2, 4], [3, 3]]\n"))),(0,t.yg)("admonition",o({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N)"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"applyforeach"}),(0,t.yg)("inlineCode",{parentName:"h3"},"applyForEach")),(0,t.yg)("p",null,"For a Stream of tuples, supplied each tuple element as an argument to given function ",(0,t.yg)("inlineCode",{parentName:"p"},"f")," for each element of the Stream, with the optionally given ",(0,t.yg)("inlineCode",{parentName:"p"},"args")," as extra arguments.")),(0,t.yg)("h4",o({},{id:"definition-2"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"applyForEach<T extends readonly unknown[], A extends readonly unknown[]>(source: StreamSource<Readonly<T>>, f: (...args: [...T, ...A]) => void, ...args: A): void;"))),(0,t.yg)("h4",o({},{id:"type-parameters-2"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"T"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"readonly unknown[]")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the Stream element type, should be a tuple")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"A"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"readonly unknown[]")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the optional arguments type")))),(0,t.yg)("h4",o({},{id:"parameters-2"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"source")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"StreamSource<Readonly<T>>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"a Stream of tuples")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"f")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(...args: [...T, ...A]) => void")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the function to perform, receiving each Stream tuple element, and optionally receiving given extra ",(0,t.yg)("inlineCode",{parentName:"td"},"args"),".")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"args")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"A")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"(optional) a list of extra arguments to pass to given ",(0,t.yg)("inlineCode",{parentName:"td"},"f")," for each element")))),(0,t.yg)("admonition",o({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"used mostly for performance since a new function is not needed to spread the tuples to arguments")),(0,t.yg)("admonition",o({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"Stream.applyForEach([[1, 'a'], [2, 'b']], console.log, 'bongo')\n// => logs:\n// 1 a bongo\n// 2 b bongo\n"))),(0,t.yg)("admonition",o({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N)"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"applymap"}),(0,t.yg)("inlineCode",{parentName:"h3"},"applyMap")),(0,t.yg)("p",null,"For a Stream of tuples in given ",(0,t.yg)("inlineCode",{parentName:"p"},"source"),", returns a Stream with the result of supplying each tuple element as an argument to given ",(0,t.yg)("inlineCode",{parentName:"p"},"mapFun")," function for each element of the Stream, with the optionally given ",(0,t.yg)("inlineCode",{parentName:"p"},"args")," as extra arguments.")),(0,t.yg)("h4",o({},{id:"definitions"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"applyMap<T extends readonly unknown[], A extends readonly unknown[], R>(source: StreamSource.NonEmpty<Readonly<T>>, mapFun: (...args: [...T, ...A]) => R, ...args: A): Stream.NonEmpty<R>;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"applyMap<T extends readonly unknown[], A extends readonly unknown[], R>(source: StreamSource<Readonly<T>>, mapFun: (...args: [...T, ...A]) => R, ...args: A): Stream<R>;"))),(0,t.yg)("h4",o({},{id:"type-parameters-3"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"T"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"readonly unknown[]")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the Stream element type, should be a tuple")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"A"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"readonly unknown[]")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the optional arguments type")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"R"),(0,t.yg)("td",o({parentName:"tr"},{align:null})),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the result Stream element type")))),(0,t.yg)("h4",o({},{id:"parameters-3"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"source")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"StreamSource.NonEmpty<Readonly<T>>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"a Stream of tuples")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"mapFun")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(...args: [...T, ...A]) => R")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"a function receiving the tuple elements as arguments, and optionally receiving given extra ",(0,t.yg)("inlineCode",{parentName:"td"},"args"),", and returning the result Stream element.")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"args")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"A")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"(optional) extra arguments to pass to given ",(0,t.yg)("inlineCode",{parentName:"td"},"mapFun")," for each element")))),(0,t.yg)("admonition",o({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"used mostly for performance since a new function is not needed to spread the tuples to arguments")),(0,t.yg)("admonition",o({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"const s = Stream.applyMap([[1, 'a'], [2, 'b']], List.of, true)\nconsole.log(s.toArray())\n// => [List(1, 'a', true), List(2, 'b', true)]\n"))),(0,t.yg)("admonition",o({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N)"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"empty"}),(0,t.yg)("inlineCode",{parentName:"h3"},"empty")),(0,t.yg)("p",null,"Returns an empty Stream of given type T.")),(0,t.yg)("h4",o({},{id:"definition-3"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"empty<T>(): Stream<T>;"))),(0,t.yg)("h4",o({},{id:"type-parameters-4"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"T"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the Stream element type")))),(0,t.yg)("admonition",o({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"Stream.empty<number>().toArray()   // => []\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"flatten"}),(0,t.yg)("inlineCode",{parentName:"h3"},"flatten")),(0,t.yg)("p",null,"Returns a Stream concatenating the given ",(0,t.yg)("inlineCode",{parentName:"p"},"source")," StreamSource containing StreamSources.")),(0,t.yg)("h4",o({},{id:"definitions-1"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"flatten<T extends StreamSource.NonEmpty<S>, S>(source: StreamSource.NonEmpty<T>): Stream.NonEmpty<S>;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"flatten<T extends StreamSource<S>, S>(source: StreamSource<T>): Stream<S>;"))),(0,t.yg)("h4",o({},{id:"type-parameters-5"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"T"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"StreamSource.NonEmpty<S>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"S"),(0,t.yg)("td",o({parentName:"tr"},{align:null})),(0,t.yg)("td",o({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",o({},{id:"parameters-4"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"source")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"StreamSource.NonEmpty<T>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",o({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"Stream.flatten(Stream.of([[1, 2], [3], [], [4]])).toArray()  // => [1, 2, 3, 4]\nStream.flatten(Stream.of(['ma', 'r', '', 'mot')).toArray()   // => ['m', 'a', 'r', 'm', 'o', 't']\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"from"}),(0,t.yg)("inlineCode",{parentName:"h3"},"from")),(0,t.yg)("p",null,"Returns a Stream containing the values in the given ",(0,t.yg)("inlineCode",{parentName:"p"},"sources")," concatenated")),(0,t.yg)("h4",o({},{id:"definitions-2"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"from<T>(...sources: "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<StreamSource.NonEmpty<T>>): Stream.NonEmpty<T>;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"from<T>(...sources: "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<StreamSource<T>>): Stream<T>;"))),(0,t.yg)("h4",o({},{id:"type-parameters-6"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"T"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the Stream element type")))),(0,t.yg)("h4",o({},{id:"parameters-5"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"sources")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,t.yg)("inlineCode",{parentName:"td"},"<StreamSource.NonEmpty<T>>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"a non-empty array of ",(0,t.yg)("inlineCode",{parentName:"td"},"StreamSource")," instances containing values")))),(0,t.yg)("admonition",o({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"Stream.from([1, 2, 3]).toArray()          // => [1, 2, 3]\nStream.from('marmot').toArray()           // => ['m', 'a', 'r', 'm', 'o', 't']\nStream.from([1, 2, 3], [4, 5]).toArray()  // => [1, 2, 3, 4, 5]\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"fromarray"}),(0,t.yg)("inlineCode",{parentName:"h3"},"fromArray")),(0,t.yg)("p",null,"Returns a Stream returning elements from the given ",(0,t.yg)("inlineCode",{parentName:"p"},"array"),", taking into account the given options.")),(0,t.yg)("h4",o({},{id:"definitions-3"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"fromArray<T>(array: "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"range?: undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"reversed?: boolean;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): Stream.NonEmpty<T>;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"fromArray<T>(array: readonly T[], options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"range?: IndexRange "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"reversed?: boolean;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): Stream<T>;"))),(0,t.yg)("h4",o({},{id:"type-parameters-7"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"T"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the Stream element type")))),(0,t.yg)("h4",o({},{id:"parameters-6"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"array")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,t.yg)("inlineCode",{parentName:"td"},"<T>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the source of the values for the Stream")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"range?: undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"reversed?: boolean;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"(optional) the options used to create the Stream, containing:",(0,t.yg)("br",null)," - range: (optional) a sub index range of the array",(0,t.yg)("br",null)," - reversed: (default: false) if true reverses the order of the Stream")))),(0,t.yg)("admonition",o({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"Stream.fromArray([1, 2, 3]).toArray()                                            // => [1, 2, 3]\nStream.fromArray([1, 2, 3], { range: { start: -2 } }).toArray()                  // => [1, 2]\nStream.fromArray([1, 2, 3], { range: { start: 1 }, reversed: true }).toArray()   // => [3, 2]\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"fromobject"}),(0,t.yg)("inlineCode",{parentName:"h3"},"fromObject")),(0,t.yg)("p",null,"Returns a Stream consisting of the object entries as tuples from the given ",(0,t.yg)("inlineCode",{parentName:"p"},"obj")," object.")),(0,t.yg)("h4",o({},{id:"definition-4"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"fromObject<K extends string "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"},"number"),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," symbol, V>(obj: Record<K, V>): Stream<[K, V]>;"))),(0,t.yg)("h4",o({},{id:"type-parameters-8"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"K"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"string "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"},"number"),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," symbol")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the object key type")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"V"),(0,t.yg)("td",o({parentName:"tr"},{align:null})),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the object value type")))),(0,t.yg)("h4",o({},{id:"parameters-7"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"obj")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"Record<K, V>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the source object")))),(0,t.yg)("admonition",o({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"Stream.fromObject({ a: 1, b: 'b' }).toArray()   // => [['a', 1], ['b', 'b']]\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"fromobjectkeys"}),(0,t.yg)("inlineCode",{parentName:"h3"},"fromObjectKeys")),(0,t.yg)("p",null,"Returns a Stream consisting of the object keys from the given ",(0,t.yg)("inlineCode",{parentName:"p"},"obj")," object.")),(0,t.yg)("h4",o({},{id:"definition-5"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"fromObjectKeys<K extends string "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"},"number"),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," symbol>(obj: Record<K, any>): Stream<K>;"))),(0,t.yg)("h4",o({},{id:"type-parameters-9"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"K"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"string "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"},"number"),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," symbol")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the object key type")))),(0,t.yg)("h4",o({},{id:"parameters-8"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"obj")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"Record<K, any>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the source object")))),(0,t.yg)("admonition",o({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"Stream.fromObjectKeys({ a: 1, b: 'b' }).toArray()  // => ['a', 'b']\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"fromobjectvalues"}),(0,t.yg)("inlineCode",{parentName:"h3"},"fromObjectValues")),(0,t.yg)("p",null,"Returns a Stream consisting of the object values from the given ",(0,t.yg)("inlineCode",{parentName:"p"},"obj")," object.")),(0,t.yg)("h4",o({},{id:"definition-6"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"fromObjectValues<V>(obj: Record<any, V> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," readonly V[]): Stream<V>;"))),(0,t.yg)("h4",o({},{id:"type-parameters-10"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"V"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the object value type")))),(0,t.yg)("h4",o({},{id:"parameters-9"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"obj")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"Record<any, V> "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," readonly V[]")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the source object")))),(0,t.yg)("admonition",o({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"Stream.fromObjectValues({ a: 1, b: 'b' }).toArray()  // => [1, 'b']\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"fromstring"}),(0,t.yg)("inlineCode",{parentName:"h3"},"fromString")),(0,t.yg)("p",null,"Returns a Stream consisting of the characters from given string ",(0,t.yg)("inlineCode",{parentName:"p"},"source"),", taking into account the given options.")),(0,t.yg)("h4",o({},{id:"definitions-4"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"fromString<S extends string>(source: "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/common/StringNonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StringNonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<S>, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"range?: undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"reversed?: boolean;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): Stream.NonEmpty<string>;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"fromString(source: string, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"range?: IndexRange;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"reversed?: boolean;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): Stream<string>;"))),(0,t.yg)("h4",o({},{id:"type-parameters-11"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"S"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"string")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the input string type")))),(0,t.yg)("h4",o({},{id:"parameters-10"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"source")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/common/StringNonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StringNonEmpty")),(0,t.yg)("inlineCode",{parentName:"td"},"<S>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the source string")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"range?: undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"reversed?: boolean;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"(optional) the options used to create the Stream, containing:",(0,t.yg)("br",null)," - range: (optional) a sub index range of the string",(0,t.yg)("br",null)," - reversed: (default: false) if true reverses the order of the Stream")))),(0,t.yg)("admonition",o({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"Stream.fromString('marmot').toArray()                       // => ['m', 'a', 'r', 'm', 'o', 't']\nStream.fromString('marmot', { range: { start: -3 } }).toArray()        // => ['m', 'o', 't']\nStream.fromString('marmot', { range: { amount: 3 }, reversed: true}).toArray()  // => ['r', 'a', 'm']\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"of"}),(0,t.yg)("inlineCode",{parentName:"h3"},"of")),(0,t.yg)("p",null,"Returns a non-empty Stream containing the given ",(0,t.yg)("inlineCode",{parentName:"p"},"values"))),(0,t.yg)("h4",o({},{id:"definition-7"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"of<T>(...values: "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>): Stream.NonEmpty<T>;"))),(0,t.yg)("h4",o({},{id:"type-parameters-12"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"T"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the Stream element type")))),(0,t.yg)("h4",o({},{id:"parameters-11"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"values")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,t.yg)("inlineCode",{parentName:"td"},"<T>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the values the Stream should return")))),(0,t.yg)("admonition",o({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"Stream.of(1, 2, 3).toArray()   // => [1, 2, 3]\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"random"}),(0,t.yg)("inlineCode",{parentName:"h3"},"random")),(0,t.yg)("p",null,"Returns an infinite Stream containing random numbers between 0 and 1.")),(0,t.yg)("h4",o({},{id:"definition-8"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"random(): Stream.NonEmpty<number>;"))),(0,t.yg)("admonition",o({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"Stream.random().take(3).toArray()     // => [0.3243..., 0.19524...., 0.78324...]\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"randomint"}),(0,t.yg)("inlineCode",{parentName:"h3"},"randomInt")),(0,t.yg)("p",null,"Returns an infinite Stream containing random integer numbers between given ",(0,t.yg)("inlineCode",{parentName:"p"},"min")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"max"))),(0,t.yg)("h4",o({},{id:"definition-9"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"randomInt(min: number, max: number): Stream.NonEmpty<number>;"))),(0,t.yg)("h4",o({},{id:"parameters-12"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"min")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"number")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the minimum value")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"max")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"number")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the maximum value")))),(0,t.yg)("admonition",o({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"Stream.randomInt(0, 10).take(3).toArray()    // => [4, 9, 3]\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"range"}),(0,t.yg)("inlineCode",{parentName:"h3"},"range")),(0,t.yg)("p",null,"Returns a Stream of numbers within the given ",(0,t.yg)("inlineCode",{parentName:"p"},"range"),", increasing or decreasing with optionally given ",(0,t.yg)("inlineCode",{parentName:"p"},"delta"),".")),(0,t.yg)("h4",o({},{id:"definition-10"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"range(range: IndexRange, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"delta?: number;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): Stream<number>;"))),(0,t.yg)("h4",o({},{id:"parameters-13"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"range")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"IndexRange")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the range of numbers the Stream can contain")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"delta?: number;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the options used to create the Stream, containing:",(0,t.yg)("br",null)," - delta: (default: 1) the difference between a number and the next returned number")))),(0,t.yg)("admonition",o({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"Stream.range({ amount: 3 }).toArray()              // => [0, 1, 2]\nStream.range({ start: 2, amount: 3 }).toArray()    // => [2, 3, 4]\nStream.range({ start: 5 }, { delta: 2 }).toArray()            // => [5, 7, 9, .... ]\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"unfold"}),(0,t.yg)("inlineCode",{parentName:"h3"},"unfold")),(0,t.yg)("p",null,"Returns a possibly infinite Stream starting with given ",(0,t.yg)("inlineCode",{parentName:"p"},"init")," value, followed by applying given ",(0,t.yg)("inlineCode",{parentName:"p"},"next")," function to the previous value.")),(0,t.yg)("h4",o({},{id:"definition-11"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"unfold<T>(init: T, next: (current: T, index: number, stop: Token) => T "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," Token): Stream.NonEmpty<T>;"))),(0,t.yg)("h4",o({},{id:"type-parameters-13"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"T"),(0,t.yg)("td",o({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",o({},{id:"parameters-14"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"init")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"T")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"an initial value")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"next")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(current: T, index: number, stop: Token) => T "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," Token")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"a function taking the last value, its index, and a stop token, and returning a new value or a stop token")))),(0,t.yg)("admonition",o({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"Stream.unfold(2, v => v * v).take(4).toArray()   // => [2, 4, 16, 256]\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"unzip"}),(0,t.yg)("inlineCode",{parentName:"h3"},"unzip")),(0,t.yg)("p",null,"Returns an array containing a Stream for each tuple element in this stream.")),(0,t.yg)("h4",o({},{id:"definitions-5"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"unzip<T extends readonly unknown[] & {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"length: L;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}, L extends number>(source: Stream.NonEmpty<T>, options: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"length: L;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"[K in keyof T]: Stream.NonEmpty<T[K]>;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"};"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"unzip<T extends readonly unknown[] & {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"length: L;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}, L extends number>(source: Stream<T>, options: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"length: L;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"[K in keyof T]: Stream<T[K]>;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"};"))),(0,t.yg)("h4",o({},{id:"type-parameters-14"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"T"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"readonly unknown[] & {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"length: L;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",o({parentName:"tr"},{align:null}))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"L"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"number")),(0,t.yg)("td",o({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",o({},{id:"parameters-15"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"source")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"Stream.NonEmpty<T>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"length: L;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the options used to create the result, containing:",(0,t.yg)("br",null)," - length: the stream element tuple length")))),(0,t.yg)("admonition",o({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"const [a, b] = Stream.unzip(Stream.of([[1, 'a'], [2, 'b']]), 2)\na.toArray()   // => [1, 2]\nb.toArray()   // => ['a', 'b']\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"zip"}),(0,t.yg)("inlineCode",{parentName:"h3"},"zip")),(0,t.yg)("p",null,"Returns a Stream with tuples containing each successive value from the given ",(0,t.yg)("inlineCode",{parentName:"p"},"sources"),".")),(0,t.yg)("h4",o({},{id:"definitions-6"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"zip<I extends readonly [unknown, ...unknown[]]>(...sources: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"[K in keyof I]: StreamSource.NonEmpty<I[K]>;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"} & unknown[]): Stream.NonEmpty<I>;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"zip<I extends readonly [unknown, ...unknown[]]>(...sources: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"[K in keyof I]: StreamSource<I[K]>;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"} & unknown[]): Stream<I>;"))),(0,t.yg)("h4",o({},{id:"type-parameters-15"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"I"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"readonly [unknown, ...unknown[]]")),(0,t.yg)("td",o({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",o({},{id:"parameters-16"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"sources")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"[K in keyof I]: StreamSource.NonEmpty<I[K]>;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"} & unknown[]")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the input stream sources")))),(0,t.yg)("admonition",o({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"Stream.zip([1, 2, 3], [4, 5], ['a', 'b', 'c']).toArray()    // => [[1, 4, 'a'], [2, 5, 'b']]\n"))),(0,t.yg)("admonition",o({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"ends the Stream when any of the given streams ends"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"zipall"}),(0,t.yg)("inlineCode",{parentName:"h3"},"zipAll")),(0,t.yg)("p",null,"Returns a Stream with tuples containing each successive value from the given ",(0,t.yg)("inlineCode",{parentName:"p"},"sources"),", adding given ",(0,t.yg)("inlineCode",{parentName:"p"},"fillValue")," to any Streams that end before all streams have ended.")),(0,t.yg)("h4",o({},{id:"definitions-7"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"zipAll<I extends readonly [unknown, ...unknown[]], O>(fillValue: "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,t.yg)("inlineCode",{parentName:"p"},"<O>, ...sources: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"[K in keyof I]: StreamSource.NonEmpty<I[K]>;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"} & unknown[]): Stream.NonEmpty<{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"[K in keyof I]: I[K] "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," O;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}>;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"zipAll<I extends readonly [unknown, ...unknown[]], O>(fillValue: "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,t.yg)("inlineCode",{parentName:"p"},"<O>, ...sources: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"[K in keyof I]: StreamSource<I[K]>;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"} & unknown[]): Stream<{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"[K in keyof I]: I[K] "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," O;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}>;"))),(0,t.yg)("h4",o({},{id:"type-parameters-16"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"I"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"readonly [unknown, ...unknown[]]")),(0,t.yg)("td",o({parentName:"tr"},{align:null}))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"O"),(0,t.yg)("td",o({parentName:"tr"},{align:null})),(0,t.yg)("td",o({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",o({},{id:"parameters-17"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"fillValue")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/common/OptLazy/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,t.yg)("inlineCode",{parentName:"td"},"<O>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the value to add to streams that end early")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"sources")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"[K in keyof I]: StreamSource.NonEmpty<I[K]>;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"} & unknown[]")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the input stream sources")))),(0,t.yg)("admonition",o({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"Stream.zipAll(\n0,\n[1, 2, 3],\n[4, 5],\n['a', 'b', 'c']\n).toArray()\n// => [[1, 4, 'a'], [2, 5, 'b'], [3, 0, 'c']]\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"zipallwith"}),(0,t.yg)("inlineCode",{parentName:"h3"},"zipAllWith")),(0,t.yg)("p",null,"Returns a Stream with the result of applying given ",(0,t.yg)("inlineCode",{parentName:"p"},"zipFun")," to each successive value resulting from the given ",(0,t.yg)("inlineCode",{parentName:"p"},"sources"),", adding given ",(0,t.yg)("inlineCode",{parentName:"p"},"fillValue")," to any Streams that end before all streams have ended.")),(0,t.yg)("h4",o({},{id:"definitions-8"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"zipAllWith<I extends readonly [unknown, ...unknown[]]>(...sources: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"[K in keyof I]: StreamSource.NonEmpty<I[K]>;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"} & unknown[]): <O, R>(fillValue: "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,t.yg)("inlineCode",{parentName:"p"},"<O>, zipFun: (...values: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"[K in keyof I]: I[K] "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," O;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}) => R) => Stream.NonEmpty<R>;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"zipAllWith<I extends readonly [unknown, ...unknown[]]>(...sources: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"[K in keyof I]: StreamSource<I[K]>;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"} & unknown[]): <O, R>(fillValue: "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,t.yg)("inlineCode",{parentName:"p"},"<O>, zipFun: (...values: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"[K in keyof I]: I[K] "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," O;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}) => R) => Stream<R>;"))),(0,t.yg)("h4",o({},{id:"type-parameters-17"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"I"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"readonly [unknown, ...unknown[]]")),(0,t.yg)("td",o({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",o({},{id:"parameters-18"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"sources")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"[K in keyof I]: StreamSource.NonEmpty<I[K]>;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"} & unknown[]")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the input stream sources")))),(0,t.yg)("admonition",o({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"Stream.zipAllWith(\n[1, 2],\n[3, 4, 5],\n[6, 7]\n)(\n0,\n(a, b, c) => a + b + c,\n).toArray()\n// => [10, 13, 5]\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"zipwith"}),(0,t.yg)("inlineCode",{parentName:"h3"},"zipWith")),(0,t.yg)("p",null,"Returns a Stream with the result of applying given ",(0,t.yg)("inlineCode",{parentName:"p"},"zipFun")," to each successive value resulting from the given ",(0,t.yg)("inlineCode",{parentName:"p"},"sources"),".")),(0,t.yg)("h4",o({},{id:"definitions-9"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"zipWith<I extends readonly [unknown, ...unknown[]]>(...sources: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"[K in keyof I]: StreamSource.NonEmpty<I[K]>;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"} & unknown[]): <R>(zipFun: (...values: I) => R) => Stream.NonEmpty<R>;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"zipWith<I extends readonly [unknown, ...unknown[]]>(...sources: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"[K in keyof I]: StreamSource<I[K]>;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"} & unknown[]): <R>(zipFun: (...values: I) => R) => Stream<R>;"))),(0,t.yg)("h4",o({},{id:"type-parameters-18"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"I"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"readonly [unknown, ...unknown[]]")),(0,t.yg)("td",o({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",o({},{id:"parameters-19"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"sources")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"[K in keyof I]: StreamSource.NonEmpty<I[K]>;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"} & unknown[]")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the input stream sources")))),(0,t.yg)("admonition",o({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"Stream.zipWith(\n[1, 2],\n[3, 4, 5],\n[true, false]\n)(\n(a, b, c) => c ? a + b : a - b\n).toArray()\n// => [4, -2]\n"))),(0,t.yg)("admonition",o({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"ends the Stream when any of the given streams ends"))))}v.isMDXComponent=!0}}]);