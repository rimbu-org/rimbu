"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[13099],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>k});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),d=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=d(e.components);return a.createElement(p.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},s=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=d(t),s=r,k=m["".concat(p,".").concat(s)]||m[s]||c[s]||l;return t?a.createElement(k,i(i({ref:n},u),{},{components:t})):a.createElement(k,i({ref:n},u))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=s;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[m]="string"==typeof e?e:r,i[1]=o;for(var d=2;d<l;d++)i[d]=t[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}s.displayName="MDXCreateElement"},9512:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>b,contentTitle:()=>h,default:()=>C,frontMatter:()=>k,metadata:()=>f,toc:()=>y});var a=t(3905),r=Object.defineProperty,l=Object.defineProperties,i=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,d=Object.prototype.propertyIsEnumerable,u=(e,n,t)=>n in e?r(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,m=(e,n)=>{for(var t in n||(n={}))p.call(n,t)&&u(e,t,n[t]);if(o)for(var t of o(n))d.call(n,t)&&u(e,t,n[t]);return e},c=(e,n)=>l(e,i(n)),s=(e,n)=>{var t={};for(var a in e)p.call(e,a)&&n.indexOf(a)<0&&(t[a]=e[a]);if(null!=e&&o)for(var a of o(e))n.indexOf(a)<0&&d.call(e,a)&&(t[a]=e[a]);return t};const k={title:"Channel.Read<T>",slug:"/rimbu/channel/Channel/Read/interface"},h="interface Channel.Read<T>",f={unversionedId:"rimbu_channel/Channel/Read.interface",id:"rimbu_channel/Channel/Read.interface",title:"Channel.Read<T>",description:"A read-only Channel that can perform blocking reads. This means that a receive call will block until a message is available.",source:"@site/api/rimbu_channel/Channel/Read.interface.mdx",sourceDirName:"rimbu_channel/Channel",slug:"/rimbu/channel/Channel/Read/interface",permalink:"/api/rimbu/channel/Channel/Read/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"Channel.Read<T>",slug:"/rimbu/channel/Channel/Read/interface"},sidebar:"defaultSidebar",previous:{title:"MessageType",permalink:"/api/rimbu/channel/Channel/MessageType/type"},next:{title:"Channel.Write<T>",permalink:"/api/rimbu/channel/Channel/Write/interface"}},b={},y=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>capacity</code>",id:"capacity",level:3},{value:"Definition",id:"definition",level:4},{value:"<code>isExhausted</code>",id:"isexhausted",level:3},{value:"Definition",id:"definition-1",level:4},{value:"<code>length</code>",id:"length",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Methods",id:"methods",level:2},{value:"<code>asyncStream</code>",id:"asyncstream",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Overrides",id:"overrides",level:4},{value:"<code>readable</code>",id:"readable",level:3},{value:"Definition",id:"definition-4",level:4},{value:"<code>receive</code>",id:"receive",level:3},{value:"Definitions",id:"definitions",level:4},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters",level:4}],v={toc:y},N="wrapper";function C(e){var n=e,{components:t}=n,r=s(n,["components"]);return(0,a.kt)(N,c(m(m({},v),r),{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",m({},{id:"interface-channelreadt"}),(0,a.kt)("inlineCode",{parentName:"h1"},"interface Channel.Read<T>")),(0,a.kt)("p",null,"A read-only Channel that can perform blocking reads. This means that a ",(0,a.kt)("inlineCode",{parentName:"p"},"receive")," call will block until a message is available."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Extends:")," ",(0,a.kt)("a",m({parentName:"p"},{href:"/api/rimbu/stream/AsyncStreamable/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStreamable<T>"))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Implemented by:")," ",(0,a.kt)("a",m({parentName:"p"},{href:"/api/rimbu/channel/CrossChannel/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"CrossChannel<TSend,TReceive>")),", ",(0,a.kt)("a",m({parentName:"p"},{href:"/api/rimbu/channel/Channel/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"Channel<T>"))),(0,a.kt)("h2",m({},{id:"type-parameters"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",m({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",m({parentName:"tr"},{align:null}),"Default"),(0,a.kt)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",m({parentName:"tr"},{align:null}),"T"),(0,a.kt)("td",m({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"void")),(0,a.kt)("td",m({parentName:"tr"},{align:null}),"the channel message type")))),(0,a.kt)("h2",m({},{id:"properties"}),"Properties"),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",m({},{id:"capacity"}),(0,a.kt)("inlineCode",{parentName:"h3"},"capacity")),(0,a.kt)("p",null,"The maximum amount of messages the Channel can buffer. If 0, the channel is unbuffered and the communication is synchronous.")),(0,a.kt)("h4",m({},{id:"definition"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"get capacity(): number;")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",m({},{id:"isexhausted"}),(0,a.kt)("inlineCode",{parentName:"h3"},"isExhausted")),(0,a.kt)("p",null,"Returns true if the channel is closed and there are no message in the buffer (length = 0), false otherwise.")),(0,a.kt)("h4",m({},{id:"definition-1"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"get isExhausted(): boolean;")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",m({},{id:"length"}),(0,a.kt)("inlineCode",{parentName:"h3"},"length")),(0,a.kt)("p",null,"The amount of messages currently in the read buffer.")),(0,a.kt)("h4",m({},{id:"definition-2"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"get length(): number;")))),(0,a.kt)("h2",m({},{id:"methods"}),"Methods"),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",m({},{id:"asyncstream"}),(0,a.kt)("inlineCode",{parentName:"h3"},"asyncStream")),(0,a.kt)("p",null,"Returns an asynchronous stream of values.")),(0,a.kt)("h4",m({},{id:"definition-3"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"asyncStream(): "),(0,a.kt)("a",m({parentName:"p"},{href:"/api/rimbu/stream/AsyncStream/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStream")),(0,a.kt)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.kt)("h4",m({},{id:"overrides"}),"Overrides"),(0,a.kt)("p",null,(0,a.kt)("a",m({parentName:"p"},{href:"/api/rimbu/stream/AsyncStreamable/interface#asyncStream"}),"AsyncStreamable.asyncStream"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",m({},{id:"readable"}),(0,a.kt)("inlineCode",{parentName:"h3"},"readable")),(0,a.kt)("p",null,"Returns the Channel as a readonly Channel.Read instance.")),(0,a.kt)("h4",m({},{id:"definition-4"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"readable(): "),(0,a.kt)("a",m({parentName:"p"},{href:"/api/rimbu/channel/Channel/Read/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"Channel.Read")),(0,a.kt)("inlineCode",{parentName:"p"},"<T>;")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",m({},{id:"receive"}),(0,a.kt)("inlineCode",{parentName:"h3"},"receive")),(0,a.kt)("p",null,"Returns the next message sent to the Channel. Blocks if there are no messages.")),(0,a.kt)("h4",m({},{id:"definitions"}),"Definitions"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"receive<RT>(options: {"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"signal?: AbortSignal "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"timeoutMs?: number "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"recover: (channelError: "),(0,a.kt)("a",m({parentName:"p"},{href:"/api/rimbu/channel/Channel/Error/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"Channel.Error")),(0,a.kt)("inlineCode",{parentName:"p"},") => RT;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"}): Promise<T "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," RT>;"))),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"receive(options?: {"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"signal?: AbortSignal "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"timeoutMs?: number "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"recover?: undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"}): Promise<T>;"))),(0,a.kt)("h4",m({},{id:"type-parameters-1"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",m({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",m({parentName:"tr"},{align:null}),"RT"),(0,a.kt)("td",m({parentName:"tr"},{align:null}))))),(0,a.kt)("h4",m({},{id:"parameters"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",m({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",m({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",m({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"options")),(0,a.kt)("td",m({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"{"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"signal?: AbortSignal "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"td"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"timeoutMs?: number "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"td"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"recover: (channelError: "),(0,a.kt)("a",m({parentName:"td"},{href:"/api/rimbu/channel/Channel/Error/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"Channel.Error")),(0,a.kt)("inlineCode",{parentName:"td"},") => RT;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"}")),(0,a.kt)("td",m({parentName:"tr"},{align:null}),"(optional) the options to receive a message",(0,a.kt)("br",null)," - signal: (optional) an abort signal to cancel receiving",(0,a.kt)("br",null)," - timeoutMs: (optional) amount of milliseconds to wait for received message",(0,a.kt)("br",null)," - recover: (optional) a function that can be supplied to recover from a channel error"))))))}C.isMDXComponent=!0}}]);