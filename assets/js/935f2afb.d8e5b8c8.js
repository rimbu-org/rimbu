"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[98581],{35610:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"sidebar":[{"type":"link","label":"Introduction","href":"/docs/","docId":"main"},{"type":"link","label":"Getting Started","href":"/docs/getting-started","docId":"getting-started"},{"type":"link","label":"Basic Concepts","href":"/docs/basic-concepts","docId":"basic-concepts"},{"type":"category","label":"Collections","collapsible":true,"collapsed":false,"items":[{"type":"category","label":"Graph","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Arrow Graph","href":"/docs/collections/graph/arrow-graph","docId":"collections/graph/arrow-graph"},{"type":"link","label":"Arrow Valued Graph","href":"/docs/collections/graph/arrow-valued-graph","docId":"collections/graph/arrow-valued-graph"},{"type":"link","label":"Edge Graph","href":"/docs/collections/graph/edge-graph","docId":"collections/graph/edge-graph"},{"type":"link","label":"Edge Valued Graph","href":"/docs/collections/graph/edge-valued-graph","docId":"collections/graph/edge-valued-graph"}],"href":"/docs/collections/graph"},{"type":"link","label":"BiMap","href":"/docs/collections/bimap","docId":"collections/bimap"},{"type":"link","label":"BiMultiMap","href":"/docs/collections/bimultimap","docId":"collections/bimultimap"},{"type":"link","label":"List","href":"/docs/collections/list","docId":"collections/list"},{"type":"link","label":"Map","href":"/docs/collections/map","docId":"collections/map"},{"type":"link","label":"MultiMap","href":"/docs/collections/multimap","docId":"collections/multimap"},{"type":"link","label":"MultiSet","href":"/docs/collections/multiset","docId":"collections/multiset"},{"type":"link","label":"Set","href":"/docs/collections/set","docId":"collections/set"},{"type":"link","label":"Stream","href":"/docs/collections/stream","docId":"collections/stream"},{"type":"link","label":"Table","href":"/docs/collections/table","docId":"collections/table"}],"href":"/docs/collections/"},{"type":"category","label":"Immutable Objects","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/docs/deep/overview","docId":"deep/overview"},{"type":"link","label":" ","href":"/docs/deep/immutable/","docId":"deep/immutable/index"},{"type":"link","label":"Deep Match","href":"/docs/deep/match","docId":"deep/deep-match"},{"type":"link","label":"Deep Patch","href":"/docs/deep/patch","docId":"deep/deep-patch"},{"type":"link","label":"Deep Path","href":"/docs/deep/path","docId":"deep/deep-path"},{"type":"link","label":"Protected","href":"/docs/deep/protected","docId":"deep/deep-protected"},{"type":"link","label":"Tuple","href":"/docs/deep/tuple","docId":"deep/deep-tuple"}]},{"type":"category","label":"Advanced Topics","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Collections in-depth","href":"/docs/advanced/in-depth","docId":"advanced/advanced-concepts"},{"type":"link","label":"List Advanced topics","href":"/docs/advanced/list","docId":"advanced/advanced-list"}]}]},"docs":{"advanced/advanced-concepts":{"id":"advanced/advanced-concepts","title":"Collections in-depth","description":"Collection Context","sidebar":"sidebar"},"advanced/advanced-list":{"id":"advanced/advanced-list","title":"List Advanced topics","description":"Implementation details","sidebar":"sidebar"},"basic-concepts":{"id":"basic-concepts","title":"Basic Concepts","description":"TL;DR","sidebar":"sidebar"},"collections/bimap":{"id":"collections/bimap","title":"BiMap","description":"A BiMap is a bidirectional Map of keys and values, where each key has exactly one value, and each value has exactly one key. Furthermore, both keys and values are unique and there is a one-to-one mapping between keys and values.","sidebar":"sidebar"},"collections/bimultimap":{"id":"collections/bimultimap","title":"BiMultiMap","description":"A BiMultiMap is a bidirectional MultiMap of keys and values, where each key-value association also has an inverse value-key association. There is a many-to-many mapping between keys and values.","sidebar":"sidebar"},"collections/collections":{"id":"collections/collections","title":"Immutable collections","description":"Here is a brief overview of the basic Rimbu TypeScript immutable collection types. Many of these types have multiple concrete implementations, see the corresponding links for more information:","sidebar":"sidebar"},"collections/graph/arrow-graph":{"id":"collections/graph/arrow-graph","title":"Arrow Graph","description":"An ArrowGraph is a directed Graph where the edges have no values. This structure is useful for situations in which elements of the same type can have relations to each other. The relation is either there or not there, and is is directed, so A -> B does not imply that B -> A.","sidebar":"sidebar"},"collections/graph/arrow-valued-graph":{"id":"collections/graph/arrow-valued-graph","title":"Arrow Valued Graph","description":"An ArrowValuedGraph is a directed ValuedGraph where the edges have values. This structure is useful for situations in which elements of the same type can have relations to each other, and those relations have some associated value. The relations are directed, so A -> B does not imply that B -> A.","sidebar":"sidebar"},"collections/graph/edge-graph":{"id":"collections/graph/edge-graph","title":"Edge Graph","description":"An EdgeGraph is an undirected Graph where the edges have no values. This structure is useful for situations in which elements of the same type can have relations to each other. The relation is either there or not there. The relation is bidirectional, so A -> B also implies that B -> A.","sidebar":"sidebar"},"collections/graph/edge-valued-graph":{"id":"collections/graph/edge-valued-graph","title":"Edge Valued Graph","description":"An EdgeValuedGraph is an undirected ValuedGraph where the edges have values. This structure is useful for situations in which elements of the same type can have relations to each other, and those relations have some associated value. The relations are bidirectional, so A -> B also implies that B -> A.","sidebar":"sidebar"},"collections/graph/graph":{"id":"collections/graph/graph","title":"Overview","description":"A Graph is a data structure consisting of nodes that can be connected through edges. Each node has a unique value or identifier. Edges can be directed, in which case we will call it an Arrow Graph, or undirected, in which case we will call it an Edge Graph. Furthermore, edges and arrows can also have values, in which case we call it a Valued Graph.","sidebar":"sidebar"},"collections/list":{"id":"collections/list","title":"List","description":"The List is an immutable ordered sequence of elements that can be manipulated and accessed randomly in a relatively efficient way.","sidebar":"sidebar"},"collections/map":{"id":"collections/map","title":"Map","description":"A Map is a collection of entries, where each entry has a key and a value. Each key has exactly one value, and each key is unique. Values do not need to be unique.","sidebar":"sidebar"},"collections/multimap":{"id":"collections/multimap","title":"MultiMap","description":"A Rimbu MultiMap is a Map in which each key has one or more values. For each key, it\'s associated values are unique, that is, the values for each key are kept in a Set.","sidebar":"sidebar"},"collections/multiset":{"id":"collections/multiset","title":"MultiSet","description":"A Rimbu MultiSet is an immutable Set-like structure where each unique element can be added multiple times. Each element in the MultiSet occurs one or more times. The MultiSet keeps track of the amount of times an element was added.","sidebar":"sidebar"},"collections/set":{"id":"collections/set","title":"Set","description":"A Set is an immutable collection of values, where the collection does not contain duplicate values. That is, all values are unique. The way this uniqueness is determined can vary through the specific Set implementation that is chosen.","sidebar":"sidebar"},"collections/stream":{"id":"collections/stream","title":"Stream","description":"A Stream is an Iterable-like structure that represents a source that can stream values when requested. The source is unspecified, it may be a materialized object (e.g. an Array), or a calculated sequence (e.g. the fibonacci numbers). However, unlike an Iterable, a Stream offers many methods to change the values produced by the Stream, before it is consumed, without the need to materialize intermediate instances.","sidebar":"sidebar"},"collections/table":{"id":"collections/table","title":"Table","description":"A Table is an immutable 2-dimensional Map, containing row keys and column keys, where a combination of a row and column key can contain one value.","sidebar":"sidebar"},"deep/deep-match":{"id":"deep/deep-match","title":"Deep Match","description":"Overview","sidebar":"sidebar"},"deep/deep-patch":{"id":"deep/deep-patch","title":"Deep Patch","description":"Overview","sidebar":"sidebar"},"deep/deep-path":{"id":"deep/deep-path","title":"Deep Path","description":"Overview","sidebar":"sidebar"},"deep/deep-protected":{"id":"deep/deep-protected","title":"Protected","description":"TypeScript offers some helper types to prevent users from changing properties in objects. These are mainly the readonly keyword and the Readonly type. However, they require diligence to apply properly:","sidebar":"sidebar"},"deep/deep-tuple":{"id":"deep/deep-tuple","title":"Tuple","description":"A Rimbu Tuple is a normal JS/TypeScript Array with fixed length and element types. It\'s main use is for better type inference in some cases. Also, it contains some utility functions to manipulate tuple contents and create new tuple types by appending or prepending elements in a type-safe way.","sidebar":"sidebar"},"deep/immutable/index":{"id":"deep/immutable/index","title":"index","description":"// This is a redirect to accomodate old references to \'Immutable\', the previous name of \'Protected\'.","sidebar":"sidebar"},"deep/overview":{"id":"deep/overview","title":"Overview","description":"Aside from collections, Rimbu also offers tools to handle plain JS/TypeScript objects as immutable objects. These tools do not actually add functionality or change those plain objects, but use the compiler\'s type checking to offer protection against modifying data in objects.","sidebar":"sidebar"},"getting-started":{"id":"getting-started","title":"Getting Started","description":"CodeSandbox","sidebar":"sidebar"},"main":{"id":"main","title":"Introduction","description":"Rimbu is a TypeScript library focused on immutable, performant, and type-safe collections and other tools. Its main aim is to enable developers to create safe and efficient programs without getting in the way. Inspired by various collection libraries such as Java\'s Guava, Java 8 Collection, and Scala\'s collection library, Rimbu brings together the best ideas from these sources and the Scala community.","sidebar":"sidebar"}}}')}}]);