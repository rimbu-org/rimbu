"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[79885],{15680:(e,a,t)=>{t.d(a,{xA:()=>m,yg:()=>b});var n=t(96540);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=n.createContext({}),p=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},m=function(e){var a=p(e.components);return n.createElement(s.Provider,{value:a},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},h=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=p(t),h=r,b=u["".concat(s,".").concat(h)]||u[h]||c[h]||l;return t?n.createElement(b,o(o({ref:a},m),{},{components:t})):n.createElement(b,o({ref:a},m))}));function b(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=h;var i={};for(var s in a)hasOwnProperty.call(a,s)&&(i[s]=a[s]);i.originalType=e,i[u]="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=t[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}h.displayName="MDXCreateElement"},41925:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>g,contentTitle:()=>y,default:()=>C,frontMatter:()=>b,metadata:()=>f,toc:()=>d});var n=t(15680),r=Object.defineProperty,l=Object.defineProperties,o=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,m=(e,a,t)=>a in e?r(e,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[a]=t,u=(e,a)=>{for(var t in a||(a={}))s.call(a,t)&&m(e,t,a[t]);if(i)for(var t of i(a))p.call(a,t)&&m(e,t,a[t]);return e},c=(e,a)=>l(e,o(a)),h=(e,a)=>{var t={};for(var n in e)s.call(e,n)&&a.indexOf(n)<0&&(t[n]=e[n]);if(null!=e&&i)for(var n of i(e))a.indexOf(n)<0&&p.call(e,n)&&(t[n]=e[n]);return t};const b={title:"HashTableHashColumn<R,C,V>",slug:"/rimbu/table/hash-row/HashTableHashColumn/interface"},y="interface HashTableHashColumn<R,C,V>",f={unversionedId:"rimbu_table/hash-row/HashTableHashColumn.interface",id:"rimbu_table/hash-row/HashTableHashColumn.interface",title:"HashTableHashColumn<R,C,V>",description:"A type-invariant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the Table documentation and the HashTableHashColumn API documentation",source:"@site/api/rimbu_table/hash-row/HashTableHashColumn.interface.mdx",sourceDirName:"rimbu_table/hash-row",slug:"/rimbu/table/hash-row/HashTableHashColumn/interface",permalink:"/api/rimbu/table/hash-row/HashTableHashColumn/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"HashTableHashColumn<R,C,V>",slug:"/rimbu/table/hash-row/HashTableHashColumn/interface"},sidebar:"defaultSidebar",previous:{title:"HashTableHashColumn.Types",permalink:"/api/rimbu/table/hash-row/HashTableHashColumn/Types/interface"},next:{title:"HashTableSortedColumn (namespace)",permalink:"/api/rimbu/table/hash-row/HashTableSortedColumn/namespace"}},g={},d=[{value:"Type parameters",id:"type-parameters",level:2}],H={toc:d},T="wrapper";function C(e){var a=e,{components:t}=a,r=h(a,["components"]);return(0,n.yg)(T,c(u(u({},H),r),{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",u({},{id:"interface-hashtablehashcolumnrcv"}),(0,n.yg)("inlineCode",{parentName:"h1"},"interface HashTableHashColumn<R,C,V>")),(0,n.yg)("p",null,"A type-invariant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the ",(0,n.yg)("a",u({parentName:"p"},{href:"https://rimbu.org/docs/collections/table"}),"Table documentation")," and the ",(0,n.yg)("a",u({parentName:"p"},{href:"https://rimbu.org/api/rimbu/table/hash-row/HashTableHashColumn/interface"}),"HashTableHashColumn API documentation"),"  "),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Companion namespace:")," ",(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/table/hash-row/HashTableHashColumn/namespace"}),"HashTableHashColumn")),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Implemented by:")," ",(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/table/hash-row/HashTableHashColumn/NonEmpty/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"HashTableHashColumn.NonEmpty<R,C,V>"))),(0,n.yg)("h2",u({},{id:"type-parameters"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),"R"),(0,n.yg)("td",u({parentName:"tr"},{align:null}),"the row key type")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),"C"),(0,n.yg)("td",u({parentName:"tr"},{align:null}),"the column key type")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),"V"),(0,n.yg)("td",u({parentName:"tr"},{align:null}),"the value type")))),(0,n.yg)("admonition",u({},{title:"note",type:"note"}),(0,n.yg)("ul",{parentName:"admonition"},(0,n.yg)("li",{parentName:"ul"},"The HashTableHashColumn uses a HashMap to map row keys to column. - The HashTableHashColumn uses HashMaps to map column keys to values."))),(0,n.yg)("admonition",u({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",u({parentName:"pre"},{className:"language-ts"}),"const t1 = HashTableHashColumn.empty<number, string, boolean>()\nconst t2 = HashTableHashColumn.of([1, 'a', true], [2, 'a', false])\n"))))}C.isMDXComponent=!0}}]);