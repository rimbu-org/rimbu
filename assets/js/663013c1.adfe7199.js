"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[8666],{15680:(e,a,n)=>{n.d(a,{xA:()=>y,yg:()=>N});var t=n(96540);function l(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){l(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function p(e,a){if(null==e)return{};var n,t,l=function(e,a){if(null==e)return{};var n,t,l={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(l[n]=e[n]);return l}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var o=t.createContext({}),m=function(e){var a=t.useContext(o),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},y=function(e){var a=m(e.components);return t.createElement(o.Provider,{value:a},e.children)},g="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},u=t.forwardRef((function(e,a){var n=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,y=p(e,["components","mdxType","originalType","parentName"]),g=m(n),u=l,N=g["".concat(o,".").concat(u)]||g[u]||d[u]||r;return n?t.createElement(N,i(i({ref:a},y),{},{components:n})):t.createElement(N,i({ref:a},y))}));function N(e,a){var n=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=u;var p={};for(var o in a)hasOwnProperty.call(a,o)&&(p[o]=a[o]);p.originalType=e,p[g]="string"==typeof e?e:l,i[1]=p;for(var m=2;m<r;m++)i[m]=n[m];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},81810:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>s,default:()=>v,frontMatter:()=>N,metadata:()=>h,toc:()=>b});var t=n(15680),l=Object.defineProperty,r=Object.defineProperties,i=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable,y=(e,a,n)=>a in e?l(e,a,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[a]=n,g=(e,a)=>{for(var n in a||(a={}))o.call(a,n)&&y(e,n,a[n]);if(p)for(var n of p(a))m.call(a,n)&&y(e,n,a[n]);return e},d=(e,a)=>r(e,i(a)),u=(e,a)=>{var n={};for(var t in e)o.call(e,t)&&a.indexOf(t)<0&&(n[t]=e[t]);if(null!=e&&p)for(var t of p(e))a.indexOf(t)<0&&m.call(e,t)&&(n[t]=e[t]);return n};const N={title:"TableBase.Builder<R,C,V,Tp>",slug:"/rimbu/table/custom/TableBase/Builder/interface"},s="interface TableBase.Builder<R,C,V,Tp>",h={unversionedId:"rimbu_table/custom/TableBase/Builder.interface",id:"rimbu_table/custom/TableBase/Builder.interface",title:"TableBase.Builder<R,C,V,Tp>",description:"undocumented",source:"@site/api/rimbu_table/custom/TableBase/Builder.interface.mdx",sourceDirName:"rimbu_table/custom/TableBase",slug:"/rimbu/table/custom/TableBase/Builder/interface",permalink:"/api/rimbu/table/custom/TableBase/Builder/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"TableBase.Builder<R,C,V,Tp>",slug:"/rimbu/table/custom/TableBase/Builder/interface"},sidebar:"defaultSidebar",previous:{title:"TableBase (namespace)",permalink:"/api/rimbu/table/custom/TableBase/namespace"},next:{title:"TableBase.Context<UR,UC,Tp>",permalink:"/api/rimbu/table/custom/TableBase/Context/interface"}},c={},b=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>amountRows</code>",id:"amountrows",level:3},{value:"Definition",id:"definition",level:4},{value:"<code>isEmpty</code>",id:"isempty",level:3},{value:"Definition",id:"definition-1",level:4},{value:"<code>size</code>",id:"size",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Methods",id:"methods",level:2},{value:"<code>addEntries</code>",id:"addentries",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Parameters",id:"parameters",level:4},{value:"<code>addEntry</code>",id:"addentry",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>build</code>",id:"build",level:3},{value:"Definition",id:"definition-5",level:4},{value:"<code>buildMapValues</code>",id:"buildmapvalues",level:3},{value:"Definition",id:"definition-6",level:4},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"<code>forEach</code>",id:"foreach",level:3},{value:"Definition",id:"definition-7",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"<code>get</code>",id:"get",level:3},{value:"Definitions",id:"definitions",level:4},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"<code>getRow</code>",id:"getrow",level:3},{value:"Definition",id:"definition-8",level:4},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"<code>hasRowKey</code>",id:"hasrowkey",level:3},{value:"Definition",id:"definition-9",level:4},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"<code>hasValueAt</code>",id:"hasvalueat",level:3},{value:"Definition",id:"definition-10",level:4},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"<code>modifyAt</code>",id:"modifyat",level:3},{value:"Definition",id:"definition-11",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"<code>remove</code>",id:"remove",level:3},{value:"Definitions",id:"definitions-1",level:4},{value:"Type parameters",id:"type-parameters-6",level:4},{value:"Parameters",id:"parameters-9",level:4},{value:"<code>removeEntries</code>",id:"removeentries",level:3},{value:"Definition",id:"definition-12",level:4},{value:"Type parameters",id:"type-parameters-7",level:4},{value:"Parameters",id:"parameters-10",level:4},{value:"<code>removeRow</code>",id:"removerow",level:3},{value:"Definition",id:"definition-13",level:4},{value:"Type parameters",id:"type-parameters-8",level:4},{value:"Parameters",id:"parameters-11",level:4},{value:"<code>removeRows</code>",id:"removerows",level:3},{value:"Definition",id:"definition-14",level:4},{value:"Type parameters",id:"type-parameters-9",level:4},{value:"Parameters",id:"parameters-12",level:4},{value:"<code>set</code>",id:"set",level:3},{value:"Definition",id:"definition-15",level:4},{value:"Parameters",id:"parameters-13",level:4},{value:"<code>updateAt</code>",id:"updateat",level:3},{value:"Definitions",id:"definitions-2",level:4},{value:"Parameters",id:"parameters-14",level:4}],C={toc:b},f="wrapper";function v(e){var a=e,{components:n}=a,l=u(a,["components"]);return(0,t.yg)(f,d(g(g({},C),l),{components:n,mdxType:"MDXLayout"}),(0,t.yg)("h1",g({},{id:"interface-tablebasebuilderrcvtp"}),(0,t.yg)("inlineCode",{parentName:"h1"},"interface TableBase.Builder<R,C,V,Tp>")),(0,t.yg)("p",null,"undocumented"),(0,t.yg)("h2",g({},{id:"type-parameters"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"R"),(0,t.yg)("td",g({parentName:"tr"},{align:null})),(0,t.yg)("td",g({parentName:"tr"},{align:null})),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"undocumented")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"C"),(0,t.yg)("td",g({parentName:"tr"},{align:null})),(0,t.yg)("td",g({parentName:"tr"},{align:null})),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"undocumented")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"V"),(0,t.yg)("td",g({parentName:"tr"},{align:null})),(0,t.yg)("td",g({parentName:"tr"},{align:null})),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"undocumented")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"Tp"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/table/custom/TableBase/Types/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"TableBase.Types"))),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/table/custom/TableBase/Types/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"TableBase.Types"))),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"undocumented")))),(0,t.yg)("h2",g({},{id:"properties"}),"Properties"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"amountrows"}),(0,t.yg)("inlineCode",{parentName:"h3"},"amountRows")),(0,t.yg)("p",null,"Returns the amount of rows in the builder.")),(0,t.yg)("h4",g({},{id:"definition"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly amountRows: number;"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashTableHashColumn.of([1, 2, 3], [1, 4, 5], [2, 3, 5])\n.toBuilder()\n.amountRows\n// => 2\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"isempty"}),(0,t.yg)("inlineCode",{parentName:"h3"},"isEmpty")),(0,t.yg)("p",null,"Returns true if there are no entries in the builder.")),(0,t.yg)("h4",g({},{id:"definition-1"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly isEmpty: boolean;"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashTableHashColumn.of([1, 2, 3], [1, 4, 5], [2, 3, 5])\n.toBuilder()\n.isEmpty\n// => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"size"}),(0,t.yg)("inlineCode",{parentName:"h3"},"size")),(0,t.yg)("p",null,"Returns the amount of entries in the builder.")),(0,t.yg)("h4",g({},{id:"definition-2"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly size: number;"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashTableHashColumn.of([1, 2, 3], [1, 4, 5], [2, 3, 5])\n.toBuilder()\n.size\n// => 3\n")))),(0,t.yg)("h2",g({},{id:"methods"}),"Methods"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"addentries"}),(0,t.yg)("inlineCode",{parentName:"h3"},"addEntries")),(0,t.yg)("p",null,"Adds the given ",(0,t.yg)("inlineCode",{parentName:"p"},"entries")," to the builder.")),(0,t.yg)("h4",g({},{id:"definition-3"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"addEntries(entries: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<readonly [R, C, V]>): boolean;"))),(0,t.yg)("h4",g({},{id:"parameters"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"entries")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<readonly [R, C, V]>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const t = HashTableHashColumn.of([1, 2, 3], [1, 4, 5]).toBuilder()\nt.addEntries([[1, 2, 3], [1, 2, 3]])  // => false\nt.addEntries([[1, 2, 3], [2, 3, 4]])  // => true\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"addentry"}),(0,t.yg)("inlineCode",{parentName:"h3"},"addEntry")),(0,t.yg)("p",null,"Adds the given ",(0,t.yg)("inlineCode",{parentName:"p"},"entry")," to the builder.")),(0,t.yg)("h4",g({},{id:"definition-4"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"addEntry(entry: readonly [R, C, V]): boolean;"))),(0,t.yg)("h4",g({},{id:"parameters-1"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"entry")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"readonly [R, C, V]")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const t = HashTableHashColumn.of([1, 2, 3], [1, 4, 5]).toBuilder()\nt.addEntry([1, 2, 3])   // => false\nt.addEntry([1, 3, 8])   // => true\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"build"}),(0,t.yg)("inlineCode",{parentName:"h3"},"build")),(0,t.yg)("p",null,"Returns an immutable collection instance containing the entries in this builder.")),(0,t.yg)("h4",g({},{id:"definition-5"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"build(): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithRow/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithRow")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, R, C, V>['normal'];"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const m = HashTableHashColumn.of([1, 2, 3], [1, 4, 5]).toBuilder()\nconst m2: HashTableHashColumn<number, number, number> = m.build()\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"buildmapvalues"}),(0,t.yg)("inlineCode",{parentName:"h3"},"buildMapValues")),(0,t.yg)("p",null,"Returns an immutable collection instance containing the entries in this builder.")),(0,t.yg)("h4",g({},{id:"definition-6"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"buildMapValues<V2>(mapFun: (value: V, row: R, column: C) => V2): (Tp & "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/Row/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Row")),(0,t.yg)("inlineCode",{parentName:"p"},"<R, C, V2>)['normal'];"))),(0,t.yg)("h4",g({},{id:"type-parameters-1"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"V2"),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",g({},{id:"parameters-2"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"mapFun")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(value: V, row: R, column: C) => V2")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"a function receiving the ",(0,t.yg)("inlineCode",{parentName:"td"},"value"),", ",(0,t.yg)("inlineCode",{parentName:"td"},"row")," and ",(0,t.yg)("inlineCode",{parentName:"td"},"column"),", and returning a new value")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const m = HashTableHashColumn.of([1, 2, 3], [1, 4, 5]).toBuilder()\nconst m2: HashTableHashColumn<number, number, boolean> = m.buildMapValues(v => v > 3)\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"foreach"}),(0,t.yg)("inlineCode",{parentName:"h3"},"forEach")),(0,t.yg)("p",null,"Performs given function ",(0,t.yg)("inlineCode",{parentName:"p"},"f")," for each entry of the collection, using given ",(0,t.yg)("inlineCode",{parentName:"p"},"state")," as initial traversal state.")),(0,t.yg)("h4",g({},{id:"definition-7"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"forEach(f: (entry: [R, C, V], index: number, halt: () => void) => void, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"state?: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/TraverseState/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"TraverseState")),(0,t.yg)("inlineCode",{parentName:"p"},";"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): void;"))),(0,t.yg)("h4",g({},{id:"parameters-3"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"f")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(entry: [R, C, V], index: number, halt: () => void) => void")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the function to perform for each entry, receiving:",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"entry"),": the next tuple of a row key, column key, and value",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"index"),": the index of the element",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"halt"),": a function that, if called, ensures that no new elements are passed")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"state?: "),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/TraverseState/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"TraverseState")),(0,t.yg)("inlineCode",{parentName:"td"},";"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"object containing the following",(0,t.yg)("br",null)," - state: (optional) the traverse state")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashTableHashColumn.of([1, 2, 3], [1, 4, 5], [2, 3, 5])\n.toBuilder()\n.forEach((entry, i, halt) => {\nconsole.log([entry]);\nif (i >= 1) halt();\n})\n// => logs [1, 2, 3]  [1, 4, 5]\n"))),(0,t.yg)("admonition",g({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N)"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"get"}),(0,t.yg)("inlineCode",{parentName:"h3"},"get")),(0,t.yg)("p",null,"Returns the value at given ",(0,t.yg)("inlineCode",{parentName:"p"},"row")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"column")," keys, or the ",(0,t.yg)("inlineCode",{parentName:"p"},"otherwise")," value if no value is present.")),(0,t.yg)("h4",g({},{id:"definitions"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"get<UR = R, UC = C>(row: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<R, UR>, column: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<C, UC>): V "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"get<UR, UC, O>(row: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<R, UR>, column: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<C, UC>, otherwise: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,t.yg)("inlineCode",{parentName:"p"},"<O>): V "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," O;"))),(0,t.yg)("h4",g({},{id:"type-parameters-2"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"UR"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"R")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"UC"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"C")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",g({},{id:"parameters-4"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"row")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<R, UR>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the row key")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"column")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<C, UC>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the column key")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const t = HashTableHashColumn.of([1, 2, 3], [1, 4, 5]).toBuilder()\nt.get(10, 1)     // => undefined\nt.get(10, 1, 0)  // => 0\nt.get(1, 2)      // => 3\nt.get(1, 2, 0)   // => 3\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"getrow"}),(0,t.yg)("inlineCode",{parentName:"h3"},"getRow")),(0,t.yg)("p",null,"Returns a map containing the column keys and values in the given ",(0,t.yg)("inlineCode",{parentName:"p"},"row"),".")),(0,t.yg)("h4",g({},{id:"definition-8"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"getRow<UR = R>(row: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<R, UR>): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithRow/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithRow")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, R, C, V>['row'];"))),(0,t.yg)("h4",g({},{id:"type-parameters-3"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"UR"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"R")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",g({},{id:"parameters-5"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"row")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<R, UR>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the row key")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const t = HashTableHashColumn.of([1, 2, 3], [1, 4, 5]).toBuilder()\nt.getRow(10).toArray()    // => []\nt.getRow(1).toArray()     // => [[2, 3], [4, 5]]\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"hasrowkey"}),(0,t.yg)("inlineCode",{parentName:"h3"},"hasRowKey")),(0,t.yg)("p",null,"Returns true if given ",(0,t.yg)("inlineCode",{parentName:"p"},"row")," key is in the builder.")),(0,t.yg)("h4",g({},{id:"definition-9"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"hasRowKey<UR = R>(row: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<R, UR>): boolean;"))),(0,t.yg)("h4",g({},{id:"type-parameters-4"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"UR"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"R")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",g({},{id:"parameters-6"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"row")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<R, UR>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the row key to look for")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const t = HashTableHashColumn.of([1, 2, 3], [1, 4, 5]).toBuilder()\nt.hasRowKey(10)    // => false\nt.hasRowKey(1)     // => true\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"hasvalueat"}),(0,t.yg)("inlineCode",{parentName:"h3"},"hasValueAt")),(0,t.yg)("p",null,"Returns true if the builder has a value for given ",(0,t.yg)("inlineCode",{parentName:"p"},"row")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"column")," keys.")),(0,t.yg)("h4",g({},{id:"definition-10"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"hasValueAt<UR = R, UC = C>(row: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<R, UR>, column: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<C, UC>): boolean;"))),(0,t.yg)("h4",g({},{id:"type-parameters-5"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"UR"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"R")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"UC"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"C")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",g({},{id:"parameters-7"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"row")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<R, UR>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the row key")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"column")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<C, UC>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the column key")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const t = HashTableHashColumn.of([1, 2, 3], [1, 4, 5]).toBuilder()\nt.hasValueAt(10, 1)    // => false\nt.hasValueAt(1, 4)     // => true\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"modifyat"}),(0,t.yg)("inlineCode",{parentName:"h3"},"modifyAt")),(0,t.yg)("p",null,"Modifies the value at given ",(0,t.yg)("inlineCode",{parentName:"p"},"row")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"column")," keys according to given ",(0,t.yg)("inlineCode",{parentName:"p"},"options"),".")),(0,t.yg)("h4",g({},{id:"definition-11"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"modifyAt(row: R, column: C, options: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"ifNew?: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/OptLazyOr/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazyOr")),(0,t.yg)("inlineCode",{parentName:"p"},"<V, Token>;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"ifExists?: (currentValue: V, remove: Token) => V "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"},"Token"),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," V;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): boolean;"))),(0,t.yg)("h4",g({},{id:"parameters-8"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"row")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"R")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the row key")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"column")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"C")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the column key")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"ifNew?: "),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/OptLazyOr/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazyOr")),(0,t.yg)("inlineCode",{parentName:"td"},"<V, Token>;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"ifExists?: (currentValue: V, remove: Token) => V "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"},"Token"),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," V;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const t = HashTableHashColumn.of([1, 2, 3], [1, 4, 5]).toBuilder()\nt.modifyAt(2, 5, { ifNew: 8 })\n// => true\nt.modifyAt(2, 6, { ifNew: (none) => 1 < 2 ? none : 8 })\n// => false\nt.modifyAt(1, 2, { ifExists: (v) => v * 2 })\n// => true\nt.modifyAt(1, 2, { ifExists: (v, remove) => remove })\n// => true\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"remove"}),(0,t.yg)("inlineCode",{parentName:"h3"},"remove")),(0,t.yg)("p",null,"Remove the value at given ",(0,t.yg)("inlineCode",{parentName:"p"},"row")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"column")," keys in the builder.")),(0,t.yg)("h4",g({},{id:"definitions-1"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"remove<UR = R, UC = C>(row: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<R, UR>, column: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<C, UC>): V "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"remove<UR, UC, O>(row: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<R, UR>, column: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<C, UC>, otherwise: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,t.yg)("inlineCode",{parentName:"p"},"<O>): V "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," O;"))),(0,t.yg)("h4",g({},{id:"type-parameters-6"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"UR"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"R")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"UC"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"C")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",g({},{id:"parameters-9"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"row")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<R, UR>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the row key")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"column")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<C, UC>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the column key")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const t = HashTableHashColumn.of([1, 2, 3], [1, 4, 5]).toBuilder()\nt.remove(5, 6)        // => undefined\nt.remove(5, 6, 'a')   // => 'a'\nt.remove(1, 2)        // => 3\nt.remove(1, 4, 'a')   // => 5\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"removeentries"}),(0,t.yg)("inlineCode",{parentName:"h3"},"removeEntries")),(0,t.yg)("p",null,"Removes all given ",(0,t.yg)("inlineCode",{parentName:"p"},"entries")," from the builder.")),(0,t.yg)("h4",g({},{id:"definition-12"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"removeEntries<UR = R, UC = C>(entries: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<["),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<R, UR>, "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<C, UC>]>): boolean;"))),(0,t.yg)("h4",g({},{id:"type-parameters-7"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"UR"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"R")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"UC"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"C")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",g({},{id:"parameters-10"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"entries")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<["),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<R, UR>, "),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<C, UC>]>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const t = HashTableHashColumn.of([1, 2, 3], [1, 4, 5], [2, 3, 5]).toBuilder()\nt.removeEntries([[7, 8, 9], [9, 8, 7]])  // => false\nt.removeEntries([[7, 8, 9], [1, 2, 3]])  // => true\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"removerow"}),(0,t.yg)("inlineCode",{parentName:"h3"},"removeRow")),(0,t.yg)("p",null,"Removes all values in the given ",(0,t.yg)("inlineCode",{parentName:"p"},"row")," from the builder.")),(0,t.yg)("h4",g({},{id:"definition-13"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"removeRow<UR = R>(row: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<R, UR>): boolean;"))),(0,t.yg)("h4",g({},{id:"type-parameters-8"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"UR"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"R")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",g({},{id:"parameters-11"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"row")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<R, UR>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const t = HashTableHashColumn.of([1, 2, 3], [1, 4, 5], [2, 3, 5]).toBuilder()\nt.removeRow(5)   // => false\nt.removeRow(1)   // => true\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"removerows"}),(0,t.yg)("inlineCode",{parentName:"h3"},"removeRows")),(0,t.yg)("p",null,"Removes all given ",(0,t.yg)("inlineCode",{parentName:"p"},"rows")," from the builder.")),(0,t.yg)("h4",g({},{id:"definition-14"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"removeRows<UR = R>(rows: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<"),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<R, UR>>): boolean;"))),(0,t.yg)("h4",g({},{id:"type-parameters-9"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"UR"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"R")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",g({},{id:"parameters-12"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"rows")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<"),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<R, UR>>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const t = HashTableHashColumn.of([1, 2, 3], [1, 4, 5], [2, 3, 5]).toBuilder()\nt.removeRows([10, 11])  // => false\nt.removeRows([1, 10])   // => true\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"set"}),(0,t.yg)("inlineCode",{parentName:"h3"},"set")),(0,t.yg)("p",null,"Sets the given ",(0,t.yg)("inlineCode",{parentName:"p"},"value")," for the given ",(0,t.yg)("inlineCode",{parentName:"p"},"row")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"column")," keys in the builder.")),(0,t.yg)("h4",g({},{id:"definition-15"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"set(row: R, column: C, value: V): boolean;"))),(0,t.yg)("h4",g({},{id:"parameters-13"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"row")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"R")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the row key")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"column")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"C")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the column key")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"value")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"V")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const t = HashTableHashColumn.of([1, 2, 3], [1, 4, 5]).toBuilder()\nt.set(1, 2, 3)   // => false\nt.set(1, 3, 8)   // => true\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"updateat"}),(0,t.yg)("inlineCode",{parentName:"h3"},"updateAt")),(0,t.yg)("p",null,"Updates the value at given ",(0,t.yg)("inlineCode",{parentName:"p"},"row")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"column")," keys according to the given ",(0,t.yg)("inlineCode",{parentName:"p"},"update")," function.")),(0,t.yg)("h4",g({},{id:"definitions-2"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"updateAt(row: R, column: C, update: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/Update/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Update")),(0,t.yg)("inlineCode",{parentName:"p"},"<V>): V "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"updateAt<O>(row: R, column: C, update: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/Update/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Update")),(0,t.yg)("inlineCode",{parentName:"p"},"<V>, otherwise: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,t.yg)("inlineCode",{parentName:"p"},"<O>): V "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," O;"))),(0,t.yg)("h4",g({},{id:"parameters-14"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"row")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"R")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the row key")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"column")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"C")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the column key")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"update")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/Update/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Update")),(0,t.yg)("inlineCode",{parentName:"td"},"<V>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"a function taking the current value and returning a new value")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const t = HashTableHashColumn.of([1, 2, 3], [1, 4, 5])\nt.updateAt(3, 4, v => v * 2)        // => undefined\nt.updateAt(3, 4, v => v * 2, 'a')   // => 'a'\nt.updateAt(1, 2, v => v * 2)        // => true\nt.updateAt(1, 2, v => v * 2, 'a')   // => true\n")))))}v.isMDXComponent=!0}}]);