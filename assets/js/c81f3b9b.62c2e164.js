"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[71413],{15680:(e,a,t)=>{t.d(a,{xA:()=>y,yg:()=>s});var n=t(96540);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=n.createContext({}),m=function(e){var a=n.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},y=function(e){var a=m(e.components);return n.createElement(p.Provider,{value:a},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},u=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,y=o(e,["components","mdxType","originalType","parentName"]),d=m(t),u=r,s=d["".concat(p,".").concat(u)]||d[u]||g[u]||l;return t?n.createElement(s,i(i({ref:a},y),{},{components:t})):n.createElement(s,i({ref:a},y))}));function s(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=u;var o={};for(var p in a)hasOwnProperty.call(a,p)&&(o[p]=a[p]);o.originalType=e,o[d]="string"==typeof e?e:r,i[1]=o;for(var m=2;m<l;m++)i[m]=t[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},31340:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>b,contentTitle:()=>N,default:()=>v,frontMatter:()=>s,metadata:()=>c,toc:()=>h});var n=t(15680),r=Object.defineProperty,l=Object.defineProperties,i=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable,y=(e,a,t)=>a in e?r(e,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[a]=t,d=(e,a)=>{for(var t in a||(a={}))p.call(a,t)&&y(e,t,a[t]);if(o)for(var t of o(a))m.call(a,t)&&y(e,t,a[t]);return e},g=(e,a)=>l(e,i(a)),u=(e,a)=>{var t={};for(var n in e)p.call(e,n)&&a.indexOf(n)<0&&(t[n]=e[n]);if(null!=e&&o)for(var n of o(e))a.indexOf(n)<0&&m.call(e,n)&&(t[n]=e[n]);return t};const s={title:"HashTableSortedColumn (namespace)",slug:"/rimbu/table/HashTableSortedColumn/namespace"},N="namespace HashTableSortedColumn",c={unversionedId:"rimbu_table/HashTableSortedColumn/index",id:"rimbu_table/HashTableSortedColumn/index",title:"HashTableSortedColumn (namespace)",description:"A type-invariant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the Table documentation and the HashTableSortedColumn API documentation",source:"@site/api/rimbu_table/HashTableSortedColumn/index.mdx",sourceDirName:"rimbu_table/HashTableSortedColumn",slug:"/rimbu/table/HashTableSortedColumn/namespace",permalink:"/api/rimbu/table/HashTableSortedColumn/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"HashTableSortedColumn (namespace)",slug:"/rimbu/table/HashTableSortedColumn/namespace"},sidebar:"defaultSidebar",previous:{title:"HashTableHashColumn<R,C,V>",permalink:"/api/rimbu/table/HashTableHashColumn/interface"},next:{title:"HashTableSortedColumn.Builder<R,C,V>",permalink:"/api/rimbu/table/HashTableSortedColumn/Builder/interface"}},b={},h=[{value:"Interfaces",id:"interfaces",level:2},{value:"Static Methods",id:"static-methods",level:2},{value:"<code>builder</code>",id:"builder",level:3},{value:"Definition",id:"definition",level:4},{value:"Type parameters",id:"type-parameters",level:4},{value:"Overrides",id:"overrides",level:4},{value:"<code>createContext</code>",id:"createcontext",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters",level:4},{value:"<code>defaultContext</code>",id:"defaultcontext",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"<code>empty</code>",id:"empty",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"<code>from</code>",id:"from",level:3},{value:"Definitions",id:"definitions",level:4},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"<code>of</code>",id:"of",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"<code>reducer</code>",id:"reducer",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Type parameters",id:"type-parameters-6",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Overrides",id:"overrides-4",level:4}],C={toc:h},f="wrapper";function v(e){var a=e,{components:t}=a,r=u(a,["components"]);return(0,n.yg)(f,g(d(d({},C),r),{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",d({},{id:"namespace-hashtablesortedcolumn"}),(0,n.yg)("inlineCode",{parentName:"h1"},"namespace HashTableSortedColumn")),(0,n.yg)("p",null,"A type-invariant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the ",(0,n.yg)("a",d({parentName:"p"},{href:"https://rimbu.org/docs/collections/table"}),"Table documentation")," and the ",(0,n.yg)("a",d({parentName:"p"},{href:"https://rimbu.org/api/rimbu/table/hash-row/HashTableSortedColumn/interface"}),"HashTableSortedColumn API documentation"),"  "),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Companion interface:")," ",(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/table/HashTableSortedColumn/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"HashTableSortedColumn<R,C,V>"))),(0,n.yg)("h2",d({},{id:"interfaces"}),"Interfaces"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("a",d({parentName:"td"},{href:"/api/rimbu/table/HashTableSortedColumn/Builder/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"HashTableSortedColumn.Builder<R,C,V>"))),(0,n.yg)("td",d({parentName:"tr"},{align:null}),"undocumented")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("a",d({parentName:"td"},{href:"/api/rimbu/table/HashTableSortedColumn/Context/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"HashTableSortedColumn.Context<UR,UC>"))),(0,n.yg)("td",d({parentName:"tr"},{align:null}),"undocumented")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("a",d({parentName:"td"},{href:"/api/rimbu/table/HashTableSortedColumn/NonEmpty/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"HashTableSortedColumn.NonEmpty<R,C,V>"))),(0,n.yg)("td",d({parentName:"tr"},{align:null}),"A non-empty type-invariant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the ",(0,n.yg)("a",d({parentName:"td"},{href:"https://rimbu.org/docs/collections/table"}),"Table documentation")," and the ",(0,n.yg)("a",d({parentName:"td"},{href:"https://rimbu.org/api/rimbu/table/hash-row/HashTableSortedColumn/interface"}),"HashTableSortedColumn API documentation"))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("a",d({parentName:"td"},{href:"/api/rimbu/table/HashTableSortedColumn/Types/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"HashTableSortedColumn.Types"))),(0,n.yg)("td",d({parentName:"tr"},{align:null}),"Utility interface that provides higher-kinded types for this collection.")))),(0,n.yg)("h2",d({},{id:"static-methods"}),"Static Methods"),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",d({},{id:"builder"}),(0,n.yg)("inlineCode",{parentName:"h3"},"builder")),(0,n.yg)("p",null,"Returns an empty builder instance for this type of collection and context.")),(0,n.yg)("h4",d({},{id:"definition"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"builder<R extends UR, C extends UC, V>(): "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithRow/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithRow")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, R, C, V>['builder'];"))),(0,n.yg)("h4",d({},{id:"type-parameters"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Constraints"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),"R"),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UR")),(0,n.yg)("td",d({parentName:"tr"},{align:null}))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),"C"),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UC")),(0,n.yg)("td",d({parentName:"tr"},{align:null}))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),"V"),(0,n.yg)("td",d({parentName:"tr"},{align:null})),(0,n.yg)("td",d({parentName:"tr"},{align:null}))))),(0,n.yg)("admonition",d({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"HashTableHashColumn.builder<number, string, boolean>()    // => HashTableHashColumn.Builder<number, string, boolean>\n"))),(0,n.yg)("h4",d({},{id:"overrides"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/table/custom/TableBase/Factory/interface#builder"}),"Factory.builder"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",d({},{id:"createcontext"}),(0,n.yg)("inlineCode",{parentName:"h3"},"createContext")),(0,n.yg)("p",null,"Returns a new HashTableSortedColumn context instance based on the given ",(0,n.yg)("inlineCode",{parentName:"p"},"options"),".")),(0,n.yg)("h4",d({},{id:"definition-1"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"createContext<UR, UC>(options?: {"),(0,n.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"p"},"rowContext?: "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/hashed/map/HashMap/Context/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"HashMap.Context")),(0,n.yg)("inlineCode",{parentName:"p"},"<UR>;"),(0,n.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"p"},"columnContext?: "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/sorted/map/SortedMap/Context/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"SortedMap.Context")),(0,n.yg)("inlineCode",{parentName:"p"},"<UC>;"),(0,n.yg)("br",null),"\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"p"},"}): HashTableSortedColumn.Context<UR, UC>;"))),(0,n.yg)("h4",d({},{id:"type-parameters-1"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),"UR"),(0,n.yg)("td",d({parentName:"tr"},{align:null}),"the upper row key type for which the context can create instances")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),"UC"),(0,n.yg)("td",d({parentName:"tr"},{align:null}),"the upper column key type for which the context can create instances")))),(0,n.yg)("h4",d({},{id:"parameters"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"options")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"{"),(0,n.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"td"},"rowContext?: "),(0,n.yg)("a",d({parentName:"td"},{href:"/api/rimbu/hashed/map/HashMap/Context/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"HashMap.Context")),(0,n.yg)("inlineCode",{parentName:"td"},"<UR>;"),(0,n.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"td"},"columnContext?: "),(0,n.yg)("a",d({parentName:"td"},{href:"/api/rimbu/sorted/map/SortedMap/Context/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"SortedMap.Context")),(0,n.yg)("inlineCode",{parentName:"td"},"<UC>;"),(0,n.yg)("br",null),"\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"td"},"}")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,n.yg)("br",null)," - rowContext: (optional) the map context to use to map row keys to columns",(0,n.yg)("br",null)," - columnContext: (optional) the map context to use to map column keys to values"))))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",d({},{id:"defaultcontext"}),(0,n.yg)("inlineCode",{parentName:"h3"},"defaultContext")),(0,n.yg)("p",null,"Returns the default context for HashTableSortedColumns.")),(0,n.yg)("h4",d({},{id:"definition-2"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"defaultContext<UR, UC>(): HashTableSortedColumn.Context<UR, UC>;"))),(0,n.yg)("h4",d({},{id:"type-parameters-2"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),"UR"),(0,n.yg)("td",d({parentName:"tr"},{align:null}),"the upper row key type for which the context can create instances")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),"UC"),(0,n.yg)("td",d({parentName:"tr"},{align:null}),"the upper column key type for which the context can create instances"))))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",d({},{id:"empty"}),(0,n.yg)("inlineCode",{parentName:"h3"},"empty")),(0,n.yg)("p",null,"Returns the (singleton) empty instance of this type and context with given key and value types.")),(0,n.yg)("h4",d({},{id:"definition-3"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"empty<R extends UR, C extends UC, V>(): "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithRow/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithRow")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, R, C, V>['normal'];"))),(0,n.yg)("h4",d({},{id:"type-parameters-3"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Constraints"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),"R"),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UR")),(0,n.yg)("td",d({parentName:"tr"},{align:null}))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),"C"),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UC")),(0,n.yg)("td",d({parentName:"tr"},{align:null}))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),"V"),(0,n.yg)("td",d({parentName:"tr"},{align:null})),(0,n.yg)("td",d({parentName:"tr"},{align:null}))))),(0,n.yg)("admonition",d({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"HashTableHashColumn.empty<number, string, boolean>()    // => HashTableHashColumn<number, string, boolean>\nHashTableHashColumn.empty<string, boolean, number>()    // => HashTableHashColumn<string, boolean, number>\n"))),(0,n.yg)("h4",d({},{id:"overrides-1"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/table/custom/TableBase/Factory/interface#empty"}),"Factory.empty"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",d({},{id:"from"}),(0,n.yg)("inlineCode",{parentName:"h3"},"from")),(0,n.yg)("p",null,"Returns an immutable table of this type and context, containing the entries in the given ",(0,n.yg)("inlineCode",{parentName:"p"},"sources")," ",(0,n.yg)("inlineCode",{parentName:"p"},"StreamSource")," instances.")),(0,n.yg)("h4",d({},{id:"definitions"}),"Definitions"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"from<R extends UR, C extends UC, V>(...sources: "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,n.yg)("inlineCode",{parentName:"p"},"<"),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,n.yg)("inlineCode",{parentName:"p"},"<readonly [R, C, V]>>): "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithRow/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithRow")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, R, C, V>['nonEmpty'];"))),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"from<R extends UR, C extends UC, V>(...sources: "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,n.yg)("inlineCode",{parentName:"p"},"<"),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.yg)("inlineCode",{parentName:"p"},"<readonly [R, C, V]>>): "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithRow/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithRow")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, R, C, V>['normal'];"))),(0,n.yg)("h4",d({},{id:"type-parameters-4"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Constraints"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),"R"),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UR")),(0,n.yg)("td",d({parentName:"tr"},{align:null}))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),"C"),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UC")),(0,n.yg)("td",d({parentName:"tr"},{align:null}))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),"V"),(0,n.yg)("td",d({parentName:"tr"},{align:null})),(0,n.yg)("td",d({parentName:"tr"},{align:null}))))),(0,n.yg)("h4",d({},{id:"parameters-1"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"sources")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,n.yg)("inlineCode",{parentName:"td"},"<"),(0,n.yg)("a",d({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,n.yg)("inlineCode",{parentName:"td"},"<readonly [R, C, V]>>")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),"an array of ",(0,n.yg)("inlineCode",{parentName:"td"},"StreamSource")," instances containing row-column-value entries")))),(0,n.yg)("admonition",d({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"HashTableHashColumn.from([[1, 2, 3], [1, 4, 5]])    // => HashTableHashColumn.NonEmpty<number, number, number>\n"))),(0,n.yg)("h4",d({},{id:"overrides-2"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/table/custom/TableBase/Factory/interface#from"}),"Factory.from"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",d({},{id:"of"}),(0,n.yg)("inlineCode",{parentName:"h3"},"of")),(0,n.yg)("p",null,"Returns an immutable multimap of this collection type and context, containing the given ",(0,n.yg)("inlineCode",{parentName:"p"},"entries"),".")),(0,n.yg)("h4",d({},{id:"definition-4"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"of<R extends UR, C extends UC, V>(...entries: "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,n.yg)("inlineCode",{parentName:"p"},"<readonly [R, C, V]>): "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithRow/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithRow")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, R, C, V>['nonEmpty'];"))),(0,n.yg)("h4",d({},{id:"type-parameters-5"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Constraints"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),"R"),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UR")),(0,n.yg)("td",d({parentName:"tr"},{align:null}))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),"C"),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UC")),(0,n.yg)("td",d({parentName:"tr"},{align:null}))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),"V"),(0,n.yg)("td",d({parentName:"tr"},{align:null})),(0,n.yg)("td",d({parentName:"tr"},{align:null}))))),(0,n.yg)("h4",d({},{id:"parameters-2"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"entries")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,n.yg)("inlineCode",{parentName:"td"},"<readonly [R, C, V]>")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),"a non-empty array of row-column-value entries")))),(0,n.yg)("admonition",d({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"HashTableHashColumn.of([1, 2, 3], [1, 4, 5])    // => HashTableHashColumn.NonEmpty<number, number, number>\n"))),(0,n.yg)("h4",d({},{id:"overrides-3"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/table/custom/TableBase/Factory/interface#of"}),"Factory.of"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",d({},{id:"reducer"}),(0,n.yg)("inlineCode",{parentName:"h3"},"reducer")),(0,n.yg)("p",null,"Returns a ",(0,n.yg)("inlineCode",{parentName:"p"},"Reducer")," that adds received tuples to a Table and returns the Table as a result. When a ",(0,n.yg)("inlineCode",{parentName:"p"},"source")," is given, the reducer will first create a Table from the source, and then add tuples to it.")),(0,n.yg)("h4",d({},{id:"definition-5"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"reducer<R extends UR, C extends UC, V>(source?: "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.yg)("inlineCode",{parentName:"p"},"<readonly [R, C, V]>): Reducer<readonly [R, C, V], "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithRow/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithRow")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, R, C, V>['normal']>;"))),(0,n.yg)("h4",d({},{id:"type-parameters-6"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Constraints"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),"R"),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UR")),(0,n.yg)("td",d({parentName:"tr"},{align:null}))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),"C"),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UC")),(0,n.yg)("td",d({parentName:"tr"},{align:null}))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),"V"),(0,n.yg)("td",d({parentName:"tr"},{align:null})),(0,n.yg)("td",d({parentName:"tr"},{align:null}))))),(0,n.yg)("h4",d({},{id:"parameters-3"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"source")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("a",d({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.yg)("inlineCode",{parentName:"td"},"<readonly [R, C, V]>")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),"(optional) an initial source of tuples to add to")))),(0,n.yg)("admonition",d({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const someSource = Table.of([1, 'a', true], [2, 'b', false]);\nconst result = Stream.of([1, 'c', true], [3, 'a', false]).reduce(Table.reducer(someSource))\nresult.toArray()   // => [[1, 'c'], [2, 'b'], [3, 'a']]\n"))),(0,n.yg)("admonition",d({},{title:"note",type:"note"}),(0,n.yg)("p",{parentName:"admonition"},"uses a builder under the hood. If the given ",(0,n.yg)("inlineCode",{parentName:"p"},"source")," is a Table in the same context, it will directly call ",(0,n.yg)("inlineCode",{parentName:"p"},".toBuilder()"),".")),(0,n.yg)("h4",d({},{id:"overrides-4"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/table/custom/TableBase/Factory/interface#reducer"}),"Factory.reducer"))))}v.isMDXComponent=!0}}]);