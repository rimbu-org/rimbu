"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[4316],{15680:(e,n,t)=>{t.d(n,{xA:()=>y,yg:()=>s});var a=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),m=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},y=function(e){var n=m(e.components);return a.createElement(p.Provider,{value:n},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,y=o(e,["components","mdxType","originalType","parentName"]),d=m(t),u=r,s=d["".concat(p,".").concat(u)]||d[u]||g[u]||l;return t?a.createElement(s,i(i({ref:n},y),{},{components:t})):a.createElement(s,i({ref:n},y))}));function s(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=u;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[d]="string"==typeof e?e:r,i[1]=o;for(var m=2;m<l;m++)i[m]=t[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},58606:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>f,contentTitle:()=>c,default:()=>C,frontMatter:()=>s,metadata:()=>N,toc:()=>h});var a=t(15680),r=Object.defineProperty,l=Object.defineProperties,i=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable,y=(e,n,t)=>n in e?r(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,d=(e,n)=>{for(var t in n||(n={}))p.call(n,t)&&y(e,t,n[t]);if(o)for(var t of o(n))m.call(n,t)&&y(e,t,n[t]);return e},g=(e,n)=>l(e,i(n)),u=(e,n)=>{var t={};for(var a in e)p.call(e,a)&&n.indexOf(a)<0&&(t[a]=e[a]);if(null!=e&&o)for(var a of o(e))n.indexOf(a)<0&&m.call(e,a)&&(t[a]=e[a]);return t};const s={title:"SortedMap.NonEmpty<K,V>",slug:"/rimbu/sorted/SortedMap/NonEmpty/interface"},c="interface SortedMap.NonEmpty<K,V>",N={unversionedId:"rimbu_sorted/SortedMap/NonEmpty.interface",id:"rimbu_sorted/SortedMap/NonEmpty.interface",title:"SortedMap.NonEmpty<K,V>",description:"A non-empty type-invariant immutable Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the Map documentation and the SortedMap API documentation",source:"@site/api/rimbu_sorted/SortedMap/NonEmpty.interface.mdx",sourceDirName:"rimbu_sorted/SortedMap",slug:"/rimbu/sorted/SortedMap/NonEmpty/interface",permalink:"/api/rimbu/sorted/SortedMap/NonEmpty/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"SortedMap.NonEmpty<K,V>",slug:"/rimbu/sorted/SortedMap/NonEmpty/interface"},sidebar:"defaultSidebar",previous:{title:"SortedMap.Context<UK>",permalink:"/api/rimbu/sorted/SortedMap/Context/interface"},next:{title:"SortedMap.Types",permalink:"/api/rimbu/sorted/SortedMap/Types/interface"}},f={},h=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>max</code>",id:"max",level:3},{value:"Definition",id:"definition",level:4},{value:"<code>maxKey</code>",id:"maxkey",level:3},{value:"Definition",id:"definition-1",level:4},{value:"<code>maxValue</code>",id:"maxvalue",level:3},{value:"Definition",id:"definition-2",level:4},{value:"<code>min</code>",id:"min",level:3},{value:"Definition",id:"definition-3",level:4},{value:"<code>minKey</code>",id:"minkey",level:3},{value:"Definition",id:"definition-4",level:4},{value:"<code>minValue</code>",id:"minvalue",level:3},{value:"Definition",id:"definition-5",level:4},{value:"<code>stream</code>",id:"stream",level:3},{value:"Definition",id:"definition-6",level:4},{value:"Parameters",id:"parameters",level:4},{value:"<code>streamKeys</code>",id:"streamkeys",level:3},{value:"Definition",id:"definition-7",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>streamValues</code>",id:"streamvalues",level:3},{value:"Definition",id:"definition-8",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"<code>take</code>",id:"take",level:3},{value:"Definition",id:"definition-9",level:4},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters-3",level:4}],b={toc:h},v="wrapper";function C(e){var n=e,{components:t}=n,r=u(n,["components"]);return(0,a.yg)(v,g(d(d({},b),r),{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",d({},{id:"interface-sortedmapnonemptykv"}),(0,a.yg)("inlineCode",{parentName:"h1"},"interface SortedMap.NonEmpty<K,V>")),(0,a.yg)("p",null,"A non-empty type-invariant immutable Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the ",(0,a.yg)("a",d({parentName:"p"},{href:"https://rimbu.org/docs/collections/map"}),"Map documentation")," and the ",(0,a.yg)("a",d({parentName:"p"},{href:"https://rimbu.org/api/rimbu/sorted/map/SortedMap/interface"}),"SortedMap API documentation"),"  "),(0,a.yg)("h2",d({},{id:"type-parameters"}),"Type parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",d({parentName:"tr"},{align:null}),"K"),(0,a.yg)("td",d({parentName:"tr"},{align:null}),"the key type")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",d({parentName:"tr"},{align:null}),"V"),(0,a.yg)("td",d({parentName:"tr"},{align:null}),"the value type")))),(0,a.yg)("admonition",d({},{title:"note",type:"note"}),(0,a.yg)("ul",{parentName:"admonition"},(0,a.yg)("li",{parentName:"ul"},"The ",(0,a.yg)("inlineCode",{parentName:"li"},"SortedMap")," keeps the inserted keys in sorted order according to the context's ",(0,a.yg)("inlineCode",{parentName:"li"},"comp")," instance."))),(0,a.yg)("admonition",d({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m1 = SortedMap.empty<number, string>()\nconst m2 = SortedMap.of([1, 'a'], [2, 'b'])\n"))),(0,a.yg)("h2",d({},{id:"methods"}),"Methods"),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",d({},{id:"max"}),(0,a.yg)("inlineCode",{parentName:"h3"},"max")),(0,a.yg)("p",null,"Returns the entry with the maximum key of the SortedMap.")),(0,a.yg)("h4",d({},{id:"definition"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"max(): readonly [K, V];"))),(0,a.yg)("admonition",d({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = SortedMap.of(['b', 2], ['d', 4], ['a', 1], ['c', 3]).asNormal();\nconsole.log(m.max())\n// => ['d', 4]\n")))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",d({},{id:"maxkey"}),(0,a.yg)("inlineCode",{parentName:"h3"},"maxKey")),(0,a.yg)("p",null,"Returns the maximum key of the SortedMap.")),(0,a.yg)("h4",d({},{id:"definition-1"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"maxKey(): K;"))),(0,a.yg)("admonition",d({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = SortedMap.of(['b', 2], ['d', 4], ['a', 1], ['c', 3]).asNormal();\nconsole.log(m.maxKey())\n// => 'a'\n")))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",d({},{id:"maxvalue"}),(0,a.yg)("inlineCode",{parentName:"h3"},"maxValue")),(0,a.yg)("p",null,"Returns the value associated with the maximum key of the SortedMap.")),(0,a.yg)("h4",d({},{id:"definition-2"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"maxValue(): V;"))),(0,a.yg)("admonition",d({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = SortedMap.of(['b', 2], ['d', 4], ['a', 1], ['c', 3]).asNormal();\nconsole.log(m.maxValue())\n// => 4\n")))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",d({},{id:"min"}),(0,a.yg)("inlineCode",{parentName:"h3"},"min")),(0,a.yg)("p",null,"Returns the entry with the minimum key of the SortedMap.")),(0,a.yg)("h4",d({},{id:"definition-3"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"min(): readonly [K, V];"))),(0,a.yg)("admonition",d({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = SortedMap.of(['b', 2], ['d', 4], ['a', 1], ['c', 3]);\nconsole.log(m.min())\n// => ['a', 1]\n")))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",d({},{id:"minkey"}),(0,a.yg)("inlineCode",{parentName:"h3"},"minKey")),(0,a.yg)("p",null,"Returns the minimum key of the SortedMap.")),(0,a.yg)("h4",d({},{id:"definition-4"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"minKey(): K;"))),(0,a.yg)("admonition",d({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = SortedMap.of(['b', 2], ['d', 4], ['a', 1], ['c', 3]);\nconsole.log(m.minKey())\n// => 'a'\n")))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",d({},{id:"minvalue"}),(0,a.yg)("inlineCode",{parentName:"h3"},"minValue")),(0,a.yg)("p",null,"Returns the value associated with the minimum key of the SortedMap.")),(0,a.yg)("h4",d({},{id:"definition-5"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"minValue(): V;"))),(0,a.yg)("admonition",d({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = SortedMap.of(['b', 2], ['d', 4], ['a', 1], ['c', 3]).asNormal();\nconsole.log(m.minValue())\n// => 1\n")))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",d({},{id:"stream"}),(0,a.yg)("inlineCode",{parentName:"h3"},"stream")),(0,a.yg)("p",null,"undocumented")),(0,a.yg)("h4",d({},{id:"definition-6"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"stream(options?: {"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"reversed?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"}): "),(0,a.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,a.yg)("inlineCode",{parentName:"p"},"<readonly [K, V]>;"))),(0,a.yg)("h4",d({},{id:"parameters"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",d({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"options")),(0,a.yg)("td",d({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"{"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"reversed?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"}")),(0,a.yg)("td",d({parentName:"tr"},{align:null})))))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",d({},{id:"streamkeys"}),(0,a.yg)("inlineCode",{parentName:"h3"},"streamKeys")),(0,a.yg)("p",null,"undocumented")),(0,a.yg)("h4",d({},{id:"definition-7"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"streamKeys(options?: {"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"reversed?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"}): "),(0,a.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,a.yg)("inlineCode",{parentName:"p"},"<K>;"))),(0,a.yg)("h4",d({},{id:"parameters-1"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",d({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"options")),(0,a.yg)("td",d({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"{"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"reversed?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"}")),(0,a.yg)("td",d({parentName:"tr"},{align:null})))))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",d({},{id:"streamvalues"}),(0,a.yg)("inlineCode",{parentName:"h3"},"streamValues")),(0,a.yg)("p",null,"undocumented")),(0,a.yg)("h4",d({},{id:"definition-8"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"streamValues(options?: {"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"reversed?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"}): "),(0,a.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,a.yg)("inlineCode",{parentName:"p"},"<V>;"))),(0,a.yg)("h4",d({},{id:"parameters-2"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",d({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"options")),(0,a.yg)("td",d({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"{"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"reversed?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"}")),(0,a.yg)("td",d({parentName:"tr"},{align:null})))))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",d({},{id:"take"}),(0,a.yg)("inlineCode",{parentName:"h3"},"take")),(0,a.yg)("p",null,"undocumented")),(0,a.yg)("h4",d({},{id:"definition-9"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"take<N extends number>(amount: N): 0 extends N ? "),(0,a.yg)("a",d({parentName:"p"},{href:"/api/rimbu/sorted/map/SortedMap/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"SortedMap")),(0,a.yg)("inlineCode",{parentName:"p"},"<K, V> : "),(0,a.yg)("a",d({parentName:"p"},{href:"/api/rimbu/sorted/map/SortedMap/NonEmpty/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"SortedMap.NonEmpty")),(0,a.yg)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,a.yg)("h4",d({},{id:"type-parameters-1"}),"Type parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",d({parentName:"tr"},{align:null}),"Constraints"),(0,a.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",d({parentName:"tr"},{align:null}),"N"),(0,a.yg)("td",d({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"number")),(0,a.yg)("td",d({parentName:"tr"},{align:null}))))),(0,a.yg)("h4",d({},{id:"parameters-3"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",d({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"amount")),(0,a.yg)("td",d({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"N")),(0,a.yg)("td",d({parentName:"tr"},{align:null})))))))}C.isMDXComponent=!0}}]);