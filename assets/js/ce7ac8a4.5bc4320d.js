"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[39185],{15680:(e,t,r)=>{r.d(t,{xA:()=>l,yg:()=>f});var a=r(96540);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var m=a.createContext({}),y=function(e){var t=a.useContext(m),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},l=function(e){var t=y(e.components);return a.createElement(m.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,m=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),c=y(r),s=n,f=c["".concat(m,".").concat(s)]||c[s]||u[s]||i;return r?a.createElement(f,o(o({ref:t},l),{},{components:r})):a.createElement(f,o({ref:t},l))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=s;var p={};for(var m in t)hasOwnProperty.call(t,m)&&(p[m]=t[m]);p.originalType=e,p[c]="string"==typeof e?e:n,o[1]=p;for(var y=2;y<i;y++)o[y]=r[y];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}s.displayName="MDXCreateElement"},6718:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>b,contentTitle:()=>d,default:()=>P,frontMatter:()=>f,metadata:()=>g,toc:()=>x});var a=r(15680),n=Object.defineProperty,i=Object.defineProperties,o=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,m=Object.prototype.hasOwnProperty,y=Object.prototype.propertyIsEnumerable,l=(e,t,r)=>t in e?n(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,c=(e,t)=>{for(var r in t||(t={}))m.call(t,r)&&l(e,r,t[r]);if(p)for(var r of p(t))y.call(t,r)&&l(e,r,t[r]);return e},u=(e,t)=>i(e,o(t)),s=(e,t)=>{var r={};for(var a in e)m.call(e,a)&&t.indexOf(a)<0&&(r[a]=e[a]);if(null!=e&&p)for(var a of p(e))t.indexOf(a)<0&&y.call(e,a)&&(r[a]=e[a]);return r};const f={title:"ProximityMap<K,V>",slug:"/rimbu/proximity/map/ProximityMap/interface"},d="interface ProximityMap<K,V>",g={unversionedId:"rimbu_proximity/map/ProximityMap.interface",id:"rimbu_proximity/map/ProximityMap.interface",title:"ProximityMap<K,V>",description:"A type-invariant immutable Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the Map documentation and the ProximityMap API documentation",source:"@site/api/rimbu_proximity/map/ProximityMap.interface.mdx",sourceDirName:"rimbu_proximity/map",slug:"/rimbu/proximity/map/ProximityMap/interface",permalink:"/api/rimbu/proximity/map/ProximityMap/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"ProximityMap<K,V>",slug:"/rimbu/proximity/map/ProximityMap/interface"},sidebar:"defaultSidebar",previous:{title:"ProximityMap.Types",permalink:"/api/rimbu/proximity/map/ProximityMap/Types/interface"},next:{title:"ProximityMap",permalink:"/api/rimbu/proximity/ProximityMap/var"}},b={},x=[{value:"Type parameters",id:"type-parameters",level:2}],h={toc:x},v="wrapper";function P(e){var t=e,{components:r}=t,n=s(t,["components"]);return(0,a.yg)(v,u(c(c({},h),n),{components:r,mdxType:"MDXLayout"}),(0,a.yg)("h1",c({},{id:"interface-proximitymapkv"}),(0,a.yg)("inlineCode",{parentName:"h1"},"interface ProximityMap<K,V>")),(0,a.yg)("p",null,"A type-invariant immutable Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the ",(0,a.yg)("a",c({parentName:"p"},{href:"/docs/collections/map"}),"Map documentation")," and the ",(0,a.yg)("a",c({parentName:"p"},{href:"/api/rimbu/proximity/map/ProximityMap/interface"}),"ProximityMap API documentation")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Companion namespace:")," ",(0,a.yg)("a",c({parentName:"p"},{href:"/api/rimbu/proximity/map/ProximityMap/namespace"}),"ProximityMap")),(0,a.yg)("h2",c({},{id:"type-parameters"}),"Type parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",c({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",c({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",c({parentName:"tr"},{align:null}),"K"),(0,a.yg)("td",c({parentName:"tr"},{align:null}),"the key type")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",c({parentName:"tr"},{align:null}),"V"),(0,a.yg)("td",c({parentName:"tr"},{align:null}),"the value type")))),(0,a.yg)("admonition",c({},{title:"note",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"get()")," method is designed to perform a linear scan of all the keys, returning the value associated with the key having the least distance from the input key; however, optimized distance functions can greatly improve efficiency by preventing a full scan.")),(0,a.yg)("admonition",c({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",c({parentName:"pre"},{className:"language-ts"}),"const m1 = ProximityMap.empty<number, string>()\nconst m2 = ProximityMap.of([1, 'a'], [2, 'b'])\n"))))}P.isMDXComponent=!0}}]);