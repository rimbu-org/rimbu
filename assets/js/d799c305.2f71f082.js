"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[32733],{15680:(e,t,r)=>{r.d(t,{xA:()=>s,yg:()=>d});var n=r(96540);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function p(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?p(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):p(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},p=Object.keys(e);for(n=0;n<p.length;n++)r=p[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(n=0;n<p.length;n++)r=p[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},s=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,p=e.originalType,l=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),u=c(r),f=i,d=u["".concat(l,".").concat(f)]||u[f]||g[f]||p;return r?n.createElement(d,o(o({ref:t},s),{},{components:r})):n.createElement(d,o({ref:t},s))}));function d(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var p=r.length,o=new Array(p);o[0]=f;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[u]="string"==typeof e?e:i,o[1]=a;for(var c=2;c<p;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},6392:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>b,contentTitle:()=>y,default:()=>P,frontMatter:()=>d,metadata:()=>m,toc:()=>v});var n=r(15680),i=Object.defineProperty,p=Object.defineProperties,o=Object.getOwnPropertyDescriptors,a=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,s=(e,t,r)=>t in e?i(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,u=(e,t)=>{for(var r in t||(t={}))l.call(t,r)&&s(e,r,t[r]);if(a)for(var r of a(t))c.call(t,r)&&s(e,r,t[r]);return e},g=(e,t)=>p(e,o(t)),f=(e,t)=>{var r={};for(var n in e)l.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&a)for(var n of a(e))t.indexOf(n)<0&&c.call(e,n)&&(r[n]=e[n]);return r};const d={title:"stringSplitRegex",slug:"/rimbu/deep/Deep/Path/stringSplitRegex/var"},y="type stringSplitRegex",m={unversionedId:"rimbu_deep/Deep/Path/stringSplitRegex.var",id:"rimbu_deep/Deep/Path/stringSplitRegex.var",title:"stringSplitRegex",description:"Regular expression used to split a path string into tokens.",source:"@site/api/rimbu_deep/Deep/Path/stringSplitRegex.var.mdx",sourceDirName:"rimbu_deep/Deep/Path",slug:"/rimbu/deep/Deep/Path/stringSplitRegex/var",permalink:"/api/rimbu/deep/Deep/Path/stringSplitRegex/var",draft:!1,tags:[],version:"current",frontMatter:{title:"stringSplitRegex",slug:"/rimbu/deep/Deep/Path/stringSplitRegex/var"},sidebar:"defaultSidebar",previous:{title:"StringSplit",permalink:"/api/rimbu/deep/Deep/Path/StringSplit/type"},next:{title:"Protected",permalink:"/api/rimbu/deep/Deep/Protected/type"}},b={},v=[{value:"Definition",id:"definition",level:2}],O={toc:v},x="wrapper";function P(e){var t=e,{components:r}=t,i=f(t,["components"]);return(0,n.yg)(x,g(u(u({},O),i),{components:r,mdxType:"MDXLayout"}),(0,n.yg)("h1",u({},{id:"type-stringsplitregex"}),(0,n.yg)("inlineCode",{parentName:"h1"},"type stringSplitRegex")),(0,n.yg)("p",null,"Regular expression used to split a path string into tokens."),(0,n.yg)("h2",u({},{id:"definition"}),"Definition"),(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"stringSplitRegex: RegExp")))}P.isMDXComponent=!0}}]);