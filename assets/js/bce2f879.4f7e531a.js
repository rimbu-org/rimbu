"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[78029],{15680:(e,a,n)=>{n.d(a,{xA:()=>m,yg:()=>u});var t=n(96540);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function i(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?i(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function p(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=t.createContext({}),d=function(e){var a=t.useContext(o),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},m=function(e){var a=d(e.components);return t.createElement(o.Provider,{value:a},e.children)},g="mdxType",y={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},s=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),g=d(n),s=r,u=g["".concat(o,".").concat(s)]||g[s]||y[s]||i;return n?t.createElement(u,l(l({ref:a},m),{},{components:n})):t.createElement(u,l({ref:a},m))}));function u(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=s;var p={};for(var o in a)hasOwnProperty.call(a,o)&&(p[o]=a[o]);p.originalType=e,p[g]="string"==typeof e?e:r,l[1]=p;for(var d=2;d<i;d++)l[d]=n[d];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}s.displayName="MDXCreateElement"},24378:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>N,default:()=>C,frontMatter:()=>u,metadata:()=>h,toc:()=>f});var t=n(15680),r=Object.defineProperty,i=Object.defineProperties,l=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,d=Object.prototype.propertyIsEnumerable,m=(e,a,n)=>a in e?r(e,a,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[a]=n,g=(e,a)=>{for(var n in a||(a={}))o.call(a,n)&&m(e,n,a[n]);if(p)for(var n of p(a))d.call(a,n)&&m(e,n,a[n]);return e},y=(e,a)=>i(e,l(a)),s=(e,a)=>{var n={};for(var t in e)o.call(e,t)&&a.indexOf(t)<0&&(n[t]=e[t]);if(null!=e&&p)for(var t of p(e))a.indexOf(t)<0&&d.call(e,t)&&(n[t]=e[t]);return n};const u={title:"EdgeGraphBase.NonEmpty<N,Tp>",slug:"/rimbu/graph/custom/EdgeGraphBase/NonEmpty/interface"},N="interface EdgeGraphBase.NonEmpty<N,Tp>",h={unversionedId:"rimbu_graph/custom/EdgeGraphBase/NonEmpty.interface",id:"rimbu_graph/custom/EdgeGraphBase/NonEmpty.interface",title:"EdgeGraphBase.NonEmpty<N,Tp>",description:"undocumented",source:"@site/api/rimbu_graph/custom/EdgeGraphBase/NonEmpty.interface.mdx",sourceDirName:"rimbu_graph/custom/EdgeGraphBase",slug:"/rimbu/graph/custom/EdgeGraphBase/NonEmpty/interface",permalink:"/api/rimbu/graph/custom/EdgeGraphBase/NonEmpty/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"EdgeGraphBase.NonEmpty<N,Tp>",slug:"/rimbu/graph/custom/EdgeGraphBase/NonEmpty/interface"},sidebar:"defaultSidebar",previous:{title:"EdgeGraphBase.Context<UN,Tp>",permalink:"/api/rimbu/graph/custom/EdgeGraphBase/Context/interface"},next:{title:"EdgeGraphBase.Types",permalink:"/api/rimbu/graph/custom/EdgeGraphBase/Types/interface"}},c={},f=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>connectionSize</code>",id:"connectionsize",level:3},{value:"Definition",id:"definition",level:4},{value:"Overrides",id:"overrides",level:4},{value:"<code>context</code>",id:"context",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"<code>isDirected</code>",id:"isdirected",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"<code>isEmpty</code>",id:"isempty",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"<code>linkMap</code>",id:"linkmap",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Overrides",id:"overrides-4",level:4},{value:"<code>nodeSize</code>",id:"nodesize",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Overrides",id:"overrides-5",level:4},{value:"Methods",id:"methods",level:2},{value:"<code>[Symbol.iterator]</code>",id:"symboliterator",level:3},{value:"Definition",id:"definition-6",level:4},{value:"Overrides",id:"overrides-6",level:4},{value:"<code>addNode</code>",id:"addnode",level:3},{value:"Definition",id:"definition-7",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Overrides",id:"overrides-7",level:4},{value:"<code>addNodes</code>",id:"addnodes",level:3},{value:"Definition",id:"definition-8",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Overrides",id:"overrides-8",level:4},{value:"<code>asNormal</code>",id:"asnormal",level:3},{value:"Definition",id:"definition-9",level:4},{value:"Overrides",id:"overrides-9",level:4},{value:"<code>assumeNonEmpty</code>",id:"assumenonempty",level:3},{value:"Definition",id:"definition-10",level:4},{value:"Overrides",id:"overrides-10",level:4},{value:"<code>connect</code>",id:"connect",level:3},{value:"Definition",id:"definition-11",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Overrides",id:"overrides-11",level:4},{value:"<code>connectAll</code>",id:"connectall",level:3},{value:"Definition",id:"definition-12",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Overrides",id:"overrides-12",level:4},{value:"<code>disconnect</code>",id:"disconnect",level:3},{value:"Definition",id:"definition-13",level:4},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"Overrides",id:"overrides-13",level:4},{value:"<code>disconnectAll</code>",id:"disconnectall",level:3},{value:"Definition",id:"definition-14",level:4},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"Overrides",id:"overrides-14",level:4},{value:"<code>forEach</code>",id:"foreach",level:3},{value:"Definition",id:"definition-15",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"Overrides",id:"overrides-15",level:4},{value:"<code>getConnectionsFrom</code>",id:"getconnectionsfrom",level:3},{value:"Definition",id:"definition-16",level:4},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"Overrides",id:"overrides-16",level:4},{value:"<code>getConnectionStreamFrom</code>",id:"getconnectionstreamfrom",level:3},{value:"Definition",id:"definition-17",level:4},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"Overrides",id:"overrides-17",level:4},{value:"<code>getConnectionStreamTo</code>",id:"getconnectionstreamto",level:3},{value:"Definition",id:"definition-18",level:4},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Parameters",id:"parameters-9",level:4},{value:"Overrides",id:"overrides-18",level:4},{value:"<code>hasConnection</code>",id:"hasconnection",level:3},{value:"Definition",id:"definition-19",level:4},{value:"Type parameters",id:"type-parameters-6",level:4},{value:"Parameters",id:"parameters-10",level:4},{value:"Overrides",id:"overrides-19",level:4},{value:"<code>hasNode</code>",id:"hasnode",level:3},{value:"Definition",id:"definition-20",level:4},{value:"Type parameters",id:"type-parameters-7",level:4},{value:"Parameters",id:"parameters-11",level:4},{value:"Overrides",id:"overrides-20",level:4},{value:"<code>nonEmpty</code>",id:"nonempty",level:3},{value:"Definition",id:"definition-21",level:4},{value:"Overrides",id:"overrides-21",level:4},{value:"<code>removeNode</code>",id:"removenode",level:3},{value:"Definition",id:"definition-22",level:4},{value:"Type parameters",id:"type-parameters-8",level:4},{value:"Parameters",id:"parameters-12",level:4},{value:"Overrides",id:"overrides-22",level:4},{value:"<code>removeNodes</code>",id:"removenodes",level:3},{value:"Definition",id:"definition-23",level:4},{value:"Type parameters",id:"type-parameters-9",level:4},{value:"Parameters",id:"parameters-13",level:4},{value:"Overrides",id:"overrides-23",level:4},{value:"<code>removeUnconnectedNodes</code>",id:"removeunconnectednodes",level:3},{value:"Definition",id:"definition-24",level:4},{value:"Overrides",id:"overrides-24",level:4},{value:"<code>stream</code>",id:"stream",level:3},{value:"Definition",id:"definition-25",level:4},{value:"Overrides",id:"overrides-25",level:4},{value:"<code>streamConnections</code>",id:"streamconnections",level:3},{value:"Definition",id:"definition-26",level:4},{value:"Overrides",id:"overrides-26",level:4},{value:"<code>streamNodes</code>",id:"streamnodes",level:3},{value:"Definition",id:"definition-27",level:4},{value:"Overrides",id:"overrides-27",level:4},{value:"<code>toBuilder</code>",id:"tobuilder",level:3},{value:"Definition",id:"definition-28",level:4},{value:"Overrides",id:"overrides-28",level:4},{value:"<code>toJSON</code>",id:"tojson",level:3},{value:"Definition",id:"definition-29",level:4},{value:"Overrides",id:"overrides-29",level:4},{value:"<code>toString</code>",id:"tostring",level:3},{value:"Definition",id:"definition-30",level:4},{value:"Overrides",id:"overrides-30",level:4}],v={toc:f},b="wrapper";function C(e){var a=e,{components:n}=a,r=s(a,["components"]);return(0,t.yg)(b,y(g(g({},v),r),{components:n,mdxType:"MDXLayout"}),(0,t.yg)("h1",g({},{id:"interface-edgegraphbasenonemptyntp"}),(0,t.yg)("inlineCode",{parentName:"h1"},"interface EdgeGraphBase.NonEmpty<N,Tp>")),(0,t.yg)("p",null,"undocumented"),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Extends:")," ",(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/Streamable/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Streamable.NonEmpty<T>")),", ",(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/EdgeGraphBase/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"EdgeGraphBase<N,Tp>")),", ",(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/GraphBase/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"GraphBase.NonEmpty<N,Tp>"))),(0,t.yg)("h2",g({},{id:"type-parameters"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"N"),(0,t.yg)("td",g({parentName:"tr"},{align:null})),(0,t.yg)("td",g({parentName:"tr"},{align:null})),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"undocumented")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"Tp"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/graph/custom/EdgeGraphBase/Types/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"EdgeGraphBase.Types"))),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/graph/custom/EdgeGraphBase/Types/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"EdgeGraphBase.Types"))),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"undocumented")))),(0,t.yg)("h2",g({},{id:"properties"}),"Properties"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"connectionsize"}),(0,t.yg)("inlineCode",{parentName:"h3"},"connectionSize")),(0,t.yg)("p",null,"Returns the amount of connections in the graph.")),(0,t.yg)("h4",g({},{id:"definition"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly connectionSize: number;"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"ArrowGraphHashed.empty<number>().connectionSize  // => 0\nArrowGraphHashed.of([1], [2, 3]).connectionSize  // => 1\n"))),(0,t.yg)("h4",g({},{id:"overrides"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#connectionSize"}),"VariantGraphBase.connectionSize"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"context"}),(0,t.yg)("inlineCode",{parentName:"h3"},"context")),(0,t.yg)("p",null,"Returns the ",(0,t.yg)("inlineCode",{parentName:"p"},"context")," associated to this collection instance.")),(0,t.yg)("h4",g({},{id:"definition-1"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly context: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, unknown>['context'];"))),(0,t.yg)("h4",g({},{id:"overrides-1"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/GraphBase/interface#context"}),"GraphBase.context"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"isdirected"}),(0,t.yg)("inlineCode",{parentName:"h3"},"isDirected")),(0,t.yg)("p",null,"Returns false since this is an arrow (directed) graph instance.")),(0,t.yg)("h4",g({},{id:"definition-2"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly isDirected: false;"))),(0,t.yg)("h4",g({},{id:"overrides-2"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/EdgeGraphBase/interface#isDirected"}),"EdgeGraphBase.isDirected"),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#isDirected"}),"VariantGraphBase.isDirected"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"isempty"}),(0,t.yg)("inlineCode",{parentName:"h3"},"isEmpty")),(0,t.yg)("p",null,"Returns false since the graph is known to be non-empty.")),(0,t.yg)("h4",g({},{id:"definition-3"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly isEmpty: false;"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"ArrowGraphHashed.empty<number>().isEmpty  // => true\nArrowGraphHashed.of([1]).isEmpty          // => false\n"))),(0,t.yg)("h4",g({},{id:"overrides-3"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#isEmpty"}),"VariantGraphBase.isEmpty"),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/NonEmpty/interface#isEmpty"}),"NonEmpty.isEmpty"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"linkmap"}),(0,t.yg)("inlineCode",{parentName:"h3"},"linkMap")),(0,t.yg)("p",null,"Returns the nested non-empty Map representation of the graph connections.")),(0,t.yg)("h4",g({},{id:"definition-4"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly linkMap: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, unknown>['linkMapNonEmpty'];"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"ArrowGraphHashed.of([1, 2], [2, 3]).linkMap.toArray()\n// => [1 -> HashSet(2), 2 -> HashSet(3)]]\n"))),(0,t.yg)("h4",g({},{id:"overrides-4"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/GraphBase/interface#linkMap"}),"GraphBase.linkMap"),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/GraphBase/NonEmpty/interface#linkMap"}),"NonEmpty.linkMap"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"nodesize"}),(0,t.yg)("inlineCode",{parentName:"h3"},"nodeSize")),(0,t.yg)("p",null,"Returns the amount of nodes in the graph.")),(0,t.yg)("h4",g({},{id:"definition-5"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly nodeSize: number;"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"ArrowGraphHashed.empty<number>().nodeSize  // => 0\nArrowGraphHashed.of([1], [2, 3]).nodeSize  // => 3\n"))),(0,t.yg)("h4",g({},{id:"overrides-5"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#nodeSize"}),"VariantGraphBase.nodeSize"))),(0,t.yg)("h2",g({},{id:"methods"}),"Methods"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"symboliterator"}),(0,t.yg)("inlineCode",{parentName:"h3"},"[Symbol.iterator]")),(0,t.yg)("p",null,"Returns a ",(0,t.yg)("inlineCode",{parentName:"p"},"FastIterator")," instance used to iterate over the values of this ",(0,t.yg)("inlineCode",{parentName:"p"},"Iterable"),".")),(0,t.yg)("h4",g({},{id:"definition-6"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"[Symbol.iterator](): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/FastIterator/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"FastIterator")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,t.yg)("h4",g({},{id:"overrides-6"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/FastIterable/interface#%5BSymbol.iterator%5D"}),"FastIterable.[Symbol.iterator]"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"addnode"}),(0,t.yg)("inlineCode",{parentName:"h3"},"addNode")),(0,t.yg)("p",null,"Returns the graph with the given ",(0,t.yg)("inlineCode",{parentName:"p"},"node")," added, if it was not yet present.")),(0,t.yg)("h4",g({},{id:"definition-7"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"addNode(node: N): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, V>['nonEmpty'];"))),(0,t.yg)("h4",g({},{id:"parameters"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the node to add")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const g = ArrowGraphHashed.of([1], [2, 3])\ng.addNode(4).stream().toArray()  // => [[1], [2, 3], [4]]\ng.addNode(1).stream().toArray()  // ==> [[1], [2, 3]]\n"))),(0,t.yg)("h4",g({},{id:"overrides-7"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/GraphConnect/interface#addNode"}),"GraphConnect.addNode"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"addnodes"}),(0,t.yg)("inlineCode",{parentName:"h3"},"addNodes")),(0,t.yg)("p",null,"Returns the non-empty graph with the nodes from the given ",(0,t.yg)("inlineCode",{parentName:"p"},"nodes")," ",(0,t.yg)("inlineCode",{parentName:"p"},"StreamSource")," added.")),(0,t.yg)("h4",g({},{id:"definition-8"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"addNodes(nodes: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<N>): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, V>['nonEmpty'];"))),(0,t.yg)("h4",g({},{id:"parameters-1"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"nodes")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<N>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"a ",(0,t.yg)("inlineCode",{parentName:"td"},"StreamSource")," containing the nodes to add")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const g = ArrowGraphHashed.of([1], [2, 3])\ng.addNodes([4, 1]).stream().toArray()  // => [[1], [2, 3], [4]]\ng.addNodes([1, 2]).stream().toArray()  // => [[1], [2, 3]]\n"))),(0,t.yg)("h4",g({},{id:"overrides-8"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/GraphConnect/interface#addNodes"}),"GraphConnect.addNodes"),", ",(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/GraphConnectNonEmpty/interface#addNodes"}),"GraphConnectNonEmpty.addNodes"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"asnormal"}),(0,t.yg)("inlineCode",{parentName:"h3"},"asNormal")),(0,t.yg)("p",null,"Returns this collection typed as a 'possibly empty' collection.")),(0,t.yg)("h4",g({},{id:"definition-9"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"asNormal(): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, V>['normal'];"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"ArrowGraphHashed.of([1], [2, 3]).asNormal();  // type: ArrowGraphHashed<number>\n"))),(0,t.yg)("h4",g({},{id:"overrides-9"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/NonEmpty/interface#asNormal"}),"NonEmpty.asNormal"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"assumenonempty"}),(0,t.yg)("inlineCode",{parentName:"h3"},"assumeNonEmpty")),(0,t.yg)("p",null,"Returns the collection as a .NonEmpty type")),(0,t.yg)("h4",g({},{id:"definition-10"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"assumeNonEmpty(): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, V>['nonEmpty'];"))),(0,t.yg)("admonition",g({},{title:"throws",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"RimbuError.EmptyCollectionAssumedNonEmptyError if the collection is empty")),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"ArrowGraphHashed.empty<number>().assumeNonEmpty()   // => throws\nconst g: ArrowGraphHashed<number> = ArrowGraphHashed.of([1, 1], [2, 2])\nconst g2: ArrowGraphHashed.NonEmpty<number> = g     // => compiler error\nconst g3: ArrowGraphHashed.NonEmpty<number> = g.assumeNonEmpty()\n"))),(0,t.yg)("admonition",g({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"returns reference to this collection")),(0,t.yg)("h4",g({},{id:"overrides-10"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#assumeNonEmpty"}),"VariantGraphBase.assumeNonEmpty"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"connect"}),(0,t.yg)("inlineCode",{parentName:"h3"},"connect")),(0,t.yg)("p",null,"Returns the graph where given nodes ",(0,t.yg)("inlineCode",{parentName:"p"},"node1")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"node2")," are connected.")),(0,t.yg)("h4",g({},{id:"definition-11"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"connect(node1: N, node2: N): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, unknown>['nonEmpty'];"))),(0,t.yg)("h4",g({},{id:"parameters-2"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node1")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the first node")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node2")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the second node")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const g = ArrowGraphHashed.of([1, 2], [2, 3])\ng.connect(3, 1).stream().toArray()\n// => [[1, 2], [2, 3], [3, 1]]\n"))),(0,t.yg)("h4",g({},{id:"overrides-11"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/GraphBase/interface#connect"}),"GraphBase.connect"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"connectall"}),(0,t.yg)("inlineCode",{parentName:"h3"},"connectAll")),(0,t.yg)("p",null,"Returns the non-empty graph with the connections from the given ",(0,t.yg)("inlineCode",{parentName:"p"},"connections")," ",(0,t.yg)("inlineCode",{parentName:"p"},"StreamSource")," added.")),(0,t.yg)("h4",g({},{id:"definition-12"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"connectAll(links: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<"),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, V>['link']>): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, V>['nonEmpty'];"))),(0,t.yg)("h4",g({},{id:"parameters-3"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"links")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<"),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"td"},"<Tp, N, V>['link']>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const g = ArrowGraphHashed.of([1], [2, 3])\ng.connectAll([[1, 2], [3, 1]]).stream().toArray()  // => [[1, 2], [2, 3], [3, 1]]\nconst g2 = ArrowValuedGraphHashed.of([1], [2, 3, 'a'])\ng2.connectAll([[1, 2, 'b'], [2, 3, 'c']]).stream().toArray()\n// => [[1, 2, 'b'], [2, 3, 'c']]\n"))),(0,t.yg)("h4",g({},{id:"overrides-12"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/GraphConnect/interface#connectAll"}),"GraphConnect.connectAll"),", ",(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/GraphConnectNonEmpty/interface#connectAll"}),"GraphConnectNonEmpty.connectAll"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"disconnect"}),(0,t.yg)("inlineCode",{parentName:"h3"},"disconnect")),(0,t.yg)("p",null,"Returns the graph with the connection between given ",(0,t.yg)("inlineCode",{parentName:"p"},"node1")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"node2")," removed if it exists.")),(0,t.yg)("h4",g({},{id:"definition-13"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"disconnect<UN = N>(node1: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>, node2: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, V>['normal'];"))),(0,t.yg)("h4",g({},{id:"type-parameters-1"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"UN"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",g({},{id:"parameters-4"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node1")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the first connection node")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node2")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the second connectio node")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const g = ArrowGraphHashed.of([1], [2, 3])\ng.disconnect(2, 3).stream().toArray()  // => [[1], [2], [3]]\ng.disconnect(1, 2).stream().toArray()  // => [[1], [2, 3]]\n"))),(0,t.yg)("h4",g({},{id:"overrides-13"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#disconnect"}),"VariantGraphBase.disconnect"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"disconnectall"}),(0,t.yg)("inlineCode",{parentName:"h3"},"disconnectAll")),(0,t.yg)("p",null,"Returns the graph with all connections in given ",(0,t.yg)("inlineCode",{parentName:"p"},"links")," removed if they exist.")),(0,t.yg)("h4",g({},{id:"definition-14"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"disconnectAll<UN = N>(links: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<Link<"),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>>>): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, V>['normal'];"))),(0,t.yg)("h4",g({},{id:"type-parameters-2"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"UN"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",g({},{id:"parameters-5"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"links")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<Link<"),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>>>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"a ",(0,t.yg)("inlineCode",{parentName:"td"},"StreamSource")," containing tuples of nodes representing connections")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const g = ArrowGraphHashed.of([1], [2, 3])\ng.disconnectAll([[1, 2], [3, 4]]).stream().toArray() // => [[1], [2, 3]]\ng.disconnectAll([[2, 3], [3, 4]]).stream().toArray() // => [[1], [2], [3]]\n"))),(0,t.yg)("h4",g({},{id:"overrides-14"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#disconnectAll"}),"VariantGraphBase.disconnectAll"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"foreach"}),(0,t.yg)("inlineCode",{parentName:"h3"},"forEach")),(0,t.yg)("p",null,"Performs given function ",(0,t.yg)("inlineCode",{parentName:"p"},"f")," for each entry of the collection, using given ",(0,t.yg)("inlineCode",{parentName:"p"},"state")," as initial traversal state.")),(0,t.yg)("h4",g({},{id:"definition-15"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"forEach(f: (entry: [N] "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, V>['link'], index: number, halt: () => void) => void, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"state?: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/TraverseState/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"TraverseState")),(0,t.yg)("inlineCode",{parentName:"p"},";"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): void;"))),(0,t.yg)("h4",g({},{id:"parameters-6"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"f")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(entry: [N] "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," "),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"td"},"<Tp, N, V>['link'], index: number, halt: () => void) => void")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the function to perform for each entry, receiving:",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"entry"),": the next graph element",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"index"),": the index of the element",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"halt"),": a function that, if called, ensures that no new elements are passed")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"state?: "),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/TraverseState/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"TraverseState")),(0,t.yg)("inlineCode",{parentName:"td"},";"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"object containing the following",(0,t.yg)("br",null)," - state: (optional) the traverse state")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const g = ArrowGraphHashed.of([1], [2, 3], [4])\ng.forEach((entry, i, halt) => {\nconsole.log([entry]);\nif (i >= 1) halt();\n})\n// => logs [1]  [2, 3]\n"))),(0,t.yg)("admonition",g({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N)")),(0,t.yg)("h4",g({},{id:"overrides-15"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#forEach"}),"VariantGraphBase.forEach"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"getconnectionsfrom"}),(0,t.yg)("inlineCode",{parentName:"h3"},"getConnectionsFrom")),(0,t.yg)("p",null,"Returns a Set containing the nodes reachable from given ",(0,t.yg)("inlineCode",{parentName:"p"},"node1")," node as keys, and their corresponding values.")),(0,t.yg)("h4",g({},{id:"definition-16"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"getConnectionsFrom<UN = N>(node1: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, unknown>['linkConnections'];"))),(0,t.yg)("h4",g({},{id:"type-parameters-3"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"UN"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",g({},{id:"parameters-7"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node1")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the node from which to find the connections")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const g = ArrowGraphHashed.of([1, 2], [2, 3])\ng.getConnectionsFrom(1)  // => HashSet(2)\ng.getConnectionsFrom(3)  // => HashSet()\n"))),(0,t.yg)("h4",g({},{id:"overrides-16"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/GraphBase/interface#getConnectionsFrom"}),"GraphBase.getConnectionsFrom"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"getconnectionstreamfrom"}),(0,t.yg)("inlineCode",{parentName:"h3"},"getConnectionStreamFrom")),(0,t.yg)("p",null,"Returns a ",(0,t.yg)("inlineCode",{parentName:"p"},"Stream")," containing all the connetions from the given ",(0,t.yg)("inlineCode",{parentName:"p"},"node1"))),(0,t.yg)("h4",g({},{id:"definition-17"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"getConnectionStreamFrom<UN = N>(node1: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<"),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, V>['link']>;"))),(0,t.yg)("h4",g({},{id:"type-parameters-4"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"UN"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",g({},{id:"parameters-8"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node1")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the first connection node")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const g = ArrowGraphHashed.of([1], [2, 3])\ng.getConnectionStreamFrom(2).toArray()   // => [3]\ng.getConnectionStreamFrom(5).toArray()   // => []\n"))),(0,t.yg)("h4",g({},{id:"overrides-17"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#getConnectionStreamFrom"}),"VariantGraphBase.getConnectionStreamFrom"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"getconnectionstreamto"}),(0,t.yg)("inlineCode",{parentName:"h3"},"getConnectionStreamTo")),(0,t.yg)("p",null,"Returns a ",(0,t.yg)("inlineCode",{parentName:"p"},"Stream")," containing all the connetions to the given ",(0,t.yg)("inlineCode",{parentName:"p"},"node2"))),(0,t.yg)("h4",g({},{id:"definition-18"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"getConnectionStreamTo<UN = N>(node2: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<"),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, V>['link']>;"))),(0,t.yg)("h4",g({},{id:"type-parameters-5"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"UN"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",g({},{id:"parameters-9"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node2")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the second connection node")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const g = ArrowGraphHashed.of([1], [2, 3])\ng.getConnectionStreamTo(3).toArray()   // => [2]\ng.getConnectionStreamTo(5).toArray()   // => []\n"))),(0,t.yg)("h4",g({},{id:"overrides-18"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#getConnectionStreamTo"}),"VariantGraphBase.getConnectionStreamTo"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"hasconnection"}),(0,t.yg)("inlineCode",{parentName:"h3"},"hasConnection")),(0,t.yg)("p",null,"Returns true if the graph has a connection between given ",(0,t.yg)("inlineCode",{parentName:"p"},"node1")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"node2"),".")),(0,t.yg)("h4",g({},{id:"definition-19"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"hasConnection<UN = N>(node1: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>, node2: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>): boolean;"))),(0,t.yg)("h4",g({},{id:"type-parameters-6"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"UN"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",g({},{id:"parameters-10"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node1")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the first connection node")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node2")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the second connection node")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const g = ArrowGraphHashed.of([1], [2, 3])\ng.hasConnection(2, 3)   // => true\ng.hasConnection(3, 1)   // => false\n"))),(0,t.yg)("h4",g({},{id:"overrides-19"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#hasConnection"}),"VariantGraphBase.hasConnection"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"hasnode"}),(0,t.yg)("inlineCode",{parentName:"h3"},"hasNode")),(0,t.yg)("p",null,"Returns true if the graph contains the given ",(0,t.yg)("inlineCode",{parentName:"p"},"node"),".")),(0,t.yg)("h4",g({},{id:"definition-20"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"hasNode<UN = N>(node: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>): boolean;"))),(0,t.yg)("h4",g({},{id:"type-parameters-7"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"UN"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",g({},{id:"parameters-11"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the node to search")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const g = ArrowGraphHashed.of([1], [2, 3])\ng.hasNode(2)   // => true\ng.hasNode(5)   // => false\n"))),(0,t.yg)("h4",g({},{id:"overrides-20"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#hasNode"}),"VariantGraphBase.hasNode"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"nonempty"}),(0,t.yg)("inlineCode",{parentName:"h3"},"nonEmpty")),(0,t.yg)("p",null,"Returns true since this collection is known to be non-empty")),(0,t.yg)("h4",g({},{id:"definition-21"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"nonEmpty(): this is "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, V>['nonEmpty'];"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"ArrowGraphHashed.of([1], [2, 3]).nonEmpty()   // => true\n"))),(0,t.yg)("h4",g({},{id:"overrides-21"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#nonEmpty"}),"VariantGraphBase.nonEmpty"),", ",(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/NonEmpty/interface#nonEmpty"}),"NonEmpty.nonEmpty"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"removenode"}),(0,t.yg)("inlineCode",{parentName:"h3"},"removeNode")),(0,t.yg)("p",null,"Returns the graph with the given ",(0,t.yg)("inlineCode",{parentName:"p"},"node")," and all its connections removed.")),(0,t.yg)("h4",g({},{id:"definition-22"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"removeNode<UN = N>(node: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, V>['normal'];"))),(0,t.yg)("h4",g({},{id:"type-parameters-8"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"UN"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",g({},{id:"parameters-12"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the node to remove")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const g = ArrowGraphHashed.of([1], [2, 3])\ng.removeNode(2).stream().toArray()  // => [[1]]\ng.removeNode(6).stream().toArray()  // => [[1], [2, 3]]\n"))),(0,t.yg)("h4",g({},{id:"overrides-22"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#removeNode"}),"VariantGraphBase.removeNode"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"removenodes"}),(0,t.yg)("inlineCode",{parentName:"h3"},"removeNodes")),(0,t.yg)("p",null,"Returns the graph with all nodes in given ",(0,t.yg)("inlineCode",{parentName:"p"},"nodes")," stream removed, together with all their connections.")),(0,t.yg)("h4",g({},{id:"definition-23"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"removeNodes<UN = N>(nodes: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<"),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>>): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, V>['normal'];"))),(0,t.yg)("h4",g({},{id:"type-parameters-9"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"UN"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",g({},{id:"parameters-13"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"nodes")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<"),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"a ",(0,t.yg)("inlineCode",{parentName:"td"},"StreamSource")," containing the nodes to remove")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const g = ArrowGraphHashed.of([1], [2, 3])\ng.removeNodes([2, 3]).stream().toArray()  // => [[1]]\ng.removeNodes([4, 5]).stream().toArray()  // => [[1], [2, 3]]\n"))),(0,t.yg)("h4",g({},{id:"overrides-23"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#removeNodes"}),"VariantGraphBase.removeNodes"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"removeunconnectednodes"}),(0,t.yg)("inlineCode",{parentName:"h3"},"removeUnconnectedNodes")),(0,t.yg)("p",null,"Returns the graph with all isolated nodes removed.")),(0,t.yg)("h4",g({},{id:"definition-24"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"removeUnconnectedNodes(): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, V>['normal'];"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const g = ArrowGraphHashed.of([1], [2, 3])\ng.removeUnconnectedNodes().stream().toArray()   // => [[2, 3]]\n"))),(0,t.yg)("h4",g({},{id:"overrides-24"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#removeUnconnectedNodes"}),"VariantGraphBase.removeUnconnectedNodes"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"stream"}),(0,t.yg)("inlineCode",{parentName:"h3"},"stream")),(0,t.yg)("p",null,"Returns a non-empty ",(0,t.yg)("inlineCode",{parentName:"p"},"Stream")," containing all graph elements of this collection as single tuples for isolated nodes and 2-valued tuples of nodes for connections.")),(0,t.yg)("h4",g({},{id:"definition-25"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"stream(): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<GraphElement<N>>;"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"EdgeGraphHashed.of([1], [2, 3]).stream().toArray()  // => [[1], [2, 3]]\n"))),(0,t.yg)("h4",g({},{id:"overrides-25"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/Streamable/NonEmpty/interface#stream"}),"NonEmpty.stream"),", ",(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/GraphBase/NonEmpty/interface#stream"}),"NonEmpty.stream"),", ",(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#stream"}),"VariantGraphBase.stream"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"streamconnections"}),(0,t.yg)("inlineCode",{parentName:"h3"},"streamConnections")),(0,t.yg)("p",null,"Returns a ",(0,t.yg)("inlineCode",{parentName:"p"},"Stream")," containing all connections of this collection.")),(0,t.yg)("h4",g({},{id:"definition-26"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"streamConnections(): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<"),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, V>['link']>;"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"ArrowGraphHashed.of([1], [2, 3]).stream().toArray()   // => [[2, 3]]\n"))),(0,t.yg)("h4",g({},{id:"overrides-26"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#streamConnections"}),"VariantGraphBase.streamConnections"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"streamnodes"}),(0,t.yg)("inlineCode",{parentName:"h3"},"streamNodes")),(0,t.yg)("p",null,"Returns a non-empty ",(0,t.yg)("inlineCode",{parentName:"p"},"Stream")," containing all nodes of this collection.")),(0,t.yg)("h4",g({},{id:"definition-27"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"streamNodes(): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<N>;"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"ArrowGraphHashed.of([1], [2, 3]).stream().toArray()   // => [1, 2, 3]\n"))),(0,t.yg)("h4",g({},{id:"overrides-27"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#streamNodes"}),"VariantGraphBase.streamNodes"),", ",(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/NonEmpty/interface#streamNodes"}),"NonEmpty.streamNodes"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"tobuilder"}),(0,t.yg)("inlineCode",{parentName:"h3"},"toBuilder")),(0,t.yg)("p",null,"Returns a builder object containing the entries of this collection.")),(0,t.yg)("h4",g({},{id:"definition-28"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"toBuilder(): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, unknown>['builder'];"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const builder: ArrowGraphHashed.Builder<number> = ArrowGraphHashed.of([1, 2], [2, 3]).toBuilder()\n"))),(0,t.yg)("h4",g({},{id:"overrides-28"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/GraphBase/interface#toBuilder"}),"GraphBase.toBuilder"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"tojson"}),(0,t.yg)("inlineCode",{parentName:"h3"},"toJSON")),(0,t.yg)("p",null,"Returns a JSON representation of this collection.")),(0,t.yg)("h4",g({},{id:"definition-29"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"toJSON(): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/ToJSON/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"ToJSON")),(0,t.yg)("inlineCode",{parentName:"p"},"<[N, "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, V>['linkTarget'][]][]>;"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"ArrowGraphHashed.of([1], [2, 3]).toJSON()\n// => { dataType: 'ArrowGraphHashed', value: [[1, []], [2, [3]]] }\n"))),(0,t.yg)("h4",g({},{id:"overrides-29"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#toJSON"}),"VariantGraphBase.toJSON"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"tostring"}),(0,t.yg)("inlineCode",{parentName:"h3"},"toString")),(0,t.yg)("p",null,"Returns a string representation of this collection.")),(0,t.yg)("h4",g({},{id:"definition-30"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"toString(): string;"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"ArrowGraphHashed.of([1], [2, 3]).toString()   // => ArrowGraphHashed(1 => [], 2 => [3])\n"))),(0,t.yg)("h4",g({},{id:"overrides-30"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface#toString"}),"VariantGraphBase.toString"))))}C.isMDXComponent=!0}}]);