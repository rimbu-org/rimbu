"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[67535],{15680:(e,t,n)=>{n.d(t,{xA:()=>y,yg:()=>f});var a=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},y=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,y=p(e,["components","mdxType","originalType","parentName"]),m=l(n),s=r,f=m["".concat(c,".").concat(s)]||m[s]||u[s]||o;return n?a.createElement(f,i(i({ref:t},y),{},{components:n})):a.createElement(f,i({ref:t},y))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=s;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p[m]="string"==typeof e?e:r,i[1]=p;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},81073:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>d,default:()=>M,frontMatter:()=>f,metadata:()=>b,toc:()=>h});var a=n(15680),r=Object.defineProperty,o=Object.defineProperties,i=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,c=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable,y=(e,t,n)=>t in e?r(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,m=(e,t)=>{for(var n in t||(t={}))c.call(t,n)&&y(e,n,t[n]);if(p)for(var n of p(t))l.call(t,n)&&y(e,n,t[n]);return e},u=(e,t)=>o(e,i(t)),s=(e,t)=>{var n={};for(var a in e)c.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&p)for(var a of p(e))t.indexOf(a)<0&&l.call(e,a)&&(n[a]=e[a]);return n};const f={title:"VariantMap.NonEmpty<K,V>",slug:"/rimbu/collection-types/VariantMap/NonEmpty/interface"},d="interface VariantMap.NonEmpty<K,V>",b={unversionedId:"rimbu_collection-types/VariantMap/NonEmpty.interface",id:"rimbu_collection-types/VariantMap/NonEmpty.interface",title:"VariantMap.NonEmpty<K,V>",description:"A non-empty type-variant Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the Map documentation and the VariantMap API documentation",source:"@site/api/rimbu_collection-types/VariantMap/NonEmpty.interface.mdx",sourceDirName:"rimbu_collection-types/VariantMap",slug:"/rimbu/collection-types/VariantMap/NonEmpty/interface",permalink:"/api/rimbu/collection-types/VariantMap/NonEmpty/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"VariantMap.NonEmpty<K,V>",slug:"/rimbu/collection-types/VariantMap/NonEmpty/interface"},sidebar:"defaultSidebar",previous:{title:"VariantMap (namespace)",permalink:"/api/rimbu/collection-types/VariantMap/namespace"},next:{title:"VariantMap.Types",permalink:"/api/rimbu/collection-types/VariantMap/Types/interface"}},g={},h=[{value:"Type parameters",id:"type-parameters",level:2}],v={toc:h},O="wrapper";function M(e){var t=e,{components:n}=t,r=s(t,["components"]);return(0,a.yg)(O,u(m(m({},v),r),{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",m({},{id:"interface-variantmapnonemptykv"}),(0,a.yg)("inlineCode",{parentName:"h1"},"interface VariantMap.NonEmpty<K,V>")),(0,a.yg)("p",null,"A non-empty type-variant Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the ",(0,a.yg)("a",m({parentName:"p"},{href:"https://rimbu.org/docs/collections/map"}),"Map documentation")," and the ",(0,a.yg)("a",m({parentName:"p"},{href:"https://rimbu.org/api/rimbu/collection-types/map/VariantMap/interface"}),"VariantMap API documentation")),(0,a.yg)("h2",m({},{id:"type-parameters"}),"Type parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",m({parentName:"tr"},{align:null}),"K"),(0,a.yg)("td",m({parentName:"tr"},{align:null}),"the key type")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",m({parentName:"tr"},{align:null}),"V"),(0,a.yg)("td",m({parentName:"tr"},{align:null}),"the value type")))),(0,a.yg)("admonition",m({},{title:"note",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"Type-variance means that both the key and value types can be widened in a type-safe way without casting.  @note As a consequence of being variant, the type does not contain methods that (can) add new elements to the collection.")))}M.isMDXComponent=!0}}]);