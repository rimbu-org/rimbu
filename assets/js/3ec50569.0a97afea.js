"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[41609],{15680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>g});var a=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),y=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=y(e.components);return a.createElement(o.Provider,{value:n},e.children)},d="mdxType",s={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=y(t),c=r,g=d["".concat(o,".").concat(c)]||d[c]||s[c]||i;return t?a.createElement(g,l(l({ref:n},u),{},{components:t})):a.createElement(g,l({ref:n},u))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=c;var p={};for(var o in n)hasOwnProperty.call(n,o)&&(p[o]=n[o]);p.originalType=e,p[d]="string"==typeof e?e:r,l[1]=p;for(var y=2;y<i;y++)l[y]=t[y];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},89489:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>b,contentTitle:()=>m,default:()=>C,frontMatter:()=>g,metadata:()=>f,toc:()=>h});var a=t(15680),r=Object.defineProperty,i=Object.defineProperties,l=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,y=Object.prototype.propertyIsEnumerable,u=(e,n,t)=>n in e?r(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,d=(e,n)=>{for(var t in n||(n={}))o.call(n,t)&&u(e,t,n[t]);if(p)for(var t of p(n))y.call(n,t)&&u(e,t,n[t]);return e},s=(e,n)=>i(e,l(n)),c=(e,n)=>{var t={};for(var a in e)o.call(e,a)&&n.indexOf(a)<0&&(t[a]=e[a]);if(null!=e&&p)for(var a of p(e))n.indexOf(a)<0&&y.call(e,a)&&(t[a]=e[a]);return t};const g={title:"Spy.FnMeta<F>",slug:"/rimbu/spy/Spy/FnMeta/interface"},m="interface Spy.FnMeta<F>",f={unversionedId:"rimbu_spy/Spy/FnMeta.interface",id:"rimbu_spy/Spy/FnMeta.interface",title:"Spy.FnMeta<F>",description:"The extra information added to spied functions.",source:"@site/api/rimbu_spy/Spy/FnMeta.interface.mdx",sourceDirName:"rimbu_spy/Spy",slug:"/rimbu/spy/Spy/FnMeta/interface",permalink:"/api/rimbu/spy/Spy/FnMeta/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"Spy.FnMeta<F>",slug:"/rimbu/spy/Spy/FnMeta/interface"},sidebar:"defaultSidebar",previous:{title:"Spy.Fn<F>",permalink:"/api/rimbu/spy/Spy/Fn/interface"},next:{title:"FnStub",permalink:"/api/rimbu/spy/Spy/FnStub/type"}},b={},h=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>calls</code>",id:"calls",level:3},{value:"Definition",id:"definition",level:4},{value:"<code>isCalled</code>",id:"iscalled",level:3},{value:"Definition",id:"definition-1",level:4},{value:"<code>nrCalls</code>",id:"nrcalls",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Methods",id:"methods",level:2},{value:"<code>clearCalls</code>",id:"clearcalls",level:3},{value:"Definition",id:"definition-3",level:4},{value:"<code>resetStub</code>",id:"resetstub",level:3},{value:"Definition",id:"definition-4",level:4},{value:"<code>setStub</code>",id:"setstub",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Parameters",id:"parameters",level:4}],v={toc:h},N="wrapper";function C(e){var n=e,{components:t}=n,r=c(n,["components"]);return(0,a.yg)(N,s(d(d({},v),r),{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",d({},{id:"interface-spyfnmetaf"}),(0,a.yg)("inlineCode",{parentName:"h1"},"interface Spy.FnMeta<F>")),(0,a.yg)("p",null,"The extra information added to spied functions."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Implemented by:")," ",(0,a.yg)("a",d({parentName:"p"},{href:"/api/rimbu/spy/Spy/Fn/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"Spy.Fn<F>"))),(0,a.yg)("h2",d({},{id:"type-parameters"}),"Type parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",d({parentName:"tr"},{align:null}),"Constraints"),(0,a.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",d({parentName:"tr"},{align:null}),"F"),(0,a.yg)("td",d({parentName:"tr"},{align:null}),(0,a.yg)("a",d({parentName:"td"},{href:"/api/rimbu/spy/Func/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"Func"))),(0,a.yg)("td",d({parentName:"tr"},{align:null}),"the spied function type")))),(0,a.yg)("h2",d({},{id:"properties"}),"Properties"),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",d({},{id:"calls"}),(0,a.yg)("inlineCode",{parentName:"h3"},"calls")),(0,a.yg)("p",null,"Returns an array containing, for each received spy call, the given parameters.")),(0,a.yg)("h4",d({},{id:"definition"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"get calls(): Parameters<F>[];")))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",d({},{id:"iscalled"}),(0,a.yg)("inlineCode",{parentName:"h3"},"isCalled")),(0,a.yg)("p",null,"Returns true if the spy function has received at least one call.")),(0,a.yg)("h4",d({},{id:"definition-1"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"get isCalled(): boolean;")))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",d({},{id:"nrcalls"}),(0,a.yg)("inlineCode",{parentName:"h3"},"nrCalls")),(0,a.yg)("p",null,"Returns the number of calls this spy function has received.")),(0,a.yg)("h4",d({},{id:"definition-2"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"get nrCalls(): number;")))),(0,a.yg)("h2",d({},{id:"methods"}),"Methods"),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",d({},{id:"clearcalls"}),(0,a.yg)("inlineCode",{parentName:"h3"},"clearCalls")),(0,a.yg)("p",null,"Clears the spy functions' ",(0,a.yg)("inlineCode",{parentName:"p"},"calls")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"nrCalls")," history.")),(0,a.yg)("h4",d({},{id:"definition-3"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"clearCalls(): void;")))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",d({},{id:"resetstub"}),(0,a.yg)("inlineCode",{parentName:"h3"},"resetStub")),(0,a.yg)("p",null,"Resets the implementation used for the next spy function call to the original one used at construction time.")),(0,a.yg)("h4",d({},{id:"definition-4"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"resetStub(): void;")))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",d({},{id:"setstub"}),(0,a.yg)("inlineCode",{parentName:"h3"},"setStub")),(0,a.yg)("p",null,"Sets a stub implementation for this spy function, which will be used instead of the current function implementation upon the next received call.")),(0,a.yg)("h4",d({},{id:"definition-5"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"setStub(stub: "),(0,a.yg)("a",d({parentName:"p"},{href:"/api/rimbu/spy/Spy/FnStub/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"Spy.FnStub")),(0,a.yg)("inlineCode",{parentName:"p"},"<F> "),(0,a.yg)("code",null,"|"),(0,a.yg)("inlineCode",{parentName:"p"}," undefined): void;"))),(0,a.yg)("h4",d({},{id:"parameters"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",d({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"stub")),(0,a.yg)("td",d({parentName:"tr"},{align:null}),(0,a.yg)("a",d({parentName:"td"},{href:"/api/rimbu/spy/Spy/FnStub/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"Spy.FnStub")),(0,a.yg)("inlineCode",{parentName:"td"},"<F> "),(0,a.yg)("code",null,"|"),(0,a.yg)("inlineCode",{parentName:"td"}," undefined")),(0,a.yg)("td",d({parentName:"tr"},{align:null}),"the stub implementation to use"))))))}C.isMDXComponent=!0}}]);