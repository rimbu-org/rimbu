"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[75784],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>N});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),d=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=d(e.components);return a.createElement(o.Provider,{value:t},e.children)},u="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,o=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),u=d(n),s=i,N=u["".concat(o,".").concat(s)]||u[s]||k[s]||l;return n?a.createElement(N,r(r({ref:t},m),{},{components:n})):a.createElement(N,r({ref:t},m))}));function N(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=s;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[u]="string"==typeof e?e:i,r[1]=p;for(var d=2;d<l;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},15198:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>b,contentTitle:()=>c,default:()=>y,frontMatter:()=>N,metadata:()=>h,toc:()=>f});var a=n(3905),i=Object.defineProperty,l=Object.defineProperties,r=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,d=Object.prototype.propertyIsEnumerable,m=(e,t,n)=>t in e?i(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,u=(e,t)=>{for(var n in t||(t={}))o.call(t,n)&&m(e,n,t[n]);if(p)for(var n of p(t))d.call(t,n)&&m(e,n,t[n]);return e},k=(e,t)=>l(e,r(t)),s=(e,t)=>{var n={};for(var a in e)o.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&p)for(var a of p(e))t.indexOf(a)<0&&d.call(e,a)&&(n[a]=e[a]);return n};const N={title:"List.Builder<T>",slug:"/rimbu/list/List/Builder/interface"},c="interface List.Builder<T>",h={unversionedId:"rimbu_list/List/Builder.interface",id:"rimbu_list/List/Builder.interface",title:"List.Builder<T>",description:"A mutable builder to create immutable List instances in a more efficient way. See the List documentation and the List.Builder API documentation",source:"@site/api/rimbu_list/List/Builder.interface.mdx",sourceDirName:"rimbu_list/List",slug:"/rimbu/list/List/Builder/interface",permalink:"/api/rimbu/list/List/Builder/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"List.Builder<T>",slug:"/rimbu/list/List/Builder/interface"},sidebar:"defaultSidebar",previous:{title:"List (namespace)",permalink:"/api/rimbu/list/List/namespace"},next:{title:"List.Context",permalink:"/api/rimbu/list/List/Context/interface"}},b={},f=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>isEmpty</code>",id:"isempty",level:3},{value:"Definition",id:"definition",level:4},{value:"<code>length</code>",id:"length",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Methods",id:"methods",level:2},{value:"<code>append</code>",id:"append",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Parameters",id:"parameters",level:4},{value:"<code>appendAll</code>",id:"appendall",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>build</code>",id:"build",level:3},{value:"Definition",id:"definition-4",level:4},{value:"<code>buildMap</code>",id:"buildmap",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"<code>forEach</code>",id:"foreach",level:3},{value:"Definition",id:"definition-6",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"<code>get</code>",id:"get",level:3},{value:"Definitions",id:"definitions",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"<code>insert</code>",id:"insert",level:3},{value:"Definition",id:"definition-7",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"<code>prepend</code>",id:"prepend",level:3},{value:"Definition",id:"definition-8",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"<code>remove</code>",id:"remove",level:3},{value:"Definitions",id:"definitions-1",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"<code>set</code>",id:"set",level:3},{value:"Definitions",id:"definitions-2",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"<code>updateAt</code>",id:"updateat",level:3},{value:"Definitions",id:"definitions-3",level:4},{value:"Parameters",id:"parameters-9",level:4}],v={toc:f},g="wrapper";function y(e){var t=e,{components:n}=t,i=s(t,["components"]);return(0,a.kt)(g,k(u(u({},v),i),{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",u({},{id:"interface-listbuildert"}),(0,a.kt)("inlineCode",{parentName:"h1"},"interface List.Builder<T>")),(0,a.kt)("p",null,"A mutable builder to create immutable ",(0,a.kt)("inlineCode",{parentName:"p"},"List")," instances in a more efficient way. See the ",(0,a.kt)("a",u({parentName:"p"},{href:"https://rimbu.org/docs/collections/list"}),"List documentation")," and the ",(0,a.kt)("a",u({parentName:"p"},{href:"https://rimbu.org/api/rimbu/list/List/Builder/interface"}),"List.Builder API documentation")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Implemented by:")," ",(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/list/custom/GenBuilder/class"}),(0,a.kt)("inlineCode",{parentName:"a"},"GenBuilder<T>"))),(0,a.kt)("h2",u({},{id:"type-parameters"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"T"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the value type")))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"const b = List.builder<T>();\nb.append(1);\nb.prepend(2);\nb.insert(1, 3);\nb.build().toArray();\n// => [2, 3, 1]\n"))),(0,a.kt)("h2",u({},{id:"properties"}),"Properties"),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"isempty"}),(0,a.kt)("inlineCode",{parentName:"h3"},"isEmpty")),(0,a.kt)("p",null,"Returns true if there are no values in the builder.")),(0,a.kt)("h4",u({},{id:"definition"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"readonly isEmpty: boolean;"))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"List.of(1, 2, 3).toBuilder().isEmpty\n// => false\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"length"}),(0,a.kt)("inlineCode",{parentName:"h3"},"length")),(0,a.kt)("p",null,"Returns the amount of values in the builder.")),(0,a.kt)("h4",u({},{id:"definition-1"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"readonly length: number;"))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"List.of(1, 2, 3).toBuilder().size\n// => 3\n")))),(0,a.kt)("h2",u({},{id:"methods"}),"Methods"),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"append"}),(0,a.kt)("inlineCode",{parentName:"h3"},"append")),(0,a.kt)("p",null,"Adds the given ",(0,a.kt)("inlineCode",{parentName:"p"},"value")," to the end of the builder values.")),(0,a.kt)("h4",u({},{id:"definition-2"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"append(value: T): void;"))),(0,a.kt)("h4",u({},{id:"parameters"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"value")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"T")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the value to append")))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"const m = List.of(1, 2, 3).toBuilder()\nm.append(10)\nm.build().toArray()\n// => [1, 2, 3, 10]\n"))),(0,a.kt)("admonition",u({},{title:"note",type:"note"}),(0,a.kt)("p",{parentName:"admonition"},"O(logB(N)) for block size B - mosly o(1)"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"appendall"}),(0,a.kt)("inlineCode",{parentName:"h3"},"appendAll")),(0,a.kt)("p",null,"Adds all given ",(0,a.kt)("inlineCode",{parentName:"p"},"values")," at the end of the builder values")),(0,a.kt)("h4",u({},{id:"definition-3"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"appendAll(values: "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,a.kt)("inlineCode",{parentName:"p"},"<T>): void;"))),(0,a.kt)("h4",u({},{id:"parameters-1"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"values")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,a.kt)("inlineCode",{parentName:"td"},"<T>")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"a ",(0,a.kt)("inlineCode",{parentName:"td"},"StreamSource")," containing values to add")))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"const m = List.of(1, 2, 3).toBuilder()\nm.appendAll([10, 11])\nm.build().toArray()\n// => [1, 2, 3, 10, 11]\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"build"}),(0,a.kt)("inlineCode",{parentName:"h3"},"build")),(0,a.kt)("p",null,"Returns an immutable instance containing the values in this builder.")),(0,a.kt)("h4",u({},{id:"definition-4"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"build(): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/list/List/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"List")),(0,a.kt)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"const m = List.of(1, 2, 3).toBuilder()\nconst m2: List<number> = m.build()\nm.toArray()\n// => [1, 2, 3]\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"buildmap"}),(0,a.kt)("inlineCode",{parentName:"h3"},"buildMap")),(0,a.kt)("p",null,"Returns an immutable instance containing the result of applying given ",(0,a.kt)("inlineCode",{parentName:"p"},"mapFun")," to each value in the builder.")),(0,a.kt)("h4",u({},{id:"definition-5"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"buildMap<T2 = T>(mapFun: (value: T) => T2): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/list/List/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"List")),(0,a.kt)("inlineCode",{parentName:"p"},"<T2>;"))),(0,a.kt)("h4",u({},{id:"type-parameters-1"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Default"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"T2"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"T")),(0,a.kt)("td",u({parentName:"tr"},{align:null}))))),(0,a.kt)("h4",u({},{id:"parameters-2"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"mapFun")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"(value: T) => T2")),(0,a.kt)("td",u({parentName:"tr"},{align:null}))))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"const m = List.of(1, 2, 3).toBuilder()\nconst m2: List<number> = m.buildMap(v => String(v))\nm.toArray()\n// => ['1', '2', '3']\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"foreach"}),(0,a.kt)("inlineCode",{parentName:"h3"},"forEach")),(0,a.kt)("p",null,"Performs given function ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," for each value of the List builder.")),(0,a.kt)("h4",u({},{id:"definition-6"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"forEach(f: (value: T, index: number, halt: () => void) => void, options?: {"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"reversed?: boolean;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"state?: "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/TraverseState/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"TraverseState")),(0,a.kt)("inlineCode",{parentName:"p"},";"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"}): void;"))),(0,a.kt)("h4",u({},{id:"parameters-3"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"f")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"(value: T, index: number, halt: () => void) => void")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the function to perform for each element, receiving",(0,a.kt)("br",null)," - ",(0,a.kt)("inlineCode",{parentName:"td"},"value"),": the next value",(0,a.kt)("br",null)," - ",(0,a.kt)("inlineCode",{parentName:"td"},"index"),": the index of the value",(0,a.kt)("br",null)," - ",(0,a.kt)("inlineCode",{parentName:"td"},"halt"),": a function that, if called, ensures that no new elements are passed")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"options")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"{"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"reversed?: boolean;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"state?: "),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/common/TraverseState/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"TraverseState")),(0,a.kt)("inlineCode",{parentName:"td"},";"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"}")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,a.kt)("br",null)," - state: (optional) the traversal state")))),(0,a.kt)("admonition",u({},{title:"throws",type:"note"}),(0,a.kt)("p",{parentName:"admonition"},"RibuError.ModifiedBuilderWhileLoopingOverItError if the builder is modified while looping over it")),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"List.of(0, 1, 2, 3).toBuilder().forEach((value, i, halt) => {\nconsole.log(value * 2);\nif (i >= 1) halt();\n})\n// => logs 0  2\n"))),(0,a.kt)("admonition",u({},{title:"note",type:"note"}),(0,a.kt)("p",{parentName:"admonition"},"O(N)"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"get"}),(0,a.kt)("inlineCode",{parentName:"h3"},"get")),(0,a.kt)("p",null,"Returns the value in the List builder at the given ",(0,a.kt)("inlineCode",{parentName:"p"},"index"),".")),(0,a.kt)("h4",u({},{id:"definitions"}),"Definitions"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"get(index: number): T "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," undefined;"))),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"get<O>(index: number, otherwise: "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"OptLazy")),(0,a.kt)("inlineCode",{parentName:"p"},"<O>): T "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," O;"))),(0,a.kt)("h4",u({},{id:"parameters-4"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"index")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"number")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the element index")))),(0,a.kt)("admonition",u({},{title:"note",type:"note"}),(0,a.kt)("p",{parentName:"admonition"},"a negative ",(0,a.kt)("inlineCode",{parentName:"p"},"index")," will be treated as follows:",(0,a.kt)("br",null)," - -1: the last value in the list",(0,a.kt)("br",null)," - -2: the second-last value in the list",(0,a.kt)("br",null)," - ...etc")),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"const m = List.of(0, 1, 2).toBuilder()\nm.get(5)             // => undefined\nm.get(5, 'other')    // => 'other'\nm.get(1, 'other')    // => 1\nm.get(-1)            // => 2\n"))),(0,a.kt)("admonition",u({},{title:"note",type:"note"}),(0,a.kt)("p",{parentName:"admonition"},"O(logB(N)) for block size B"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"insert"}),(0,a.kt)("inlineCode",{parentName:"h3"},"insert")),(0,a.kt)("p",null,"Inserts the given ",(0,a.kt)("inlineCode",{parentName:"p"},"value")," at the given ",(0,a.kt)("inlineCode",{parentName:"p"},"index")," in the builder.")),(0,a.kt)("h4",u({},{id:"definition-7"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"insert(index: number, value: T): void;"))),(0,a.kt)("h4",u({},{id:"parameters-5"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"index")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"number")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the index at which to insert the value")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"value")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"T")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the value to insert")))),(0,a.kt)("admonition",u({},{title:"note",type:"note"}),(0,a.kt)("p",{parentName:"admonition"},"a negative ",(0,a.kt)("inlineCode",{parentName:"p"},"index")," will be treated as follows:",(0,a.kt)("br",null)," - -1: the last value in the list",(0,a.kt)("br",null)," - -2: the second-last value in the list",(0,a.kt)("br",null)," - ...etc")),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"const m = List.of(1, 2, 3).toBuilder()\nm.insert(1, 10)\nm.build().toArray()\n// => [1, 10, 2, 3]\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"prepend"}),(0,a.kt)("inlineCode",{parentName:"h3"},"prepend")),(0,a.kt)("p",null,"Adds the given ",(0,a.kt)("inlineCode",{parentName:"p"},"value")," to the start of the builder values.")),(0,a.kt)("h4",u({},{id:"definition-8"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"prepend(value: T): void;"))),(0,a.kt)("h4",u({},{id:"parameters-6"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"value")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"T")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the value to prepend")))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"const m = List.of(1, 2, 3).toBuilder()\nm.prepend(10)\nm.build().toArray()\n// => [10, 1, 2, 3]\n"))),(0,a.kt)("admonition",u({},{title:"note",type:"note"}),(0,a.kt)("p",{parentName:"admonition"},"O(logB(N)) for block size B - mosly o(1)"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"remove"}),(0,a.kt)("inlineCode",{parentName:"h3"},"remove")),(0,a.kt)("p",null,"Removes the value at the given ",(0,a.kt)("inlineCode",{parentName:"p"},"index")," in the builder.")),(0,a.kt)("h4",u({},{id:"definitions-1"}),"Definitions"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"remove(index: number): T "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," undefined;"))),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"remove<O>(index: number, otherwise: "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"OptLazy")),(0,a.kt)("inlineCode",{parentName:"p"},"<O>): T "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," O;"))),(0,a.kt)("h4",u({},{id:"parameters-7"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"index")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"number")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the index at which to remove a value")))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"const m = List.of(1, 2, 3).toBuilder()\nm.remove(10)       // => undefined\nm.remove(10, 'a')  // => 'a'\nm.remove(1)        // => 2\nm.remove(0, 'a')   // => 1\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"set"}),(0,a.kt)("inlineCode",{parentName:"h3"},"set")),(0,a.kt)("p",null,"Sets the element at the given ",(0,a.kt)("inlineCode",{parentName:"p"},"index")," to the given ",(0,a.kt)("inlineCode",{parentName:"p"},"value"),".")),(0,a.kt)("h4",u({},{id:"definitions-2"}),"Definitions"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"set(index: number, value: T): T "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," undefined;"))),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"set<O>(index: number, value: T, otherwise: "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"OptLazy")),(0,a.kt)("inlineCode",{parentName:"p"},"<O>): T "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," O;"))),(0,a.kt)("h4",u({},{id:"parameters-8"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"index")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"number")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the index of the element to set.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"value")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"T")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the new value to set.")))),(0,a.kt)("admonition",u({},{title:"note",type:"note"}),(0,a.kt)("p",{parentName:"admonition"},"a negative ",(0,a.kt)("inlineCode",{parentName:"p"},"index")," will be treated as follows:",(0,a.kt)("br",null)," - -1: the last element in the list",(0,a.kt)("br",null)," - -2: the second-last element in the list",(0,a.kt)("br",null)," - ...etc")),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"const m = List.of(1, 2, 3).toBuilder()\nm.set(0, 10)       // => 1\nm.set(1, 10, 'a')  // => 2\nm.set(10, 0)       // => undefined\nm.set(10, 0, 'a')  // => 'a'\n"))),(0,a.kt)("admonition",u({},{title:"note",type:"note"}),(0,a.kt)("p",{parentName:"admonition"},"O(logB(N)) for block size B"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"updateat"}),(0,a.kt)("inlineCode",{parentName:"h3"},"updateAt")),(0,a.kt)("p",null,"Updates the element at the given ",(0,a.kt)("inlineCode",{parentName:"p"},"index")," with the given ",(0,a.kt)("inlineCode",{parentName:"p"},"update")," value or function.")),(0,a.kt)("h4",u({},{id:"definitions-3"}),"Definitions"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"updateAt(index: number, update: "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/Update/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"Update")),(0,a.kt)("inlineCode",{parentName:"p"},"<T>): T "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," undefined;"))),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"updateAt<O>(index: number, update: "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/Update/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"Update")),(0,a.kt)("inlineCode",{parentName:"p"},"<T>, otherwise: "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"OptLazy")),(0,a.kt)("inlineCode",{parentName:"p"},"<O>): T "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," O;"))),(0,a.kt)("h4",u({},{id:"parameters-9"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"index")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"number")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the index of the element to update")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"update")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/common/Update/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"Update")),(0,a.kt)("inlineCode",{parentName:"td"},"<T>")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the new value or function taking the current value and returning a new value")))),(0,a.kt)("admonition",u({},{title:"note",type:"note"}),(0,a.kt)("p",{parentName:"admonition"},"a negative ",(0,a.kt)("inlineCode",{parentName:"p"},"index")," will be treated as follows:",(0,a.kt)("br",null)," - -1: the last element in the list",(0,a.kt)("br",null)," - -2: the second-last element in the list",(0,a.kt)("br",null)," - ...etc")),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"const m = List.of(1, 2, 3).toBuilder()\nm.updateAt(0, 10)       // => 1\nm.updateAt(1, 10, 'a')  // => 2\nm.updateAt(10, 0)       // => undefined\nm.updateAt(10, 0, 'a')  // => 'a'\n"))),(0,a.kt)("admonition",u({},{title:"note",type:"note"}),(0,a.kt)("p",{parentName:"admonition"},"O(logB(N)) for block size B"))))}y.isMDXComponent=!0}}]);