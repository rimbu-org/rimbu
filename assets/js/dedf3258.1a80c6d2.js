"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[72848],{15680:(e,t,a)=>{a.d(t,{xA:()=>m,yg:()=>f});var r=a(96540);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function p(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?p(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):p(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},p=Object.keys(e);for(r=0;r<p.length;r++)a=p[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(r=0;r<p.length;r++)a=p[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),c=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},y="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,p=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),y=c(a),s=n,f=y["".concat(l,".").concat(s)]||y[s]||u[s]||p;return a?r.createElement(f,o(o({ref:t},m),{},{components:a})):r.createElement(f,o({ref:t},m))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var p=a.length,o=new Array(p);o[0]=s;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[y]="string"==typeof e?e:n,o[1]=i;for(var c=2;c<p;c++)o[c]=a[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}s.displayName="MDXCreateElement"},90880:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>g,contentTitle:()=>b,default:()=>M,frontMatter:()=>f,metadata:()=>d,toc:()=>v});var r=a(15680),n=Object.defineProperty,p=Object.defineProperties,o=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,m=(e,t,a)=>t in e?n(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,y=(e,t)=>{for(var a in t||(t={}))l.call(t,a)&&m(e,a,t[a]);if(i)for(var a of i(t))c.call(t,a)&&m(e,a,t[a]);return e},u=(e,t)=>p(e,o(t)),s=(e,t)=>{var a={};for(var r in e)l.call(e,r)&&t.indexOf(r)<0&&(a[r]=e[r]);if(null!=e&&i)for(var r of i(e))t.indexOf(r)<0&&c.call(e,r)&&(a[r]=e[r]);return a};const f={title:"RMap<K,V>",slug:"/rimbu/collection-types/map/RMap/interface"},b="interface RMap<K,V>",d={unversionedId:"rimbu_collection-types/map/RMap.interface",id:"rimbu_collection-types/map/RMap.interface",title:"RMap<K,V>",description:"A type-invariant immutable Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the Map documentation and the RMap API documentation",source:"@site/api/rimbu_collection-types/map/RMap.interface.mdx",sourceDirName:"rimbu_collection-types/map",slug:"/rimbu/collection-types/map/RMap/interface",permalink:"/api/rimbu/collection-types/map/RMap/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"RMap<K,V>",slug:"/rimbu/collection-types/map/RMap/interface"},sidebar:"defaultSidebar",previous:{title:"RMap.Types",permalink:"/api/rimbu/collection-types/map/RMap/Types/interface"},next:{title:"VariantMap (namespace)",permalink:"/api/rimbu/collection-types/map/VariantMap/namespace"}},g={},v=[{value:"Type parameters",id:"type-parameters",level:2}],h={toc:v},O="wrapper";function M(e){var t=e,{components:a}=t,n=s(t,["components"]);return(0,r.yg)(O,u(y(y({},h),n),{components:a,mdxType:"MDXLayout"}),(0,r.yg)("h1",y({},{id:"interface-rmapkv"}),(0,r.yg)("inlineCode",{parentName:"h1"},"interface RMap<K,V>")),(0,r.yg)("p",null,"A type-invariant immutable Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the ",(0,r.yg)("a",y({parentName:"p"},{href:"https://rimbu.org/docs/collections/map"}),"Map documentation")," and the ",(0,r.yg)("a",y({parentName:"p"},{href:"https://rimbu.org/api/rimbu/collection-types/map/RMap/interface"}),"RMap API documentation")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Companion namespace:")," ",(0,r.yg)("a",y({parentName:"p"},{href:"/api/rimbu/collection-types/map/RMap/namespace"}),"RMap")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Implemented by:")," ",(0,r.yg)("a",y({parentName:"p"},{href:"/api/rimbu/collection-types/map/RMap/NonEmpty/interface"}),(0,r.yg)("inlineCode",{parentName:"a"},"RMap.NonEmpty<K,V>"))),(0,r.yg)("h2",y({},{id:"type-parameters"}),"Type parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,r.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",y({parentName:"tr"},{align:null}),"K"),(0,r.yg)("td",y({parentName:"tr"},{align:null}),"the key type")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",y({parentName:"tr"},{align:null}),"V"),(0,r.yg)("td",y({parentName:"tr"},{align:null}),"the value type")))))}M.isMDXComponent=!0}}]);