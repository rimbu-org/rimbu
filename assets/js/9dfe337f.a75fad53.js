"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[11994],{15680:(e,n,t)=>{t.d(n,{xA:()=>m,yg:()=>s});var a=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=a.createContext({}),g=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=g(e.components);return a.createElement(d.Provider,{value:n},e.children)},p="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),p=g(t),u=r,s=p["".concat(d,".").concat(u)]||p[u]||y[u]||l;return t?a.createElement(s,i(i({ref:n},m),{},{components:t})):a.createElement(s,i({ref:n},m))}));function s(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=u;var o={};for(var d in n)hasOwnProperty.call(n,d)&&(o[d]=n[d]);o.originalType=e,o[p]="string"==typeof e?e:r,i[1]=o;for(var g=2;g<l;g++)i[g]=t[g];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},27124:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>f,contentTitle:()=>c,default:()=>S,frontMatter:()=>s,metadata:()=>N,toc:()=>h});var a=t(15680),r=Object.defineProperty,l=Object.defineProperties,i=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,d=Object.prototype.hasOwnProperty,g=Object.prototype.propertyIsEnumerable,m=(e,n,t)=>n in e?r(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,p=(e,n)=>{for(var t in n||(n={}))d.call(n,t)&&m(e,t,n[t]);if(o)for(var t of o(n))g.call(n,t)&&m(e,t,n[t]);return e},y=(e,n)=>l(e,i(n)),u=(e,n)=>{var t={};for(var a in e)d.call(e,a)&&n.indexOf(a)<0&&(t[a]=e[a]);if(null!=e&&o)for(var a of o(e))n.indexOf(a)<0&&g.call(e,a)&&(t[a]=e[a]);return t};const s={title:"SortedSet<T>",slug:"/rimbu/sorted/set/SortedSet/interface"},c="interface SortedSet<T>",N={unversionedId:"rimbu_sorted/set/SortedSet.interface",id:"rimbu_sorted/set/SortedSet.interface",title:"SortedSet<T>",description:"A type-invariant immutable Set of value type T. In the Set, there are no duplicate values. See the Set documentation and the SortedSet API documentation",source:"@site/api/rimbu_sorted/set/SortedSet.interface.mdx",sourceDirName:"rimbu_sorted/set",slug:"/rimbu/sorted/set/SortedSet/interface",permalink:"/api/rimbu/sorted/set/SortedSet/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"SortedSet<T>",slug:"/rimbu/sorted/set/SortedSet/interface"},sidebar:"defaultSidebar",previous:{title:"SortedSet.Types",permalink:"/api/rimbu/sorted/set/SortedSet/Types/interface"},next:{title:"@rimbu/sorted/set-custom",permalink:"/api/rimbu/sorted/set-custom"}},f={},h=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>drop</code>",id:"drop",level:3},{value:"Definition",id:"definition",level:4},{value:"Parameters",id:"parameters",level:4},{value:"<code>findIndex</code>",id:"findindex",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>getAtIndex</code>",id:"getatindex",level:3},{value:"Definitions",id:"definitions",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"<code>max</code>",id:"max",level:3},{value:"Definitions",id:"definitions-1",level:4},{value:"<code>min</code>",id:"min",level:3},{value:"Definitions",id:"definitions-2",level:4},{value:"<code>slice</code>",id:"slice",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"<code>sliceIndex</code>",id:"sliceindex",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"<code>stream</code>",id:"stream",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"<code>streamRange</code>",id:"streamrange",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"<code>streamSliceIndex</code>",id:"streamsliceindex",level:3},{value:"Definition",id:"definition-6",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"<code>take</code>",id:"take",level:3},{value:"Definition",id:"definition-7",level:4},{value:"Parameters",id:"parameters-8",level:4}],b={toc:h},v="wrapper";function S(e){var n=e,{components:t}=n,r=u(n,["components"]);return(0,a.yg)(v,y(p(p({},b),r),{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",p({},{id:"interface-sortedsett"}),(0,a.yg)("inlineCode",{parentName:"h1"},"interface SortedSet<T>")),(0,a.yg)("p",null,"A type-invariant immutable Set of value type T. In the Set, there are no duplicate values. See the ",(0,a.yg)("a",p({parentName:"p"},{href:"https://rimbu.org/docs/collections/set"}),"Set documentation")," and the ",(0,a.yg)("a",p({parentName:"p"},{href:"https://rimbu.org/api/rimbu/ordered/set/SortedSet/interface"}),"SortedSet API documentation")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Companion namespace:")," ",(0,a.yg)("a",p({parentName:"p"},{href:"/api/rimbu/sorted/set/SortedSet/namespace"}),"SortedSet")),(0,a.yg)("h2",p({},{id:"type-parameters"}),"Type parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",p({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",p({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",p({parentName:"tr"},{align:null}),"T"),(0,a.yg)("td",p({parentName:"tr"},{align:null}),"the value type")))),(0,a.yg)("admonition",p({},{title:"note",type:"note"}),(0,a.yg)("ul",{parentName:"admonition"},(0,a.yg)("li",{parentName:"ul"},"The ",(0,a.yg)("inlineCode",{parentName:"li"},"SortedSet")," keeps the inserted values in sorted order according to the context's ",(0,a.yg)("inlineCode",{parentName:"li"},"comp")," ",(0,a.yg)("inlineCode",{parentName:"li"},"Comp")," instance."))),(0,a.yg)("admonition",p({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",p({parentName:"pre"},{className:"language-ts"}),"const s1 = SortedSet.empty<string>()\nconst s2 = SortedSet.of('a', 'b', 'c')\n"))),(0,a.yg)("h2",p({},{id:"methods"}),"Methods"),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",p({},{id:"drop"}),(0,a.yg)("inlineCode",{parentName:"h3"},"drop")),(0,a.yg)("p",null,"Returns a SortedSet containing all but the the first ",(0,a.yg)("inlineCode",{parentName:"p"},"amount")," of value of this SortedSet.")),(0,a.yg)("h4",p({},{id:"definition"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"drop(amount: number): "),(0,a.yg)("a",p({parentName:"p"},{href:"/api/rimbu/sorted/SortedSet/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"SortedSet")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.yg)("h4",p({},{id:"parameters"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",p({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",p({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",p({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",p({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"amount")),(0,a.yg)("td",p({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"number")),(0,a.yg)("td",p({parentName:"tr"},{align:null}),"the amount of elements to keep")))),(0,a.yg)("admonition",p({},{title:"note",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"a negative ",(0,a.yg)("inlineCode",{parentName:"p"},"amount")," drops the last values instead of the first, e.g. -2 is the last 2 elements")),(0,a.yg)("admonition",p({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",p({parentName:"pre"},{className:"language-ts"}),"const m = SortedSet.of('b', 'd', 'a', 'c').asNormal();\nconsole.log(m.drop(2).toArray())\n// => ['c', 'd']\nconsole.log(m.drop(-2).toArray())\n// => ['a', 'b']\n")))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",p({},{id:"findindex"}),(0,a.yg)("inlineCode",{parentName:"h3"},"findIndex")),(0,a.yg)("p",null,"Returns the index of the given value in the SortedSet, or -1 if the value is not present.")),(0,a.yg)("h4",p({},{id:"definition-1"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"findIndex(value: T): number;"))),(0,a.yg)("h4",p({},{id:"parameters-1"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",p({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",p({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",p({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",p({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"value")),(0,a.yg)("td",p({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"T")),(0,a.yg)("td",p({parentName:"tr"},{align:null}),"the value to find the index for")))),(0,a.yg)("admonition",p({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",p({parentName:"pre"},{className:"language-ts"}),"const m = SortedSet.of('b', 'd', 'a', 'c');\nconsole.log(m.findIndex('c'))\n// => 2\nconsole.log(m.findIndex('q'))\n// => -1\n")))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",p({},{id:"getatindex"}),(0,a.yg)("inlineCode",{parentName:"h3"},"getAtIndex")),(0,a.yg)("p",null,"Returns the value at the given index of the value sort order of the SortedSet, or a fallback value (default: undefined) if the index is out of bounds.")),(0,a.yg)("h4",p({},{id:"definitions"}),"Definitions"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"getAtIndex(index: number): T "),(0,a.yg)("code",null,"|"),(0,a.yg)("inlineCode",{parentName:"p"}," undefined;"))),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"getAtIndex<O>(index: number, otherwise: "),(0,a.yg)("a",p({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,a.yg)("inlineCode",{parentName:"p"},"<O>): T "),(0,a.yg)("code",null,"|"),(0,a.yg)("inlineCode",{parentName:"p"}," O;"))),(0,a.yg)("h4",p({},{id:"parameters-2"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",p({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",p({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",p({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",p({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"index")),(0,a.yg)("td",p({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"number")),(0,a.yg)("td",p({parentName:"tr"},{align:null}),"the index in the key sort order")))),(0,a.yg)("admonition",p({},{title:"note",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"negative index values will retrieve the values from the end of the sort order, e.g. -1 is the last value")),(0,a.yg)("admonition",p({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",p({parentName:"pre"},{className:"language-ts"}),"const m = SortedSet.of('b', 'd', 'a', 'c').asNormal();\nconsole.log(m.getAtIndex(1))\n// => 'b'\nconsole.log(m.getAtIndex(-1))\n// => 'd'\nconsole.log(m.getAtIndex(10))\n// => undefined\nconsole.log(m.getAtIndex(10, 'q'))\n// => 'q'\n")))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",p({},{id:"max"}),(0,a.yg)("inlineCode",{parentName:"h3"},"max")),(0,a.yg)("p",null,"Returns the maximum value of the SortedSet, or a fallback value (default: undefined) if the SortedSet is empty.")),(0,a.yg)("h4",p({},{id:"definitions-1"}),"Definitions"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"max(): T "),(0,a.yg)("code",null,"|"),(0,a.yg)("inlineCode",{parentName:"p"}," undefined;"))),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"max<O>(otherwise: "),(0,a.yg)("a",p({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,a.yg)("inlineCode",{parentName:"p"},"<O>): T "),(0,a.yg)("code",null,"|"),(0,a.yg)("inlineCode",{parentName:"p"}," O;"))),(0,a.yg)("admonition",p({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",p({parentName:"pre"},{className:"language-ts"}),"const m = SortedSet.of('b', 'd', 'a', 'c').asNormal();\nconsole.log(m.max())\n// => 'a'\nconsole.log(m.max('q'))\n// => 'a'\nconsole.log(SortedSet.empty().max())\n// => undefined\nconsole.log(SortedSet.empty().max('q'))\n// => 'q'\n")))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",p({},{id:"min"}),(0,a.yg)("inlineCode",{parentName:"h3"},"min")),(0,a.yg)("p",null,"Returns the minimum value of the SortedSet, or a fallback value (default: undefined) if the SortedSet is empty.")),(0,a.yg)("h4",p({},{id:"definitions-2"}),"Definitions"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"min(): T "),(0,a.yg)("code",null,"|"),(0,a.yg)("inlineCode",{parentName:"p"}," undefined;"))),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"min<O>(otherwise: "),(0,a.yg)("a",p({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,a.yg)("inlineCode",{parentName:"p"},"<O>): T "),(0,a.yg)("code",null,"|"),(0,a.yg)("inlineCode",{parentName:"p"}," O;"))),(0,a.yg)("admonition",p({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",p({parentName:"pre"},{className:"language-ts"}),"const m = SortedSet.of('b', 'd', 'a', 'c').asNormal();\nconsole.log(m.min())\n// => 'a'\nconsole.log(m.min('q'))\n// => 'a'\nconsole.log(SortedSet.empty().min())\n// => undefined\nconsole.log(SortedSet.empty().min('q'))\n// => 'q'\n")))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",p({},{id:"slice"}),(0,a.yg)("inlineCode",{parentName:"h3"},"slice")),(0,a.yg)("p",null,"Returns a SortedSet containing only those values that are within the given ",(0,a.yg)("inlineCode",{parentName:"p"},"keyRange"),".")),(0,a.yg)("h4",p({},{id:"definition-2"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"slice(range: Range<T>): "),(0,a.yg)("a",p({parentName:"p"},{href:"/api/rimbu/sorted/SortedSet/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"SortedSet")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.yg)("h4",p({},{id:"parameters-3"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",p({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",p({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",p({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",p({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"range")),(0,a.yg)("td",p({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"Range<T>")),(0,a.yg)("td",p({parentName:"tr"},{align:null}),"a ",(0,a.yg)("inlineCode",{parentName:"td"},"Range")," defining the values to include")))),(0,a.yg)("admonition",p({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",p({parentName:"pre"},{className:"language-ts"}),"const m = SortedSet.of('b', 'd', 'a', 'c').asNormal();\nconsole.log(m.slice({ start: 'b', end: 'c' }).toArray())\n// => ['b', 'c']\n")))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",p({},{id:"sliceindex"}),(0,a.yg)("inlineCode",{parentName:"h3"},"sliceIndex")),(0,a.yg)("p",null,"Returns a SortedSet containing only those values that are within the given ",(0,a.yg)("inlineCode",{parentName:"p"},"range")," index range of the value sort order.")),(0,a.yg)("h4",p({},{id:"definition-3"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"sliceIndex(range: IndexRange): "),(0,a.yg)("a",p({parentName:"p"},{href:"/api/rimbu/sorted/SortedSet/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"SortedSet")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.yg)("h4",p({},{id:"parameters-4"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",p({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",p({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",p({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",p({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"range")),(0,a.yg)("td",p({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"IndexRange")),(0,a.yg)("td",p({parentName:"tr"},{align:null}),"an ",(0,a.yg)("inlineCode",{parentName:"td"},"IndexRange")," defining the sort order indices to include.")))),(0,a.yg)("admonition",p({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",p({parentName:"pre"},{className:"language-ts"}),"const m = SortedSet.of('b', 'd', 'a', 'c').asNormal();\nconsole.log(m.sliceIndex({ start: 1, amount: 2 }).toArray())\n// => ['b', 'c']\n")))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",p({},{id:"stream"}),(0,a.yg)("inlineCode",{parentName:"h3"},"stream")),(0,a.yg)("p",null,"undocumented")),(0,a.yg)("h4",p({},{id:"definition-4"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"stream(options?: {"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"reversed?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"}): "),(0,a.yg)("a",p({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"Stream")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.yg)("h4",p({},{id:"parameters-5"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",p({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",p({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",p({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",p({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"options")),(0,a.yg)("td",p({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"{"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"reversed?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"}")),(0,a.yg)("td",p({parentName:"tr"},{align:null})))))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",p({},{id:"streamrange"}),(0,a.yg)("inlineCode",{parentName:"h3"},"streamRange")),(0,a.yg)("p",null,"Returns a Stream of sorted values of this collection within the given ",(0,a.yg)("inlineCode",{parentName:"p"},"keyRange"),".")),(0,a.yg)("h4",p({},{id:"definition-5"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"streamRange(range: Range<T>, options?: {"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"reversed?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"}): "),(0,a.yg)("a",p({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"Stream")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.yg)("h4",p({},{id:"parameters-6"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",p({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",p({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",p({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",p({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"range")),(0,a.yg)("td",p({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"Range<T>")),(0,a.yg)("td",p({parentName:"tr"},{align:null}))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",p({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"options")),(0,a.yg)("td",p({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"{"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"reversed?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"}")),(0,a.yg)("td",p({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,a.yg)("br",null)," - reversed: (default: false) when true will reverse the stream element order")))),(0,a.yg)("admonition",p({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",p({parentName:"pre"},{className:"language-ts"}),"const m = SortedSet.of('b', 'd', 'a', 'c');\nconsole.log(m.streamRange({ start: 'b', end: 'c' }).toArray())\n// => ['b', 'c']\n")))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",p({},{id:"streamsliceindex"}),(0,a.yg)("inlineCode",{parentName:"h3"},"streamSliceIndex")),(0,a.yg)("p",null,"Returns a Stream of sorted values of this collection within the given ",(0,a.yg)("inlineCode",{parentName:"p"},"range")," index range.")),(0,a.yg)("h4",p({},{id:"definition-6"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"streamSliceIndex(range: IndexRange, options?: {"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"reversed?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"}): "),(0,a.yg)("a",p({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"Stream")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.yg)("h4",p({},{id:"parameters-7"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",p({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",p({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",p({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",p({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"range")),(0,a.yg)("td",p({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"IndexRange")),(0,a.yg)("td",p({parentName:"tr"},{align:null}),"the range of values to include in the stream")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",p({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"options")),(0,a.yg)("td",p({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"{"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"reversed?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"}")),(0,a.yg)("td",p({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,a.yg)("br",null)," - reversed: (default: false) when true will reverse the stream element order")))),(0,a.yg)("admonition",p({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",p({parentName:"pre"},{className:"language-ts"}),"const m = SortedSet.of('b', 'd', 'a', 'c');\nconsole.log(m.streamSliceIndex({ start: 1, amount: 2 }).toArray())\n// => ['b', 'c']\n")))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",p({},{id:"take"}),(0,a.yg)("inlineCode",{parentName:"h3"},"take")),(0,a.yg)("p",null,"Returns a SortedSet containing the the first ",(0,a.yg)("inlineCode",{parentName:"p"},"amount")," of value of this SortedSet.")),(0,a.yg)("h4",p({},{id:"definition-7"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"take(amount: number): "),(0,a.yg)("a",p({parentName:"p"},{href:"/api/rimbu/sorted/SortedSet/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"SortedSet")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.yg)("h4",p({},{id:"parameters-8"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",p({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",p({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",p({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",p({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"amount")),(0,a.yg)("td",p({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"number")),(0,a.yg)("td",p({parentName:"tr"},{align:null}),"the amount of elements to keep")))),(0,a.yg)("admonition",p({},{title:"note",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"a negative ",(0,a.yg)("inlineCode",{parentName:"p"},"amount")," takes the last values instead of the first, e.g. -2 is the last 2 elements")),(0,a.yg)("admonition",p({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",p({parentName:"pre"},{className:"language-ts"}),"const m = SortedSet.of('b', 'd', 'a', 'c').asNormal();\nconsole.log(m.take(2).toArray())\n// => ['a', 'b']\nconsole.log(m.take(-2).toArray())\n// => ['c', 'd']\n")))))}S.isMDXComponent=!0}}]);