"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[94794],{15680:(e,a,n)=>{n.d(a,{xA:()=>y,yg:()=>s});var t=n(96540);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function l(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?l(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function o(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=t.createContext({}),m=function(e){var a=t.useContext(p),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},y=function(e){var a=m(e.components);return t.createElement(p.Provider,{value:a},e.children)},g="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},u=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,y=o(e,["components","mdxType","originalType","parentName"]),g=m(n),u=r,s=g["".concat(p,".").concat(u)]||g[u]||d[u]||l;return n?t.createElement(s,i(i({ref:a},y),{},{components:n})):t.createElement(s,i({ref:a},y))}));function s(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=u;var o={};for(var p in a)hasOwnProperty.call(a,p)&&(o[p]=a[p]);o.originalType=e,o[g]="string"==typeof e?e:r,i[1]=o;for(var m=2;m<l;m++)i[m]=n[m];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},53264:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>N,default:()=>C,frontMatter:()=>s,metadata:()=>h,toc:()=>b});var t=n(15680),r=Object.defineProperty,l=Object.defineProperties,i=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable,y=(e,a,n)=>a in e?r(e,a,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[a]=n,g=(e,a)=>{for(var n in a||(a={}))p.call(a,n)&&y(e,n,a[n]);if(o)for(var n of o(a))m.call(a,n)&&y(e,n,a[n]);return e},d=(e,a)=>l(e,i(a)),u=(e,a)=>{var n={};for(var t in e)p.call(e,t)&&a.indexOf(t)<0&&(n[t]=e[t]);if(null!=e&&o)for(var t of o(e))a.indexOf(t)<0&&m.call(e,t)&&(n[t]=e[t]);return n};const s={title:"VariantTableBase.NonEmpty<R,C,V,Tp>",slug:"/rimbu/table/custom/VariantTableBase/NonEmpty/interface"},N="interface VariantTableBase.NonEmpty<R,C,V,Tp>",h={unversionedId:"rimbu_table/custom/VariantTableBase/NonEmpty.interface",id:"rimbu_table/custom/VariantTableBase/NonEmpty.interface",title:"VariantTableBase.NonEmpty<R,C,V,Tp>",description:"undocumented",source:"@site/api/rimbu_table/custom/VariantTableBase/NonEmpty.interface.mdx",sourceDirName:"rimbu_table/custom/VariantTableBase",slug:"/rimbu/table/custom/VariantTableBase/NonEmpty/interface",permalink:"/api/rimbu/table/custom/VariantTableBase/NonEmpty/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"VariantTableBase.NonEmpty<R,C,V,Tp>",slug:"/rimbu/table/custom/VariantTableBase/NonEmpty/interface"},sidebar:"defaultSidebar",previous:{title:"VariantTableBase (namespace)",permalink:"/api/rimbu/table/custom/VariantTableBase/namespace"},next:{title:"VariantTableBase.Types",permalink:"/api/rimbu/table/custom/VariantTableBase/Types/interface"}},c={},b=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>amountRows</code>",id:"amountrows",level:3},{value:"Definition",id:"definition",level:4},{value:"Overrides",id:"overrides",level:4},{value:"<code>isEmpty</code>",id:"isempty",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"<code>rowMap</code>",id:"rowmap",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"<code>size</code>",id:"size",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"Methods",id:"methods",level:2},{value:"<code>[Symbol.iterator]</code>",id:"symboliterator",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Overrides",id:"overrides-4",level:4},{value:"<code>asNormal</code>",id:"asnormal",level:3},{value:"Definition",id:"definition-5",level:4},{value:"<code>assumeNonEmpty</code>",id:"assumenonempty",level:3},{value:"Definition",id:"definition-6",level:4},{value:"Overrides",id:"overrides-5",level:4},{value:"<code>filter</code>",id:"filter",level:3},{value:"Definition",id:"definition-7",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Overrides",id:"overrides-6",level:4},{value:"<code>filterRows</code>",id:"filterrows",level:3},{value:"Definition",id:"definition-8",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Overrides",id:"overrides-7",level:4},{value:"<code>forEach</code>",id:"foreach",level:3},{value:"Definition",id:"definition-9",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Overrides",id:"overrides-8",level:4},{value:"<code>get</code>",id:"get",level:3},{value:"Definitions",id:"definitions",level:4},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Overrides",id:"overrides-9",level:4},{value:"<code>getRow</code>",id:"getrow",level:3},{value:"Definition",id:"definition-10",level:4},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"Overrides",id:"overrides-10",level:4},{value:"<code>hasRowKey</code>",id:"hasrowkey",level:3},{value:"Definition",id:"definition-11",level:4},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"Overrides",id:"overrides-11",level:4},{value:"<code>hasValueAt</code>",id:"hasvalueat",level:3},{value:"Definition",id:"definition-12",level:4},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"Overrides",id:"overrides-12",level:4},{value:"<code>mapValues</code>",id:"mapvalues",level:3},{value:"Definition",id:"definition-13",level:4},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"Overrides",id:"overrides-13",level:4},{value:"<code>nonEmpty</code>",id:"nonempty",level:3},{value:"Definition",id:"definition-14",level:4},{value:"Overrides",id:"overrides-14",level:4},{value:"<code>remove</code>",id:"remove",level:3},{value:"Definition",id:"definition-15",level:4},{value:"Type parameters",id:"type-parameters-6",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"Overrides",id:"overrides-15",level:4},{value:"<code>removeAndGet</code>",id:"removeandget",level:3},{value:"Definition",id:"definition-16",level:4},{value:"Type parameters",id:"type-parameters-7",level:4},{value:"Parameters",id:"parameters-9",level:4},{value:"Overrides",id:"overrides-16",level:4},{value:"<code>removeEntries</code>",id:"removeentries",level:3},{value:"Definition",id:"definition-17",level:4},{value:"Type parameters",id:"type-parameters-8",level:4},{value:"Parameters",id:"parameters-10",level:4},{value:"Overrides",id:"overrides-17",level:4},{value:"<code>removeRow</code>",id:"removerow",level:3},{value:"Definition",id:"definition-18",level:4},{value:"Type parameters",id:"type-parameters-9",level:4},{value:"Parameters",id:"parameters-11",level:4},{value:"Overrides",id:"overrides-18",level:4},{value:"<code>removeRowAndGet</code>",id:"removerowandget",level:3},{value:"Definition",id:"definition-19",level:4},{value:"Type parameters",id:"type-parameters-10",level:4},{value:"Parameters",id:"parameters-12",level:4},{value:"Overrides",id:"overrides-19",level:4},{value:"<code>removeRows</code>",id:"removerows",level:3},{value:"Definition",id:"definition-20",level:4},{value:"Type parameters",id:"type-parameters-11",level:4},{value:"Parameters",id:"parameters-13",level:4},{value:"Overrides",id:"overrides-20",level:4},{value:"<code>stream</code>",id:"stream",level:3},{value:"Definition",id:"definition-21",level:4},{value:"Overrides",id:"overrides-21",level:4},{value:"<code>streamRows</code>",id:"streamrows",level:3},{value:"Definition",id:"definition-22",level:4},{value:"Overrides",id:"overrides-22",level:4},{value:"<code>streamValues</code>",id:"streamvalues",level:3},{value:"Definition",id:"definition-23",level:4},{value:"Overrides",id:"overrides-23",level:4},{value:"<code>toArray</code>",id:"toarray",level:3},{value:"Definition",id:"definition-24",level:4},{value:"Overrides",id:"overrides-24",level:4},{value:"<code>toJSON</code>",id:"tojson",level:3},{value:"Definition",id:"definition-25",level:4},{value:"Overrides",id:"overrides-25",level:4},{value:"<code>toString</code>",id:"tostring",level:3},{value:"Definition",id:"definition-26",level:4},{value:"Overrides",id:"overrides-26",level:4}],v={toc:b},f="wrapper";function C(e){var a=e,{components:n}=a,r=u(a,["components"]);return(0,t.yg)(f,d(g(g({},v),r),{components:n,mdxType:"MDXLayout"}),(0,t.yg)("h1",g({},{id:"interface-varianttablebasenonemptyrcvtp"}),(0,t.yg)("inlineCode",{parentName:"h1"},"interface VariantTableBase.NonEmpty<R,C,V,Tp>")),(0,t.yg)("p",null,"undocumented"),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Extends:")," ",(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/Streamable/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Streamable.NonEmpty<T>")),", ",(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/table/custom/VariantTableBase/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"VariantTableBase<R,C,V,Tp>"))),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Implemented by:")," ",(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/table/custom/TableBase/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"TableBase.NonEmpty<R,C,V,Tp>"))),(0,t.yg)("h2",g({},{id:"type-parameters"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"R"),(0,t.yg)("td",g({parentName:"tr"},{align:null})),(0,t.yg)("td",g({parentName:"tr"},{align:null})),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"undocumented")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"C"),(0,t.yg)("td",g({parentName:"tr"},{align:null})),(0,t.yg)("td",g({parentName:"tr"},{align:null})),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"undocumented")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"V"),(0,t.yg)("td",g({parentName:"tr"},{align:null})),(0,t.yg)("td",g({parentName:"tr"},{align:null})),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"undocumented")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"Tp"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/table/custom/VariantTableBase/Types/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"VariantTableBase.Types"))),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/table/custom/VariantTableBase/Types/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"VariantTableBase.Types"))),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"undocumented")))),(0,t.yg)("h2",g({},{id:"properties"}),"Properties"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"amountrows"}),(0,t.yg)("inlineCode",{parentName:"h3"},"amountRows")),(0,t.yg)("p",null,"Returns the amount of rows in the collection.")),(0,t.yg)("h4",g({},{id:"definition"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly amountRows: number;"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashTableHashColumn.empty<number, number, number>().rowSize   // => 0\nHashTableHashColumn.of([1, 2, 3], [1, 4, 5]).rowSize          // => 1\n"))),(0,t.yg)("h4",g({},{id:"overrides"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/table/custom/VariantTableBase/interface#amountRows"}),"VariantTableBase.amountRows"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"isempty"}),(0,t.yg)("inlineCode",{parentName:"h3"},"isEmpty")),(0,t.yg)("p",null,"Returns false since this collection is known to be non-empty")),(0,t.yg)("h4",g({},{id:"definition-1"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly isEmpty: false;"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashTableHashColumn.of([1, 2, 3], [1, 4, 5]).isEmpty   // => false\n"))),(0,t.yg)("h4",g({},{id:"overrides-1"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/table/custom/VariantTableBase/interface#isEmpty"}),"VariantTableBase.isEmpty"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"rowmap"}),(0,t.yg)("inlineCode",{parentName:"h3"},"rowMap")),(0,t.yg)("p",null,"Returns the Map representation of this collection.")),(0,t.yg)("h4",g({},{id:"definition-2"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly rowMap: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithRow/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithRow")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, R, C, V>['rowMapNonEmpty'];"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const m = HashTableHashColumn.of([1, 2, 3], [1, 4, 5])\nconst map: HashMap.NonEmpty<number, HashMap.NonEmpty<number, number>> = m.rowMap\n"))),(0,t.yg)("h4",g({},{id:"overrides-2"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/table/custom/VariantTableBase/interface#rowMap"}),"VariantTableBase.rowMap"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"size"}),(0,t.yg)("inlineCode",{parentName:"h3"},"size")),(0,t.yg)("p",null,"Returns the amount of entries in the collection.")),(0,t.yg)("h4",g({},{id:"definition-3"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly size: number;"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashTableHashColumn.empty<number, number, number>().size   // => 0\nHashTableHashColumn.of([1, 2, 3], [1, 4, 5]).size          // => 2\n"))),(0,t.yg)("h4",g({},{id:"overrides-3"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/table/custom/VariantTableBase/interface#size"}),"VariantTableBase.size"))),(0,t.yg)("h2",g({},{id:"methods"}),"Methods"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"symboliterator"}),(0,t.yg)("inlineCode",{parentName:"h3"},"[Symbol.iterator]")),(0,t.yg)("p",null,"Returns a ",(0,t.yg)("inlineCode",{parentName:"p"},"FastIterator")," instance used to iterate over the values of this ",(0,t.yg)("inlineCode",{parentName:"p"},"Iterable"),".")),(0,t.yg)("h4",g({},{id:"definition-4"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"[Symbol.iterator](): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/FastIterator/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"FastIterator")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,t.yg)("h4",g({},{id:"overrides-4"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/FastIterable/interface#%5BSymbol.iterator%5D"}),"FastIterable.[Symbol.iterator]"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"asnormal"}),(0,t.yg)("inlineCode",{parentName:"h3"},"asNormal")),(0,t.yg)("p",null,"Returns this collection typed as a 'possibly empty' collection.")),(0,t.yg)("h4",g({},{id:"definition-5"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"asNormal(): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithRow/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithRow")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, R, C, V>['normal'];"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"Table.of([1, 1, 1], [2, 2, 2]).asNormal();  // type: Table<number, number, number>\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"assumenonempty"}),(0,t.yg)("inlineCode",{parentName:"h3"},"assumeNonEmpty")),(0,t.yg)("p",null,"Returns a self reference since this collection is known to be non-empty.")),(0,t.yg)("h4",g({},{id:"definition-6"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"assumeNonEmpty(): this;"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const t = HashTableHashColumn.of([1, 2, 3], [1, 4, 5])\nt === t.assumeNonEmpty()  // => true\n"))),(0,t.yg)("h4",g({},{id:"overrides-5"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/table/custom/VariantTableBase/interface#assumeNonEmpty"}),"VariantTableBase.assumeNonEmpty"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"filter"}),(0,t.yg)("inlineCode",{parentName:"h3"},"filter")),(0,t.yg)("p",null,"Returns a collection containing only those entries that satisfy given ",(0,t.yg)("inlineCode",{parentName:"p"},"pred")," predicate.")),(0,t.yg)("h4",g({},{id:"definition-7"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"filter(pred: (entry: [R, C, V], index: number, halt: () => void) => boolean, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate?: boolean;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithRow/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithRow")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, R, C, V>['normal'];"))),(0,t.yg)("h4",g({},{id:"parameters"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"pred")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(entry: [R, C, V], index: number, halt: () => void) => boolean")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"a predicate function receiving:",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"entry"),": the next entry",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"index"),": the entry index",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"halt"),": a function that, when called, ensures no next elements are passed")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"negate?: boolean;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"object containing the following",(0,t.yg)("br",null)," - negate: (default: false) when true will negate the given predicate")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashTableHashColumn.of([1, 2, 3], [1, 4, 5], [2, 3, 5])\n.filter(entry => entry[2] === 5).toArray()\n// => [[1, 4, 5], [2, 3, 5]]\n"))),(0,t.yg)("h4",g({},{id:"overrides-6"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/table/custom/VariantTableBase/interface#filter"}),"VariantTableBase.filter"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"filterrows"}),(0,t.yg)("inlineCode",{parentName:"h3"},"filterRows")),(0,t.yg)("p",null,"Returns a collection containing only those rows that satisfy given ",(0,t.yg)("inlineCode",{parentName:"p"},"pred")," predicate.")),(0,t.yg)("h4",g({},{id:"definition-8"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"filterRows(pred: (entry: readonly [R, "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithRow/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithRow")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, R, C, V>['rowNonEmpty']], index: number, halt: () => void) => boolean, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate?: boolean;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithRow/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithRow")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, R, C, V>['normal'];"))),(0,t.yg)("h4",g({},{id:"parameters-1"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"pred")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(entry: readonly [R, "),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/collection-types/set-custom/WithRow/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithRow")),(0,t.yg)("inlineCode",{parentName:"td"},"<Tp, R, C, V>['rowNonEmpty']], index: number, halt: () => void) => boolean")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"a predicate function receiving:",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"entry"),": the next entry of the row key and a collection representing its columns and values",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"index"),": the entry index",(0,t.yg)("b",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"halt"),": a function that, when called, ensures no next elements are passed")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"negate?: boolean;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"object containing the following",(0,t.yg)("br",null)," - negate: (default: false) when true will negate the given predicate")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashTableHashColumn.of([1, 2, 3], [1, 4, 5], [2, 3, 5])\n.filterRows((rowKey, values) => rowKey === 1 && values.hasKey(4)).toArray()\n// => [[1, 2, 3], [1, 4, 5]]\n"))),(0,t.yg)("h4",g({},{id:"overrides-7"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/table/custom/VariantTableBase/interface#filterRows"}),"VariantTableBase.filterRows"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"foreach"}),(0,t.yg)("inlineCode",{parentName:"h3"},"forEach")),(0,t.yg)("p",null,"Performs given function ",(0,t.yg)("inlineCode",{parentName:"p"},"f")," for each entry of the collection, using given ",(0,t.yg)("inlineCode",{parentName:"p"},"state")," as initial traversal state.")),(0,t.yg)("h4",g({},{id:"definition-9"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"forEach(f: (entry: [R, C, V], index: number, halt: () => void) => void, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"state?: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/TraverseState/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"TraverseState")),(0,t.yg)("inlineCode",{parentName:"p"},";"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): void;"))),(0,t.yg)("h4",g({},{id:"parameters-2"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"f")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(entry: [R, C, V], index: number, halt: () => void) => void")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the function to perform for each entry, receiving:",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"entry"),": the next tuple of a row key, column key, and value",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"index"),": the index of the element",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"halt"),": a function that, if called, ensures that no new elements are passed")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"state?: "),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/TraverseState/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"TraverseState")),(0,t.yg)("inlineCode",{parentName:"td"},";"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"object containing the following",(0,t.yg)("br",null)," - state: (optional) the traverse state")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashTableHashColumn.of([1, 2, 3], [1, 4, 5], [2, 3, 5])\n.forEach((entry, i, halt) => {\nconsole.log([entry]);\nif (i >= 1) halt();\n})\n// => logs [1, 2, 3]  [1, 4, 5]\n"))),(0,t.yg)("admonition",g({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N)")),(0,t.yg)("h4",g({},{id:"overrides-8"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/table/custom/VariantTableBase/interface#forEach"}),"VariantTableBase.forEach"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"get"}),(0,t.yg)("inlineCode",{parentName:"h3"},"get")),(0,t.yg)("p",null,"Returns the value at given ",(0,t.yg)("inlineCode",{parentName:"p"},"row")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"column")," keys, or the ",(0,t.yg)("inlineCode",{parentName:"p"},"otherwise")," value if no value is present.")),(0,t.yg)("h4",g({},{id:"definitions"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"get<UR = R, UC = C>(row: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<R, UR>, column: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<C, UC>): V "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"get<UR, UC, O>(row: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<R, UR>, column: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<C, UC>, otherwise: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,t.yg)("inlineCode",{parentName:"p"},"<O>): V "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," O;"))),(0,t.yg)("h4",g({},{id:"type-parameters-1"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"UR"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"R")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"UC"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"C")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",g({},{id:"parameters-3"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"row")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<R, UR>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the row key")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"column")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<C, UC>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the column key")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const t = HashTableHashColumn.of([1, 2, 3], [1, 4, 5])\nt.get(10, 1)     // => undefined\nt.get(10, 1, 0)  // => 0\nt.get(1, 2)      // => 3\nt.get(1, 2, 0)   // => 3\n"))),(0,t.yg)("h4",g({},{id:"overrides-9"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/table/custom/VariantTableBase/interface#get"}),"VariantTableBase.get"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"getrow"}),(0,t.yg)("inlineCode",{parentName:"h3"},"getRow")),(0,t.yg)("p",null,"Returns a map containing the column keys and values in the given ",(0,t.yg)("inlineCode",{parentName:"p"},"row"),".")),(0,t.yg)("h4",g({},{id:"definition-10"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"getRow<UR = R>(row: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<R, UR>): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithRow/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithRow")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, R, C, V>['row'];"))),(0,t.yg)("h4",g({},{id:"type-parameters-2"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"UR"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"R")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",g({},{id:"parameters-4"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"row")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<R, UR>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the row key")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const t = HashTableHashColumn.of([1, 2, 3], [1, 4, 5])\nt.getRow(10).toArray()    // => []\nt.getRow(1).toArray()     // => [[2, 3], [4, 5]]\n"))),(0,t.yg)("h4",g({},{id:"overrides-10"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/table/custom/VariantTableBase/interface#getRow"}),"VariantTableBase.getRow"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"hasrowkey"}),(0,t.yg)("inlineCode",{parentName:"h3"},"hasRowKey")),(0,t.yg)("p",null,"Returns true if given ",(0,t.yg)("inlineCode",{parentName:"p"},"row")," key is in the collection.")),(0,t.yg)("h4",g({},{id:"definition-11"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"hasRowKey<UR = R>(row: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<R, UR>): boolean;"))),(0,t.yg)("h4",g({},{id:"type-parameters-3"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"UR"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"R")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",g({},{id:"parameters-5"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"row")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<R, UR>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the row key to look for")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const t = HashTableHashColumn.of([1, 2, 3], [1, 4, 5])\nt.hasRowKey(10)    // => false\nt.hasRowKey(1)     // => true\n"))),(0,t.yg)("h4",g({},{id:"overrides-11"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/table/custom/VariantTableBase/interface#hasRowKey"}),"VariantTableBase.hasRowKey"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"hasvalueat"}),(0,t.yg)("inlineCode",{parentName:"h3"},"hasValueAt")),(0,t.yg)("p",null,"Returns true if the collection has a value for given ",(0,t.yg)("inlineCode",{parentName:"p"},"row")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"column")," keys.")),(0,t.yg)("h4",g({},{id:"definition-12"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"hasValueAt<UR = R, UC = C>(row: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<R, UR>, column: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<C, UC>): boolean;"))),(0,t.yg)("h4",g({},{id:"type-parameters-4"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"UR"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"R")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"UC"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"C")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",g({},{id:"parameters-6"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"row")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<R, UR>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the row key")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"column")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<C, UC>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the column key")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const t = HashTableHashColumn.of([1, 2, 3], [1, 4, 5])\nt.hasValueAt(10, 1)    // => false\nt.hasValueAt(1, 4)     // => true\n"))),(0,t.yg)("h4",g({},{id:"overrides-12"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/table/custom/VariantTableBase/interface#hasValueAt"}),"VariantTableBase.hasValueAt"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"mapvalues"}),(0,t.yg)("inlineCode",{parentName:"h3"},"mapValues")),(0,t.yg)("p",null,"Returns a non-empty collection with the same row and column keys, but where the given ",(0,t.yg)("inlineCode",{parentName:"p"},"mapFun")," function is applied to each entry value.")),(0,t.yg)("h4",g({},{id:"definition-13"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"mapValues<V2>(mapFun: (value: V, row: R, column: C) => V2): (Tp & "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/Row/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Row")),(0,t.yg)("inlineCode",{parentName:"p"},"<R, C, V2>)['nonEmpty'];"))),(0,t.yg)("h4",g({},{id:"type-parameters-5"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"V2"),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",g({},{id:"parameters-7"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"mapFun")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(value: V, row: R, column: C) => V2")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"a function taking a ",(0,t.yg)("inlineCode",{parentName:"td"},"value")," and a row and column key, and returning a new value")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashTableHashColumn.of([1, 2, 3], [1, 4, 5], [2, 3, 5])\n.mapValues(value => value * 2)\n// => [[1, 2, 6], [1, 4, 10], [2, 3, 10]]\n"))),(0,t.yg)("h4",g({},{id:"overrides-13"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/table/custom/VariantTableBase/interface#mapValues"}),"VariantTableBase.mapValues"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"nonempty"}),(0,t.yg)("inlineCode",{parentName:"h3"},"nonEmpty")),(0,t.yg)("p",null,"Returns true since this collection is known to be non-empty")),(0,t.yg)("h4",g({},{id:"definition-14"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"nonEmpty(): this is "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithRow/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithRow")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, R, C, V>['nonEmpty'];"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashTableHashColumn.of([1, 2, 3], [1, 4, 5]).nonEmpty()   // => true\n"))),(0,t.yg)("h4",g({},{id:"overrides-14"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/table/custom/VariantTableBase/interface#nonEmpty"}),"VariantTableBase.nonEmpty"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"remove"}),(0,t.yg)("inlineCode",{parentName:"h3"},"remove")),(0,t.yg)("p",null,"Returns the collection where the value at given ",(0,t.yg)("inlineCode",{parentName:"p"},"row")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"column")," keys is removed.")),(0,t.yg)("h4",g({},{id:"definition-15"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"remove<UR = R, UC = C>(row: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<R, UR>, column: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<C, UC>): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithRow/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithRow")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, R, C, V>['normal'];"))),(0,t.yg)("h4",g({},{id:"type-parameters-6"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"UR"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"R")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"UC"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"C")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",g({},{id:"parameters-8"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"row")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<R, UR>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the row key")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"column")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<C, UC>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the column key")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const t = HashTableHashColumn.of([1, 2, 3], [1, 4, 5])\nt.remove(10, 11).toArray()   // => [[1, 2, 3], [1, 4, 5]]\nt.remove(1, 4).toArray()     // => [[1, 2, 3]]\n"))),(0,t.yg)("h4",g({},{id:"overrides-15"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/table/custom/VariantTableBase/interface#remove"}),"VariantTableBase.remove"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"removeandget"}),(0,t.yg)("inlineCode",{parentName:"h3"},"removeAndGet")),(0,t.yg)("p",null,"Returns a tuple containing the collection with the value at given ",(0,t.yg)("inlineCode",{parentName:"p"},"row")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"column")," removed, and the removed value. If no such value is found, it returns undefined.")),(0,t.yg)("h4",g({},{id:"definition-16"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"removeAndGet<UR = R, UC = C>(row: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<R, UR>, column: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<C, UC>): ["),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithRow/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithRow")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, R, C, V>['normal'], V] "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"))),(0,t.yg)("h4",g({},{id:"type-parameters-7"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"UR"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"R")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"UC"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"C")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",g({},{id:"parameters-9"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"row")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<R, UR>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the row key")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"column")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<C, UC>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the column key")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const t = HashTableHashColumn.of([1, 2, 3], [1, 4, 5])\nt.removeAndGet(10, 11)  // => undefined\nt.removeAndGet(1, 2)    // => [HashTableHashColumn([1, 4, 5]), 3]\n"))),(0,t.yg)("h4",g({},{id:"overrides-16"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/table/custom/VariantTableBase/interface#removeAndGet"}),"VariantTableBase.removeAndGet"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"removeentries"}),(0,t.yg)("inlineCode",{parentName:"h3"},"removeEntries")),(0,t.yg)("p",null,"Returns the collection where the given ",(0,t.yg)("inlineCode",{parentName:"p"},"entries")," are removed.")),(0,t.yg)("h4",g({},{id:"definition-17"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"removeEntries<UR = R, UC = C>(entries: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<["),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<R, UR>, "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<C, UC>]>): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithRow/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithRow")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, R, C, V>['normal'];"))),(0,t.yg)("h4",g({},{id:"type-parameters-8"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"UR"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"R")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"UC"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"C")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",g({},{id:"parameters-10"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"entries")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<["),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<R, UR>, "),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<C, UC>]>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"a ",(0,t.yg)("inlineCode",{parentName:"td"},"StreamSource")," of table entries")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const t = HashTableHashColumn.of([1, 2, 3], [1, 4, 5])\nt.removeEntries([[6, 7, 8], [7, 8, 9]]).toArray()  // => [[1, 2, 3], [1, 4, 5]]\nt.removeEntries([[6, 7, 8], [1, 2, 3]]).toArray()  // => [[1, 4, 5]]\n"))),(0,t.yg)("h4",g({},{id:"overrides-17"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/table/custom/VariantTableBase/interface#removeEntries"}),"VariantTableBase.removeEntries"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"removerow"}),(0,t.yg)("inlineCode",{parentName:"h3"},"removeRow")),(0,t.yg)("p",null,"Returns the collection where all values in given ",(0,t.yg)("inlineCode",{parentName:"p"},"row")," are removed.")),(0,t.yg)("h4",g({},{id:"definition-18"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"removeRow<UR = R>(row: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<R, UR>): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithRow/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithRow")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, R, C, V>['normal'];"))),(0,t.yg)("h4",g({},{id:"type-parameters-9"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"UR"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"R")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",g({},{id:"parameters-11"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"row")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<R, UR>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the row key")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const t = HashTableHashColumn.of([1, 2, 3], [1, 4, 5], [2, 2, 3])\nt.removeRow(10).toArray()   // => [[1, 2, 3], [1, 4, 5], [2, 2, 3]]\nt.removeRow(1).toArray()    // => [[2, 2, 3]]\n"))),(0,t.yg)("h4",g({},{id:"overrides-18"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/table/custom/VariantTableBase/interface#removeRow"}),"VariantTableBase.removeRow"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"removerowandget"}),(0,t.yg)("inlineCode",{parentName:"h3"},"removeRowAndGet")),(0,t.yg)("p",null,"Returns a tuple containing the collection with the values at given ",(0,t.yg)("inlineCode",{parentName:"p"},"row")," removed, and a map containing the removed columns and values. If no such row is found, it returns undefined.")),(0,t.yg)("h4",g({},{id:"definition-19"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"removeRowAndGet<UR = R>(row: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<R, UR>): ["),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithRow/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithRow")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, R, C, V>['normal'], "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithRow/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithRow")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, R, C, V>['rowNonEmpty']] "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"))),(0,t.yg)("h4",g({},{id:"type-parameters-10"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"UR"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"R")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",g({},{id:"parameters-12"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"row")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<R, UR>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the row key")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const t = HashTableHashColumn.of([1, 2, 3], [1, 4, 5])\nt.removeRowAndGet(10)    // => undefined\nt.removeRowAndGet(1)     // => [HashTableHashColumn(), HashMap(2 => 3, 4 => 5)]\n"))),(0,t.yg)("h4",g({},{id:"overrides-19"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/table/custom/VariantTableBase/interface#removeRowAndGet"}),"VariantTableBase.removeRowAndGet"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"removerows"}),(0,t.yg)("inlineCode",{parentName:"h3"},"removeRows")),(0,t.yg)("p",null,"Returns the collection where the values for each row key in given ",(0,t.yg)("inlineCode",{parentName:"p"},"rows")," are removed.")),(0,t.yg)("h4",g({},{id:"definition-20"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"removeRows<UR = R>(rows: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<"),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<R, UR>>): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithRow/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithRow")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, R, C, V>['normal'];"))),(0,t.yg)("h4",g({},{id:"type-parameters-11"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"UR"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"R")),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",g({},{id:"parameters-13"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"rows")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<"),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<R, UR>>")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"a ",(0,t.yg)("inlineCode",{parentName:"td"},"StreamSource")," of row keys")))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const t = HashTableHashColumn.of([1, 2, 3], [1, 4, 5])\nt.removeRows([10, 11]).toArray()   // => [[1, 2, 3], [1, 4, 5]]\nt.removeRows([1, 10]).toArray()    // => []\n"))),(0,t.yg)("h4",g({},{id:"overrides-20"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/table/custom/VariantTableBase/interface#removeRows"}),"VariantTableBase.removeRows"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"stream"}),(0,t.yg)("inlineCode",{parentName:"h3"},"stream")),(0,t.yg)("p",null,"Returns a non-empty Stream containing all entries of this collection as tuples of row key, column key, and value.")),(0,t.yg)("h4",g({},{id:"definition-21"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"stream(): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<[R, C, V]>;"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashTableHashColumn.of([1, 2, 3], [1, 4, 5]).stream().toArray()\n// => [[1, 2, 3], [1, 4, 5]]\n"))),(0,t.yg)("h4",g({},{id:"overrides-21"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/Streamable/NonEmpty/interface#stream"}),"NonEmpty.stream"),", ",(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/table/custom/VariantTableBase/interface#stream"}),"VariantTableBase.stream"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"streamrows"}),(0,t.yg)("inlineCode",{parentName:"h3"},"streamRows")),(0,t.yg)("p",null,"Returns a non-empty Stream containing all row keys of this collection.")),(0,t.yg)("h4",g({},{id:"definition-22"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"streamRows(): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<R>;"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashTableHashColumn.of([1, 2, 3], [1, 4, 5]).streamRows().toArray()\n// => [1]\n"))),(0,t.yg)("h4",g({},{id:"overrides-22"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/table/custom/VariantTableBase/interface#streamRows"}),"VariantTableBase.streamRows"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"streamvalues"}),(0,t.yg)("inlineCode",{parentName:"h3"},"streamValues")),(0,t.yg)("p",null,"Returns a non-empty Stream containing all values of this collection.")),(0,t.yg)("h4",g({},{id:"definition-23"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"streamValues(): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<V>;"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashTableHashColumn.of([1, 2, 3], [1, 4, 5]).streamValues().toArray()\n// => [3, 5]\n"))),(0,t.yg)("h4",g({},{id:"overrides-23"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/table/custom/VariantTableBase/interface#streamValues"}),"VariantTableBase.streamValues"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"toarray"}),(0,t.yg)("inlineCode",{parentName:"h3"},"toArray")),(0,t.yg)("p",null,"Returns a non-empty array containing all entries in this collection.")),(0,t.yg)("h4",g({},{id:"definition-24"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"toArray(): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<[R, C, V]>;"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashTableHashColumn.of([1, 2, 3], [1, 4, 5]).toArray()\n// => [[1, 2, 3], [1, 4, 5]]\n"))),(0,t.yg)("admonition",g({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(log(N))  @note it is safe to mutate the returned array, however, the array elements are not copied, thus should be treated as read-only")),(0,t.yg)("h4",g({},{id:"overrides-24"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/table/custom/VariantTableBase/interface#toArray"}),"VariantTableBase.toArray"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"tojson"}),(0,t.yg)("inlineCode",{parentName:"h3"},"toJSON")),(0,t.yg)("p",null,"Returns a JSON representation of this collection.")),(0,t.yg)("h4",g({},{id:"definition-25"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"toJSON(): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/ToJSON/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"ToJSON")),(0,t.yg)("inlineCode",{parentName:"p"},"<[R, [C, V][]][]>;"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashTableHashColumn.of([1, 2, 3], [1, 4, 5]).toJSON()\n// => { dataType: 'HashTableHashColumn', value: [1, [ [2, 3], [4, 5] ] ] }\n"))),(0,t.yg)("h4",g({},{id:"overrides-25"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/table/custom/VariantTableBase/interface#toJSON"}),"VariantTableBase.toJSON"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"tostring"}),(0,t.yg)("inlineCode",{parentName:"h3"},"toString")),(0,t.yg)("p",null,"Returns a string representation of this collection.")),(0,t.yg)("h4",g({},{id:"definition-26"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"toString(): string;"))),(0,t.yg)("admonition",g({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashTableHashColumn.of([1, 2, 3], [1, 4, 5]).toString()\n// => HashTableHashColumn([1, 2] -> 3, [1, 4] -> 5)\n"))),(0,t.yg)("h4",g({},{id:"overrides-26"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/table/custom/VariantTableBase/interface#toString"}),"VariantTableBase.toString"))))}C.isMDXComponent=!0}}]);