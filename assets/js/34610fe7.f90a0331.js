"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[54923],{15680:(e,n,a)=>{a.d(n,{xA:()=>d,yg:()=>c});var t=a(96540);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=t.createContext({}),y=function(e){var n=t.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},d=function(e){var n=y(e.components);return t.createElement(p.Provider,{value:n},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),g=y(a),m=r,c=g["".concat(p,".").concat(m)]||g[m]||u[m]||l;return a?t.createElement(c,i(i({ref:n},d),{},{components:a})):t.createElement(c,i({ref:n},d))}));function c(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=m;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[g]="string"==typeof e?e:r,i[1]=o;for(var y=2;y<l;y++)i[y]=a[y];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"},41038:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>f,contentTitle:()=>s,default:()=>C,frontMatter:()=>c,metadata:()=>h,toc:()=>b});var t=a(15680),r=Object.defineProperty,l=Object.defineProperties,i=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,y=Object.prototype.propertyIsEnumerable,d=(e,n,a)=>n in e?r(e,n,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[n]=a,g=(e,n)=>{for(var a in n||(n={}))p.call(n,a)&&d(e,a,n[a]);if(o)for(var a of o(n))y.call(n,a)&&d(e,a,n[a]);return e},u=(e,n)=>l(e,i(n)),m=(e,n)=>{var a={};for(var t in e)p.call(e,t)&&n.indexOf(t)<0&&(a[t]=e[t]);if(null!=e&&o)for(var t of o(e))n.indexOf(t)<0&&y.call(e,t)&&(a[t]=e[t]);return a};const c={title:"Channel.Read<T>",slug:"/rimbu/channel/Channel/Read/interface"},s="interface Channel.Read<T>",h={unversionedId:"rimbu_channel/Channel/Read.interface",id:"rimbu_channel/Channel/Read.interface",title:"Channel.Read<T>",description:"A read-only Channel that can perform blocking reads. This means that a receive call will block until a message is available.",source:"@site/api/rimbu_channel/Channel/Read.interface.mdx",sourceDirName:"rimbu_channel/Channel",slug:"/rimbu/channel/Channel/Read/interface",permalink:"/api/rimbu/channel/Channel/Read/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"Channel.Read<T>",slug:"/rimbu/channel/Channel/Read/interface"},sidebar:"defaultSidebar",previous:{title:"MessageType",permalink:"/api/rimbu/channel/Channel/MessageType/type"},next:{title:"Channel.Write<T>",permalink:"/api/rimbu/channel/Channel/Write/interface"}},f={},b=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>capacity</code>",id:"capacity",level:3},{value:"Definition",id:"definition",level:4},{value:"<code>isExhausted</code>",id:"isexhausted",level:3},{value:"Definition",id:"definition-1",level:4},{value:"<code>length</code>",id:"length",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Methods",id:"methods",level:2},{value:"<code>asyncStream</code>",id:"asyncstream",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Overrides",id:"overrides",level:4},{value:"<code>readable</code>",id:"readable",level:3},{value:"Definition",id:"definition-4",level:4},{value:"<code>receive</code>",id:"receive",level:3},{value:"Definitions",id:"definitions",level:4},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters",level:4}],v={toc:b},N="wrapper";function C(e){var n=e,{components:a}=n,r=m(n,["components"]);return(0,t.yg)(N,u(g(g({},v),r),{components:a,mdxType:"MDXLayout"}),(0,t.yg)("h1",g({},{id:"interface-channelreadt"}),(0,t.yg)("inlineCode",{parentName:"h1"},"interface Channel.Read<T>")),(0,t.yg)("p",null,"A read-only Channel that can perform blocking reads. This means that a ",(0,t.yg)("inlineCode",{parentName:"p"},"receive")," call will block until a message is available."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Extends:")," ",(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStreamable/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStreamable<T>"))),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Implemented by:")," ",(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/channel/CrossChannel/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"CrossChannel<TSend,TReceive>")),", ",(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/channel/Channel/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Channel<T>"))),(0,t.yg)("h2",g({},{id:"type-parameters"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"T"),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"void")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"the channel message type")))),(0,t.yg)("h2",g({},{id:"properties"}),"Properties"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"capacity"}),(0,t.yg)("inlineCode",{parentName:"h3"},"capacity")),(0,t.yg)("p",null,"The maximum amount of messages the Channel can buffer. If 0, the channel is unbuffered and the communication is synchronous.")),(0,t.yg)("h4",g({},{id:"definition"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"get capacity(): number;")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"isexhausted"}),(0,t.yg)("inlineCode",{parentName:"h3"},"isExhausted")),(0,t.yg)("p",null,"Returns true if the channel is closed and there are no message in the buffer (length = 0), false otherwise.")),(0,t.yg)("h4",g({},{id:"definition-1"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"get isExhausted(): boolean;")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"length"}),(0,t.yg)("inlineCode",{parentName:"h3"},"length")),(0,t.yg)("p",null,"The amount of messages currently in the read buffer.")),(0,t.yg)("h4",g({},{id:"definition-2"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"get length(): number;")))),(0,t.yg)("h2",g({},{id:"methods"}),"Methods"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"asyncstream"}),(0,t.yg)("inlineCode",{parentName:"h3"},"asyncStream")),(0,t.yg)("p",null,"Returns an asynchronous stream of values.")),(0,t.yg)("h4",g({},{id:"definition-3"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"asyncStream(): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStream")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,t.yg)("h4",g({},{id:"overrides"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStreamable/interface#asyncStream"}),"AsyncStreamable.asyncStream"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"readable"}),(0,t.yg)("inlineCode",{parentName:"h3"},"readable")),(0,t.yg)("p",null,"Returns the Channel as a readonly Channel.Read instance.")),(0,t.yg)("h4",g({},{id:"definition-4"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readable(): "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/channel/Channel/Read/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Channel.Read")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",g({},{id:"receive"}),(0,t.yg)("inlineCode",{parentName:"h3"},"receive")),(0,t.yg)("p",null,"Returns the next message sent to the Channel. Blocks if there are no messages.")),(0,t.yg)("h4",g({},{id:"definitions"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"receive<RT>(options: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"signal?: AbortSignal "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"timeoutMs?: number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"recover: (channelError: "),(0,t.yg)("a",g({parentName:"p"},{href:"/api/rimbu/channel/Channel/Error/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Channel.Error")),(0,t.yg)("inlineCode",{parentName:"p"},") => RT;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): Promise<T "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," RT>;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"receive(options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"signal?: AbortSignal "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"timeoutMs?: number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"recover?: undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): Promise<T>;"))),(0,t.yg)("h4",g({},{id:"type-parameters-1"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),"RT"),(0,t.yg)("td",g({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",g({},{id:"parameters"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"signal?: AbortSignal "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"timeoutMs?: number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"recover: (channelError: "),(0,t.yg)("a",g({parentName:"td"},{href:"/api/rimbu/channel/Channel/Error/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Channel.Error")),(0,t.yg)("inlineCode",{parentName:"td"},") => RT;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",g({parentName:"tr"},{align:null}),"(optional) the options to receive a message",(0,t.yg)("br",null)," - signal: (optional) an abort signal to cancel receiving",(0,t.yg)("br",null)," - timeoutMs: (optional) amount of milliseconds to wait for received message",(0,t.yg)("br",null)," - recover: (optional) a function that can be supplied to recover from a channel error"))))))}C.isMDXComponent=!0}}]);