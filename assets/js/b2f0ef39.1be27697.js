"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[56620],{15680:(e,n,r)=>{r.d(n,{xA:()=>s,yg:()=>m});var t=r(96540);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=t.createContext({}),u=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},s=function(e){var n=u(e.components);return t.createElement(c.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=u(r),f=i,m=p["".concat(c,".").concat(f)]||p[f]||d[f]||a;return r?t.createElement(m,o(o({ref:n},s),{},{components:r})):t.createElement(m,o({ref:n},s))}));function m(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=f;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[p]="string"==typeof e?e:i,o[1]=l;for(var u=2;u<a;u++)o[u]=r[u];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}f.displayName="MDXCreateElement"},93227:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>h,contentTitle:()=>y,default:()=>x,frontMatter:()=>m,metadata:()=>g,toc:()=>b});var t=r(15680),i=Object.defineProperty,a=Object.defineProperties,o=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,c=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,s=(e,n,r)=>n in e?i(e,n,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[n]=r,p=(e,n)=>{for(var r in n||(n={}))c.call(n,r)&&s(e,r,n[r]);if(l)for(var r of l(n))u.call(n,r)&&s(e,r,n[r]);return e},d=(e,n)=>a(e,o(n)),f=(e,n)=>{var r={};for(var t in e)c.call(e,t)&&n.indexOf(t)<0&&(r[t]=e[t]);if(null!=e&&l)for(var t of l(e))n.indexOf(t)<0&&u.call(e,t)&&(r[t]=e[t]);return r};const m={title:"Mutex",slug:"/rimbu/channel/Mutex/interface"},y="interface Mutex",g={unversionedId:"rimbu_channel/Mutex.interface",id:"rimbu_channel/Mutex.interface",title:"Mutex",description:"A Mutex is used to restrict access to a shared resource in a concurrent environment. The Mutex can be used to acquire a lock for the resource, preventing others using the Mutext from accessing the resource. When finished using the resource, the lock can be released, allowing other waiting processes to acquire a lock.",source:"@site/api/rimbu_channel/Mutex.interface.mdx",sourceDirName:"rimbu_channel",slug:"/rimbu/channel/Mutex/interface",permalink:"/api/rimbu/channel/Mutex/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"Mutex",slug:"/rimbu/channel/Mutex/interface"},sidebar:"defaultSidebar",previous:{title:"Mutex.Constructors",permalink:"/api/rimbu/channel/Mutex/Constructors/interface"},next:{title:"RemoteChannel (namespace)",permalink:"/api/rimbu/channel/RemoteChannel/namespace"}},h={},b=[{value:"Methods",id:"methods",level:2},{value:"<code>acquire</code>",id:"acquire",level:3},{value:"Definition",id:"definition",level:4},{value:"<code>canAcquire</code>",id:"canacquire",level:3},{value:"Definition",id:"definition-1",level:4},{value:"<code>release</code>",id:"release",level:3},{value:"Definition",id:"definition-2",level:4}],v={toc:b},O="wrapper";function x(e){var n=e,{components:r}=n,i=f(n,["components"]);return(0,t.yg)(O,d(p(p({},v),i),{components:r,mdxType:"MDXLayout"}),(0,t.yg)("h1",p({},{id:"interface-mutex"}),(0,t.yg)("inlineCode",{parentName:"h1"},"interface Mutex")),(0,t.yg)("p",null,"A Mutex is used to restrict access to a shared resource in a concurrent environment. The Mutex can be used to acquire a lock for the resource, preventing others using the Mutext from accessing the resource. When finished using the resource, the lock can be released, allowing other waiting processes to acquire a lock."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Companion namespace:")," ",(0,t.yg)("a",p({parentName:"p"},{href:"/api/rimbu/channel/Mutex/namespace"}),"Mutex")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Implemented by:")," ",(0,t.yg)("a",p({parentName:"p"},{href:"/api/rimbu/channel/Semaphore/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Semaphore"))),(0,t.yg)("h2",p({},{id:"methods"}),"Methods"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",p({},{id:"acquire"}),(0,t.yg)("inlineCode",{parentName:"h3"},"acquire")),(0,t.yg)("p",null,"Acquire a lock. Blocks if the resource is already locked. Resolves when the resource is available.")),(0,t.yg)("h4",p({},{id:"definition"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"acquire(): Promise<void>;")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",p({},{id:"canacquire"}),(0,t.yg)("inlineCode",{parentName:"h3"},"canAcquire")),(0,t.yg)("p",null,"Returns true if the resource can be acquired immediately, false otherwise.")),(0,t.yg)("h4",p({},{id:"definition-1"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"canAcquire(): boolean;")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",p({},{id:"release"}),(0,t.yg)("inlineCode",{parentName:"h3"},"release")),(0,t.yg)("p",null,"Release a lock after it is acquired. Allows other functions to obtain a lock.")),(0,t.yg)("h4",p({},{id:"definition-2"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"release(): void;")))))}x.isMDXComponent=!0}}]);