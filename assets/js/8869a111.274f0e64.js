"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[95052],{15680:(e,n,r)=>{r.d(n,{xA:()=>y,yg:()=>d});var t=r(96540);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function p(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var m=t.createContext({}),c=function(e){var n=t.useContext(m),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},y=function(e){var n=c(e.components);return t.createElement(m.Provider,{value:n},e.children)},u="mdxType",l={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},s=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,m=e.parentName,y=p(e,["components","mdxType","originalType","parentName"]),u=c(r),s=a,d=u["".concat(m,".").concat(s)]||u[s]||l[s]||i;return r?t.createElement(d,o(o({ref:n},y),{},{components:r})):t.createElement(d,o({ref:n},y))}));function d(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=s;var p={};for(var m in n)hasOwnProperty.call(n,m)&&(p[m]=n[m]);p.originalType=e,p[u]="string"==typeof e?e:a,o[1]=p;for(var c=2;c<i;c++)o[c]=r[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}s.displayName="MDXCreateElement"},31390:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>g,contentTitle:()=>f,default:()=>N,frontMatter:()=>d,metadata:()=>b,toc:()=>v});var t=r(15680),a=Object.defineProperty,i=Object.defineProperties,o=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,m=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,y=(e,n,r)=>n in e?a(e,n,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[n]=r,u=(e,n)=>{for(var r in n||(n={}))m.call(n,r)&&y(e,r,n[r]);if(p)for(var r of p(n))c.call(n,r)&&y(e,r,n[r]);return e},l=(e,n)=>i(e,o(n)),s=(e,n)=>{var r={};for(var t in e)m.call(e,t)&&n.indexOf(t)<0&&(r[t]=e[t]);if(null!=e&&p)for(var t of p(e))n.indexOf(t)<0&&c.call(e,t)&&(r[t]=e[t]);return r};const d={title:"minBy",slug:"/rimbu/stream/AsyncReducer/minBy/var"},f="type minBy",b={unversionedId:"rimbu_stream/async/AsyncReducer/minBy.var",id:"rimbu_stream/async/AsyncReducer/minBy.var",title:"minBy",description:"Returns a Reducer that remembers the minimum value of the inputs using the given compFun to compare input values",source:"@site/api/rimbu_stream/async/AsyncReducer/minBy.var.mdx",sourceDirName:"rimbu_stream/async/AsyncReducer",slug:"/rimbu/stream/AsyncReducer/minBy/var",permalink:"/api/rimbu/stream/AsyncReducer/minBy/var",draft:!1,tags:[],version:"current",frontMatter:{title:"minBy",slug:"/rimbu/stream/AsyncReducer/minBy/var"},sidebar:"defaultSidebar",previous:{title:"min",permalink:"/api/rimbu/stream/AsyncReducer/min/var"},next:{title:"nonEmpty",permalink:"/api/rimbu/stream/AsyncReducer/nonEmpty/var"}},g={},v=[{value:"Definition",id:"definition",level:2}],O={toc:v},h="wrapper";function N(e){var n=e,{components:r}=n,a=s(n,["components"]);return(0,t.yg)(h,l(u(u({},O),a),{components:r,mdxType:"MDXLayout"}),(0,t.yg)("h1",u({},{id:"type-minby"}),(0,t.yg)("inlineCode",{parentName:"h1"},"type minBy")),(0,t.yg)("p",null,"Returns a ",(0,t.yg)("inlineCode",{parentName:"p"},"Reducer")," that remembers the minimum value of the inputs using the given ",(0,t.yg)("inlineCode",{parentName:"p"},"compFun")," to compare input values"),(0,t.yg)("admonition",u({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",u({parentName:"pre"},{className:"language-ts"}),"const stream = Stream.of('abc', 'a', 'abcde', 'ab')\nconsole.log(stream.minBy((s1, s2) => s1.length - s2.length))\n// 'a'\n"))),(0,t.yg)("h2",u({},{id:"definition"}),"Definition"),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"minBy: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"<T>(compFun: (v1: T, v2: T) => "),(0,t.yg)("a",u({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"p"},"<number>): "),(0,t.yg)("a",u({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,t.yg)("inlineCode",{parentName:"p"},"<T, T "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined>;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"<T, O>(compFun: (v1: T, v2: T) => "),(0,t.yg)("a",u({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"p"},"<number>, otherwise: AsyncOptLazy<O>): "),(0,t.yg)("a",u({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,t.yg)("inlineCode",{parentName:"p"},"<T, T "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," O>;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}")))}N.isMDXComponent=!0}}]);