"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[92586],{3905:(e,t,a)=>{a.d(t,{Zo:()=>o,kt:()=>N});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var m=n.createContext({}),d=function(e){var t=n.useContext(m),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},o=function(e){var t=d(e.components);return n.createElement(m.Provider,{value:t},e.children)},k="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,m=e.parentName,o=p(e,["components","mdxType","originalType","parentName"]),k=d(a),h=r,N=k["".concat(m,".").concat(h)]||k[h]||u[h]||l;return a?n.createElement(N,i(i({ref:t},o),{},{components:a})):n.createElement(N,i({ref:t},o))}));function N(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=h;var p={};for(var m in t)hasOwnProperty.call(t,m)&&(p[m]=t[m]);p.originalType=e,p[k]="string"==typeof e?e:r,i[1]=p;for(var d=2;d<l;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},50218:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>b,contentTitle:()=>c,default:()=>f,frontMatter:()=>N,metadata:()=>s,toc:()=>g});var n=a(3905),r=Object.defineProperty,l=Object.defineProperties,i=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,m=Object.prototype.hasOwnProperty,d=Object.prototype.propertyIsEnumerable,o=(e,t,a)=>t in e?r(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,k=(e,t)=>{for(var a in t||(t={}))m.call(t,a)&&o(e,a,t[a]);if(p)for(var a of p(t))d.call(t,a)&&o(e,a,t[a]);return e},u=(e,t)=>l(e,i(t)),h=(e,t)=>{var a={};for(var n in e)m.call(e,n)&&t.indexOf(n)<0&&(a[n]=e[n]);if(null!=e&&p)for(var n of p(e))t.indexOf(n)<0&&d.call(e,n)&&(a[n]=e[n]);return a};const N={title:"@rimbu/deep",slug:"/rimbu/deep"},c="package @rimbu/deep",s={unversionedId:"rimbu_deep/index",id:"rimbu_deep/index",title:"@rimbu/deep",description:"The @rimbu/deep package provides utilities to patch and match plain JavaScript objects.",source:"@site/api/rimbu_deep/index.mdx",sourceDirName:"rimbu_deep",slug:"/rimbu/deep",permalink:"/api/rimbu/deep",draft:!1,tags:[],version:"current",frontMatter:{title:"@rimbu/deep",slug:"/rimbu/deep"},sidebar:"defaultSidebar",previous:{title:"@rimbu/core",permalink:"/api/rimbu/core"},next:{title:"Deep (namespace)",permalink:"/api/rimbu/deep/Deep/namespace"}},b={},g=[{value:"Interfaces",id:"interfaces",level:2},{value:"Namespaces",id:"namespaces",level:2},{value:"Functions",id:"functions",level:2},{value:"<code>getAt</code>",id:"getat",level:3},{value:"Definition",id:"definition",level:4},{value:"Type parameters",id:"type-parameters",level:5},{value:"Parameters",id:"parameters",level:4},{value:"<code>getAtWith</code>",id:"getatwith",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Type parameters",id:"type-parameters-1",level:5},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>match</code>",id:"match",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Type parameters",id:"type-parameters-2",level:5},{value:"Parameters",id:"parameters-2",level:4},{value:"<code>matchAt</code>",id:"matchat",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Type parameters",id:"type-parameters-3",level:5},{value:"Parameters",id:"parameters-3",level:4},{value:"<code>matchAtWith</code>",id:"matchatwith",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Type parameters",id:"type-parameters-4",level:5},{value:"Parameters",id:"parameters-4",level:4},{value:"<code>matchWith</code>",id:"matchwith",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Type parameters",id:"type-parameters-5",level:5},{value:"Parameters",id:"parameters-5",level:4},{value:"<code>patch</code>",id:"patch",level:3},{value:"Definition",id:"definition-6",level:4},{value:"Type parameters",id:"type-parameters-6",level:5},{value:"Parameters",id:"parameters-6",level:4},{value:"<code>patchAt</code>",id:"patchat",level:3},{value:"Definition",id:"definition-7",level:4},{value:"Type parameters",id:"type-parameters-7",level:5},{value:"Parameters",id:"parameters-7",level:4},{value:"<code>patchAtWith</code>",id:"patchatwith",level:3},{value:"Definition",id:"definition-8",level:4},{value:"Type parameters",id:"type-parameters-8",level:5},{value:"Parameters",id:"parameters-8",level:4},{value:"<code>patchWith</code>",id:"patchwith",level:3},{value:"Definition",id:"definition-9",level:4},{value:"Type parameters",id:"type-parameters-9",level:5},{value:"Parameters",id:"parameters-9",level:4},{value:"<code>protect</code>",id:"protect",level:3},{value:"Definition",id:"definition-10",level:4},{value:"Type parameters",id:"type-parameters-10",level:5},{value:"Parameters",id:"parameters-10",level:4},{value:"<code>select</code>",id:"select",level:3},{value:"Definition",id:"definition-11",level:4},{value:"Type parameters",id:"type-parameters-11",level:5},{value:"Parameters",id:"parameters-11",level:4},{value:"<code>selectAt</code>",id:"selectat",level:3},{value:"Definition",id:"definition-12",level:4},{value:"Type parameters",id:"type-parameters-12",level:5},{value:"Parameters",id:"parameters-12",level:4},{value:"<code>selectAtWith</code>",id:"selectatwith",level:3},{value:"Definition",id:"definition-13",level:4},{value:"Type parameters",id:"type-parameters-13",level:5},{value:"Parameters",id:"parameters-13",level:4},{value:"<code>selectWith</code>",id:"selectwith",level:3},{value:"Definition",id:"definition-14",level:4},{value:"Type parameters",id:"type-parameters-14",level:5},{value:"Parameters",id:"parameters-14",level:4},{value:"<code>withType</code>",id:"withtype",level:3},{value:"Definition",id:"definition-15",level:4},{value:"Type parameters",id:"type-parameters-15",level:5}],y={toc:g},v="wrapper";function f(e){var t=e,{components:a}=t,r=h(t,["components"]);return(0,n.kt)(v,u(k(k({},y),r),{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",k({},{id:"package-rimbudeep"}),(0,n.kt)("inlineCode",{parentName:"h1"},"package @rimbu/deep")),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"@rimbu/deep")," package provides utilities to patch and match plain JavaScript objects."),(0,n.kt)("p",null," See the ",(0,n.kt)("a",k({parentName:"p"},{href:"/docs/deep/overview"}),"Rimbu docs Deep overview page")," for more information."),(0,n.kt)("h2",k({},{id:"interfaces"}),"Interfaces"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/deep/WithType/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithType<T>"))),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"Typed and curried Deep API, used in situations where the target type is known but the value will be applied later.")))),(0,n.kt)("h2",k({},{id:"namespaces"}),"Namespaces"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/deep/Deep/namespace"}),(0,n.kt)("inlineCode",{parentName:"a"},"Deep"))),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"undocumented")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/deep/Match/namespace"}),(0,n.kt)("inlineCode",{parentName:"a"},"Match"))),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"The type to determine the allowed input values for the ",(0,n.kt)("inlineCode",{parentName:"td"},"match")," function.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/deep/Patch/namespace"}),(0,n.kt)("inlineCode",{parentName:"a"},"Patch"))),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"A type to determine the allowed input type for the ",(0,n.kt)("inlineCode",{parentName:"td"},"patch")," function.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/deep/Path/namespace"}),(0,n.kt)("inlineCode",{parentName:"a"},"Path"))),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"undocumented")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/deep/Selector/namespace"}),(0,n.kt)("inlineCode",{parentName:"a"},"Selector"))),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"Type defining the allowed selectors on an object of type ",(0,n.kt)("inlineCode",{parentName:"td"},"T"),". Selectors can be: - a path string into type ",(0,n.kt)("inlineCode",{parentName:"td"},"T"),". - a function receiving a ",(0,n.kt)("inlineCode",{parentName:"td"},"Protected")," version of type ",(0,n.kt)("inlineCode",{parentName:"td"},"T"),", and returning an arbitrary value. - a tuple of ",(0,n.kt)("inlineCode",{parentName:"td"},"Selectors")," for type ",(0,n.kt)("inlineCode",{parentName:"td"},"T")," - an object where the property values are ",(0,n.kt)("inlineCode",{parentName:"td"},"Selectors")," for type ",(0,n.kt)("inlineCode",{parentName:"td"},"T"),".")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/deep/Tuple/namespace"}),(0,n.kt)("inlineCode",{parentName:"a"},"Tuple"))),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"A readonly array of fixed length and types.")))),(0,n.kt)("h2",k({},{id:"functions"}),"Functions"),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"getat"}),(0,n.kt)("inlineCode",{parentName:"h3"},"getAt")),(0,n.kt)("p",null,"Returns the value resulting from selecting the given ",(0,n.kt)("inlineCode",{parentName:"p"},"path")," in the given ",(0,n.kt)("inlineCode",{parentName:"p"},"source")," object. It supports optional chaining for nullable values or values that may be undefined, and also for accessing objects inside an array. There is currently no support for forcing non-null (the ",(0,n.kt)("inlineCode",{parentName:"p"},"!")," operator).")),(0,n.kt)("h4",k({},{id:"definition"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"export declare function getAt<T, P extends "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Path/Get/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Path.Get")),(0,n.kt)("inlineCode",{parentName:"p"},"<T>>(source: T, path: P): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Path/Result/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Path.Result")),(0,n.kt)("inlineCode",{parentName:"p"},"<T, P>;"))),(0,n.kt)("h5",k({},{id:"type-parameters"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"T"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the object type to select in")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"P"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"a Path in object type T")))),(0,n.kt)("h4",k({},{id:"parameters"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"source")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"T")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the object to select in")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"path")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"P")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the path into the object")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const value = { a: { b: { c: [{ d: 5 }, { d: 6 }] } } }\nDeep.getAt(value, 'a.b');\n// => { c: 5 }\nDeep.getAt(value, 'a.b.c');\n// => [{ d: 5 }, { d: 5 }]\nDeep.getAt(value, 'a.b.c[1]');\n// => { d: 6 }\nDeep.getAt(value, 'a.b.c[1]?.d');\n// => 6\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"getatwith"}),(0,n.kt)("inlineCode",{parentName:"h3"},"getAtWith")),(0,n.kt)("p",null,"Returns a function that gets the value at the given string ",(0,n.kt)("inlineCode",{parentName:"p"},"path")," inside an object.")),(0,n.kt)("h4",k({},{id:"definition-1"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"export declare function getAtWith<T, P extends "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Path/Get/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Path.Get")),(0,n.kt)("inlineCode",{parentName:"p"},"<T>>(path: P): (source: T) => "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Path/Result/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Path.Result")),(0,n.kt)("inlineCode",{parentName:"p"},"<T, P>;"))),(0,n.kt)("h5",k({},{id:"type-parameters-1"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"T"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the input value type")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"P"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the string literal path type in the object")))),(0,n.kt)("h4",k({},{id:"parameters-1"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"path")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"P")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the string path in the object")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const items = [{ a: { b:  1, c: 'a' } }, { a: { b: 2, c: 'b' } }];\nitems.map(Deep.getAtWith('a.c'));\n// => ['a', 'b']\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"match"}),(0,n.kt)("inlineCode",{parentName:"h3"},"match")),(0,n.kt)("p",null,"Returns true if the given ",(0,n.kt)("inlineCode",{parentName:"p"},"value")," object matches the given ",(0,n.kt)("inlineCode",{parentName:"p"},"matcher"),", false otherwise.")),(0,n.kt)("h4",k({},{id:"definition-2"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"export declare function match<T, C extends Partial<T> = Partial<T>>(source: T, matcher: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Match/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Match")),(0,n.kt)("inlineCode",{parentName:"p"},"<T, C>, failureLog?: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Match/FailureLog/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Match.FailureLog")),(0,n.kt)("inlineCode",{parentName:"p"},"): boolean;"))),(0,n.kt)("h5",k({},{id:"type-parameters-2"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"T"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the input value type")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"C"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"utility type")))),(0,n.kt)("h4",k({},{id:"parameters-2"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"source")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"T")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the value to match (should be a plain object)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"matcher")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/deep/Match/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Match")),(0,n.kt)("inlineCode",{parentName:"td"},"<T, C>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"a matcher object or a function taking the matcher API and returning a match object")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"failureLog")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/deep/Match/FailureLog/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Match.FailureLog"))),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"(optional) a string array that can be passed to collect reasons why the match failed")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const input = { a: 1, b: { c: true, d: 'a' } }\nmatch(input, { a: 1 }) // => true\nmatch(input, { a: 2 }) // => false\nmatch(input, { a: (v) => v > 10 }) // => false\nmatch(input, { b: { c: true }}) // => true\nmatch(input, (['every', { a: (v) => v > 0 }, { b: { c: true } }]) // => true\nmatch(input, { b: { c: (v, parent, root) => v && parent.d.length > 0 && root.a > 0 } })\n// => true\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"matchat"}),(0,n.kt)("inlineCode",{parentName:"h3"},"matchAt")),(0,n.kt)("p",null,"Returns true if the given ",(0,n.kt)("inlineCode",{parentName:"p"},"value")," object matches the given ",(0,n.kt)("inlineCode",{parentName:"p"},"matcher")," at the given ",(0,n.kt)("inlineCode",{parentName:"p"},"path"),", false otherwise.")),(0,n.kt)("h4",k({},{id:"definition-3"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"export declare function matchAt<T, P extends "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Path/Get/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Path.Get")),(0,n.kt)("inlineCode",{parentName:"p"},"<T>>(source: T, path: P, matcher: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Match/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Match")),(0,n.kt)("inlineCode",{parentName:"p"},"<"),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Path/Result/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Path.Result")),(0,n.kt)("inlineCode",{parentName:"p"},"<T, P>>): boolean;"))),(0,n.kt)("h5",k({},{id:"type-parameters-3"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"T"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the input value type")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"P"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the string literal path type in the object")))),(0,n.kt)("h4",k({},{id:"parameters-3"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"source")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"T")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the input value")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"path")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"P")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the string path in the object")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"matcher")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/deep/Match/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Match")),(0,n.kt)("inlineCode",{parentName:"td"},"<"),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/deep/Path/Result/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Path.Result")),(0,n.kt)("inlineCode",{parentName:"td"},"<T, P>>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"a matcher object or a function taking the matcher API and returning a match object")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const input = { a: 1, b: { c: true, d: 'a' } }\nDeep.matchAt(input, 'b', { c: true })\n// => true\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"matchatwith"}),(0,n.kt)("inlineCode",{parentName:"h3"},"matchAtWith")),(0,n.kt)("p",null,"Returns a function that matches a given ",(0,n.kt)("inlineCode",{parentName:"p"},"value")," with the given ",(0,n.kt)("inlineCode",{parentName:"p"},"matcher")," at the given string ",(0,n.kt)("inlineCode",{parentName:"p"},"path"),".")),(0,n.kt)("h4",k({},{id:"definition-4"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"export declare function matchAtWith<T, P extends "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Path/Get/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Path.Get")),(0,n.kt)("inlineCode",{parentName:"p"},"<T>, TE extends T = T>(path: P, matcher: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Match/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Match")),(0,n.kt)("inlineCode",{parentName:"p"},"<"),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Path/Result/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Path.Result")),(0,n.kt)("inlineCode",{parentName:"p"},"<T & TE, P>>): (source: T) => boolean;"))),(0,n.kt)("h5",k({},{id:"type-parameters-4"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"T"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the patch value type")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"P"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the string literal path type in the object")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"TE"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"utility type")))),(0,n.kt)("h4",k({},{id:"parameters-4"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"path")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"P")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the string path in the object")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"matcher")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/deep/Match/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Match")),(0,n.kt)("inlineCode",{parentName:"td"},"<"),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/deep/Path/Result/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Path.Result")),(0,n.kt)("inlineCode",{parentName:"td"},"<T & TE, P>>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"a matcher object that matches input values.")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const items = [{ a: { b:  1, c: 'a' } }, { a: { b: 2, c: 'b' } }];\nitems.filter(Deep.matchAtWith('a.b', 2));\n// => [{ a: 2, b: 'b' }]\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"matchwith"}),(0,n.kt)("inlineCode",{parentName:"h3"},"matchWith")),(0,n.kt)("p",null,"Returns a function that matches a given ",(0,n.kt)("inlineCode",{parentName:"p"},"value")," with the given ",(0,n.kt)("inlineCode",{parentName:"p"},"matcher"),".")),(0,n.kt)("h4",k({},{id:"definition-5"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"export declare function matchWith<T>(matcher: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Match/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Match")),(0,n.kt)("inlineCode",{parentName:"p"},"<T>): (source: T) => boolean;"))),(0,n.kt)("h5",k({},{id:"type-parameters-5"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"T"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the patch value type")))),(0,n.kt)("h4",k({},{id:"parameters-5"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"matcher")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/deep/Match/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Match")),(0,n.kt)("inlineCode",{parentName:"td"},"<T>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"a matcher object that matches input values.")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const items = [{ a: 1, b: 'a' }, { a: 2, b: 'b' }];\nitems.filter(Deep.matchWith({ a: 2 }));\n// => [{ a: 2, b: 'b' }]\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"patch"}),(0,n.kt)("inlineCode",{parentName:"h3"},"patch")),(0,n.kt)("p",null,"Returns an immutably updated version of the given ",(0,n.kt)("inlineCode",{parentName:"p"},"value")," where the given ",(0,n.kt)("inlineCode",{parentName:"p"},"patchItems")," have been applied to the result. The Rimbu patch notation is as follows: - if the target is a simple value or array, the patch can be the same type or a function returning the same type - if the target is a tuple (array of fixed length), the patch be the same type or an object containing numeric keys with patches indicating the tuple index to patch - if the target is an object, the patch can be the same type, or an array containing partial keys with their patches for the object")),(0,n.kt)("h4",k({},{id:"definition-6"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"export declare function patch<T, TE extends T = T, TT = T>(value: T, patchItem: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Patch/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Patch")),(0,n.kt)("inlineCode",{parentName:"p"},"<TE, T & TT>): T;"))),(0,n.kt)("h5",k({},{id:"type-parameters-6"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"T"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the type of the value to patch")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"TE"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"a utility type")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"TT"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"a utility type")))),(0,n.kt)("h4",k({},{id:"parameters-6"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"value")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"T")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the input value to patch")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"patchItem")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/deep/Patch/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Patch")),(0,n.kt)("inlineCode",{parentName:"td"},"<TE, T & TT>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the ",(0,n.kt)("inlineCode",{parentName:"td"},"Patch")," value to apply to the input value")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const input = { a: 1, b: { c: true, d: 'a' } }\npatch(input, [{ a: 2 }])  // => { a: 2, b: { c: true, d: 'a' } }\npatch(input, [{ b: [{ c: (v) => !v }] }] )\n// => { a: 1, b: { c: false, d: 'a' } }\npatch(input: [{ a: (v) => v + 1, b: [{ d: 'q' }] }] )\n// => { a: 2, b: { c: true, d: 'q' } }\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"patchat"}),(0,n.kt)("inlineCode",{parentName:"h3"},"patchAt")),(0,n.kt)("p",null,"Patches the value at the given path in the source to the given value. Because the path to update must exist in the ",(0,n.kt)("inlineCode",{parentName:"p"},"source")," object, optional chaining and array indexing is not allowed.")),(0,n.kt)("h4",k({},{id:"definition-7"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"export declare function patchAt<T, P extends "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Path/Set/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Path.Set")),(0,n.kt)("inlineCode",{parentName:"p"},"<T>, C = "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Path/Result/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Path.Result")),(0,n.kt)("inlineCode",{parentName:"p"},"<T, P>>(source: T, path: P, patchItem: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Patch/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Patch")),(0,n.kt)("inlineCode",{parentName:"p"},"<"),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Path/Result/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Path.Result")),(0,n.kt)("inlineCode",{parentName:"p"},"<T, P>, "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Path/Result/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Path.Result")),(0,n.kt)("inlineCode",{parentName:"p"},"<T, P> & C>): T;"))),(0,n.kt)("h5",k({},{id:"type-parameters-7"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"T"),(0,n.kt)("td",k({parentName:"tr"},{align:null}))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"P"),(0,n.kt)("td",k({parentName:"tr"},{align:null}))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"C"),(0,n.kt)("td",k({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",k({},{id:"parameters-7"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"source")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"T")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the object to update")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"path")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"P")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the path in the object to update")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"patchItem")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/deep/Patch/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Patch")),(0,n.kt)("inlineCode",{parentName:"td"},"<"),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/deep/Path/Result/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Path.Result")),(0,n.kt)("inlineCode",{parentName:"td"},"<T, P>, "),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/deep/Path/Result/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Path.Result")),(0,n.kt)("inlineCode",{parentName:"td"},"<T, P> & C>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the patch for the value at the given path")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const value = { a: { b: { c: 5 } } };\nDeep.patchAt(value, 'a.b.c', v => v + 5);\n// => { a: { b: { c: 6 } } }\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"patchatwith"}),(0,n.kt)("inlineCode",{parentName:"h3"},"patchAtWith")),(0,n.kt)("p",null,"Returns a function that patches a given ",(0,n.kt)("inlineCode",{parentName:"p"},"value")," with the given ",(0,n.kt)("inlineCode",{parentName:"p"},"patchItems")," at the given ",(0,n.kt)("inlineCode",{parentName:"p"},"path"),".")),(0,n.kt)("h4",k({},{id:"definition-8"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"export declare function patchAtWith<T, P extends "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Path/Set/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Path.Set")),(0,n.kt)("inlineCode",{parentName:"p"},"<T>, TE extends T = T, TT = T>(path: P, patchItem: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Patch/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Patch")),(0,n.kt)("inlineCode",{parentName:"p"},"<"),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Path/Result/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Path.Result")),(0,n.kt)("inlineCode",{parentName:"p"},"<TE, P>, "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Path/Result/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Path.Result")),(0,n.kt)("inlineCode",{parentName:"p"},"<TT, P>>): (source: T) => T;"))),(0,n.kt)("h5",k({},{id:"type-parameters-8"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"T"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the patch value type")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"P"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the string literal path type in the object")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"TE"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"utility type")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"TT"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"utility type")))),(0,n.kt)("h4",k({},{id:"parameters-8"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"path")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"P")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the string path in the object")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"patchItem")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/deep/Patch/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Patch")),(0,n.kt)("inlineCode",{parentName:"td"},"<"),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/deep/Path/Result/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Path.Result")),(0,n.kt)("inlineCode",{parentName:"td"},"<TE, P>, "),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/deep/Path/Result/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Path.Result")),(0,n.kt)("inlineCode",{parentName:"td"},"<TT, P>>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the ",(0,n.kt)("inlineCode",{parentName:"td"},"Patch")," definition to update the value at the given ",(0,n.kt)("inlineCode",{parentName:"td"},"path")," in ",(0,n.kt)("inlineCode",{parentName:"td"},"T")," with.")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const items = [{ a: { b:  1, c: 'a' } }, { a: { b: 2, c: 'b' } }];\nitems.map(Deep.patchAtWith('a', [{ b: (v) => v + 1 }]));\n// => [{ a: { b: 2, c: 'a' } }, { a: { b: 3, c: 'b' } }]\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"patchwith"}),(0,n.kt)("inlineCode",{parentName:"h3"},"patchWith")),(0,n.kt)("p",null,"Returns a function that patches a given ",(0,n.kt)("inlineCode",{parentName:"p"},"source")," with the given ",(0,n.kt)("inlineCode",{parentName:"p"},"patchItems"),".")),(0,n.kt)("h4",k({},{id:"definition-9"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"export declare function patchWith<T, TE extends T = T, TT = T>(patchItem: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Patch/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Patch")),(0,n.kt)("inlineCode",{parentName:"p"},"<TT, TE>): (source: TE) => T;"))),(0,n.kt)("h5",k({},{id:"type-parameters-9"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"T"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the patch value type")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"TE"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"utility type")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"TT"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"utility type")))),(0,n.kt)("h4",k({},{id:"parameters-9"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"patchItem")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/deep/Patch/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Patch")),(0,n.kt)("inlineCode",{parentName:"td"},"<TT, TE>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the ",(0,n.kt)("inlineCode",{parentName:"td"},"Patch")," definition to update the given value of type ",(0,n.kt)("inlineCode",{parentName:"td"},"T")," with.")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const items = [{ a: 1, b: 'a' }, { a: 2, b: 'b' }];\nitems.map(Deep.patchWith([{ a: v => v + 1 }]));\n// => [{ a: 2, b: 'a' }, { a: 3, b: 'b' }]\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"protect"}),(0,n.kt)("inlineCode",{parentName:"h3"},"protect")),(0,n.kt)("p",null,"Returns the same value wrapped in the ",(0,n.kt)("inlineCode",{parentName:"p"},"Protected")," type.")),(0,n.kt)("h4",k({},{id:"definition-10"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"export declare function protect<T>(source: T): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Protected/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Protected")),(0,n.kt)("inlineCode",{parentName:"p"},"<T>;"))),(0,n.kt)("h5",k({},{id:"type-parameters-10"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"T"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the source value type")))),(0,n.kt)("h4",k({},{id:"parameters-10"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"source")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"T")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the value to wrap")))),(0,n.kt)("admonition",k({},{title:"note",type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"does not perform any runtime protection, it is only a utility to easily add the ",(0,n.kt)("inlineCode",{parentName:"p"},"Protected")," type to a value")),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const obj = Deep.protect({ a: 1, b: { c: true, d: [1] } })\nobj.a = 2        // compiler error: a is readonly\nobj.b.c = false  // compiler error: c is readonly\nobj.b.d.push(2)  // compiler error: d is a readonly array\n(obj as any).b.d.push(2)  // will actually mutate the object\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"select"}),(0,n.kt)("inlineCode",{parentName:"h3"},"select")),(0,n.kt)("p",null,"Returns the result of applying the given ",(0,n.kt)("inlineCode",{parentName:"p"},"selector")," shape to the given ",(0,n.kt)("inlineCode",{parentName:"p"},"source")," value.")),(0,n.kt)("h4",k({},{id:"definition-11"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"export declare function select<T, SL extends "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Selector/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Selector")),(0,n.kt)("inlineCode",{parentName:"p"},"<T>>(source: T, selector: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Selector/Shape/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Selector.Shape")),(0,n.kt)("inlineCode",{parentName:"p"},"<SL>): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Selector/Result/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Selector.Result")),(0,n.kt)("inlineCode",{parentName:"p"},"<T, SL>;"))),(0,n.kt)("h5",k({},{id:"type-parameters-11"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"T"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the patch value type")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"SL"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the selector shape type")))),(0,n.kt)("h4",k({},{id:"parameters-11"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"source")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"T")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the source value to select from")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"selector")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/deep/Selector/Shape/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Selector.Shape")),(0,n.kt)("inlineCode",{parentName:"td"},"<SL>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"a shape indicating the selection from the source values")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const item = { a: { b:  1, c: 'a' } };\nDeep.select(item, { q: 'a.c', y: ['a.b', 'a.c'], z: (v) => v.a.b + 1 });\n// => { q: 'a', y: [1, 'a'], z: 2 }\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"selectat"}),(0,n.kt)("inlineCode",{parentName:"h3"},"selectAt")),(0,n.kt)("p",null,"Returns the result of applying the given ",(0,n.kt)("inlineCode",{parentName:"p"},"selector")," shape to the given ",(0,n.kt)("inlineCode",{parentName:"p"},"source")," value.")),(0,n.kt)("h4",k({},{id:"definition-12"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"export declare function selectAt<T, P extends "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Path/Get/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Path.Get")),(0,n.kt)("inlineCode",{parentName:"p"},"<T>, SL extends "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Selector/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Selector")),(0,n.kt)("inlineCode",{parentName:"p"},"<"),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Path/Result/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Path.Result")),(0,n.kt)("inlineCode",{parentName:"p"},"<T, P>>>(source: T, path: P, selector: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Selector/Shape/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Selector.Shape")),(0,n.kt)("inlineCode",{parentName:"p"},"<SL>): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Selector/Result/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Selector.Result")),(0,n.kt)("inlineCode",{parentName:"p"},"<"),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Path/Result/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Path.Result")),(0,n.kt)("inlineCode",{parentName:"p"},"<T, P>, SL>;"))),(0,n.kt)("h5",k({},{id:"type-parameters-12"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"T"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the patch value type")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"P"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the string literal path type in the object")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"SL"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the selector shape type")))),(0,n.kt)("h4",k({},{id:"parameters-12"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"source")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"T")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the source value to select from")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"path")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"P")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the string path in the object")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"selector")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/deep/Selector/Shape/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Selector.Shape")),(0,n.kt)("inlineCode",{parentName:"td"},"<SL>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"a shape indicating the selection from the source value at the given path")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const item = { a: { b:  1, c: 'a' } };\nDeep.selectAt(item, 'a', { q: 'c', z: ['b', v => v.b + 1] as const });\n// => { q: 'a', z: [1, 2] }\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"selectatwith"}),(0,n.kt)("inlineCode",{parentName:"h3"},"selectAtWith")),(0,n.kt)("p",null,"Returns a function that selects a certain shape from a given ",(0,n.kt)("inlineCode",{parentName:"p"},"value")," with the given ",(0,n.kt)("inlineCode",{parentName:"p"},"selector")," at the given string ",(0,n.kt)("inlineCode",{parentName:"p"},"path"),".")),(0,n.kt)("h4",k({},{id:"definition-13"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"export declare function selectAtWith<T, P extends "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Path/Get/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Path.Get")),(0,n.kt)("inlineCode",{parentName:"p"},"<T>, SL extends "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Selector/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Selector")),(0,n.kt)("inlineCode",{parentName:"p"},"<"),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Path/Result/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Path.Result")),(0,n.kt)("inlineCode",{parentName:"p"},"<T, P>>>(path: P, selector: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Selector/Shape/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Selector.Shape")),(0,n.kt)("inlineCode",{parentName:"p"},"<SL>): (source: T) => "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Selector/Result/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Selector.Result")),(0,n.kt)("inlineCode",{parentName:"p"},"<"),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Path/Result/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Path.Result")),(0,n.kt)("inlineCode",{parentName:"p"},"<T, P>, SL>;"))),(0,n.kt)("h5",k({},{id:"type-parameters-13"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"T"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the patch value type")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"P"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the string literal path type in the object")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"SL"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the selector shape type")))),(0,n.kt)("h4",k({},{id:"parameters-13"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"path")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"P")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the string path in the object")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"selector")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/deep/Selector/Shape/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Selector.Shape")),(0,n.kt)("inlineCode",{parentName:"td"},"<SL>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"a shape indicating the selection from the source values")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const items = [{ a: { b:  1, c: 'a' } }, { a: { b: 2, c: 'b' } }];\nitems.map(Deep.selectAtWith('a', { q: 'c', z: ['b', v => v.b + 1] as const }));\n// => [{ q: 'a', z: [1, 2] }, { q: 'b', z: [2, 3] }]\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"selectwith"}),(0,n.kt)("inlineCode",{parentName:"h3"},"selectWith")),(0,n.kt)("p",null,"Returns a function that selects a certain shape from a given ",(0,n.kt)("inlineCode",{parentName:"p"},"value")," with the given ",(0,n.kt)("inlineCode",{parentName:"p"},"selector"),".")),(0,n.kt)("h4",k({},{id:"definition-14"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"export declare function selectWith<T, SL extends "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Selector/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Selector")),(0,n.kt)("inlineCode",{parentName:"p"},"<T>>(selector: "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Selector/Shape/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Selector.Shape")),(0,n.kt)("inlineCode",{parentName:"p"},"<SL>): (source: T) => "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/Selector/Result/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Selector.Result")),(0,n.kt)("inlineCode",{parentName:"p"},"<T, SL>;"))),(0,n.kt)("h5",k({},{id:"type-parameters-14"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"T"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the patch value type")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"SL"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the selector shape type")))),(0,n.kt)("h4",k({},{id:"parameters-14"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"selector")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),(0,n.kt)("a",k({parentName:"td"},{href:"/api/rimbu/deep/Selector/Shape/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Selector.Shape")),(0,n.kt)("inlineCode",{parentName:"td"},"<SL>")),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"a shape indicating the selection from the source values")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const items = [{ a: { b:  1, c: 'a' } }, { a: { b: 2, c: 'b' } }];\nitems.map(Deep.selectWith({ q: 'a.c', z: ['a.b', v => v.a.b + 1] as const }));\n// => [{ q: 'a', z: [1, 2] }, { q: 'b', z: [2, 3] }]\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",k({},{id:"withtype"}),(0,n.kt)("inlineCode",{parentName:"h3"},"withType")),(0,n.kt)("p",null,"Returns a curried API with a known target type. This can be useful for using the methods in contexts where the target type can be inferred from the usage.")),(0,n.kt)("h4",k({},{id:"definition-15"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"export declare function withType<T>(): "),(0,n.kt)("a",k({parentName:"p"},{href:"/api/rimbu/deep/WithType/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"WithType")),(0,n.kt)("inlineCode",{parentName:"p"},"<T>;"))),(0,n.kt)("h5",k({},{id:"type-parameters-15"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",k({parentName:"tr"},{align:null}),"T"),(0,n.kt)("td",k({parentName:"tr"},{align:null}),"the target type")))),(0,n.kt)("admonition",k({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const s = { a: 1, b: { c: 'a', d: true }}\nconst upd = Deep.withType<typeof s>().patchWith([{ d: (v) => !v }])\nupd(s)\n// => { a: 1, b: { c: 'a', d: false }}\n")))))}f.isMDXComponent=!0}}]);