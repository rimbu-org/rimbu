"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[77692],{15680:(e,a,n)=>{n.d(a,{xA:()=>m,yg:()=>s});var t=n(96540);function l(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){l(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function p(e,a){if(null==e)return{};var n,t,l=function(e,a){if(null==e)return{};var n,t,l={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(l[n]=e[n]);return l}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var y=t.createContext({}),o=function(e){var a=t.useContext(y),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},m=function(e){var a=o(e.components);return t.createElement(y.Provider,{value:a},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},u=t.forwardRef((function(e,a){var n=e.components,l=e.mdxType,r=e.originalType,y=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),d=o(n),u=l,s=d["".concat(y,".").concat(u)]||d[u]||g[u]||r;return n?t.createElement(s,i(i({ref:a},m),{},{components:n})):t.createElement(s,i({ref:a},m))}));function s(e,a){var n=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=u;var p={};for(var y in a)hasOwnProperty.call(a,y)&&(p[y]=a[y]);p.originalType=e,p[d]="string"==typeof e?e:l,i[1]=p;for(var o=2;o<r;o++)i[o]=n[o];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},51505:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>h,contentTitle:()=>N,default:()=>C,frontMatter:()=>s,metadata:()=>c,toc:()=>f});var t=n(15680),l=Object.defineProperty,r=Object.defineProperties,i=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,y=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable,m=(e,a,n)=>a in e?l(e,a,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[a]=n,d=(e,a)=>{for(var n in a||(a={}))y.call(a,n)&&m(e,n,a[n]);if(p)for(var n of p(a))o.call(a,n)&&m(e,n,a[n]);return e},g=(e,a)=>r(e,i(a)),u=(e,a)=>{var n={};for(var t in e)y.call(e,t)&&a.indexOf(t)<0&&(n[t]=e[t]);if(null!=e&&p)for(var t of p(e))a.indexOf(t)<0&&o.call(e,t)&&(n[t]=e[t]);return n};const s={title:"RMapBase.Builder<K,V,Tp>",slug:"/rimbu/collection-types/map-custom/RMapBase/Builder/interface"},N="interface RMapBase.Builder<K,V,Tp>",c={unversionedId:"rimbu_collection-types/map-custom/RMapBase/Builder.interface",id:"rimbu_collection-types/map-custom/RMapBase/Builder.interface",title:"RMapBase.Builder<K,V,Tp>",description:"undocumented",source:"@site/api/rimbu_collection-types/map-custom/RMapBase/Builder.interface.mdx",sourceDirName:"rimbu_collection-types/map-custom/RMapBase",slug:"/rimbu/collection-types/map-custom/RMapBase/Builder/interface",permalink:"/api/rimbu/collection-types/map-custom/RMapBase/Builder/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"RMapBase.Builder<K,V,Tp>",slug:"/rimbu/collection-types/map-custom/RMapBase/Builder/interface"},sidebar:"defaultSidebar",previous:{title:"RMapBase (namespace)",permalink:"/api/rimbu/collection-types/map-custom/RMapBase/namespace"},next:{title:"RMapBase.Context<UK,Tp>",permalink:"/api/rimbu/collection-types/map-custom/RMapBase/Context/interface"}},h={},f=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>context</code>",id:"context",level:3},{value:"Definition",id:"definition",level:4},{value:"<code>isEmpty</code>",id:"isempty",level:3},{value:"Definition",id:"definition-1",level:4},{value:"<code>size</code>",id:"size",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Methods",id:"methods",level:2},{value:"<code>addEntries</code>",id:"addentries",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Parameters",id:"parameters",level:4},{value:"<code>addEntry</code>",id:"addentry",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>build</code>",id:"build",level:3},{value:"Definition",id:"definition-5",level:4},{value:"<code>buildMapValues</code>",id:"buildmapvalues",level:3},{value:"Definition",id:"definition-6",level:4},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"<code>forEach</code>",id:"foreach",level:3},{value:"Definition",id:"definition-7",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"<code>get</code>",id:"get",level:3},{value:"Definitions",id:"definitions",level:4},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"<code>hasKey</code>",id:"haskey",level:3},{value:"Definition",id:"definition-8",level:4},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"<code>modifyAt</code>",id:"modifyat",level:3},{value:"Definition",id:"definition-9",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"<code>removeKey</code>",id:"removekey",level:3},{value:"Definitions",id:"definitions-1",level:4},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"<code>removeKeys</code>",id:"removekeys",level:3},{value:"Definition",id:"definition-10",level:4},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"<code>set</code>",id:"set",level:3},{value:"Definition",id:"definition-11",level:4},{value:"Parameters",id:"parameters-9",level:4},{value:"<code>updateAt</code>",id:"updateat",level:3},{value:"Definitions",id:"definitions-2",level:4},{value:"Parameters",id:"parameters-10",level:4}],b={toc:f},v="wrapper";function C(e){var a=e,{components:n}=a,l=u(a,["components"]);return(0,t.yg)(v,g(d(d({},b),l),{components:n,mdxType:"MDXLayout"}),(0,t.yg)("h1",d({},{id:"interface-rmapbasebuilderkvtp"}),(0,t.yg)("inlineCode",{parentName:"h1"},"interface RMapBase.Builder<K,V,Tp>")),(0,t.yg)("p",null,"undocumented"),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Implemented by:")," ",(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/ordered/map-custom/OrderedMapBase/Builder/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"OrderedMapBase.Builder<K,V,Tp>")),", ",(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/hashed/map/HashMap/Builder/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"HashMap.Builder<K,V>")),", ",(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/sorted/map/SortedMap/Builder/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"SortedMap.Builder<K,V>")),", ",(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/proximity/ProximityMap/Builder/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"ProximityMap.Builder<K,V>"))),(0,t.yg)("h2",d({},{id:"type-parameters"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"K"),(0,t.yg)("td",d({parentName:"tr"},{align:null})),(0,t.yg)("td",d({parentName:"tr"},{align:null})),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"undocumented")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"V"),(0,t.yg)("td",d({parentName:"tr"},{align:null})),(0,t.yg)("td",d({parentName:"tr"},{align:null})),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"undocumented")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"Tp"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Types/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"RMapBase.Types"))),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Types/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"RMapBase.Types"))),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"undocumented")))),(0,t.yg)("h2",d({},{id:"properties"}),"Properties"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"context"}),(0,t.yg)("inlineCode",{parentName:"h3"},"context")),(0,t.yg)("p",null,"Returns the ",(0,t.yg)("inlineCode",{parentName:"p"},"context")," associated to this collection instance.")),(0,t.yg)("h4",d({},{id:"definition"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly context: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['context'];")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"isempty"}),(0,t.yg)("inlineCode",{parentName:"h3"},"isEmpty")),(0,t.yg)("p",null,"Returns true if there are no entries in the builder.")),(0,t.yg)("h4",d({},{id:"definition-1"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly isEmpty: boolean;"))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"HashMap.of([[1, 'a'], [2, 'b']]).toBuilder().isEmpty\n// => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"size"}),(0,t.yg)("inlineCode",{parentName:"h3"},"size")),(0,t.yg)("p",null,"Returns the amount of entries in the builder.")),(0,t.yg)("h4",d({},{id:"definition-2"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly size: number;"))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"HashMap.of([[1, 'a'], [2, 'b']]).toBuilder().size\n// => 2\n")))),(0,t.yg)("h2",d({},{id:"methods"}),"Methods"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"addentries"}),(0,t.yg)("inlineCode",{parentName:"h3"},"addEntries")),(0,t.yg)("p",null,"Adds given ",(0,t.yg)("inlineCode",{parentName:"p"},"entries")," to the builder.")),(0,t.yg)("h4",d({},{id:"definition-3"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"addEntries(entries: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<readonly [K, V]>): boolean;"))),(0,t.yg)("h4",d({},{id:"parameters"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"entries")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<readonly [K, V]>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b']).toBuilder()\nm.addEntries([1, 'a'], [3, 'c']])   // => true\nm.addEntries([])                    // => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"addentry"}),(0,t.yg)("inlineCode",{parentName:"h3"},"addEntry")),(0,t.yg)("p",null,"Adds given ",(0,t.yg)("inlineCode",{parentName:"p"},"entry")," to the builder.")),(0,t.yg)("h4",d({},{id:"definition-4"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"addEntry(entry: readonly [K, V]): boolean;"))),(0,t.yg)("h4",d({},{id:"parameters-1"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"entry")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"readonly [K, V]")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b']).toBuilder()\nm.addEntry([3, 'c'])   // => true\nm.addEntry([1, 'a'])   // => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"build"}),(0,t.yg)("inlineCode",{parentName:"h3"},"build")),(0,t.yg)("p",null,"Returns an immutable collection instance containing the entries in this builder.")),(0,t.yg)("h4",d({},{id:"definition-5"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"build(): "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b']).toBuilder()\nconst m2: HashMap<number, string> = m.build()\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"buildmapvalues"}),(0,t.yg)("inlineCode",{parentName:"h3"},"buildMapValues")),(0,t.yg)("p",null,"Returns an immutable instance of the entries in this builder, with given ",(0,t.yg)("inlineCode",{parentName:"p"},"mapValues")," function applied to all the values in the entries.")),(0,t.yg)("h4",d({},{id:"definition-6"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"buildMapValues<V2>(mapFun: (value: V, key: K) => V2): (Tp & "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/KeyValue/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"KeyValue")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, V2>)['normal'];"))),(0,t.yg)("h4",d({},{id:"type-parameters-1"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"V2"),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",d({},{id:"parameters-2"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"mapFun")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(value: V, key: K) => V2")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"a function that takes an entry value and its key, and returns a new value")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b']).toBuilder()\nconst m2: HashMap<number, number> = m.buildMapValues(value => value.length)\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"foreach"}),(0,t.yg)("inlineCode",{parentName:"h3"},"forEach")),(0,t.yg)("p",null,"Performs given function ",(0,t.yg)("inlineCode",{parentName:"p"},"f")," for each entry of the builder.")),(0,t.yg)("h4",d({},{id:"definition-7"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"forEach(f: (entry: readonly [K, V], index: number, halt: () => void) => void, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"state?: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/TraverseState/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"TraverseState")),(0,t.yg)("inlineCode",{parentName:"p"},";"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): void;"))),(0,t.yg)("h4",d({},{id:"parameters-3"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"f")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(entry: readonly [K, V], index: number, halt: () => void) => void")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the function to perform for each element, receiving:",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"entry"),": the next key-value entry",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"index"),": the index of the element",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"halt"),": a function that, if called, ensures that no new elements are passed")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"state?: "),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/TraverseState/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"TraverseState")),(0,t.yg)("inlineCode",{parentName:"td"},";"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",d({},{title:"throws",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"RibuError.ModifiedBuilderWhileLoopingOverItError if the builder is modified while looping over it")),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 'a'], [2, 'b'], [3, 'c']).toBuilder().forEach((entry, i, halt) => {\nconsole.log([entry[1], entry[0]]);\nif (i >= 1) halt();\n})\n// => logs ['a', 1]  ['b', 2]\n"))),(0,t.yg)("admonition",d({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N)"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"get"}),(0,t.yg)("inlineCode",{parentName:"h3"},"get")),(0,t.yg)("p",null,"Returns the value associated with the given ",(0,t.yg)("inlineCode",{parentName:"p"},"key"),", or given ",(0,t.yg)("inlineCode",{parentName:"p"},"otherwise")," value if the key is not in the collection.")),(0,t.yg)("h4",d({},{id:"definitions"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"get<UK = K>(key: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, UK>): V "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"get<UK, O>(key: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, UK>, otherwise: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,t.yg)("inlineCode",{parentName:"p"},"<O>): V "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," O;"))),(0,t.yg)("h4",d({},{id:"type-parameters-2"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"UK"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"K")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",d({},{id:"parameters-4"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"key")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<K, UK>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the key to look for")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b']).toBuilder()\nm.get(2)          // => 'b'\nm.get(3)          // => undefined\nm.get(2, 'none')  // => 'b'\nm.get(3, 'none')  // => 'none'\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"haskey"}),(0,t.yg)("inlineCode",{parentName:"h3"},"hasKey")),(0,t.yg)("p",null,"Returns true if the given ",(0,t.yg)("inlineCode",{parentName:"p"},"key")," is present in the builder.")),(0,t.yg)("h4",d({},{id:"definition-8"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"hasKey<UK = K>(key: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, UK>): boolean;"))),(0,t.yg)("h4",d({},{id:"type-parameters-3"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"UK"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"K")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",d({},{id:"parameters-5"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"key")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<K, UK>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the key to look for")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b']).toBuilder()\nm.hasKey(2)    // => true\nm.hasKey(3)    // => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"modifyat"}),(0,t.yg)("inlineCode",{parentName:"h3"},"modifyAt")),(0,t.yg)("p",null,"Modifies or creates the builder entry with given ",(0,t.yg)("inlineCode",{parentName:"p"},"atKey")," as its key according to given ",(0,t.yg)("inlineCode",{parentName:"p"},"options"),".")),(0,t.yg)("h4",d({},{id:"definition-9"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"modifyAt(key: K, options: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"ifNew?: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/OptLazyOr/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazyOr")),(0,t.yg)("inlineCode",{parentName:"p"},"<V, Token>;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"ifExists?: (<V2 extends V = V>(currentValue: V & V2, remove: Token) => V "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"},"Token)"),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," V;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): boolean;"))),(0,t.yg)("h4",d({},{id:"parameters-6"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"key")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"K")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"ifNew?: "),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/OptLazyOr/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazyOr")),(0,t.yg)("inlineCode",{parentName:"td"},"<V, Token>;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"ifExists?: (<V2 extends V = V>(currentValue: V & V2, remove: Token) => V "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"},"Token)"),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," V;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b']).toBuilder()\nm.modifyAt(1, { ifNew: 'd' })\n// => false\nm.modifyAt(3, { ifNew: 'c' })\n// => true\nm.modifyAt(3, { ifNew: (none) => 1 < 2 ? none : 'c' })\n// => false\nm.modifyAt(2, { ifExists: () => 'c' })\n// => true\nm.modifyAt(1, { ifExists: (v) => v + 'z' })\n// => true\nm.modifyAt(2, { ifExists: (v, remove) => v === 'a' ? v : remove })\n// => true\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"removekey"}),(0,t.yg)("inlineCode",{parentName:"h3"},"removeKey")),(0,t.yg)("p",null,"Removes the entry with given ",(0,t.yg)("inlineCode",{parentName:"p"},"key")," from the builder.")),(0,t.yg)("h4",d({},{id:"definitions-1"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"removeKey<UK = K>(key: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, UK>): V "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"removeKey<UK, O>(key: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, UK>, otherwise: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,t.yg)("inlineCode",{parentName:"p"},"<O>): V "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," O;"))),(0,t.yg)("h4",d({},{id:"type-parameters-4"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"UK"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"K")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",d({},{id:"parameters-7"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"key")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<K, UK>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the key of the entry to remove")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b']).toBuilder()\nm.removeKey(2)        // => 'b'\nm.removeKey(3)        // => undefined\nm.removeKey(3, 'c')   // => 'c'\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"removekeys"}),(0,t.yg)("inlineCode",{parentName:"h3"},"removeKeys")),(0,t.yg)("p",null,"Removes the entries in the given ",(0,t.yg)("inlineCode",{parentName:"p"},"keys")," ",(0,t.yg)("inlineCode",{parentName:"p"},"StreamSource")," from the builder.")),(0,t.yg)("h4",d({},{id:"definition-10"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"removeKeys<UK = K>(keys: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<"),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, UK>>): boolean;"))),(0,t.yg)("h4",d({},{id:"type-parameters-5"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),"UK"),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"K")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",d({},{id:"parameters-8"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"keys")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<"),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<K, UK>>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b']).toBuilder()\nm.removeKeys([3, 4, 5])  // => false\nm.removeKeys([1, 10])    // => true\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"set"}),(0,t.yg)("inlineCode",{parentName:"h3"},"set")),(0,t.yg)("p",null,"Associates given ",(0,t.yg)("inlineCode",{parentName:"p"},"key")," with given ",(0,t.yg)("inlineCode",{parentName:"p"},"value")," in the builder.")),(0,t.yg)("h4",d({},{id:"definition-11"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"set(key: K, value: V): boolean;"))),(0,t.yg)("h4",d({},{id:"parameters-9"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"key")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"K")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the entry key")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"value")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"V")),(0,t.yg)("td",d({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b']).toBuilder()\nm.set(3, 'c')   // => true\nm.set(1, 'a')   // => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"updateat"}),(0,t.yg)("inlineCode",{parentName:"h3"},"updateAt")),(0,t.yg)("p",null,"Updates the value in the builder associated with given ",(0,t.yg)("inlineCode",{parentName:"p"},"key")," according to given ",(0,t.yg)("inlineCode",{parentName:"p"},"update")," value or function.")),(0,t.yg)("h4",d({},{id:"definitions-2"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"updateAt(key: K, update: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Update/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RMapBase.Update")),(0,t.yg)("inlineCode",{parentName:"p"},"<V>): V "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"updateAt<O>(key: K, update: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Update/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RMapBase.Update")),(0,t.yg)("inlineCode",{parentName:"p"},"<V>, otherwise: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,t.yg)("inlineCode",{parentName:"p"},"<O>): V "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," O;"))),(0,t.yg)("h4",d({},{id:"parameters-10"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"key")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"K")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the key of the entry to update")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"update")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Update/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RMapBase.Update")),(0,t.yg)("inlineCode",{parentName:"td"},"<V>")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"a new value or function taking the previous value and returning a new value")))),(0,t.yg)("admonition",d({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b']).toBuilder()\nm.updateAt(1, 'a')           // => 'a'\nm.updateAt(1, 'b')           // => 'b'\nm.updateAt(2, v => v + 'z')  // => 'b'\n")))))}C.isMDXComponent=!0}}]);