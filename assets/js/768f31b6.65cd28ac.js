"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[20162],{15680:(e,a,t)=>{t.d(a,{xA:()=>o,yg:()=>s});var n=t(96540);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function p(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var y=n.createContext({}),m=function(e){var a=n.useContext(y),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},o=function(e){var a=m(e.components);return n.createElement(y.Provider,{value:a},e.children)},g="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},u=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,i=e.originalType,y=e.parentName,o=p(e,["components","mdxType","originalType","parentName"]),g=m(t),u=r,s=g["".concat(y,".").concat(u)]||g[u]||d[u]||i;return t?n.createElement(s,l(l({ref:a},o),{},{components:t})):n.createElement(s,l({ref:a},o))}));function s(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=u;var p={};for(var y in a)hasOwnProperty.call(a,y)&&(p[y]=a[y]);p.originalType=e,p[g]="string"==typeof e?e:r,l[1]=p;for(var m=2;m<i;m++)l[m]=t[m];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},16047:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>b,contentTitle:()=>N,default:()=>C,frontMatter:()=>s,metadata:()=>c,toc:()=>f});var n=t(15680),r=Object.defineProperty,i=Object.defineProperties,l=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,y=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable,o=(e,a,t)=>a in e?r(e,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[a]=t,g=(e,a)=>{for(var t in a||(a={}))y.call(a,t)&&o(e,t,a[t]);if(p)for(var t of p(a))m.call(a,t)&&o(e,t,a[t]);return e},d=(e,a)=>i(e,l(a)),u=(e,a)=>{var t={};for(var n in e)y.call(e,n)&&a.indexOf(n)<0&&(t[n]=e[n]);if(null!=e&&p)for(var n of p(e))a.indexOf(n)<0&&m.call(e,n)&&(t[n]=e[n]);return t};const s={title:"BiMapFactory<UK,UV>",slug:"/rimbu/bimap/custom/BiMapFactory/interface"},N="interface BiMapFactory<UK,UV>",c={unversionedId:"rimbu_bimap/custom/BiMapFactory.interface",id:"rimbu_bimap/custom/BiMapFactory.interface",title:"BiMapFactory<UK,UV>",description:"undocumented",source:"@site/api/rimbu_bimap/custom/BiMapFactory.interface.mdx",sourceDirName:"rimbu_bimap/custom",slug:"/rimbu/bimap/custom/BiMapFactory/interface",permalink:"/api/rimbu/bimap/custom/BiMapFactory/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"BiMapFactory<UK,UV>",slug:"/rimbu/bimap/custom/BiMapFactory/interface"},sidebar:"defaultSidebar",previous:{title:"BiMapEmpty<K,V>",permalink:"/api/rimbu/bimap/custom/BiMapEmpty/class"},next:{title:"BiMapNonEmptyImpl<K,V>",permalink:"/api/rimbu/bimap/custom/BiMapNonEmptyImpl/class"}},b={},f=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>builder</code>",id:"builder",level:3},{value:"Definition",id:"definition",level:4},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"<code>empty</code>",id:"empty",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"<code>from</code>",id:"from",level:3},{value:"Definitions",id:"definitions",level:4},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Parameters",id:"parameters",level:4},{value:"<code>of</code>",id:"of",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>reducer</code>",id:"reducer",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Parameters",id:"parameters-2",level:4}],h={toc:f},v="wrapper";function C(e){var a=e,{components:t}=a,r=u(a,["components"]);return(0,n.yg)(v,d(g(g({},h),r),{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",g({},{id:"interface-bimapfactoryukuv"}),(0,n.yg)("inlineCode",{parentName:"h1"},"interface BiMapFactory<UK,UV>")),(0,n.yg)("p",null,"undocumented"),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Implemented by:")," ",(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/bimap/custom/BiMapCreators/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"BiMapCreators"))),(0,n.yg)("h2",g({},{id:"type-parameters"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),"UK"),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"unknown")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),"undocumented")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),"UV"),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"unknown")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),"undocumented")))),(0,n.yg)("h2",g({},{id:"methods"}),"Methods"),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"builder"}),(0,n.yg)("inlineCode",{parentName:"h3"},"builder")),(0,n.yg)("p",null,"Returns an empty ",(0,n.yg)("inlineCode",{parentName:"p"},"BiMap")," builder instance.")),(0,n.yg)("h4",g({},{id:"definition"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"builder<K extends UK, V extends UV>(): BiMap.Builder<K, V>;"))),(0,n.yg)("h4",g({},{id:"type-parameters-1"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Constraints"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),"K"),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UK")),(0,n.yg)("td",g({parentName:"tr"},{align:null}))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),"V"),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UV")),(0,n.yg)("td",g({parentName:"tr"},{align:null}))))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"BiMap.builder<number, string>()    // => BiMap.Builder<number, string>\n")))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"empty"}),(0,n.yg)("inlineCode",{parentName:"h3"},"empty")),(0,n.yg)("p",null,"Returns the (singleton) empty instance of this type and context with given key and value types.")),(0,n.yg)("h4",g({},{id:"definition-1"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"empty<K extends UK, V extends UV>(): BiMap<K, V>;"))),(0,n.yg)("h4",g({},{id:"type-parameters-2"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Constraints"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),"K"),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UK")),(0,n.yg)("td",g({parentName:"tr"},{align:null}))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),"V"),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UV")),(0,n.yg)("td",g({parentName:"tr"},{align:null}))))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"BiMap.empty<number, string>()    // => BiMap<number, string>\nBiMap.empty<string, boolean>()   // => BiMap<string, boolean>\n")))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"from"}),(0,n.yg)("inlineCode",{parentName:"h3"},"from")),(0,n.yg)("p",null,"Returns an immutable BiMap, containing the entries in the given ",(0,n.yg)("inlineCode",{parentName:"p"},"sources")," ",(0,n.yg)("inlineCode",{parentName:"p"},"StreamSource")," instances.")),(0,n.yg)("h4",g({},{id:"definitions"}),"Definitions"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"from<K extends UK, V extends UV>(...sources: "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,n.yg)("inlineCode",{parentName:"p"},"<"),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.yg)("inlineCode",{parentName:"p"},"<readonly [K, V]>>): BiMap.NonEmpty<K, V>;"))),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"from<K extends UK, V extends UV>(...sources: "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,n.yg)("inlineCode",{parentName:"p"},"<"),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,n.yg)("inlineCode",{parentName:"p"},"<readonly [K, V]>>): BiMap<K, V>;"))),(0,n.yg)("h4",g({},{id:"type-parameters-3"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Constraints"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),"K"),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UK")),(0,n.yg)("td",g({parentName:"tr"},{align:null}))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),"V"),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UV")),(0,n.yg)("td",g({parentName:"tr"},{align:null}))))),(0,n.yg)("h4",g({},{id:"parameters"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"sources")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,n.yg)("inlineCode",{parentName:"td"},"<"),(0,n.yg)("a",g({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.yg)("inlineCode",{parentName:"td"},"<readonly [K, V]>>")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),"an array of ",(0,n.yg)("inlineCode",{parentName:"td"},"StreamSource")," instances contaning key-value entries")))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"BiMap.from([[1, 'a'], [2, 'b']])    // => BiMap.NonEmpty<number, string>\n")))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"of"}),(0,n.yg)("inlineCode",{parentName:"h3"},"of")),(0,n.yg)("p",null,"Returns an immutable ",(0,n.yg)("inlineCode",{parentName:"p"},"BiMap"),", containing the given ",(0,n.yg)("inlineCode",{parentName:"p"},"entries"),".")),(0,n.yg)("h4",g({},{id:"definition-2"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"of<K extends UK, V extends UV>(...entries: "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,n.yg)("inlineCode",{parentName:"p"},"<readonly [K, V]>): BiMap.NonEmpty<K, V>;"))),(0,n.yg)("h4",g({},{id:"type-parameters-4"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Constraints"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),"K"),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UK")),(0,n.yg)("td",g({parentName:"tr"},{align:null}))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),"V"),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UV")),(0,n.yg)("td",g({parentName:"tr"},{align:null}))))),(0,n.yg)("h4",g({},{id:"parameters-1"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"entries")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,n.yg)("inlineCode",{parentName:"td"},"<readonly [K, V]>")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),"a non-empty array of key-value entries")))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"BiMap.of([1, 'a'], [2, 'b'])    // => BiMap.NonEmpty<number, string>\n")))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"reducer"}),(0,n.yg)("inlineCode",{parentName:"h3"},"reducer")),(0,n.yg)("p",null,"Returns a ",(0,n.yg)("inlineCode",{parentName:"p"},"Reducer")," that adds received tuples to a BiMap and returns the BiMap as a result. When a ",(0,n.yg)("inlineCode",{parentName:"p"},"source")," is given, the reducer will first create a BiMap from the source, and then add tuples to it.")),(0,n.yg)("h4",g({},{id:"definition-3"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"reducer<K extends UK, V extends UV>(source?: "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.yg)("inlineCode",{parentName:"p"},"<readonly [K, V]>): Reducer<readonly [K, V], BiMap<K, V>>;"))),(0,n.yg)("h4",g({},{id:"type-parameters-5"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Constraints"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),"K"),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UK")),(0,n.yg)("td",g({parentName:"tr"},{align:null}))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),"V"),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UV")),(0,n.yg)("td",g({parentName:"tr"},{align:null}))))),(0,n.yg)("h4",g({},{id:"parameters-2"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"source")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("a",g({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.yg)("inlineCode",{parentName:"td"},"<readonly [K, V]>")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),"(optional) an initial source of tuples to add to")))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const someSource = BiMap.of([1, 'a'], [2, 'b']);\nconst result = Stream.of([1, 'c'], [3, 'a']).reduce(BiMap.reducer(someSource))\nresult.toArray()   // => [[1, 'c'], [2, 'b'], [3, 'a']]\n"))),(0,n.yg)("admonition",g({},{title:"note",type:"note"}),(0,n.yg)("p",{parentName:"admonition"},"uses a builder under the hood. If the given ",(0,n.yg)("inlineCode",{parentName:"p"},"source")," is a BiMap in the same context, it will directly call ",(0,n.yg)("inlineCode",{parentName:"p"},".toBuilder()"),"."))))}C.isMDXComponent=!0}}]);