"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[27799],{15680:(e,t,r)=>{r.d(t,{xA:()=>u,yg:()=>y});var a=r(96540);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),m=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=m(e.components);return a.createElement(p.Provider,{value:t},e.children)},s="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},b=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),s=m(r),b=n,y=s["".concat(p,".").concat(b)]||s[b]||c[b]||o;return r?a.createElement(y,l(l({ref:t},u),{},{components:r})):a.createElement(y,l({ref:t},u))}));function y(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,l=new Array(o);l[0]=b;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[s]="string"==typeof e?e:n,l[1]=i;for(var m=2;m<o;m++)l[m]=r[m];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}b.displayName="MDXCreateElement"},63319:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>g,contentTitle:()=>d,default:()=>v,frontMatter:()=>y,metadata:()=>f,toc:()=>h});var a=r(15680),n=Object.defineProperty,o=Object.defineProperties,l=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable,u=(e,t,r)=>t in e?n(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,s=(e,t)=>{for(var r in t||(t={}))p.call(t,r)&&u(e,r,t[r]);if(i)for(var r of i(t))m.call(t,r)&&u(e,r,t[r]);return e},c=(e,t)=>o(e,l(t)),b=(e,t)=>{var r={};for(var a in e)p.call(e,a)&&t.indexOf(a)<0&&(r[a]=e[a]);if(null!=e&&i)for(var a of i(e))t.indexOf(a)<0&&m.call(e,a)&&(r[a]=e[a]);return r};const y={title:"SortedTableHashColumn<R,C,V>",slug:"/rimbu/table/sorted-row/SortedTableHashColumn/interface"},d="interface SortedTableHashColumn<R,C,V>",f={unversionedId:"rimbu_table/sorted-row/SortedTableHashColumn.interface",id:"rimbu_table/sorted-row/SortedTableHashColumn.interface",title:"SortedTableHashColumn<R,C,V>",description:"A type-invariant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the Table documentation and the SortedTableHashColumn API documentation",source:"@site/api/rimbu_table/sorted-row/SortedTableHashColumn.interface.mdx",sourceDirName:"rimbu_table/sorted-row",slug:"/rimbu/table/sorted-row/SortedTableHashColumn/interface",permalink:"/api/rimbu/table/sorted-row/SortedTableHashColumn/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"SortedTableHashColumn<R,C,V>",slug:"/rimbu/table/sorted-row/SortedTableHashColumn/interface"},sidebar:"defaultSidebar",previous:{title:"SortedTableHashColumn.Types",permalink:"/api/rimbu/table/sorted-row/SortedTableHashColumn/Types/interface"},next:{title:"SortedTableSortedColumn (namespace)",permalink:"/api/rimbu/table/sorted-row/SortedTableSortedColumn/namespace"}},g={},h=[{value:"Type parameters",id:"type-parameters",level:2}],T={toc:h},C="wrapper";function v(e){var t=e,{components:r}=t,n=b(t,["components"]);return(0,a.yg)(C,c(s(s({},T),n),{components:r,mdxType:"MDXLayout"}),(0,a.yg)("h1",s({},{id:"interface-sortedtablehashcolumnrcv"}),(0,a.yg)("inlineCode",{parentName:"h1"},"interface SortedTableHashColumn<R,C,V>")),(0,a.yg)("p",null,"A type-invariant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the ",(0,a.yg)("a",s({parentName:"p"},{href:"https://rimbu.org/docs/collections/table"}),"Table documentation")," and the ",(0,a.yg)("a",s({parentName:"p"},{href:"https://rimbu.org/api/rimbu/table/sorted-row/SortedTableHashColumn/interface"}),"SortedTableHashColumn API documentation"),"  "),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Companion namespace:")," ",(0,a.yg)("a",s({parentName:"p"},{href:"/api/rimbu/table/sorted-row/SortedTableHashColumn/namespace"}),"SortedTableHashColumn")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Implemented by:")," ",(0,a.yg)("a",s({parentName:"p"},{href:"/api/rimbu/table/sorted-row/SortedTableHashColumn/NonEmpty/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"SortedTableHashColumn.NonEmpty<R,C,V>"))),(0,a.yg)("h2",s({},{id:"type-parameters"}),"Type parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",s({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",s({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",s({parentName:"tr"},{align:null}),"R"),(0,a.yg)("td",s({parentName:"tr"},{align:null}),"the row key type")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",s({parentName:"tr"},{align:null}),"C"),(0,a.yg)("td",s({parentName:"tr"},{align:null}),"the column key type")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",s({parentName:"tr"},{align:null}),"V"),(0,a.yg)("td",s({parentName:"tr"},{align:null}),"the value type")))),(0,a.yg)("admonition",s({},{title:"note",type:"note"}),(0,a.yg)("ul",{parentName:"admonition"},(0,a.yg)("li",{parentName:"ul"},"The SortedTableHashColumn uses a SortedMap to map row keys to column. - The SortedTableHashColumn uses HashMaps to map column keys to values."))),(0,a.yg)("admonition",s({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",s({parentName:"pre"},{className:"language-ts"}),"const t1 = SortedTableHashColumn.empty<number, string, boolean>()\nconst t2 = SortedTableHashColumn.of([1, 'a', true], [2, 'a', false])\n"))))}v.isMDXComponent=!0}}]);