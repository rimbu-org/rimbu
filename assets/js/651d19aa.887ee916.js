"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[71975],{15680:(e,t,r)=>{r.d(t,{xA:()=>u,yg:()=>s});var a=r(96540);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var m=a.createContext({}),p=function(e){var t=a.useContext(m),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=p(e.components);return a.createElement(m.Provider,{value:t},e.children)},b="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,m=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),b=p(r),c=n,s=b["".concat(m,".").concat(c)]||b[c]||d[c]||o;return r?a.createElement(s,l(l({ref:t},u),{},{components:r})):a.createElement(s,l({ref:t},u))}));function s(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,l=new Array(o);l[0]=c;var i={};for(var m in t)hasOwnProperty.call(t,m)&&(i[m]=t[m]);i.originalType=e,i[b]="string"==typeof e?e:n,l[1]=i;for(var p=2;p<o;p++)l[p]=r[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}c.displayName="MDXCreateElement"},13175:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>f,contentTitle:()=>y,default:()=>N,frontMatter:()=>s,metadata:()=>g,toc:()=>h});var a=r(15680),n=Object.defineProperty,o=Object.defineProperties,l=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,m=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,u=(e,t,r)=>t in e?n(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,b=(e,t)=>{for(var r in t||(t={}))m.call(t,r)&&u(e,r,t[r]);if(i)for(var r of i(t))p.call(t,r)&&u(e,r,t[r]);return e},d=(e,t)=>o(e,l(t)),c=(e,t)=>{var r={};for(var a in e)m.call(e,a)&&t.indexOf(a)<0&&(r[a]=e[a]);if(null!=e&&i)for(var a of i(e))t.indexOf(a)<0&&p.call(e,a)&&(r[a]=e[a]);return r};const s={title:"@rimbu/table/sorted-row",slug:"/rimbu/table/sorted-row"},y="package @rimbu/table/sorted-row",g={unversionedId:"rimbu_table/sorted-row/index",id:"rimbu_table/sorted-row/index",title:"@rimbu/table/sorted-row",description:"The @rimbu/table/sorted-row package provides tables with sorted row key implementations.",source:"@site/api/rimbu_table/sorted-row/index.mdx",sourceDirName:"rimbu_table/sorted-row",slug:"/rimbu/table/sorted-row",permalink:"/api/rimbu/table/sorted-row",draft:!1,tags:[],version:"current",frontMatter:{title:"@rimbu/table/sorted-row",slug:"/rimbu/table/sorted-row"},sidebar:"defaultSidebar",previous:{title:"HashTableSortedColumn<R,C,V>",permalink:"/api/rimbu/table/hash-row/HashTableSortedColumn/interface"},next:{title:"SortedTableHashColumn (namespace)",permalink:"/api/rimbu/table/sorted-row/SortedTableHashColumn/namespace"}},f={},h=[{value:"Interfaces",id:"interfaces",level:2},{value:"Namespaces",id:"namespaces",level:2}],w={toc:h},v="wrapper";function N(e){var t=e,{components:r}=t,n=c(t,["components"]);return(0,a.yg)(v,d(b(b({},w),n),{components:r,mdxType:"MDXLayout"}),(0,a.yg)("h1",b({},{id:"package-rimbutablesorted-row"}),(0,a.yg)("inlineCode",{parentName:"h1"},"package @rimbu/table/sorted-row")),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"@rimbu/table/sorted-row")," package provides tables with sorted row key implementations."),(0,a.yg)("p",null," See the ",(0,a.yg)("a",b({parentName:"p"},{href:"/docs/collections/table"}),"Rimbu docs Table page")," for more information."),(0,a.yg)("h2",b({},{id:"interfaces"}),"Interfaces"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",b({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",b({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",b({parentName:"tr"},{align:null}),(0,a.yg)("a",b({parentName:"td"},{href:"/api/rimbu/table/sorted-row/SortedTableHashColumn/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"SortedTableHashColumn<R,C,V>"))),(0,a.yg)("td",b({parentName:"tr"},{align:null}),"A type-invariant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the ",(0,a.yg)("a",b({parentName:"td"},{href:"https://rimbu.org/docs/collections/table"}),"Table documentation")," and the ",(0,a.yg)("a",b({parentName:"td"},{href:"https://rimbu.org/api/rimbu/table/sorted-row/SortedTableHashColumn/interface"}),"SortedTableHashColumn API documentation"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",b({parentName:"tr"},{align:null}),(0,a.yg)("a",b({parentName:"td"},{href:"/api/rimbu/table/sorted-row/SortedTableSortedColumn/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"SortedTableSortedColumn<R,C,V>"))),(0,a.yg)("td",b({parentName:"tr"},{align:null}),"A type-invariant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the ",(0,a.yg)("a",b({parentName:"td"},{href:"https://rimbu.org/docs/collections/table"}),"Table documentation")," and the ",(0,a.yg)("a",b({parentName:"td"},{href:"https://rimbu.org/api/rimbu/table/sorted-row/SortedTableSortedColumn/interface"}),"SortedTableSortedColumn API documentation"))))),(0,a.yg)("h2",b({},{id:"namespaces"}),"Namespaces"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",b({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",b({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",b({parentName:"tr"},{align:null}),(0,a.yg)("a",b({parentName:"td"},{href:"/api/rimbu/table/sorted-row/SortedTableHashColumn/namespace"}),(0,a.yg)("inlineCode",{parentName:"a"},"SortedTableHashColumn"))),(0,a.yg)("td",b({parentName:"tr"},{align:null}),"A type-invariant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the ",(0,a.yg)("a",b({parentName:"td"},{href:"https://rimbu.org/docs/collections/table"}),"Table documentation")," and the ",(0,a.yg)("a",b({parentName:"td"},{href:"https://rimbu.org/api/rimbu/table/sorted-row/SortedTableHashColumn/interface"}),"SortedTableHashColumn API documentation"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",b({parentName:"tr"},{align:null}),(0,a.yg)("a",b({parentName:"td"},{href:"/api/rimbu/table/sorted-row/SortedTableSortedColumn/namespace"}),(0,a.yg)("inlineCode",{parentName:"a"},"SortedTableSortedColumn"))),(0,a.yg)("td",b({parentName:"tr"},{align:null}),"A type-invariant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the ",(0,a.yg)("a",b({parentName:"td"},{href:"https://rimbu.org/docs/collections/table"}),"Table documentation")," and the ",(0,a.yg)("a",b({parentName:"td"},{href:"https://rimbu.org/api/rimbu/table/sorted-row/SortedTableSortedColumn/interface"}),"SortedTableSortedColumn API documentation"))))))}N.isMDXComponent=!0}}]);