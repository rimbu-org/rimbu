"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[96507],{15680:(e,a,t)=>{t.d(a,{xA:()=>m,yg:()=>u});var n=t(96540);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function p(e,a){if(null==e)return{};var t,n,i=function(e,a){if(null==e)return{};var t,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(i[t]=e[t]);return i}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=n.createContext({}),y=function(e){var a=n.useContext(o),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},m=function(e){var a=y(e.components);return n.createElement(o.Provider,{value:a},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},s=n.forwardRef((function(e,a){var t=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),d=y(t),s=i,u=d["".concat(o,".").concat(s)]||d[s]||g[s]||r;return t?n.createElement(u,l(l({ref:a},m),{},{components:t})):n.createElement(u,l({ref:a},m))}));function u(e,a){var t=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=s;var p={};for(var o in a)hasOwnProperty.call(a,o)&&(p[o]=a[o]);p.originalType=e,p[d]="string"==typeof e?e:i,l[1]=p;for(var y=2;y<r;y++)l[y]=t[y];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}s.displayName="MDXCreateElement"},63062:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>h,contentTitle:()=>N,default:()=>C,frontMatter:()=>u,metadata:()=>c,toc:()=>v});var n=t(15680),i=Object.defineProperty,r=Object.defineProperties,l=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,y=Object.prototype.propertyIsEnumerable,m=(e,a,t)=>a in e?i(e,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[a]=t,d=(e,a)=>{for(var t in a||(a={}))o.call(a,t)&&m(e,t,a[t]);if(p)for(var t of p(a))y.call(a,t)&&m(e,t,a[t]);return e},g=(e,a)=>r(e,l(a)),s=(e,a)=>{var t={};for(var n in e)o.call(e,n)&&a.indexOf(n)<0&&(t[n]=e[n]);if(null!=e&&p)for(var n of p(e))a.indexOf(n)<0&&y.call(e,n)&&(t[n]=e[n]);return t};const u={title:"ProximityMap.NonEmpty<K,V>",slug:"/rimbu/proximity/ProximityMap/NonEmpty/interface"},N="interface ProximityMap.NonEmpty<K,V>",c={unversionedId:"rimbu_proximity/ProximityMap/NonEmpty.interface",id:"rimbu_proximity/ProximityMap/NonEmpty.interface",title:"ProximityMap.NonEmpty<K,V>",description:"A non-empty type-invariant immutable Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys.",source:"@site/api/rimbu_proximity/ProximityMap/NonEmpty.interface.mdx",sourceDirName:"rimbu_proximity/ProximityMap",slug:"/rimbu/proximity/ProximityMap/NonEmpty/interface",permalink:"/api/rimbu/proximity/ProximityMap/NonEmpty/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"ProximityMap.NonEmpty<K,V>",slug:"/rimbu/proximity/ProximityMap/NonEmpty/interface"},sidebar:"defaultSidebar",previous:{title:"ProximityMap.Context<UK>",permalink:"/api/rimbu/proximity/ProximityMap/Context/interface"},next:{title:"ProximityMap.Types",permalink:"/api/rimbu/proximity/ProximityMap/Types/interface"}},h={},v=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>context</code>",id:"context",level:3},{value:"Definition",id:"definition",level:4},{value:"Overrides",id:"overrides",level:4},{value:"<code>isEmpty</code>",id:"isempty",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"<code>size</code>",id:"size",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"Methods",id:"methods",level:2},{value:"<code>[Symbol.iterator]</code>",id:"symboliterator",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"<code>addEntries</code>",id:"addentries",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Overrides",id:"overrides-4",level:4},{value:"<code>addEntry</code>",id:"addentry",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Overrides",id:"overrides-5",level:4},{value:"<code>asNormal</code>",id:"asnormal",level:3},{value:"Definition",id:"definition-6",level:4},{value:"Overrides",id:"overrides-6",level:4},{value:"<code>assumeNonEmpty</code>",id:"assumenonempty",level:3},{value:"Definition",id:"definition-7",level:4},{value:"Overrides",id:"overrides-7",level:4},{value:"<code>filter</code>",id:"filter",level:3},{value:"Definition",id:"definition-8",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Overrides",id:"overrides-8",level:4},{value:"<code>forEach</code>",id:"foreach",level:3},{value:"Definition",id:"definition-9",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Overrides",id:"overrides-9",level:4},{value:"<code>get</code>",id:"get",level:3},{value:"Definitions",id:"definitions",level:4},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"Overrides",id:"overrides-10",level:4},{value:"<code>hasKey</code>",id:"haskey",level:3},{value:"Definition",id:"definition-10",level:4},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"Overrides",id:"overrides-11",level:4},{value:"<code>mapValues</code>",id:"mapvalues",level:3},{value:"Definition",id:"definition-11",level:4},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"Overrides",id:"overrides-12",level:4},{value:"<code>modifyAt</code>",id:"modifyat",level:3},{value:"Definition",id:"definition-12",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"Overrides",id:"overrides-13",level:4},{value:"<code>nonEmpty</code>",id:"nonempty",level:3},{value:"Definition",id:"definition-13",level:4},{value:"Overrides",id:"overrides-14",level:4},{value:"<code>removeKey</code>",id:"removekey",level:3},{value:"Definition",id:"definition-14",level:4},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"Overrides",id:"overrides-15",level:4},{value:"<code>removeKeyAndGet</code>",id:"removekeyandget",level:3},{value:"Definition",id:"definition-15",level:4},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Parameters",id:"parameters-9",level:4},{value:"Overrides",id:"overrides-16",level:4},{value:"<code>removeKeys</code>",id:"removekeys",level:3},{value:"Definition",id:"definition-16",level:4},{value:"Type parameters",id:"type-parameters-6",level:4},{value:"Parameters",id:"parameters-10",level:4},{value:"Overrides",id:"overrides-17",level:4},{value:"<code>set</code>",id:"set",level:3},{value:"Definition",id:"definition-17",level:4},{value:"Parameters",id:"parameters-11",level:4},{value:"Overrides",id:"overrides-18",level:4},{value:"<code>stream</code>",id:"stream",level:3},{value:"Definition",id:"definition-18",level:4},{value:"Overrides",id:"overrides-19",level:4},{value:"<code>streamKeys</code>",id:"streamkeys",level:3},{value:"Definition",id:"definition-19",level:4},{value:"Overrides",id:"overrides-20",level:4},{value:"<code>streamValues</code>",id:"streamvalues",level:3},{value:"Definition",id:"definition-20",level:4},{value:"Overrides",id:"overrides-21",level:4},{value:"<code>toArray</code>",id:"toarray",level:3},{value:"Definition",id:"definition-21",level:4},{value:"Overrides",id:"overrides-22",level:4},{value:"<code>toBuilder</code>",id:"tobuilder",level:3},{value:"Definition",id:"definition-22",level:4},{value:"Overrides",id:"overrides-23",level:4},{value:"<code>toJSON</code>",id:"tojson",level:3},{value:"Definition",id:"definition-23",level:4},{value:"Overrides",id:"overrides-24",level:4},{value:"<code>toString</code>",id:"tostring",level:3},{value:"Definition",id:"definition-24",level:4},{value:"Overrides",id:"overrides-25",level:4},{value:"<code>updateAt</code>",id:"updateat",level:3},{value:"Definition",id:"definition-25",level:4},{value:"Type parameters",id:"type-parameters-7",level:4},{value:"Parameters",id:"parameters-12",level:4},{value:"Overrides",id:"overrides-26",level:4}],f={toc:v},b="wrapper";function C(e){var a=e,{components:t}=a,i=s(a,["components"]);return(0,n.yg)(b,g(d(d({},f),i),{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",d({},{id:"interface-proximitymapnonemptykv"}),(0,n.yg)("inlineCode",{parentName:"h1"},"interface ProximityMap.NonEmpty<K,V>")),(0,n.yg)("p",null,"A ",(0,n.yg)("strong",{parentName:"p"},"non-empty")," type-invariant immutable Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys.\nSee the ",(0,n.yg)("a",d({parentName:"p"},{href:"/docs/collections/map"}),"Map documentation")," and the ",(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/proximity/map/ProximityMap/interface"}),"ProximityMap API documentation")),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Extends:")," ",(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Streamable/NonEmpty/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"Streamable.NonEmpty<T>")),", ",(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/NonEmpty/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"RMapBase.NonEmpty<K,V,Tp>")),", ",(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/proximity/ProximityMap/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"ProximityMap<K,V>"))),(0,n.yg)("h2",d({},{id:"type-parameters"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),"K"),(0,n.yg)("td",d({parentName:"tr"},{align:null}),"the key type")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),"V"),(0,n.yg)("td",d({parentName:"tr"},{align:null}),"the value type")))),(0,n.yg)("admonition",d({},{title:"note",type:"note"}),(0,n.yg)("p",{parentName:"admonition"},"The ",(0,n.yg)("inlineCode",{parentName:"p"},"get()")," method is designed to perform a linear scan of all the keys, returning the value associated with the key having the least distance from the input key; however, optimized distance functions can greatly improve efficiency by preventing a full scan.")),(0,n.yg)("admonition",d({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m1 = ProximityMap.empty<number, string>()\nconst m2 = ProximityMap.of([1, 'a'], [2, 'b'])\n"))),(0,n.yg)("h2",d({},{id:"properties"}),"Properties"),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",d({},{id:"context"}),(0,n.yg)("inlineCode",{parentName:"h3"},"context")),(0,n.yg)("p",null,"Returns the ",(0,n.yg)("inlineCode",{parentName:"p"},"context")," associated to this collection instance.")),(0,n.yg)("h4",d({},{id:"definition"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"readonly context: "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['context'];"))),(0,n.yg)("h4",d({},{id:"overrides"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/interface#context"}),"RMapBase.context"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",d({},{id:"isempty"}),(0,n.yg)("inlineCode",{parentName:"h3"},"isEmpty")),(0,n.yg)("p",null,"Returns false since this collection is known to be non-empty.")),(0,n.yg)("h4",d({},{id:"definition-1"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"readonly isEmpty: false;"))),(0,n.yg)("admonition",d({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 1], [2, 2]).isEmpty   // => false\n"))),(0,n.yg)("h4",d({},{id:"overrides-1"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/interface#isEmpty"}),"VariantMapBase.isEmpty"),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/NonEmpty/interface#isEmpty"}),"NonEmpty.isEmpty"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",d({},{id:"size"}),(0,n.yg)("inlineCode",{parentName:"h3"},"size")),(0,n.yg)("p",null,"Returns the number of entries")),(0,n.yg)("h4",d({},{id:"definition-2"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"readonly size: number;"))),(0,n.yg)("admonition",d({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 1], [2, 2]).size       // => 2\n"))),(0,n.yg)("h4",d({},{id:"overrides-2"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/interface#size"}),"VariantMapBase.size"))),(0,n.yg)("h2",d({},{id:"methods"}),"Methods"),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",d({},{id:"symboliterator"}),(0,n.yg)("inlineCode",{parentName:"h3"},"[Symbol.iterator]")),(0,n.yg)("p",null,"Returns a ",(0,n.yg)("inlineCode",{parentName:"p"},"FastIterator")," instance used to iterate over the values of this ",(0,n.yg)("inlineCode",{parentName:"p"},"Iterable"),".")),(0,n.yg)("h4",d({},{id:"definition-3"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"[Symbol.iterator](): "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/FastIterator/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"FastIterator")),(0,n.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,n.yg)("h4",d({},{id:"overrides-3"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/FastIterable/interface#%5BSymbol.iterator%5D"}),"FastIterable.[Symbol.iterator]"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",d({},{id:"addentries"}),(0,n.yg)("inlineCode",{parentName:"h3"},"addEntries")),(0,n.yg)("p",null,"Returns the collection with the entries from the given ",(0,n.yg)("inlineCode",{parentName:"p"},"StreamSource")," ",(0,n.yg)("inlineCode",{parentName:"p"},"entries")," added.")),(0,n.yg)("h4",d({},{id:"definition-4"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"addEntries(entries: "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.yg)("inlineCode",{parentName:"p"},"<readonly [K, V]>): "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['nonEmpty'];"))),(0,n.yg)("h4",d({},{id:"parameters"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"entries")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("a",d({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.yg)("inlineCode",{parentName:"td"},"<readonly [K, V]>")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),"a ",(0,n.yg)("inlineCode",{parentName:"td"},"StreamSource")," containing tuples with a key and value")))),(0,n.yg)("admonition",d({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 'a']).addEntries([[2, 'b']]).toArray()   // => [[1, 'a'], [2, 'b']]\n"))),(0,n.yg)("h4",d({},{id:"overrides-4"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/interface#addEntries"}),"RMapBase.addEntries"),", ",(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/NonEmpty/interface#addEntries"}),"NonEmpty.addEntries"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",d({},{id:"addentry"}),(0,n.yg)("inlineCode",{parentName:"h3"},"addEntry")),(0,n.yg)("p",null,"Returns the collection with given ",(0,n.yg)("inlineCode",{parentName:"p"},"entry")," added.")),(0,n.yg)("h4",d({},{id:"definition-5"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"addEntry(entry: readonly [K, V]): "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['nonEmpty'];"))),(0,n.yg)("h4",d({},{id:"parameters-1"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"entry")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"readonly [K, V]")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),"a tuple containing a key and value")))),(0,n.yg)("admonition",d({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 'a']).addEntry([2, 'b']).toArray()   // => [[1, 'a'], [2, 'b']]\nHashMap.of([1, 'a']).addEntry([1, 'b']).toArray()   // => [[1, 'b']]\n"))),(0,n.yg)("h4",d({},{id:"overrides-5"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/interface#addEntry"}),"RMapBase.addEntry"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",d({},{id:"asnormal"}),(0,n.yg)("inlineCode",{parentName:"h3"},"asNormal")),(0,n.yg)("p",null,"Returns this collection typed as a 'possibly empty' collection.")),(0,n.yg)("h4",d({},{id:"definition-6"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"asNormal(): (Tp & "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/KeyValue/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"KeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<K, V>)['normal'];"))),(0,n.yg)("admonition",d({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 1], [2, 2]).asNormal();  // type: HashMap<number, number>\n"))),(0,n.yg)("h4",d({},{id:"overrides-6"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/NonEmpty/interface#asNormal"}),"NonEmpty.asNormal"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",d({},{id:"assumenonempty"}),(0,n.yg)("inlineCode",{parentName:"h3"},"assumeNonEmpty")),(0,n.yg)("p",null,"Returns a self reference since this collection is known to be non-empty.")),(0,n.yg)("h4",d({},{id:"definition-7"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"assumeNonEmpty(): this;"))),(0,n.yg)("admonition",d({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 1], [2, 2]);\nm === m.assumeNonEmpty()  // => true\n"))),(0,n.yg)("h4",d({},{id:"overrides-7"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/interface#assumeNonEmpty"}),"VariantMapBase.assumeNonEmpty"),", ",(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/NonEmpty/interface#assumeNonEmpty"}),"NonEmpty.assumeNonEmpty"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",d({},{id:"filter"}),(0,n.yg)("inlineCode",{parentName:"h3"},"filter")),(0,n.yg)("p",null,"Returns a collection containing only those entries that satisfy given ",(0,n.yg)("inlineCode",{parentName:"p"},"pred")," predicate.")),(0,n.yg)("h4",d({},{id:"definition-8"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"filter(pred: (entry: readonly [K, V], index: number, halt: () => void) => boolean, options?: {"),(0,n.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"p"},"negate?: boolean;"),(0,n.yg)("br",null),"\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"p"},"}): "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,n.yg)("h4",d({},{id:"parameters-2"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"pred")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"(entry: readonly [K, V], index: number, halt: () => void) => boolean")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),"a predicate function receiving:",(0,n.yg)("br",null)," - ",(0,n.yg)("inlineCode",{parentName:"td"},"entry"),": the next entry",(0,n.yg)("br",null)," - ",(0,n.yg)("inlineCode",{parentName:"td"},"index"),": the entry index",(0,n.yg)("br",null)," - ",(0,n.yg)("inlineCode",{parentName:"td"},"halt"),": a function that, when called, ensures no next elements are passed")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"options")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"{"),(0,n.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"td"},"negate?: boolean;"),(0,n.yg)("br",null),"\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"td"},"}")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,n.yg)("br",null)," - negate: (default: false) when true will negate the predicate")))),(0,n.yg)("admonition",d({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 'a'], [2, 'b'], [3, 'c']).filter(entry => entry[0] === 2 || entry[1] === 'c').toArray()\n// => [[2, 'b'], [3, 'c']]\n"))),(0,n.yg)("h4",d({},{id:"overrides-8"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/interface#filter"}),"VariantMapBase.filter"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",d({},{id:"foreach"}),(0,n.yg)("inlineCode",{parentName:"h3"},"forEach")),(0,n.yg)("p",null,"Performs given function ",(0,n.yg)("inlineCode",{parentName:"p"},"f")," for each entry of the collection, using given ",(0,n.yg)("inlineCode",{parentName:"p"},"state")," as initial traversal state.")),(0,n.yg)("h4",d({},{id:"definition-9"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"forEach(f: (entry: readonly [K, V], index: number, halt: () => void) => void, options?: {"),(0,n.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"p"},"state?: "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/TraverseState/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"TraverseState")),(0,n.yg)("inlineCode",{parentName:"p"},";"),(0,n.yg)("br",null),"\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"p"},"}): void;"))),(0,n.yg)("h4",d({},{id:"parameters-3"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"f")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"(entry: readonly [K, V], index: number, halt: () => void) => void")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),"the function to perform for each entry, receiving:",(0,n.yg)("br",null)," - ",(0,n.yg)("inlineCode",{parentName:"td"},"entry"),": the next tuple of a key and value",(0,n.yg)("br",null)," - ",(0,n.yg)("inlineCode",{parentName:"td"},"index"),": the index of the element",(0,n.yg)("br",null)," - ",(0,n.yg)("inlineCode",{parentName:"td"},"halt"),": a function that, if called, ensures that no new elements are passed")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"options")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"{"),(0,n.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"td"},"state?: "),(0,n.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/TraverseState/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"TraverseState")),(0,n.yg)("inlineCode",{parentName:"td"},";"),(0,n.yg)("br",null),"\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"td"},"}")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,n.yg)("br",null)," - state:: (optional) the traversal state")))),(0,n.yg)("admonition",d({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 'a'], [2, 'b'], [3, 'c']).forEach((entry, i, halt) => {\nconsole.log([entry[1], entry[0]]);\nif (i >= 1) halt();\n})\n// => logs ['a', 1]  ['b', 2]\n"))),(0,n.yg)("admonition",d({},{title:"note",type:"note"}),(0,n.yg)("p",{parentName:"admonition"},"O(N)")),(0,n.yg)("h4",d({},{id:"overrides-9"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/interface#forEach"}),"VariantMapBase.forEach"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",d({},{id:"get"}),(0,n.yg)("inlineCode",{parentName:"h3"},"get")),(0,n.yg)("p",null,"Returns the value associated with the given ",(0,n.yg)("inlineCode",{parentName:"p"},"key"),", or given ",(0,n.yg)("inlineCode",{parentName:"p"},"otherwise")," value if the key is not in the collection.")),(0,n.yg)("h4",d({},{id:"definitions"}),"Definitions"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"get<UK = K>(key: "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"p"},"<K, UK>): V "),(0,n.yg)("code",null,"|"),(0,n.yg)("inlineCode",{parentName:"p"}," undefined;"))),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"get<UK, O>(key: "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"p"},"<K, UK>, otherwise: "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,n.yg)("inlineCode",{parentName:"p"},"<O>): V "),(0,n.yg)("code",null,"|"),(0,n.yg)("inlineCode",{parentName:"p"}," O;"))),(0,n.yg)("h4",d({},{id:"type-parameters-1"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Default"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),"UK"),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"K")),(0,n.yg)("td",d({parentName:"tr"},{align:null}))))),(0,n.yg)("h4",d({},{id:"parameters-4"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"key")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"td"},"<K, UK>")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),"the key to look for")))),(0,n.yg)("admonition",d({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b'])\nm.get(2)          // => 'b'\nm.get(3)          // => undefined\nm.get(2, 'none')  // => 'b'\nm.get(3, 'none')  // => 'none'\n"))),(0,n.yg)("h4",d({},{id:"overrides-10"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/interface#get"}),"VariantMapBase.get"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",d({},{id:"haskey"}),(0,n.yg)("inlineCode",{parentName:"h3"},"hasKey")),(0,n.yg)("p",null,"Returns true if the given ",(0,n.yg)("inlineCode",{parentName:"p"},"key")," is present in the collection.")),(0,n.yg)("h4",d({},{id:"definition-10"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"hasKey<UK = K>(key: "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"p"},"<K, UK>): boolean;"))),(0,n.yg)("h4",d({},{id:"type-parameters-2"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Default"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),"UK"),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"K")),(0,n.yg)("td",d({parentName:"tr"},{align:null}))))),(0,n.yg)("h4",d({},{id:"parameters-5"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"key")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"td"},"<K, UK>")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),"the key to look for")))),(0,n.yg)("admonition",d({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b'])\nm.hasKey(2)    // => true\nm.hasKey(3)    // => false\n"))),(0,n.yg)("h4",d({},{id:"overrides-11"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/interface#hasKey"}),"VariantMapBase.hasKey"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",d({},{id:"mapvalues"}),(0,n.yg)("inlineCode",{parentName:"h3"},"mapValues")),(0,n.yg)("p",null,"Returns a non-empty collection with the same keys, but where the given ",(0,n.yg)("inlineCode",{parentName:"p"},"mapFun")," function is applied to each entry value.")),(0,n.yg)("h4",d({},{id:"definition-11"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"mapValues<V2>(mapFun: (value: V, key: K) => V2): (Tp & "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/KeyValue/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"KeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<K, V2>)['nonEmpty'];"))),(0,n.yg)("h4",d({},{id:"type-parameters-3"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),"V2"),(0,n.yg)("td",d({parentName:"tr"},{align:null}))))),(0,n.yg)("h4",d({},{id:"parameters-6"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"mapFun")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"(value: V, key: K) => V2")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),"a function taking a ",(0,n.yg)("inlineCode",{parentName:"td"},"value")," and a ",(0,n.yg)("inlineCode",{parentName:"td"},"key"),", and returning a new value")))),(0,n.yg)("admonition",d({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 'a'], [2, 'abc']).mapValues(v => v.length).toArray()\n// => [[1, 1], [2, 3]]\n"))),(0,n.yg)("h4",d({},{id:"overrides-12"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/interface#mapValues"}),"VariantMapBase.mapValues"),", ",(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/NonEmpty/interface#mapValues"}),"NonEmpty.mapValues"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",d({},{id:"modifyat"}),(0,n.yg)("inlineCode",{parentName:"h3"},"modifyAt")),(0,n.yg)("p",null,"Returns the collection with the given ",(0,n.yg)("inlineCode",{parentName:"p"},"atKey")," key modified according to given ",(0,n.yg)("inlineCode",{parentName:"p"},"options"),".")),(0,n.yg)("h4",d({},{id:"definition-12"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"modifyAt(atKey: K, options: {"),(0,n.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"p"},"ifNew?: "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/OptLazyOr/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"OptLazyOr")),(0,n.yg)("inlineCode",{parentName:"p"},"<V, Token>;"),(0,n.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"p"},"ifExists?: (<V2 extends V = V>(currentEntry: V & V2, remove: Token) => V "),(0,n.yg)("code",null,"|"),(0,n.yg)("inlineCode",{parentName:"p"},"Token)"),(0,n.yg)("code",null,"|"),(0,n.yg)("inlineCode",{parentName:"p"}," V;"),(0,n.yg)("br",null),"\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"p"},"}): "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,n.yg)("h4",d({},{id:"parameters-7"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"atKey")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"K")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),"the key at which to modify the collection")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"options")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"{"),(0,n.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"td"},"ifNew?: "),(0,n.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/OptLazyOr/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"OptLazyOr")),(0,n.yg)("inlineCode",{parentName:"td"},"<V, Token>;"),(0,n.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"td"},"ifExists?: (<V2 extends V = V>(currentEntry: V & V2, remove: Token) => V "),(0,n.yg)("code",null,"|"),(0,n.yg)("inlineCode",{parentName:"td"},"Token)"),(0,n.yg)("code",null,"|"),(0,n.yg)("inlineCode",{parentName:"td"}," V;"),(0,n.yg)("br",null),"\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"td"},"}")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),"an object containing the following information:",(0,n.yg)("br",null)," - ifNew: (optional) if the given ",(0,n.yg)("inlineCode",{parentName:"td"},"atKey")," is not present in the collection, this value or function will be used to generate a new entry. If a function returning the token argument is given, no new entry is created.",(0,n.yg)("br",null)," - ifExists: (optional) if a value is associated with given ",(0,n.yg)("inlineCode",{parentName:"td"},"atKey"),", this function is called with the given value to return a new value. As a second argument, a ",(0,n.yg)("inlineCode",{parentName:"td"},"remove")," token is given. If the function returns this token, the current entry is removed.")))),(0,n.yg)("admonition",d({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b'])\nm.modifyAt(3, { ifNew: 'c' }).toArray()\n// => [[1, 'a'], [2, 'b'], [3, 'c']]\nm.modifyAt(3, { ifNew: (none) => 1 < 2 ? none : 'c' }).toArray()\n// => [[1, 'a'], [2, 'b']]\nm.modifyAt(2, { ifExists: () => 'c' }).toArray()\n// => [[1, 'a'], [2, 'c']]\nm.modifyAt(2, { ifExists: (v) => v + 'z' }).toArray()\n// => [[1, 'a'], [2, 'bz']]\nm.modifyAt(2, { ifExists: (v, remove) => v === 'a' ? v : remove }).toArray()\n// => [[1, 'a']]\n"))),(0,n.yg)("h4",d({},{id:"overrides-13"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/interface#modifyAt"}),"RMapBase.modifyAt"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",d({},{id:"nonempty"}),(0,n.yg)("inlineCode",{parentName:"h3"},"nonEmpty")),(0,n.yg)("p",null,"Returns true since this collection is known to be non-empty")),(0,n.yg)("h4",d({},{id:"definition-13"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"nonEmpty(): this is "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['nonEmpty'];"))),(0,n.yg)("admonition",d({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 1], [2, 2]).nonEmpty()   // => true\n"))),(0,n.yg)("h4",d({},{id:"overrides-14"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/interface#nonEmpty"}),"VariantMapBase.nonEmpty"),", ",(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/NonEmpty/interface#nonEmpty"}),"NonEmpty.nonEmpty"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",d({},{id:"removekey"}),(0,n.yg)("inlineCode",{parentName:"h3"},"removeKey")),(0,n.yg)("p",null,"Returns the collection where the entry associated with given ",(0,n.yg)("inlineCode",{parentName:"p"},"key")," is removed if it was part of the collection.")),(0,n.yg)("h4",d({},{id:"definition-14"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"removeKey<UK = K>(key: "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"p"},"<K, UK>): "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,n.yg)("h4",d({},{id:"type-parameters-4"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Default"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),"UK"),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"K")),(0,n.yg)("td",d({parentName:"tr"},{align:null}))))),(0,n.yg)("h4",d({},{id:"parameters-8"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"key")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"td"},"<K, UK>")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),"the key of the entry to remove")))),(0,n.yg)("admonition",d({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b'])\nm.removeKey(2).toArray()   // => [[1, 'a']]\nm.removeKey(3) === m       // true\n"))),(0,n.yg)("admonition",d({},{title:"note",type:"note"}),(0,n.yg)("p",{parentName:"admonition"},"guarantees same object reference if the key is not present")),(0,n.yg)("h4",d({},{id:"overrides-15"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/interface#removeKey"}),"VariantMapBase.removeKey"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",d({},{id:"removekeyandget"}),(0,n.yg)("inlineCode",{parentName:"h3"},"removeKeyAndGet")),(0,n.yg)("p",null,"Returns a tuple containing the collection of which the entry associated with given ",(0,n.yg)("inlineCode",{parentName:"p"},"key")," is removed, and the value that is associated with that key. If the key is not present, it will return undefined instead.")),(0,n.yg)("h4",d({},{id:"definition-15"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"removeKeyAndGet<UK = K>(key: "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"p"},"<K, UK>): ["),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'], V] "),(0,n.yg)("code",null,"|"),(0,n.yg)("inlineCode",{parentName:"p"}," undefined;"))),(0,n.yg)("h4",d({},{id:"type-parameters-5"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Default"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),"UK"),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"K")),(0,n.yg)("td",d({parentName:"tr"},{align:null}))))),(0,n.yg)("h4",d({},{id:"parameters-9"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"key")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"td"},"<K, UK>")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),"the key of the entry to remove")))),(0,n.yg)("admonition",d({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b'])\nconst result = m.removeKeyAndGet(2)\nif (result !== undefined) console.log([result[0].toString(), result[1]])    // => logs [HashMap(1 => 'a'), 'b']\nconsole.log(m.removeKeyAndGet(3))                                           // => logs undefined\n"))),(0,n.yg)("h4",d({},{id:"overrides-16"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/interface#removeKeyAndGet"}),"VariantMapBase.removeKeyAndGet"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",d({},{id:"removekeys"}),(0,n.yg)("inlineCode",{parentName:"h3"},"removeKeys")),(0,n.yg)("p",null,"Returns the collection where the entries associated with each key in given ",(0,n.yg)("inlineCode",{parentName:"p"},"keys")," are removed if they were present.")),(0,n.yg)("h4",d({},{id:"definition-16"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"removeKeys<UK = K>(keys: "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.yg)("inlineCode",{parentName:"p"},"<"),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"p"},"<K, UK>>): "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,n.yg)("h4",d({},{id:"type-parameters-6"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Default"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),"UK"),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"K")),(0,n.yg)("td",d({parentName:"tr"},{align:null}))))),(0,n.yg)("h4",d({},{id:"parameters-10"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"keys")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("a",d({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.yg)("inlineCode",{parentName:"td"},"<"),(0,n.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"td"},"<K, UK>>")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),"a ",(0,n.yg)("inlineCode",{parentName:"td"},"StreamSource")," of keys to remove")))),(0,n.yg)("admonition",d({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b'])\nm.removeKeys([1, 3]).toArray()     // => [[2, 'b']]\nm.removeKeys([1, 3, 2]).toArray()  // => []\nm.removeKeys([3, 4, 5]) === m      // => true\n"))),(0,n.yg)("admonition",d({},{title:"note",type:"note"}),(0,n.yg)("p",{parentName:"admonition"},"guarantees same object reference if none of the keys are present")),(0,n.yg)("h4",d({},{id:"overrides-17"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/interface#removeKeys"}),"VariantMapBase.removeKeys"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",d({},{id:"set"}),(0,n.yg)("inlineCode",{parentName:"h3"},"set")),(0,n.yg)("p",null,"Returns the collection with the given ",(0,n.yg)("inlineCode",{parentName:"p"},"key")," associated to the given ",(0,n.yg)("inlineCode",{parentName:"p"},"value"),".")),(0,n.yg)("h4",d({},{id:"definition-17"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"set(key: K, value: V): "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['nonEmpty'];"))),(0,n.yg)("h4",d({},{id:"parameters-11"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"key")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"K")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),"the entry key to add")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"value")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"V")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),"the entry value to add")))),(0,n.yg)("admonition",d({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 'a']).set(2, 'b').toArray()   // => [[1, 'a'], [2, 'b']]\nHashMap.of([1, 'a']).set(1, 'b').toArray()   // => [[1, 'b']]\n"))),(0,n.yg)("admonition",d({},{title:"note",type:"note"}),(0,n.yg)("p",{parentName:"admonition"},"if the key is already associated, the previous value will be 'replaced'")),(0,n.yg)("h4",d({},{id:"overrides-18"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/interface#set"}),"RMapBase.set"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",d({},{id:"stream"}),(0,n.yg)("inlineCode",{parentName:"h3"},"stream")),(0,n.yg)("p",null,"undocumented")),(0,n.yg)("h4",d({},{id:"definition-18"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"stream(): "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,n.yg)("inlineCode",{parentName:"p"},"<readonly [K, V]>;"))),(0,n.yg)("h4",d({},{id:"overrides-19"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Streamable/NonEmpty/interface#stream"}),"NonEmpty.stream"),", ",(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/NonEmpty/interface#stream"}),"NonEmpty.stream"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",d({},{id:"streamkeys"}),(0,n.yg)("inlineCode",{parentName:"h3"},"streamKeys")),(0,n.yg)("p",null,"Returns a non-empty Stream containing all keys of this collection.")),(0,n.yg)("h4",d({},{id:"definition-19"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"streamKeys(): "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,n.yg)("inlineCode",{parentName:"p"},"<K>;"))),(0,n.yg)("admonition",d({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"HashMap.of([[1, 'a'], [2, 'b']]).streamKeys().toArray()   // => [1, 2]\n"))),(0,n.yg)("h4",d({},{id:"overrides-20"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/interface#streamKeys"}),"VariantMapBase.streamKeys"),", ",(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/NonEmpty/interface#streamKeys"}),"NonEmpty.streamKeys"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",d({},{id:"streamvalues"}),(0,n.yg)("inlineCode",{parentName:"h3"},"streamValues")),(0,n.yg)("p",null,"Returns a non-empty Stream containing all values of this collection.")),(0,n.yg)("h4",d({},{id:"definition-20"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"streamValues(): "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,n.yg)("inlineCode",{parentName:"p"},"<V>;"))),(0,n.yg)("admonition",d({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"HashMap.of([[1, 'a'], [2, 'b']]).streamValues().toArray()   // => ['a', 'b']\n"))),(0,n.yg)("h4",d({},{id:"overrides-21"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/interface#streamValues"}),"VariantMapBase.streamValues"),", ",(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/NonEmpty/interface#streamValues"}),"NonEmpty.streamValues"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",d({},{id:"toarray"}),(0,n.yg)("inlineCode",{parentName:"h3"},"toArray")),(0,n.yg)("p",null,"Returns a non-empty array containing all entries in this collection.")),(0,n.yg)("h4",d({},{id:"definition-21"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"toArray(): "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,n.yg)("inlineCode",{parentName:"p"},"<readonly [K, V]>;"))),(0,n.yg)("admonition",d({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 'a'], [2, 'b']).toArray()   // => [[1, 'a'], [2, 'b']]\n"))),(0,n.yg)("admonition",d({},{title:"note",type:"note"}),(0,n.yg)("p",{parentName:"admonition"},"O(log(N))  @note it is safe to mutate the returned array, however, the array elements are not copied, thus should be treated as read-only")),(0,n.yg)("h4",d({},{id:"overrides-22"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/interface#toArray"}),"VariantMapBase.toArray"),", ",(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/NonEmpty/interface#toArray"}),"NonEmpty.toArray"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",d({},{id:"tobuilder"}),(0,n.yg)("inlineCode",{parentName:"h3"},"toBuilder")),(0,n.yg)("p",null,"Returns a builder object containing the entries of this collection.")),(0,n.yg)("h4",d({},{id:"definition-22"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"toBuilder(): "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['builder'];"))),(0,n.yg)("admonition",d({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const builder: HashMap.Builder<number, string> = HashMap.of([1, 'a'], [2, 'b']).toBuilder()\n"))),(0,n.yg)("h4",d({},{id:"overrides-23"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/interface#toBuilder"}),"RMapBase.toBuilder"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",d({},{id:"tojson"}),(0,n.yg)("inlineCode",{parentName:"h3"},"toJSON")),(0,n.yg)("p",null,"Returns a JSON representation of this collection.")),(0,n.yg)("h4",d({},{id:"definition-23"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"toJSON(): "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/ToJSON/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"ToJSON")),(0,n.yg)("inlineCode",{parentName:"p"},"<(readonly [K, V])[]>;"))),(0,n.yg)("admonition",d({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 'a'], [2, 'b']).toJSON()   // => { dataType: 'HashMap', value: [[1, 'a'], [2, 'b']] }\n"))),(0,n.yg)("h4",d({},{id:"overrides-24"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/interface#toJSON"}),"VariantMapBase.toJSON"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",d({},{id:"tostring"}),(0,n.yg)("inlineCode",{parentName:"h3"},"toString")),(0,n.yg)("p",null,"Returns a string representation of this collection.")),(0,n.yg)("h4",d({},{id:"definition-24"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"toString(): string;"))),(0,n.yg)("admonition",d({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 'a'], [2, 'b']).toString()   // => HashMap(1 => 'a', 2 => 'b')\n"))),(0,n.yg)("h4",d({},{id:"overrides-25"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/interface#toString"}),"VariantMapBase.toString"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",d({},{id:"updateat"}),(0,n.yg)("inlineCode",{parentName:"h3"},"updateAt")),(0,n.yg)("p",null,"Returns the collection where the value associated with given ",(0,n.yg)("inlineCode",{parentName:"p"},"key")," is updated with the given ",(0,n.yg)("inlineCode",{parentName:"p"},"update")," value or update function.")),(0,n.yg)("h4",d({},{id:"definition-25"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"updateAt<UK = K>(key: "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"p"},"<K, UK>, update: "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Update/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RMapBase.Update")),(0,n.yg)("inlineCode",{parentName:"p"},"<V>): "),(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['nonEmpty'];"))),(0,n.yg)("h4",d({},{id:"type-parameters-7"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Default"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),"UK"),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"K")),(0,n.yg)("td",d({parentName:"tr"},{align:null}))))),(0,n.yg)("h4",d({},{id:"parameters-12"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"key")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"td"},"<K, UK>")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),"the key of the entry to update")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"update")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),(0,n.yg)("a",d({parentName:"td"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Update/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RMapBase.Update")),(0,n.yg)("inlineCode",{parentName:"td"},"<V>")),(0,n.yg)("td",d({parentName:"tr"},{align:null}),"a new value or function taking the current value and returning a new value")))),(0,n.yg)("admonition",d({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",d({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b'])\nm.updateAt(3, 'a').toArray()\n// => [[1, 'a'], [2, 'b']]\nm.updateAt(2, 'c').toArray()\n// => [[1, 'a'], [2, 'c']]\nm.updateAt(2, v => v + 'z')\n// => [[1, 'a'], [2, 'cz]]\n"))),(0,n.yg)("h4",d({},{id:"overrides-26"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/interface#updateAt"}),"RMapBase.updateAt"),", ",(0,n.yg)("a",d({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/NonEmpty/interface#updateAt"}),"NonEmpty.updateAt"))))}C.isMDXComponent=!0}}]);