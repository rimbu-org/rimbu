"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[65147],{15680:(e,r,a)=>{a.d(r,{xA:()=>s,yg:()=>g});var t=a(96540);function n(e,r,a){return r in e?Object.defineProperty(e,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[r]=a,e}function i(e,r){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var r=1;r<arguments.length;r++){var a=null!=arguments[r]?arguments[r]:{};r%2?i(Object(a),!0).forEach((function(r){n(e,r,a[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(a,r))}))}return e}function o(e,r){if(null==e)return{};var a,t,n=function(e,r){if(null==e)return{};var a,t,n={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],r.indexOf(a)>=0||(n[a]=e[a]);return n}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],r.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=t.createContext({}),u=function(e){var r=t.useContext(p),a=r;return e&&(a="function"==typeof e?e(r):l(l({},r),e)),a},s=function(e){var r=u(e.components);return t.createElement(p.Provider,{value:r},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var a=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=u(a),d=n,g=c["".concat(p,".").concat(d)]||c[d]||m[d]||i;return a?t.createElement(g,l(l({ref:r},s),{},{components:a})):t.createElement(g,l({ref:r},s))}));function g(e,r){var a=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=d;var o={};for(var p in r)hasOwnProperty.call(r,p)&&(o[p]=r[p]);o.originalType=e,o[c]="string"==typeof e?e:n,l[1]=o;for(var u=2;u<i;u++)l[u]=a[u];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}d.displayName="MDXCreateElement"},47536:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>f,contentTitle:()=>h,default:()=>w,frontMatter:()=>g,metadata:()=>y,toc:()=>v});var t=a(15680),n=Object.defineProperty,i=Object.defineProperties,l=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,s=(e,r,a)=>r in e?n(e,r,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[r]=a,c=(e,r)=>{for(var a in r||(r={}))p.call(r,a)&&s(e,a,r[a]);if(o)for(var a of o(r))u.call(r,a)&&s(e,a,r[a]);return e},m=(e,r)=>i(e,l(r)),d=(e,r)=>{var a={};for(var t in e)p.call(e,t)&&r.indexOf(t)<0&&(a[t]=e[t]);if(null!=e&&o)for(var t of o(e))r.indexOf(t)<0&&u.call(e,t)&&(a[t]=e[t]);return a};const g={title:"Semaphore",slug:"/rimbu/channel/Semaphore/interface"},h="interface Semaphore",y={unversionedId:"rimbu_channel/Semaphore.interface",id:"rimbu_channel/Semaphore.interface",title:"Semaphore",description:"A Semaphore is a generalized version of a Mutex, allowing boundaries on the amount of concurrent processes that can have simultaneous access to a shared resource. The semaphore is weighted, meaning that the semaphore has a maximum size/capacity available for the shared resources. When acquiring the resource, a weight can be provided allowing more intensive tasks to acquire a larger share of the shared resource, preventing too many other tasks from also acquiring the resource.",source:"@site/api/rimbu_channel/Semaphore.interface.mdx",sourceDirName:"rimbu_channel",slug:"/rimbu/channel/Semaphore/interface",permalink:"/api/rimbu/channel/Semaphore/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"Semaphore",slug:"/rimbu/channel/Semaphore/interface"},sidebar:"defaultSidebar",previous:{title:"Error",permalink:"/api/rimbu/channel/Semaphore/Error/type"},next:{title:"SemaphoreError (namespace)",permalink:"/api/rimbu/channel/SemaphoreError/namespace"}},f={},v=[{value:"Properties",id:"properties",level:2},{value:"<code>maxSize</code>",id:"maxsize",level:3},{value:"Definition",id:"definition",level:4},{value:"Methods",id:"methods",level:2},{value:"<code>acquire</code>",id:"acquire",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Overrides",id:"overrides",level:4},{value:"<code>canAcquire</code>",id:"canacquire",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"<code>release</code>",id:"release",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Overrides",id:"overrides-2",level:4}],b={toc:v},N="wrapper";function w(e){var r=e,{components:a}=r,n=d(r,["components"]);return(0,t.yg)(N,m(c(c({},b),n),{components:a,mdxType:"MDXLayout"}),(0,t.yg)("h1",c({},{id:"interface-semaphore"}),(0,t.yg)("inlineCode",{parentName:"h1"},"interface Semaphore")),(0,t.yg)("p",null,"A Semaphore is a generalized version of a Mutex, allowing boundaries on the amount of concurrent processes that can have simultaneous access to a shared resource. The semaphore is weighted, meaning that the semaphore has a maximum size/capacity available for the shared resources. When acquiring the resource, a weight can be provided allowing more intensive tasks to acquire a larger share of the shared resource, preventing too many other tasks from also acquiring the resource."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Companion namespace:")," ",(0,t.yg)("a",c({parentName:"p"},{href:"/api/rimbu/channel/Semaphore/namespace"}),"Semaphore")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Extends:")," ",(0,t.yg)("a",c({parentName:"p"},{href:"/api/rimbu/channel/Mutex/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Mutex"))),(0,t.yg)("h2",c({},{id:"properties"}),"Properties"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",c({},{id:"maxsize"}),(0,t.yg)("inlineCode",{parentName:"h3"},"maxSize")),(0,t.yg)("p",null,'The maximum simultaneous "weight" that the semaphore allows access to for the shared resource.')),(0,t.yg)("h4",c({},{id:"definition"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly maxSize: number;")))),(0,t.yg)("h2",c({},{id:"methods"}),"Methods"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",c({},{id:"acquire"}),(0,t.yg)("inlineCode",{parentName:"h3"},"acquire")),(0,t.yg)("p",null,"Request access to a shared resource with the given ",(0,t.yg)("inlineCode",{parentName:"p"},"weight"),". Blocks if the semaphore has insufficient capacity until enough weight has been released. Resolves when the semaphore has enough capacity for the operation.")),(0,t.yg)("h4",c({},{id:"definition-1"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"acquire(weight?: number): Promise<void>;"))),(0,t.yg)("h4",c({},{id:"parameters"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",c({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",c({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",c({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",c({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"weight")),(0,t.yg)("td",c({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"number")),(0,t.yg)("td",c({parentName:"tr"},{align:null}),"(default: 1) the weight of the operation to be performed")))),(0,t.yg)("h4",c({},{id:"overrides"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",c({parentName:"p"},{href:"/api/rimbu/channel/Mutex/interface#acquire"}),"Mutex.acquire"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",c({},{id:"canacquire"}),(0,t.yg)("inlineCode",{parentName:"h3"},"canAcquire")),(0,t.yg)("p",null,"Returns true if the semaphore will directly give access to the shared resource for the given ",(0,t.yg)("inlineCode",{parentName:"p"},"weight")," when requested.")),(0,t.yg)("h4",c({},{id:"definition-2"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"canAcquire(weight?: number): boolean;"))),(0,t.yg)("h4",c({},{id:"parameters-1"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",c({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",c({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",c({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",c({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"weight")),(0,t.yg)("td",c({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"number")),(0,t.yg)("td",c({parentName:"tr"},{align:null}),"(default: 1) the desired weight for access request")))),(0,t.yg)("h4",c({},{id:"overrides-1"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",c({parentName:"p"},{href:"/api/rimbu/channel/Mutex/interface#canAcquire"}),"Mutex.canAcquire"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",c({},{id:"release"}),(0,t.yg)("inlineCode",{parentName:"h3"},"release")),(0,t.yg)("p",null,"Release obtained capacity from the semaphore to allow potential other blocked processes to access the resource.")),(0,t.yg)("h4",c({},{id:"definition-3"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"release(weight?: number): void;"))),(0,t.yg)("h4",c({},{id:"parameters-2"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",c({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",c({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",c({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",c({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"weight")),(0,t.yg)("td",c({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"number")),(0,t.yg)("td",c({parentName:"tr"},{align:null}),"(default: 1) the amount of weight to release")))),(0,t.yg)("h4",c({},{id:"overrides-2"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",c({parentName:"p"},{href:"/api/rimbu/channel/Mutex/interface#release"}),"Mutex.release"))))}w.isMDXComponent=!0}}]);