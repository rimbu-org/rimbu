"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[42890],{15680:(e,a,t)=>{t.d(a,{xA:()=>m,yg:()=>s});var n=t(96540);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function p(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var y=n.createContext({}),o=function(e){var a=n.useContext(y),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},m=function(e){var a=o(e.components);return n.createElement(y.Provider,{value:a},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},d=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,l=e.originalType,y=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),u=o(t),d=r,s=u["".concat(y,".").concat(d)]||u[d]||g[d]||l;return t?n.createElement(s,i(i({ref:a},m),{},{components:t})):n.createElement(s,i({ref:a},m))}));function s(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=d;var p={};for(var y in a)hasOwnProperty.call(a,y)&&(p[y]=a[y]);p.originalType=e,p[u]="string"==typeof e?e:r,i[1]=p;for(var o=2;o<l;o++)i[o]=t[o];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},60737:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>h,contentTitle:()=>c,default:()=>v,frontMatter:()=>s,metadata:()=>N,toc:()=>f});var n=t(15680),r=Object.defineProperty,l=Object.defineProperties,i=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,y=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable,m=(e,a,t)=>a in e?r(e,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[a]=t,u=(e,a)=>{for(var t in a||(a={}))y.call(a,t)&&m(e,t,a[t]);if(p)for(var t of p(a))o.call(a,t)&&m(e,t,a[t]);return e},g=(e,a)=>l(e,i(a)),d=(e,a)=>{var t={};for(var n in e)y.call(e,n)&&a.indexOf(n)<0&&(t[n]=e[n]);if(null!=e&&p)for(var n of p(e))a.indexOf(n)<0&&o.call(e,n)&&(t[n]=e[n]);return t};const s={title:"HashMultiMapHashValueCreators",slug:"/rimbu/multimap/custom/HashMultiMapHashValueCreators/interface"},c="interface HashMultiMapHashValueCreators",N={unversionedId:"rimbu_multimap/custom/HashMultiMapHashValueCreators.interface",id:"rimbu_multimap/custom/HashMultiMapHashValueCreators.interface",title:"HashMultiMapHashValueCreators",description:"undocumented",source:"@site/api/rimbu_multimap/custom/HashMultiMapHashValueCreators.interface.mdx",sourceDirName:"rimbu_multimap/custom",slug:"/rimbu/multimap/custom/HashMultiMapHashValueCreators/interface",permalink:"/api/rimbu/multimap/custom/HashMultiMapHashValueCreators/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"HashMultiMapHashValueCreators",slug:"/rimbu/multimap/custom/HashMultiMapHashValueCreators/interface"},sidebar:"defaultSidebar",previous:{title:"ContextImplTypes",permalink:"/api/rimbu/multimap/custom/ContextImplTypes/interface"},next:{title:"HashMultiMapSortedValueCreators",permalink:"/api/rimbu/multimap/custom/HashMultiMapSortedValueCreators/interface"}},h={},f=[{value:"Methods",id:"methods",level:2},{value:"<code>builder</code>",id:"builder",level:3},{value:"Definition",id:"definition",level:4},{value:"Type parameters",id:"type-parameters",level:4},{value:"Overrides",id:"overrides",level:4},{value:"<code>createContext</code>",id:"createcontext",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters",level:4},{value:"<code>defaultContext</code>",id:"defaultcontext",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"<code>empty</code>",id:"empty",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"<code>from</code>",id:"from",level:3},{value:"Definitions",id:"definitions",level:4},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"<code>of</code>",id:"of",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"<code>reducer</code>",id:"reducer",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Type parameters",id:"type-parameters-6",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Overrides",id:"overrides-4",level:4}],b={toc:f},C="wrapper";function v(e){var a=e,{components:t}=a,r=d(a,["components"]);return(0,n.yg)(C,g(u(u({},b),r),{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",u({},{id:"interface-hashmultimaphashvaluecreators"}),(0,n.yg)("inlineCode",{parentName:"h1"},"interface HashMultiMapHashValueCreators")),(0,n.yg)("p",null,"undocumented"),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Extends:")," ",(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/multimap/custom/MultiMapBase/Factory/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"MultiMapBase.Factory<Tp,UK,UV>"))),(0,n.yg)("h2",u({},{id:"methods"}),"Methods"),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",u({},{id:"builder"}),(0,n.yg)("inlineCode",{parentName:"h3"},"builder")),(0,n.yg)("p",null,"Returns an empty builder instance for this type of collection and context.")),(0,n.yg)("h4",u({},{id:"definition"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"builder<K extends UK, V extends UV>(): "),(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['builder'];"))),(0,n.yg)("h4",u({},{id:"type-parameters"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Constraints"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),"K"),(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UK")),(0,n.yg)("td",u({parentName:"tr"},{align:null}))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),"V"),(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UV")),(0,n.yg)("td",u({parentName:"tr"},{align:null}))))),(0,n.yg)("admonition",u({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",u({parentName:"pre"},{className:"language-ts"}),"HashMultiMapHashValue.builder<number, string>()    // => HashMultiMapHashValue.Builder<number, string>\n"))),(0,n.yg)("h4",u({},{id:"overrides"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/multimap/custom/MultiMapBase/Factory/interface#builder"}),"Factory.builder"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",u({},{id:"createcontext"}),(0,n.yg)("inlineCode",{parentName:"h3"},"createContext")),(0,n.yg)("p",null,"Returns a new HashMultiMapHashValue context instance based on the given ",(0,n.yg)("inlineCode",{parentName:"p"},"options"),".")),(0,n.yg)("h4",u({},{id:"definition-1"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"createContext<UK, UV>(options?: {"),(0,n.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"p"},"keyMapContext?: "),(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/hashed/map/HashMap/Context/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"HashMap.Context")),(0,n.yg)("inlineCode",{parentName:"p"},"<UK>;"),(0,n.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"p"},"keyMapValuesContext?: "),(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/hashed/set/HashSet/Context/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"HashSet.Context")),(0,n.yg)("inlineCode",{parentName:"p"},"<UV>;"),(0,n.yg)("br",null),"\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"p"},"}): HashMultiMapHashValue.Context<UK, UV>;"))),(0,n.yg)("h4",u({},{id:"type-parameters-1"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),"UK"),(0,n.yg)("td",u({parentName:"tr"},{align:null}),"the upper key type for which the context can create instances")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),"UV"),(0,n.yg)("td",u({parentName:"tr"},{align:null}),"the upper value type for which the context can create instances")))),(0,n.yg)("h4",u({},{id:"parameters"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"options")),(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"{"),(0,n.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"td"},"keyMapContext?: "),(0,n.yg)("a",u({parentName:"td"},{href:"/api/rimbu/hashed/map/HashMap/Context/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"HashMap.Context")),(0,n.yg)("inlineCode",{parentName:"td"},"<UK>;"),(0,n.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"td"},"keyMapValuesContext?: "),(0,n.yg)("a",u({parentName:"td"},{href:"/api/rimbu/hashed/set/HashSet/Context/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"HashSet.Context")),(0,n.yg)("inlineCode",{parentName:"td"},"<UV>;"),(0,n.yg)("br",null),"\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"td"},"}")),(0,n.yg)("td",u({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,n.yg)("br",null)," - keyMapContext: (optional) the map context to use for key to valueset mappings",(0,n.yg)("br",null)," - keyMapValuesContext: (optional) the set context to use for value sets"))))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",u({},{id:"defaultcontext"}),(0,n.yg)("inlineCode",{parentName:"h3"},"defaultContext")),(0,n.yg)("p",null,"Returns the default context for HashMultiMapHashValue.")),(0,n.yg)("h4",u({},{id:"definition-2"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"defaultContext<UK, UV>(): HashMultiMapHashValue.Context<UK, UV>;"))),(0,n.yg)("h4",u({},{id:"type-parameters-2"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),"UK"),(0,n.yg)("td",u({parentName:"tr"},{align:null}),"the upper key type for which the context can create instances")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),"UV"),(0,n.yg)("td",u({parentName:"tr"},{align:null}),"the upper value type for which the context can create instances"))))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",u({},{id:"empty"}),(0,n.yg)("inlineCode",{parentName:"h3"},"empty")),(0,n.yg)("p",null,"Returns the (singleton) empty instance of this type and context with given key and value types.")),(0,n.yg)("h4",u({},{id:"definition-3"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"empty<K extends UK, V extends UV>(): "),(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,n.yg)("h4",u({},{id:"type-parameters-3"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Constraints"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),"K"),(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UK")),(0,n.yg)("td",u({parentName:"tr"},{align:null}))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),"V"),(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UV")),(0,n.yg)("td",u({parentName:"tr"},{align:null}))))),(0,n.yg)("admonition",u({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",u({parentName:"pre"},{className:"language-ts"}),"HashMultiMapHashValue.empty<number, string>()    // => HashMultiMapHashValue<number, string>\nHashMultiMapHashValue.empty<string, boolean>()   // => HashMultiMapHashValue<string, boolean>\n"))),(0,n.yg)("h4",u({},{id:"overrides-1"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/multimap/custom/MultiMapBase/Factory/interface#empty"}),"Factory.empty"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",u({},{id:"from"}),(0,n.yg)("inlineCode",{parentName:"h3"},"from")),(0,n.yg)("p",null,"Returns an immutable multimap of this type and context, containing the entries in the given ",(0,n.yg)("inlineCode",{parentName:"p"},"source")," ",(0,n.yg)("inlineCode",{parentName:"p"},"StreamSource"),".")),(0,n.yg)("h4",u({},{id:"definitions"}),"Definitions"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"from<K extends UK, V extends UV>(...sources: "),(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,n.yg)("inlineCode",{parentName:"p"},"<"),(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,n.yg)("inlineCode",{parentName:"p"},"<readonly [K, V]>>): "),(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['nonEmpty'];"))),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"from<K extends UK, V extends UV>(...sources: "),(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,n.yg)("inlineCode",{parentName:"p"},"<"),(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.yg)("inlineCode",{parentName:"p"},"<readonly [K, V]>>): "),(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,n.yg)("h4",u({},{id:"type-parameters-4"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Constraints"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),"K"),(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UK")),(0,n.yg)("td",u({parentName:"tr"},{align:null}))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),"V"),(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UV")),(0,n.yg)("td",u({parentName:"tr"},{align:null}))))),(0,n.yg)("h4",u({},{id:"parameters-1"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"sources")),(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("a",u({parentName:"td"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,n.yg)("inlineCode",{parentName:"td"},"<"),(0,n.yg)("a",u({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,n.yg)("inlineCode",{parentName:"td"},"<readonly [K, V]>>")),(0,n.yg)("td",u({parentName:"tr"},{align:null}),"an array of ",(0,n.yg)("inlineCode",{parentName:"td"},"StreamSource")," instances containing key-value entries")))),(0,n.yg)("admonition",u({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",u({parentName:"pre"},{className:"language-ts"}),"HashMultiMapHashValue.from([[1, 'a'], [2, 'b']])    // => HashMultiMapHashValue.NonEmpty<number, string>\n"))),(0,n.yg)("h4",u({},{id:"overrides-2"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/multimap/custom/MultiMapBase/Factory/interface#from"}),"Factory.from"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",u({},{id:"of"}),(0,n.yg)("inlineCode",{parentName:"h3"},"of")),(0,n.yg)("p",null,"Returns an immutable multimap of this collection type and context, containing the given ",(0,n.yg)("inlineCode",{parentName:"p"},"entries"),".")),(0,n.yg)("h4",u({},{id:"definition-4"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"of<K extends UK, V extends UV>(...entries: "),(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,n.yg)("inlineCode",{parentName:"p"},"<readonly [K, V]>): "),(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['nonEmpty'];"))),(0,n.yg)("h4",u({},{id:"type-parameters-5"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Constraints"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),"K"),(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UK")),(0,n.yg)("td",u({parentName:"tr"},{align:null}))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),"V"),(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UV")),(0,n.yg)("td",u({parentName:"tr"},{align:null}))))),(0,n.yg)("h4",u({},{id:"parameters-2"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"entries")),(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("a",u({parentName:"td"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,n.yg)("inlineCode",{parentName:"td"},"<readonly [K, V]>")),(0,n.yg)("td",u({parentName:"tr"},{align:null}),"a non-empty array of key-value entries")))),(0,n.yg)("admonition",u({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",u({parentName:"pre"},{className:"language-ts"}),"HashMultiMapHashValue.of([1, 'a'], [2, 'b'], [1, 'c'])    // => HashMap.NonEmpty<number, string>\n"))),(0,n.yg)("h4",u({},{id:"overrides-3"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/multimap/custom/MultiMapBase/Factory/interface#of"}),"Factory.of"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",u({},{id:"reducer"}),(0,n.yg)("inlineCode",{parentName:"h3"},"reducer")),(0,n.yg)("p",null,"Returns a ",(0,n.yg)("inlineCode",{parentName:"p"},"Reducer")," that adds received tuples to a MultiMap and returns the MultiMap as a result. When a ",(0,n.yg)("inlineCode",{parentName:"p"},"source")," is given, the reducer will first create a MultiMap from the source, and then add tuples to it.")),(0,n.yg)("h4",u({},{id:"definition-5"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"reducer<K extends UK, V extends UV>(source?: "),(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.yg)("inlineCode",{parentName:"p"},"<readonly [K, V]>): Reducer<readonly [K, V], "),(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal']>;"))),(0,n.yg)("h4",u({},{id:"type-parameters-6"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Constraints"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),"K"),(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UK")),(0,n.yg)("td",u({parentName:"tr"},{align:null}))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),"V"),(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UV")),(0,n.yg)("td",u({parentName:"tr"},{align:null}))))),(0,n.yg)("h4",u({},{id:"parameters-3"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"source")),(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("a",u({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.yg)("inlineCode",{parentName:"td"},"<readonly [K, V]>")),(0,n.yg)("td",u({parentName:"tr"},{align:null}),"(optional) an initial source of tuples to add to")))),(0,n.yg)("admonition",u({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",u({parentName:"pre"},{className:"language-ts"}),"const someSource: [number, string][] = [1, 'a'], [2, 'b'];\nconst result = Stream.of([1, 'c'], [3, 'a']).reduce(SortedMultiMap.reducer(someSource))\nresult.toArray()   // => [[1, 'a'], [1, 'c'], [2, 'b'], [3, 'a']]\n"))),(0,n.yg)("admonition",u({},{title:"note",type:"note"}),(0,n.yg)("p",{parentName:"admonition"},"uses a builder under the hood. If the given ",(0,n.yg)("inlineCode",{parentName:"p"},"source")," is a BiMap in the same context, it will directly call ",(0,n.yg)("inlineCode",{parentName:"p"},".toBuilder()"),".")),(0,n.yg)("h4",u({},{id:"overrides-4"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/multimap/custom/MultiMapBase/Factory/interface#reducer"}),"Factory.reducer"))))}v.isMDXComponent=!0}}]);