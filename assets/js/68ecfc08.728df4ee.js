"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[25060],{15680:(e,a,n)=>{n.d(a,{xA:()=>g,yg:()=>s});var t=n(96540);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function i(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?i(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function o(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=t.createContext({}),m=function(e){var a=t.useContext(p),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},g=function(e){var a=m(e.components);return t.createElement(p.Provider,{value:a},e.children)},y="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},N=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,g=o(e,["components","mdxType","originalType","parentName"]),y=m(n),N=r,s=y["".concat(p,".").concat(N)]||y[N]||d[N]||i;return n?t.createElement(s,l(l({ref:a},g),{},{components:n})):t.createElement(s,l({ref:a},g))}));function s(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=N;var o={};for(var p in a)hasOwnProperty.call(a,p)&&(o[p]=a[p]);o.originalType=e,o[y]="string"==typeof e?e:r,l[1]=o;for(var m=2;m<i;m++)l[m]=n[m];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}N.displayName="MDXCreateElement"},19969:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>u,default:()=>v,frontMatter:()=>s,metadata:()=>h,toc:()=>f});var t=n(15680),r=Object.defineProperty,i=Object.defineProperties,l=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable,g=(e,a,n)=>a in e?r(e,a,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[a]=n,y=(e,a)=>{for(var n in a||(a={}))p.call(a,n)&&g(e,n,a[n]);if(o)for(var n of o(a))m.call(a,n)&&g(e,n,a[n]);return e},d=(e,a)=>i(e,l(a)),N=(e,a)=>{var n={};for(var t in e)p.call(e,t)&&a.indexOf(t)<0&&(n[t]=e[t]);if(null!=e&&o)for(var t of o(e))a.indexOf(t)<0&&m.call(e,t)&&(n[t]=e[t]);return n};const s={title:"VariantGraphBase<N,V,Tp>",slug:"/rimbu/graph/custom/VariantGraphBase/interface"},u="interface VariantGraphBase<N,V,Tp>",h={unversionedId:"rimbu_graph/custom/VariantGraphBase.interface",id:"rimbu_graph/custom/VariantGraphBase.interface",title:"VariantGraphBase<N,V,Tp>",description:"undocumented",source:"@site/api/rimbu_graph/custom/VariantGraphBase.interface.mdx",sourceDirName:"rimbu_graph/custom",slug:"/rimbu/graph/custom/VariantGraphBase/interface",permalink:"/api/rimbu/graph/custom/VariantGraphBase/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"VariantGraphBase<N,V,Tp>",slug:"/rimbu/graph/custom/VariantGraphBase/interface"},sidebar:"defaultSidebar",previous:{title:"VariantGraphBase.Types",permalink:"/api/rimbu/graph/custom/VariantGraphBase/Types/interface"},next:{title:"VariantValuedGraphBase (namespace)",permalink:"/api/rimbu/graph/custom/VariantValuedGraphBase/namespace"}},c={},f=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>connectionSize</code>",id:"connectionsize",level:3},{value:"Definition",id:"definition",level:4},{value:"<code>isDirected</code>",id:"isdirected",level:3},{value:"Definition",id:"definition-1",level:4},{value:"<code>isEmpty</code>",id:"isempty",level:3},{value:"Definition",id:"definition-2",level:4},{value:"<code>nodeSize</code>",id:"nodesize",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Methods",id:"methods",level:2},{value:"<code>[Symbol.iterator]</code>",id:"symboliterator",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Overrides",id:"overrides",level:4},{value:"<code>assumeNonEmpty</code>",id:"assumenonempty",level:3},{value:"Definition",id:"definition-5",level:4},{value:"<code>disconnect</code>",id:"disconnect",level:3},{value:"Definition",id:"definition-6",level:4},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters",level:4},{value:"<code>disconnectAll</code>",id:"disconnectall",level:3},{value:"Definition",id:"definition-7",level:4},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>forEach</code>",id:"foreach",level:3},{value:"Definition",id:"definition-8",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"<code>getConnectionStreamFrom</code>",id:"getconnectionstreamfrom",level:3},{value:"Definition",id:"definition-9",level:4},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"<code>getConnectionStreamTo</code>",id:"getconnectionstreamto",level:3},{value:"Definition",id:"definition-10",level:4},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"<code>hasConnection</code>",id:"hasconnection",level:3},{value:"Definition",id:"definition-11",level:4},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"<code>hasNode</code>",id:"hasnode",level:3},{value:"Definition",id:"definition-12",level:4},{value:"Type parameters",id:"type-parameters-6",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"<code>nonEmpty</code>",id:"nonempty",level:3},{value:"Definition",id:"definition-13",level:4},{value:"<code>removeNode</code>",id:"removenode",level:3},{value:"Definition",id:"definition-14",level:4},{value:"Type parameters",id:"type-parameters-7",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"<code>removeNodes</code>",id:"removenodes",level:3},{value:"Definition",id:"definition-15",level:4},{value:"Type parameters",id:"type-parameters-8",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"<code>removeUnconnectedNodes</code>",id:"removeunconnectednodes",level:3},{value:"Definition",id:"definition-16",level:4},{value:"<code>stream</code>",id:"stream",level:3},{value:"Definition",id:"definition-17",level:4},{value:"<code>streamConnections</code>",id:"streamconnections",level:3},{value:"Definition",id:"definition-18",level:4},{value:"<code>streamNodes</code>",id:"streamnodes",level:3},{value:"Definition",id:"definition-19",level:4},{value:"<code>toJSON</code>",id:"tojson",level:3},{value:"Definition",id:"definition-20",level:4},{value:"<code>toString</code>",id:"tostring",level:3},{value:"Definition",id:"definition-21",level:4}],b={toc:f},C="wrapper";function v(e){var a=e,{components:n}=a,r=N(a,["components"]);return(0,t.yg)(C,d(y(y({},b),r),{components:n,mdxType:"MDXLayout"}),(0,t.yg)("h1",y({},{id:"interface-variantgraphbasenvtp"}),(0,t.yg)("inlineCode",{parentName:"h1"},"interface VariantGraphBase<N,V,Tp>")),(0,t.yg)("p",null,"undocumented"),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Companion namespace:")," ",(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/namespace"}),"VariantGraphBase")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Extends:")," ",(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/stream/FastIterable/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"FastIterable<T>"))),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Implemented by:")," ",(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantValuedGraphBase/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"VariantValuedGraphBase<N,V,Tp>")),", ",(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"VariantGraphBase.NonEmpty<N,V,Tp>")),", ",(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/graph/custom/GraphBase/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"GraphBase<N,Tp>")),", ",(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/graph/custom/GraphConnect/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"GraphConnect<N,V,Tp>"))),(0,t.yg)("h2",y({},{id:"type-parameters"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",y({parentName:"tr"},{align:null}),"N"),(0,t.yg)("td",y({parentName:"tr"},{align:null})),(0,t.yg)("td",y({parentName:"tr"},{align:null})),(0,t.yg)("td",y({parentName:"tr"},{align:null}),"undocumented")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",y({parentName:"tr"},{align:null}),"V"),(0,t.yg)("td",y({parentName:"tr"},{align:null})),(0,t.yg)("td",y({parentName:"tr"},{align:null})),(0,t.yg)("td",y({parentName:"tr"},{align:null}),"undocumented")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",y({parentName:"tr"},{align:null}),"Tp"),(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("a",y({parentName:"td"},{href:"/api/rimbu/graph/custom/VariantGraphBase/Types/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"VariantGraphBase.Types"))),(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("a",y({parentName:"td"},{href:"/api/rimbu/graph/custom/VariantGraphBase/Types/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"VariantGraphBase.Types"))),(0,t.yg)("td",y({parentName:"tr"},{align:null}),"undocumented")))),(0,t.yg)("h2",y({},{id:"properties"}),"Properties"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",y({},{id:"connectionsize"}),(0,t.yg)("inlineCode",{parentName:"h3"},"connectionSize")),(0,t.yg)("p",null,"Returns the amount of connections in the graph.")),(0,t.yg)("h4",y({},{id:"definition"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly connectionSize: number;"))),(0,t.yg)("admonition",y({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"ArrowGraphHashed.empty<number>().connectionSize  // => 0\nArrowGraphHashed.of([1], [2, 3]).connectionSize  // => 1\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",y({},{id:"isdirected"}),(0,t.yg)("inlineCode",{parentName:"h3"},"isDirected")),(0,t.yg)("p",null,"Returns true if the graph is an arrow (directed) graph.")),(0,t.yg)("h4",y({},{id:"definition-1"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly isDirected: boolean;")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",y({},{id:"isempty"}),(0,t.yg)("inlineCode",{parentName:"h3"},"isEmpty")),(0,t.yg)("p",null,"Returns true if the graph has no nodes.")),(0,t.yg)("h4",y({},{id:"definition-2"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly isEmpty: boolean;"))),(0,t.yg)("admonition",y({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"ArrowGraphHashed.empty<number>().isEmpty  // => true\nArrowGraphHashed.of([1]).isEmpty          // => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",y({},{id:"nodesize"}),(0,t.yg)("inlineCode",{parentName:"h3"},"nodeSize")),(0,t.yg)("p",null,"Returns the amount of nodes in the graph.")),(0,t.yg)("h4",y({},{id:"definition-3"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly nodeSize: number;"))),(0,t.yg)("admonition",y({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"ArrowGraphHashed.empty<number>().nodeSize  // => 0\nArrowGraphHashed.of([1], [2, 3]).nodeSize  // => 3\n")))),(0,t.yg)("h2",y({},{id:"methods"}),"Methods"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",y({},{id:"symboliterator"}),(0,t.yg)("inlineCode",{parentName:"h3"},"[Symbol.iterator]")),(0,t.yg)("p",null,"Returns a ",(0,t.yg)("inlineCode",{parentName:"p"},"FastIterator")," instance used to iterate over the values of this ",(0,t.yg)("inlineCode",{parentName:"p"},"Iterable"),".")),(0,t.yg)("h4",y({},{id:"definition-4"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"[Symbol.iterator](): "),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/stream/FastIterator/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"FastIterator")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,t.yg)("h4",y({},{id:"overrides"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/stream/FastIterable/interface#%5BSymbol.iterator%5D"}),"FastIterable.[Symbol.iterator]"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",y({},{id:"assumenonempty"}),(0,t.yg)("inlineCode",{parentName:"h3"},"assumeNonEmpty")),(0,t.yg)("p",null,"Returns the collection as a .NonEmpty type")),(0,t.yg)("h4",y({},{id:"definition-5"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"assumeNonEmpty(): "),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, V>['nonEmpty'];"))),(0,t.yg)("admonition",y({},{title:"throws",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"RimbuError.EmptyCollectionAssumedNonEmptyError if the collection is empty")),(0,t.yg)("admonition",y({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"ArrowGraphHashed.empty<number>().assumeNonEmpty()   // => throws\nconst g: ArrowGraphHashed<number> = ArrowGraphHashed.of([1, 1], [2, 2])\nconst g2: ArrowGraphHashed.NonEmpty<number> = g     // => compiler error\nconst g3: ArrowGraphHashed.NonEmpty<number> = g.assumeNonEmpty()\n"))),(0,t.yg)("admonition",y({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"returns reference to this collection"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",y({},{id:"disconnect"}),(0,t.yg)("inlineCode",{parentName:"h3"},"disconnect")),(0,t.yg)("p",null,"Returns the graph with the connection between given ",(0,t.yg)("inlineCode",{parentName:"p"},"node1")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"node2")," removed if it exists.")),(0,t.yg)("h4",y({},{id:"definition-6"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"disconnect<UN = N>(node1: "),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>, node2: "),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>): "),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, V>['normal'];"))),(0,t.yg)("h4",y({},{id:"type-parameters-1"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",y({parentName:"tr"},{align:null}),"UN"),(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",y({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",y({},{id:"parameters"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node1")),(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("a",y({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>")),(0,t.yg)("td",y({parentName:"tr"},{align:null}),"the first connection node")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node2")),(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("a",y({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>")),(0,t.yg)("td",y({parentName:"tr"},{align:null}),"the second connectio node")))),(0,t.yg)("admonition",y({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"const g = ArrowGraphHashed.of([1], [2, 3])\ng.disconnect(2, 3).stream().toArray()  // => [[1], [2], [3]]\ng.disconnect(1, 2).stream().toArray()  // => [[1], [2, 3]]\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",y({},{id:"disconnectall"}),(0,t.yg)("inlineCode",{parentName:"h3"},"disconnectAll")),(0,t.yg)("p",null,"Returns the graph with all connections in given ",(0,t.yg)("inlineCode",{parentName:"p"},"links")," removed if they exist.")),(0,t.yg)("h4",y({},{id:"definition-7"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"disconnectAll<UN = N>(links: "),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<Link<"),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>>>): "),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, V>['normal'];"))),(0,t.yg)("h4",y({},{id:"type-parameters-2"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",y({parentName:"tr"},{align:null}),"UN"),(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",y({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",y({},{id:"parameters-1"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"links")),(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("a",y({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<Link<"),(0,t.yg)("a",y({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>>>")),(0,t.yg)("td",y({parentName:"tr"},{align:null}),"a ",(0,t.yg)("inlineCode",{parentName:"td"},"StreamSource")," containing tuples of nodes representing connections")))),(0,t.yg)("admonition",y({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"const g = ArrowGraphHashed.of([1], [2, 3])\ng.disconnectAll([[1, 2], [3, 4]]).stream().toArray() // => [[1], [2, 3]]\ng.disconnectAll([[2, 3], [3, 4]]).stream().toArray() // => [[1], [2], [3]]\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",y({},{id:"foreach"}),(0,t.yg)("inlineCode",{parentName:"h3"},"forEach")),(0,t.yg)("p",null,"Performs given function ",(0,t.yg)("inlineCode",{parentName:"p"},"f")," for each entry of the collection, using given ",(0,t.yg)("inlineCode",{parentName:"p"},"state")," as initial traversal state.")),(0,t.yg)("h4",y({},{id:"definition-8"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"forEach(f: (entry: [N] "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," "),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, V>['link'], index: number, halt: () => void) => void, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"state?: "),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/common/TraverseState/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"TraverseState")),(0,t.yg)("inlineCode",{parentName:"p"},";"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): void;"))),(0,t.yg)("h4",y({},{id:"parameters-2"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"f")),(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(entry: [N] "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," "),(0,t.yg)("a",y({parentName:"td"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"td"},"<Tp, N, V>['link'], index: number, halt: () => void) => void")),(0,t.yg)("td",y({parentName:"tr"},{align:null}),"the function to perform for each entry, receiving:",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"entry"),": the next graph element",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"index"),": the index of the element",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"halt"),": a function that, if called, ensures that no new elements are passed")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"state?: "),(0,t.yg)("a",y({parentName:"td"},{href:"/api/rimbu/common/TraverseState/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"TraverseState")),(0,t.yg)("inlineCode",{parentName:"td"},";"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",y({parentName:"tr"},{align:null}),"object containing the following",(0,t.yg)("br",null)," - state: (optional) the traverse state")))),(0,t.yg)("admonition",y({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"const g = ArrowGraphHashed.of([1], [2, 3], [4])\ng.forEach((entry, i, halt) => {\nconsole.log([entry]);\nif (i >= 1) halt();\n})\n// => logs [1]  [2, 3]\n"))),(0,t.yg)("admonition",y({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N)"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",y({},{id:"getconnectionstreamfrom"}),(0,t.yg)("inlineCode",{parentName:"h3"},"getConnectionStreamFrom")),(0,t.yg)("p",null,"Returns a ",(0,t.yg)("inlineCode",{parentName:"p"},"Stream")," containing all the connetions from the given ",(0,t.yg)("inlineCode",{parentName:"p"},"node1"))),(0,t.yg)("h4",y({},{id:"definition-9"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"getConnectionStreamFrom<UN = N>(node1: "),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>): "),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<"),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, V>['link']>;"))),(0,t.yg)("h4",y({},{id:"type-parameters-3"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",y({parentName:"tr"},{align:null}),"UN"),(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",y({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",y({},{id:"parameters-3"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node1")),(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("a",y({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>")),(0,t.yg)("td",y({parentName:"tr"},{align:null}),"the first connection node")))),(0,t.yg)("admonition",y({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"const g = ArrowGraphHashed.of([1], [2, 3])\ng.getConnectionStreamFrom(2).toArray()   // => [3]\ng.getConnectionStreamFrom(5).toArray()   // => []\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",y({},{id:"getconnectionstreamto"}),(0,t.yg)("inlineCode",{parentName:"h3"},"getConnectionStreamTo")),(0,t.yg)("p",null,"Returns a ",(0,t.yg)("inlineCode",{parentName:"p"},"Stream")," containing all the connetions to the given ",(0,t.yg)("inlineCode",{parentName:"p"},"node2"))),(0,t.yg)("h4",y({},{id:"definition-10"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"getConnectionStreamTo<UN = N>(node2: "),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>): "),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<"),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, V>['link']>;"))),(0,t.yg)("h4",y({},{id:"type-parameters-4"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",y({parentName:"tr"},{align:null}),"UN"),(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",y({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",y({},{id:"parameters-4"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node2")),(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("a",y({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>")),(0,t.yg)("td",y({parentName:"tr"},{align:null}),"the second connection node")))),(0,t.yg)("admonition",y({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"const g = ArrowGraphHashed.of([1], [2, 3])\ng.getConnectionStreamTo(3).toArray()   // => [2]\ng.getConnectionStreamTo(5).toArray()   // => []\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",y({},{id:"hasconnection"}),(0,t.yg)("inlineCode",{parentName:"h3"},"hasConnection")),(0,t.yg)("p",null,"Returns true if the graph has a connection between given ",(0,t.yg)("inlineCode",{parentName:"p"},"node1")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"node2"),".")),(0,t.yg)("h4",y({},{id:"definition-11"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"hasConnection<UN = N>(node1: "),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>, node2: "),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>): boolean;"))),(0,t.yg)("h4",y({},{id:"type-parameters-5"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",y({parentName:"tr"},{align:null}),"UN"),(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",y({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",y({},{id:"parameters-5"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node1")),(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("a",y({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>")),(0,t.yg)("td",y({parentName:"tr"},{align:null}),"the first connection node")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node2")),(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("a",y({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>")),(0,t.yg)("td",y({parentName:"tr"},{align:null}),"the second connection node")))),(0,t.yg)("admonition",y({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"const g = ArrowGraphHashed.of([1], [2, 3])\ng.hasConnection(2, 3)   // => true\ng.hasConnection(3, 1)   // => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",y({},{id:"hasnode"}),(0,t.yg)("inlineCode",{parentName:"h3"},"hasNode")),(0,t.yg)("p",null,"Returns true if the graph contains the given ",(0,t.yg)("inlineCode",{parentName:"p"},"node"),".")),(0,t.yg)("h4",y({},{id:"definition-12"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"hasNode<UN = N>(node: "),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>): boolean;"))),(0,t.yg)("h4",y({},{id:"type-parameters-6"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",y({parentName:"tr"},{align:null}),"UN"),(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",y({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",y({},{id:"parameters-6"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node")),(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("a",y({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>")),(0,t.yg)("td",y({parentName:"tr"},{align:null}),"the node to search")))),(0,t.yg)("admonition",y({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"const g = ArrowGraphHashed.of([1], [2, 3])\ng.hasNode(2)   // => true\ng.hasNode(5)   // => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",y({},{id:"nonempty"}),(0,t.yg)("inlineCode",{parentName:"h3"},"nonEmpty")),(0,t.yg)("p",null,"Returns true if there is at least one node in the collection, and instructs the compiler to treat the collection as a .NonEmpty type.")),(0,t.yg)("h4",y({},{id:"definition-13"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"nonEmpty(): this is "),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, V>['nonEmpty'];"))),(0,t.yg)("admonition",y({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"const g: ArrowGraphHashed<number> = ArrowGraphHashed.of([1, 1], [2, 2])\ng.streamNodes().first(0)     // compiler allows fallback value since the Stream may be empty\nif (g.nonEmpty()) {\ng.streamNodes().first(0)   // compiler error: fallback value not allowed since Stream is not empty\n}\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",y({},{id:"removenode"}),(0,t.yg)("inlineCode",{parentName:"h3"},"removeNode")),(0,t.yg)("p",null,"Returns the graph with the given ",(0,t.yg)("inlineCode",{parentName:"p"},"node")," and all its connections removed.")),(0,t.yg)("h4",y({},{id:"definition-14"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"removeNode<UN = N>(node: "),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>): "),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, V>['normal'];"))),(0,t.yg)("h4",y({},{id:"type-parameters-7"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",y({parentName:"tr"},{align:null}),"UN"),(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",y({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",y({},{id:"parameters-7"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node")),(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("a",y({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>")),(0,t.yg)("td",y({parentName:"tr"},{align:null}),"the node to remove")))),(0,t.yg)("admonition",y({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"const g = ArrowGraphHashed.of([1], [2, 3])\ng.removeNode(2).stream().toArray()  // => [[1]]\ng.removeNode(6).stream().toArray()  // => [[1], [2, 3]]\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",y({},{id:"removenodes"}),(0,t.yg)("inlineCode",{parentName:"h3"},"removeNodes")),(0,t.yg)("p",null,"Returns the graph with all nodes in given ",(0,t.yg)("inlineCode",{parentName:"p"},"nodes")," stream removed, together with all their connections.")),(0,t.yg)("h4",y({},{id:"definition-15"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"removeNodes<UN = N>(nodes: "),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<"),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>>): "),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, V>['normal'];"))),(0,t.yg)("h4",y({},{id:"type-parameters-8"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",y({parentName:"tr"},{align:null}),"UN"),(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",y({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",y({},{id:"parameters-8"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"nodes")),(0,t.yg)("td",y({parentName:"tr"},{align:null}),(0,t.yg)("a",y({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<"),(0,t.yg)("a",y({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>>")),(0,t.yg)("td",y({parentName:"tr"},{align:null}),"a ",(0,t.yg)("inlineCode",{parentName:"td"},"StreamSource")," containing the nodes to remove")))),(0,t.yg)("admonition",y({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"const g = ArrowGraphHashed.of([1], [2, 3])\ng.removeNodes([2, 3]).stream().toArray()  // => [[1]]\ng.removeNodes([4, 5]).stream().toArray()  // => [[1], [2, 3]]\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",y({},{id:"removeunconnectednodes"}),(0,t.yg)("inlineCode",{parentName:"h3"},"removeUnconnectedNodes")),(0,t.yg)("p",null,"Returns the graph with all isolated nodes removed.")),(0,t.yg)("h4",y({},{id:"definition-16"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"removeUnconnectedNodes(): "),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, V>['normal'];"))),(0,t.yg)("admonition",y({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"const g = ArrowGraphHashed.of([1], [2, 3])\ng.removeUnconnectedNodes().stream().toArray()   // => [[2, 3]]\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",y({},{id:"stream"}),(0,t.yg)("inlineCode",{parentName:"h3"},"stream")),(0,t.yg)("p",null,"Returns a ",(0,t.yg)("inlineCode",{parentName:"p"},"Stream")," containing all graph elements of this collection as single tuples for isolated nodes and 2-valued tuples of nodes for connections.")),(0,t.yg)("h4",y({},{id:"definition-17"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"stream(): "),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<[N] "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," "),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, V>['link']>;"))),(0,t.yg)("admonition",y({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"ArrowGraphHashed.of([1], [2, 3]).stream().toArray()  // => [[1], [2, 3]]\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",y({},{id:"streamconnections"}),(0,t.yg)("inlineCode",{parentName:"h3"},"streamConnections")),(0,t.yg)("p",null,"Returns a ",(0,t.yg)("inlineCode",{parentName:"p"},"Stream")," containing all connections of this collection.")),(0,t.yg)("h4",y({},{id:"definition-18"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"streamConnections(): "),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<"),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, V>['link']>;"))),(0,t.yg)("admonition",y({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"ArrowGraphHashed.of([1], [2, 3]).stream().toArray()   // => [[2, 3]]\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",y({},{id:"streamnodes"}),(0,t.yg)("inlineCode",{parentName:"h3"},"streamNodes")),(0,t.yg)("p",null,"Returns a ",(0,t.yg)("inlineCode",{parentName:"p"},"Stream")," containing all nodes of this collection.")),(0,t.yg)("h4",y({},{id:"definition-19"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"streamNodes(): "),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<N>;"))),(0,t.yg)("admonition",y({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"ArrowGraphHashed.of([1], [2, 3]).stream().toArray()   // => [1, 2, 3]\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",y({},{id:"tojson"}),(0,t.yg)("inlineCode",{parentName:"h3"},"toJSON")),(0,t.yg)("p",null,"Returns a JSON representation of this collection.")),(0,t.yg)("h4",y({},{id:"definition-20"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"toJSON(): "),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/common/ToJSON/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"ToJSON")),(0,t.yg)("inlineCode",{parentName:"p"},"<[N, "),(0,t.yg)("a",y({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, V>['linkTarget'][]][]>;"))),(0,t.yg)("admonition",y({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"ArrowGraphHashed.of([1], [2, 3]).toJSON()\n// => { dataType: 'ArrowGraphHashed', value: [[1, []], [2, [3]]] }\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",y({},{id:"tostring"}),(0,t.yg)("inlineCode",{parentName:"h3"},"toString")),(0,t.yg)("p",null,"Returns a string representation of this collection.")),(0,t.yg)("h4",y({},{id:"definition-21"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"toString(): string;"))),(0,t.yg)("admonition",y({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"ArrowGraphHashed.of([1], [2, 3]).toString()   // => ArrowGraphHashed(1 => [], 2 => [3])\n")))))}v.isMDXComponent=!0}}]);