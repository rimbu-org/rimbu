"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[7263],{15680:(e,a,t)=>{t.d(a,{xA:()=>m,yg:()=>u});var n=t(96540);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=n.createContext({}),y=function(e){var a=n.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},m=function(e){var a=y(e.components);return n.createElement(p.Provider,{value:a},e.children)},g="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},s=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),g=y(t),s=r,u=g["".concat(p,".").concat(s)]||g[s]||d[s]||i;return t?n.createElement(u,l(l({ref:a},m),{},{components:t})):n.createElement(u,l({ref:a},m))}));function u(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=s;var o={};for(var p in a)hasOwnProperty.call(a,p)&&(o[p]=a[p]);o.originalType=e,o[g]="string"==typeof e?e:r,l[1]=o;for(var y=2;y<i;y++)l[y]=t[y];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}s.displayName="MDXCreateElement"},97038:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>h,contentTitle:()=>N,default:()=>C,frontMatter:()=>u,metadata:()=>c,toc:()=>f});var n=t(15680),r=Object.defineProperty,i=Object.defineProperties,l=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,y=Object.prototype.propertyIsEnumerable,m=(e,a,t)=>a in e?r(e,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[a]=t,g=(e,a)=>{for(var t in a||(a={}))p.call(a,t)&&m(e,t,a[t]);if(o)for(var t of o(a))y.call(a,t)&&m(e,t,a[t]);return e},d=(e,a)=>i(e,l(a)),s=(e,a)=>{var t={};for(var n in e)p.call(e,n)&&a.indexOf(n)<0&&(t[n]=e[n]);if(null!=e&&o)for(var n of o(e))a.indexOf(n)<0&&y.call(e,n)&&(t[n]=e[n]);return t};const u={title:"VariantMapBase<K,V,Tp>",slug:"/rimbu/collection-types/map-custom/VariantMapBase/interface"},N="interface VariantMapBase<K,V,Tp>",c={unversionedId:"rimbu_collection-types/map-custom/VariantMapBase.interface",id:"rimbu_collection-types/map-custom/VariantMapBase.interface",title:"VariantMapBase<K,V,Tp>",description:"undocumented",source:"@site/api/rimbu_collection-types/map-custom/VariantMapBase.interface.mdx",sourceDirName:"rimbu_collection-types/map-custom",slug:"/rimbu/collection-types/map-custom/VariantMapBase/interface",permalink:"/api/rimbu/collection-types/map-custom/VariantMapBase/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"VariantMapBase<K,V,Tp>",slug:"/rimbu/collection-types/map-custom/VariantMapBase/interface"},sidebar:"defaultSidebar",previous:{title:"VariantMapBase.Types",permalink:"/api/rimbu/collection-types/map-custom/VariantMapBase/Types/interface"},next:{title:"WithElem",permalink:"/api/rimbu/collection-types/map-custom/WithElem/type"}},h={},f=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>isEmpty</code>",id:"isempty",level:3},{value:"Definition",id:"definition",level:4},{value:"<code>size</code>",id:"size",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Methods",id:"methods",level:2},{value:"<code>[Symbol.iterator]</code>",id:"symboliterator",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Overrides",id:"overrides",level:4},{value:"<code>assumeNonEmpty</code>",id:"assumenonempty",level:3},{value:"Definition",id:"definition-3",level:4},{value:"<code>filter</code>",id:"filter",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Parameters",id:"parameters",level:4},{value:"<code>forEach</code>",id:"foreach",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>get</code>",id:"get",level:3},{value:"Definitions",id:"definitions",level:4},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"<code>hasKey</code>",id:"haskey",level:3},{value:"Definition",id:"definition-6",level:4},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"<code>mapValues</code>",id:"mapvalues",level:3},{value:"Definition",id:"definition-7",level:4},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"<code>nonEmpty</code>",id:"nonempty",level:3},{value:"Definition",id:"definition-8",level:4},{value:"<code>removeKey</code>",id:"removekey",level:3},{value:"Definition",id:"definition-9",level:4},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"<code>removeKeyAndGet</code>",id:"removekeyandget",level:3},{value:"Definition",id:"definition-10",level:4},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"<code>removeKeys</code>",id:"removekeys",level:3},{value:"Definition",id:"definition-11",level:4},{value:"Type parameters",id:"type-parameters-6",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"<code>stream</code>",id:"stream",level:3},{value:"Definition",id:"definition-12",level:4},{value:"<code>streamKeys</code>",id:"streamkeys",level:3},{value:"Definition",id:"definition-13",level:4},{value:"<code>streamValues</code>",id:"streamvalues",level:3},{value:"Definition",id:"definition-14",level:4},{value:"<code>toArray</code>",id:"toarray",level:3},{value:"Definition",id:"definition-15",level:4},{value:"<code>toJSON</code>",id:"tojson",level:3},{value:"Definition",id:"definition-16",level:4},{value:"<code>toString</code>",id:"tostring",level:3},{value:"Definition",id:"definition-17",level:4}],b={toc:f},v="wrapper";function C(e){var a=e,{components:t}=a,r=s(a,["components"]);return(0,n.yg)(v,d(g(g({},b),r),{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",g({},{id:"interface-variantmapbasekvtp"}),(0,n.yg)("inlineCode",{parentName:"h1"},"interface VariantMapBase<K,V,Tp>")),(0,n.yg)("p",null,"undocumented"),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Companion namespace:")," ",(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/namespace"}),"VariantMapBase")),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Extends:")," ",(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/FastIterable/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"FastIterable<T>"))),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Implemented by:")," ",(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"RMapBase<K,V,Tp>")),", ",(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/NonEmpty/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"VariantMapBase.NonEmpty<K,V,Tp>"))),(0,n.yg)("h2",g({},{id:"type-parameters"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Constraints"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),"K"),(0,n.yg)("td",g({parentName:"tr"},{align:null})),(0,n.yg)("td",g({parentName:"tr"},{align:null})),(0,n.yg)("td",g({parentName:"tr"},{align:null}),"undocumented")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),"V"),(0,n.yg)("td",g({parentName:"tr"},{align:null})),(0,n.yg)("td",g({parentName:"tr"},{align:null})),(0,n.yg)("td",g({parentName:"tr"},{align:null}),"undocumented")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),"Tp"),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("a",g({parentName:"td"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/Types/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"VariantMapBase.Types"))),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("a",g({parentName:"td"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/Types/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"VariantMapBase.Types"))),(0,n.yg)("td",g({parentName:"tr"},{align:null}),"undocumented")))),(0,n.yg)("h2",g({},{id:"properties"}),"Properties"),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"isempty"}),(0,n.yg)("inlineCode",{parentName:"h3"},"isEmpty")),(0,n.yg)("p",null,"Returns true if the collection is empty.")),(0,n.yg)("h4",g({},{id:"definition"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"readonly isEmpty: boolean;"))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashMap.empty<number, number>().isEmpty    // => true\nHashMap.of([1, 1], [2, 2]).isEmpty         // => false\n")))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"size"}),(0,n.yg)("inlineCode",{parentName:"h3"},"size")),(0,n.yg)("p",null,"Returns the number of entries")),(0,n.yg)("h4",g({},{id:"definition-1"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"readonly size: number;"))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 1], [2, 2]).size       // => 2\n")))),(0,n.yg)("h2",g({},{id:"methods"}),"Methods"),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"symboliterator"}),(0,n.yg)("inlineCode",{parentName:"h3"},"[Symbol.iterator]")),(0,n.yg)("p",null,"Returns a ",(0,n.yg)("inlineCode",{parentName:"p"},"FastIterator")," instance used to iterate over the values of this ",(0,n.yg)("inlineCode",{parentName:"p"},"Iterable"),".")),(0,n.yg)("h4",g({},{id:"definition-2"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"[Symbol.iterator](): "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/FastIterator/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"FastIterator")),(0,n.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,n.yg)("h4",g({},{id:"overrides"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/FastIterable/interface#%5BSymbol.iterator%5D"}),"FastIterable.[Symbol.iterator]"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"assumenonempty"}),(0,n.yg)("inlineCode",{parentName:"h3"},"assumeNonEmpty")),(0,n.yg)("p",null,"Returns the collection as a .NonEmpty type")),(0,n.yg)("h4",g({},{id:"definition-3"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"assumeNonEmpty(): "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['nonEmpty'];"))),(0,n.yg)("admonition",g({},{title:"throws",type:"note"}),(0,n.yg)("p",{parentName:"admonition"},"RimbuError.EmptyCollectionAssumedNonEmptyError if the collection is empty")),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashMap.empty<number, number>().assumeNonEmpty()   // => throws\nconst m: HashMap<number, number> = HashMap.of([1, 1], [2, 2])\nconst m2: HashMap.NonEmpty<number, number> = m     // => compiler error\nconst m3: HashMap.NonEmpty<number, number> = m.assumeNonEmpty()\n"))),(0,n.yg)("admonition",g({},{title:"note",type:"note"}),(0,n.yg)("p",{parentName:"admonition"},"returns reference to this collection"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"filter"}),(0,n.yg)("inlineCode",{parentName:"h3"},"filter")),(0,n.yg)("p",null,"Returns a collection containing only those entries that satisfy given ",(0,n.yg)("inlineCode",{parentName:"p"},"pred")," predicate.")),(0,n.yg)("h4",g({},{id:"definition-4"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"filter(pred: (entry: readonly [K, V], index: number, halt: () => void) => boolean, options?: {"),(0,n.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"p"},"negate?: boolean;"),(0,n.yg)("br",null),"\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"p"},"}): "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,n.yg)("h4",g({},{id:"parameters"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"pred")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"(entry: readonly [K, V], index: number, halt: () => void) => boolean")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),"a predicate function receiving:",(0,n.yg)("br",null)," - ",(0,n.yg)("inlineCode",{parentName:"td"},"entry"),": the next entry",(0,n.yg)("br",null)," - ",(0,n.yg)("inlineCode",{parentName:"td"},"index"),": the entry index",(0,n.yg)("br",null)," - ",(0,n.yg)("inlineCode",{parentName:"td"},"halt"),": a function that, when called, ensures no next elements are passed")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"options")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"{"),(0,n.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"td"},"negate?: boolean;"),(0,n.yg)("br",null),"\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"td"},"}")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,n.yg)("br",null)," - negate: (default: false) when true will negate the predicate")))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 'a'], [2, 'b'], [3, 'c']).filter(entry => entry[0] === 2 || entry[1] === 'c').toArray()\n// => [[2, 'b'], [3, 'c']]\n")))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"foreach"}),(0,n.yg)("inlineCode",{parentName:"h3"},"forEach")),(0,n.yg)("p",null,"Performs given function ",(0,n.yg)("inlineCode",{parentName:"p"},"f")," for each entry of the collection, using given ",(0,n.yg)("inlineCode",{parentName:"p"},"state")," as initial traversal state.")),(0,n.yg)("h4",g({},{id:"definition-5"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"forEach(f: (entry: readonly [K, V], index: number, halt: () => void) => void, options?: {"),(0,n.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"p"},"state?: "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/TraverseState/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"TraverseState")),(0,n.yg)("inlineCode",{parentName:"p"},";"),(0,n.yg)("br",null),"\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"p"},"}): void;"))),(0,n.yg)("h4",g({},{id:"parameters-1"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"f")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"(entry: readonly [K, V], index: number, halt: () => void) => void")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),"the function to perform for each entry, receiving:",(0,n.yg)("br",null)," - ",(0,n.yg)("inlineCode",{parentName:"td"},"entry"),": the next tuple of a key and value",(0,n.yg)("br",null)," - ",(0,n.yg)("inlineCode",{parentName:"td"},"index"),": the index of the element",(0,n.yg)("br",null)," - ",(0,n.yg)("inlineCode",{parentName:"td"},"halt"),": a function that, if called, ensures that no new elements are passed")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"options")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"{"),(0,n.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"td"},"state?: "),(0,n.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/TraverseState/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"TraverseState")),(0,n.yg)("inlineCode",{parentName:"td"},";"),(0,n.yg)("br",null),"\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"td"},"}")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,n.yg)("br",null)," - state:: (optional) the traversal state")))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 'a'], [2, 'b'], [3, 'c']).forEach((entry, i, halt) => {\nconsole.log([entry[1], entry[0]]);\nif (i >= 1) halt();\n})\n// => logs ['a', 1]  ['b', 2]\n"))),(0,n.yg)("admonition",g({},{title:"note",type:"note"}),(0,n.yg)("p",{parentName:"admonition"},"O(N)"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"get"}),(0,n.yg)("inlineCode",{parentName:"h3"},"get")),(0,n.yg)("p",null,"Returns the value associated with the given ",(0,n.yg)("inlineCode",{parentName:"p"},"key"),", or given ",(0,n.yg)("inlineCode",{parentName:"p"},"otherwise")," value if the key is not in the collection.")),(0,n.yg)("h4",g({},{id:"definitions"}),"Definitions"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"get<UK = K>(key: "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"p"},"<K, UK>): V "),(0,n.yg)("code",null,"|"),(0,n.yg)("inlineCode",{parentName:"p"}," undefined;"))),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"get<UK, O>(key: "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"p"},"<K, UK>, otherwise: "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,n.yg)("inlineCode",{parentName:"p"},"<O>): V "),(0,n.yg)("code",null,"|"),(0,n.yg)("inlineCode",{parentName:"p"}," O;"))),(0,n.yg)("h4",g({},{id:"type-parameters-1"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),"UK"),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"K")),(0,n.yg)("td",g({parentName:"tr"},{align:null}))))),(0,n.yg)("h4",g({},{id:"parameters-2"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"key")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"td"},"<K, UK>")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),"the key to look for")))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b'])\nm.get(2)          // => 'b'\nm.get(3)          // => undefined\nm.get(2, 'none')  // => 'b'\nm.get(3, 'none')  // => 'none'\n")))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"haskey"}),(0,n.yg)("inlineCode",{parentName:"h3"},"hasKey")),(0,n.yg)("p",null,"Returns true if the given ",(0,n.yg)("inlineCode",{parentName:"p"},"key")," is present in the collection.")),(0,n.yg)("h4",g({},{id:"definition-6"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"hasKey<UK = K>(key: "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"p"},"<K, UK>): boolean;"))),(0,n.yg)("h4",g({},{id:"type-parameters-2"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),"UK"),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"K")),(0,n.yg)("td",g({parentName:"tr"},{align:null}))))),(0,n.yg)("h4",g({},{id:"parameters-3"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"key")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"td"},"<K, UK>")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),"the key to look for")))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b'])\nm.hasKey(2)    // => true\nm.hasKey(3)    // => false\n")))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"mapvalues"}),(0,n.yg)("inlineCode",{parentName:"h3"},"mapValues")),(0,n.yg)("p",null,"Returns a collection with the same keys, but where the given ",(0,n.yg)("inlineCode",{parentName:"p"},"mapFun")," function is applied to each entry value.")),(0,n.yg)("h4",g({},{id:"definition-7"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"mapValues<V2>(mapFun: (value: V, key: K) => V2): (Tp & "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/KeyValue/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"KeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<K, V2>)['normal'];"))),(0,n.yg)("h4",g({},{id:"type-parameters-3"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),"V2"),(0,n.yg)("td",g({parentName:"tr"},{align:null}))))),(0,n.yg)("h4",g({},{id:"parameters-4"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"mapFun")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"(value: V, key: K) => V2")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),"a function taking a ",(0,n.yg)("inlineCode",{parentName:"td"},"value")," and a ",(0,n.yg)("inlineCode",{parentName:"td"},"key"),", and returning a new value")))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 'a'], [2, 'abc']).mapValues(v => v.length).toArray()\n// => [[1, 1], [2, 3]]\n")))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"nonempty"}),(0,n.yg)("inlineCode",{parentName:"h3"},"nonEmpty")),(0,n.yg)("p",null,"Returns true if there is at least one entry in the collection, and instructs the compiler to treat the collection as a .NonEmpty type.")),(0,n.yg)("h4",g({},{id:"definition-8"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"nonEmpty(): this is "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['nonEmpty'];"))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const m: HashMap<number, number> = HashMap.of([1, 1], [2, 2])\nm.stream().first(0)     // compiler allows fallback value since the Stream may be empty\nif (m.nonEmpty()) {\nm.stream().first(0)   // compiler error: fallback value not allowed since Stream is not empty\n}\n")))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"removekey"}),(0,n.yg)("inlineCode",{parentName:"h3"},"removeKey")),(0,n.yg)("p",null,"Returns the collection where the entry associated with given ",(0,n.yg)("inlineCode",{parentName:"p"},"key")," is removed if it was part of the collection.")),(0,n.yg)("h4",g({},{id:"definition-9"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"removeKey<UK = K>(key: "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"p"},"<K, UK>): "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,n.yg)("h4",g({},{id:"type-parameters-4"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),"UK"),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"K")),(0,n.yg)("td",g({parentName:"tr"},{align:null}))))),(0,n.yg)("h4",g({},{id:"parameters-5"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"key")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"td"},"<K, UK>")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),"the key of the entry to remove")))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b'])\nm.removeKey(2).toArray()   // => [[1, 'a']]\nm.removeKey(3) === m       // true\n"))),(0,n.yg)("admonition",g({},{title:"note",type:"note"}),(0,n.yg)("p",{parentName:"admonition"},"guarantees same object reference if the key is not present"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"removekeyandget"}),(0,n.yg)("inlineCode",{parentName:"h3"},"removeKeyAndGet")),(0,n.yg)("p",null,"Returns a tuple containing the collection of which the entry associated with given ",(0,n.yg)("inlineCode",{parentName:"p"},"key")," is removed, and the value that is associated with that key. If the key is not present, it will return undefined instead.")),(0,n.yg)("h4",g({},{id:"definition-10"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"removeKeyAndGet<UK = K>(key: "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"p"},"<K, UK>): ["),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'], V] "),(0,n.yg)("code",null,"|"),(0,n.yg)("inlineCode",{parentName:"p"}," undefined;"))),(0,n.yg)("h4",g({},{id:"type-parameters-5"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),"UK"),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"K")),(0,n.yg)("td",g({parentName:"tr"},{align:null}))))),(0,n.yg)("h4",g({},{id:"parameters-6"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"key")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"td"},"<K, UK>")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),"the key of the entry to remove")))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b'])\nconst result = m.removeKeyAndGet(2)\nif (result !== undefined) console.log([result[0].toString(), result[1]])    // => logs [HashMap(1 => 'a'), 'b']\nconsole.log(m.removeKeyAndGet(3))                                           // => logs undefined\n")))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"removekeys"}),(0,n.yg)("inlineCode",{parentName:"h3"},"removeKeys")),(0,n.yg)("p",null,"Returns the collection where the entries associated with each key in given ",(0,n.yg)("inlineCode",{parentName:"p"},"keys")," are removed if they were present.")),(0,n.yg)("h4",g({},{id:"definition-11"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"removeKeys<UK = K>(keys: "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.yg)("inlineCode",{parentName:"p"},"<"),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"p"},"<K, UK>>): "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,n.yg)("h4",g({},{id:"type-parameters-6"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Default"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),"UK"),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"K")),(0,n.yg)("td",g({parentName:"tr"},{align:null}))))),(0,n.yg)("h4",g({},{id:"parameters-7"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",g({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"keys")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),(0,n.yg)("a",g({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.yg)("inlineCode",{parentName:"td"},"<"),(0,n.yg)("a",g({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,n.yg)("inlineCode",{parentName:"td"},"<K, UK>>")),(0,n.yg)("td",g({parentName:"tr"},{align:null}),"a ",(0,n.yg)("inlineCode",{parentName:"td"},"StreamSource")," of keys to remove")))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b'])\nm.removeKeys([1, 3]).toArray()     // => [[2, 'b']]\nm.removeKeys([1, 3, 2]).toArray()  // => []\nm.removeKeys([3, 4, 5]) === m      // => true\n"))),(0,n.yg)("admonition",g({},{title:"note",type:"note"}),(0,n.yg)("p",{parentName:"admonition"},"guarantees same object reference if none of the keys are present"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"stream"}),(0,n.yg)("inlineCode",{parentName:"h3"},"stream")),(0,n.yg)("p",null,"Returns a ",(0,n.yg)("inlineCode",{parentName:"p"},"Stream")," containing all entries of this collection as tuples of key and value.")),(0,n.yg)("h4",g({},{id:"definition-12"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"stream(): "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"Stream")),(0,n.yg)("inlineCode",{parentName:"p"},"<readonly [K, V]>;"))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 1], [2, 2]).stream().toArray()  // => [[1, 1], [2, 2]]\n")))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"streamkeys"}),(0,n.yg)("inlineCode",{parentName:"h3"},"streamKeys")),(0,n.yg)("p",null,"Returns a ",(0,n.yg)("inlineCode",{parentName:"p"},"Stream")," containing all keys of this collection.")),(0,n.yg)("h4",g({},{id:"definition-13"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"streamKeys(): "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"Stream")),(0,n.yg)("inlineCode",{parentName:"p"},"<K>;"))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashMap.of([[1, 'a'], [2, 'b']]).streamKeys().toArray()   // => [1, 2]\n")))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"streamvalues"}),(0,n.yg)("inlineCode",{parentName:"h3"},"streamValues")),(0,n.yg)("p",null,"Returns a ",(0,n.yg)("inlineCode",{parentName:"p"},"Stream")," containing all values of this collection.")),(0,n.yg)("h4",g({},{id:"definition-14"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"streamValues(): "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"Stream")),(0,n.yg)("inlineCode",{parentName:"p"},"<V>;"))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashMap.of([[1, 'a'], [2, 'b']]).streamValues().toArray()   // => ['a', 'b']\n")))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"toarray"}),(0,n.yg)("inlineCode",{parentName:"h3"},"toArray")),(0,n.yg)("p",null,"Returns an array containing all entries in this collection.")),(0,n.yg)("h4",g({},{id:"definition-15"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"toArray(): (readonly [K, V])[];"))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 'a'], [2, 'b']).toArray()   // => [[1, 'a'], [2, 'b']]\n"))),(0,n.yg)("admonition",g({},{title:"note",type:"note"}),(0,n.yg)("p",{parentName:"admonition"},"O(log(N))  @note it is safe to mutate the returned array, however, the array elements are not copied, thus should be treated as read-only"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"tojson"}),(0,n.yg)("inlineCode",{parentName:"h3"},"toJSON")),(0,n.yg)("p",null,"Returns a JSON representation of this collection.")),(0,n.yg)("h4",g({},{id:"definition-16"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"toJSON(): "),(0,n.yg)("a",g({parentName:"p"},{href:"/api/rimbu/common/ToJSON/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"ToJSON")),(0,n.yg)("inlineCode",{parentName:"p"},"<(readonly [K, V])[]>;"))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 'a'], [2, 'b']).toJSON()   // => { dataType: 'HashMap', value: [[1, 'a'], [2, 'b']] }\n")))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",g({},{id:"tostring"}),(0,n.yg)("inlineCode",{parentName:"h3"},"toString")),(0,n.yg)("p",null,"Returns a string representation of this collection.")),(0,n.yg)("h4",g({},{id:"definition-17"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"toString(): string;"))),(0,n.yg)("admonition",g({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",g({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 'a'], [2, 'b']).toString()   // => HashMap(1 => 'a', 2 => 'b')\n")))))}C.isMDXComponent=!0}}]);