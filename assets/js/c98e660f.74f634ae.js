"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[21716],{15680:(e,n,a)=>{a.d(n,{xA:()=>g,yg:()=>s});var t=a(96540);function l(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function r(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){l(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,l=function(e,n){if(null==e)return{};var a,t,l={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(l[a]=e[a]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var p=t.createContext({}),y=function(e){var n=t.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):r(r({},n),e)),a},g=function(e){var n=y(e.components);return t.createElement(p.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,l=e.mdxType,i=e.originalType,p=e.parentName,g=o(e,["components","mdxType","originalType","parentName"]),m=y(a),u=l,s=m["".concat(p,".").concat(u)]||m[u]||d[u]||i;return a?t.createElement(s,r(r({ref:n},g),{},{components:a})):t.createElement(s,r({ref:n},g))}));function s(e,n){var a=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=a.length,r=new Array(i);r[0]=u;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[m]="string"==typeof e?e:l,r[1]=o;for(var y=2;y<i;y++)r[y]=a[y];return t.createElement.apply(null,r)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},63080:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>q,contentTitle:()=>c,default:()=>v,frontMatter:()=>s,metadata:()=>N,toc:()=>f});var t=a(15680),l=Object.defineProperty,i=Object.defineProperties,r=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,y=Object.prototype.propertyIsEnumerable,g=(e,n,a)=>n in e?l(e,n,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[n]=a,m=(e,n)=>{for(var a in n||(n={}))p.call(n,a)&&g(e,a,n[a]);if(o)for(var a of o(n))y.call(n,a)&&g(e,a,n[a]);return e},d=(e,n)=>i(e,r(n)),u=(e,n)=>{var a={};for(var t in e)p.call(e,t)&&n.indexOf(t)<0&&(a[t]=e[t]);if(null!=e&&o)for(var t of o(e))n.indexOf(t)<0&&y.call(e,t)&&(a[t]=e[t]);return a};const s={title:"Eq (namespace)",slug:"/rimbu/common/Eq/namespace"},c="namespace Eq",N={unversionedId:"rimbu_common/Eq/index",id:"rimbu_common/Eq/index",title:"Eq (namespace)",description:"A function returning true if given v1 and v2 should be considered equal.",source:"@site/api/rimbu_common/Eq/index.mdx",sourceDirName:"rimbu_common/Eq",slug:"/rimbu/common/Eq/namespace",permalink:"/api/rimbu/common/Eq/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"Eq (namespace)",slug:"/rimbu/common/Eq/namespace"},sidebar:"defaultSidebar",previous:{title:"Comp<K>",permalink:"/api/rimbu/common/Comp/interface"},next:{title:"objectIs",permalink:"/api/rimbu/common/Eq/objectIs/var"}},q={},f=[{value:"Functions",id:"functions",level:2},{value:"<code>anyDeepEq</code>",id:"anydeepeq",level:3},{value:"Definition",id:"definition",level:4},{value:"Type parameters",id:"type-parameters",level:5},{value:"<code>anyFlatEq</code>",id:"anyflateq",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Type parameters",id:"type-parameters-1",level:5},{value:"<code>anyJsonEq</code>",id:"anyjsoneq",level:3},{value:"Definition",id:"definition-2",level:4},{value:"<code>anyShallowEq</code>",id:"anyshalloweq",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Type parameters",id:"type-parameters-2",level:5},{value:"<code>anyToStringEq</code>",id:"anytostringeq",level:3},{value:"Definition",id:"definition-4",level:4},{value:"<code>convertAnyToString</code>",id:"convertanytostring",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Parameters",id:"parameters",level:4},{value:"<code>createStringCollatorEq</code>",id:"createstringcollatoreq",level:3},{value:"Definition",id:"definition-6",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>dateEq</code>",id:"dateeq",level:3},{value:"Definition",id:"definition-7",level:4},{value:"<code>defaultEq</code>",id:"defaulteq",level:3},{value:"Definition",id:"definition-8",level:4},{value:"<code>iterableEq</code>",id:"iterableeq",level:3},{value:"Definition",id:"definition-9",level:4},{value:"Type parameters",id:"type-parameters-3",level:5},{value:"Parameters",id:"parameters-2",level:4},{value:"<code>objectEq</code>",id:"objecteq",level:3},{value:"Definition",id:"definition-10",level:4},{value:"Type parameters",id:"type-parameters-4",level:5},{value:"Parameters",id:"parameters-3",level:4},{value:"<code>stringCaseInsentitiveEq</code>",id:"stringcaseinsentitiveeq",level:3},{value:"Definition",id:"definition-11",level:4},{value:"<code>stringCharCodeEq</code>",id:"stringcharcodeeq",level:3},{value:"Definition",id:"definition-12",level:4},{value:"<code>tupleSymmetric</code>",id:"tuplesymmetric",level:3},{value:"Definition",id:"definition-13",level:4},{value:"Type parameters",id:"type-parameters-5",level:5},{value:"Parameters",id:"parameters-4",level:4},{value:"<code>valueOfEq</code>",id:"valueofeq",level:3},{value:"Definition",id:"definition-14",level:4},{value:"Type parameters",id:"type-parameters-6",level:5},{value:"Constants",id:"constants",level:2}],h={toc:f},b="wrapper";function v(e){var n=e,{components:a}=n,l=u(n,["components"]);return(0,t.yg)(b,d(m(m({},h),l),{components:a,mdxType:"MDXLayout"}),(0,t.yg)("h1",m({},{id:"namespace-eq"}),(0,t.yg)("inlineCode",{parentName:"h1"},"namespace Eq")),(0,t.yg)("p",null,"A function returning true if given ",(0,t.yg)("inlineCode",{parentName:"p"},"v1")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"v2")," should be considered equal."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Companion type:")," ",(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/Eq/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Eq<T>"))),(0,t.yg)("h2",m({},{id:"functions"}),"Functions"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"anydeepeq"}),(0,t.yg)("inlineCode",{parentName:"h3"},"anyDeepEq")),(0,t.yg)("p",null,"Returns an Eq instance that checks equality of any values. For composed values (objects and iterables) it will recursively compare the contained values.  ")),(0,t.yg)("h4",m({},{id:"definition"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function anyDeepEq<T = any>(): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/Eq/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Eq")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,t.yg)("h5",m({},{id:"type-parameters"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"T"),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the value type")))),(0,t.yg)("admonition",m({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"may have poor performance for deeply nested types and large arrays, and objects with circular structures may cause infinite loops")),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const eq = anyFlatEq()\nconsole.log(eq(1, 'a'))\n// => false\nconsole.log(eq({ a: 1, b: 2 }, { b: 2, a: 1 }))\n// => true\nconsole.log(eq([{ a: 1, b: 2 }], [{ b: 2, a: 1 }]))\n// => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"anyflateq"}),(0,t.yg)("inlineCode",{parentName:"h3"},"anyFlatEq")),(0,t.yg)("p",null,"Returns an Eq instance that checks equality of any values. For composed values (objects and iterables) it will compare with Object.is.")),(0,t.yg)("h4",m({},{id:"definition-1"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function anyFlatEq<T = any>(): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/Eq/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Eq")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,t.yg)("h5",m({},{id:"type-parameters-1"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"T"),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the value type")))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const eq = anyFlatEq()\nconsole.log(eq(1, 'a'))\n// => false\nconsole.log(eq({ a: 1, b: 2 }, { b: 2, a: 1 }))\n// => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"anyjsoneq"}),(0,t.yg)("inlineCode",{parentName:"h3"},"anyJsonEq")),(0,t.yg)("p",null,"Returns an Eq instance that considers values equal their JSON.stringify values are equal.")),(0,t.yg)("h4",m({},{id:"definition-2"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function anyJsonEq(): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/Eq/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Eq")),(0,t.yg)("inlineCode",{parentName:"p"},"<any>;"))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const eq = Eq.anyJsonEq()\nconsole.log(eq({ a: 1, b: 2 }, { a: 1, b: 2 }))\n// => true\nconsole.log(eq({ a: 1, b: 2 }, { b: 2, a: 1 }))\n// => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"anyshalloweq"}),(0,t.yg)("inlineCode",{parentName:"h3"},"anyShallowEq")),(0,t.yg)("p",null,"Returns an Eq instance that checks equality of any values. For composed values (objects and iterables) it will enter 1 level, and if again compound values are found, they are compared with Object.is.")),(0,t.yg)("h4",m({},{id:"definition-3"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function anyShallowEq<T = any>(): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/Eq/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Eq")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,t.yg)("h5",m({},{id:"type-parameters-2"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"T"),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the value type")))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const eq = anyFlatEq()\nconsole.log(eq(1, 'a'))\n// => false\nconsole.log(eq({ a: 1, b: 2 }, { b: 2, a: 1 }))\n// => true\nconsole.log(eq([{ a: 1, b: 2 }], [{ b: 2, a: 1 }]))\n// => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"anytostringeq"}),(0,t.yg)("inlineCode",{parentName:"h3"},"anyToStringEq")),(0,t.yg)("p",null,"undocumented")),(0,t.yg)("h4",m({},{id:"definition-4"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function anyToStringEq(): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/Eq/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Eq")),(0,t.yg)("inlineCode",{parentName:"p"},"<any>;")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"convertanytostring"}),(0,t.yg)("inlineCode",{parentName:"h3"},"convertAnyToString")),(0,t.yg)("p",null,"undocumented")),(0,t.yg)("h4",m({},{id:"definition-5"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function convertAnyToString(value: any): string;"))),(0,t.yg)("h4",m({},{id:"parameters"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"value")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"any")),(0,t.yg)("td",m({parentName:"tr"},{align:null})))))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"createstringcollatoreq"}),(0,t.yg)("inlineCode",{parentName:"h3"},"createStringCollatorEq")),(0,t.yg)("p",null,"Returns an Eq instance that considers strings equal taking the given or default locale into account.")),(0,t.yg)("h4",m({},{id:"definition-6"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function createStringCollatorEq(...args: ConstructorParameters<typeof Intl.Collator>): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/Eq/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Eq")),(0,t.yg)("inlineCode",{parentName:"p"},"<string>;"))),(0,t.yg)("h4",m({},{id:"parameters-1"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"args")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"ConstructorParameters<typeof Intl.Collator>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const eq = Eq.createStringCollatorEq()\nconsole.log(eq('a', 'a'))\n// => true\nconsole.log(eq('abc', 'aBc'))\n// => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"dateeq"}),(0,t.yg)("inlineCode",{parentName:"h3"},"dateEq")),(0,t.yg)("p",null,"Returns an Eq instance that compares Date objects according to their ",(0,t.yg)("inlineCode",{parentName:"p"},"valueOf")," value.")),(0,t.yg)("h4",m({},{id:"definition-7"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function dateEq(): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/Eq/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Eq")),(0,t.yg)("inlineCode",{parentName:"p"},"<Date>;"))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const eq = Eq.dateEq()\nconsole.log(eq(new Date(2020, 1, 1), new Date(2020, 1, 1))\n// => true\nconsole.log(eq(new Date(2020, 1, 1), new Date(2020, 2, 1))\n// => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"defaulteq"}),(0,t.yg)("inlineCode",{parentName:"h3"},"defaultEq")),(0,t.yg)("p",null,"Returns the default Eq instance, which is the Eq.anyDeepEq() instance.")),(0,t.yg)("h4",m({},{id:"definition-8"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function defaultEq(): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/Eq/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Eq")),(0,t.yg)("inlineCode",{parentName:"p"},"<any>;")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"iterableeq"}),(0,t.yg)("inlineCode",{parentName:"h3"},"iterableEq")),(0,t.yg)("p",null,"Returns an Eq instance that compares Iterables by comparing their elements with the given ",(0,t.yg)("inlineCode",{parentName:"p"},"itemEq")," Eq instance.")),(0,t.yg)("h4",m({},{id:"definition-9"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function iterableEq<T>(itemEq?: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/Eq/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Eq")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/Eq/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Eq")),(0,t.yg)("inlineCode",{parentName:"p"},"<Iterable<T>>;"))),(0,t.yg)("h5",m({},{id:"type-parameters-3"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"T"),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the Iterable element type")))),(0,t.yg)("h4",m({},{id:"parameters-2"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"itemEq")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/common/Eq/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Eq")),(0,t.yg)("inlineCode",{parentName:"td"},"<T>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"(optional) the Eq instance to use to compare the Iterable's elements")))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const eq = Eq.iterableEq();\nconsole.log(eq([1, 2, 3], [1, 2, 3])\n// => true\nconsole.log(eq([1, 2, 3], [1, 3, 2])\n// => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"objecteq"}),(0,t.yg)("inlineCode",{parentName:"h3"},"objectEq")),(0,t.yg)("p",null,"Returns an Eq instance that checks equality of objects containing property values of type V by iteratively applying given ",(0,t.yg)("inlineCode",{parentName:"p"},"valueEq")," to each of the object's property values.")),(0,t.yg)("h4",m({},{id:"definition-10"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function objectEq<V = any>(valueEq?: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/Eq/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Eq")),(0,t.yg)("inlineCode",{parentName:"p"},"<V>): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/Eq/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Eq")),(0,t.yg)("inlineCode",{parentName:"p"},"<Record<any, V>>;"))),(0,t.yg)("h5",m({},{id:"type-parameters-4"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"V"),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",m({},{id:"parameters-3"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"valueEq")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/common/Eq/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Eq")),(0,t.yg)("inlineCode",{parentName:"td"},"<V>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"(optional) the Eq instance to use to compare property values")))),(0,t.yg)("admonition",m({},{title:"typeparam",type:"note"}),(0,t.yg)("ul",{parentName:"admonition"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"the object property value type"))))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const eq = Eq.objectEq()\nconsole.log(eq({ a: 1, b: { c: 2 }}, { b: { c: 2 }, a: 1 }))\n// => true\nconsole.log(eq({ a: 1, b: { c: 2 }}, { a: 1, b: { c: 3 }}))\n// => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"stringcaseinsentitiveeq"}),(0,t.yg)("inlineCode",{parentName:"h3"},"stringCaseInsentitiveEq")),(0,t.yg)("p",null,"Returns an Eq instance that considers strings equal regardless of their case.")),(0,t.yg)("h4",m({},{id:"definition-11"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function stringCaseInsentitiveEq(): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/Eq/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Eq")),(0,t.yg)("inlineCode",{parentName:"p"},"<string>;"))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const eq = Eq.stringCaseInsentitiveEq()\nconsole.log(eq('aB', 'Ab'))\n// => true\nconsole.log(eq('aBc', 'abB'))\n// => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"stringcharcodeeq"}),(0,t.yg)("inlineCode",{parentName:"h3"},"stringCharCodeEq")),(0,t.yg)("p",null,"Returns an Eq instance that considers strings equal when all their charcodes are equal.")),(0,t.yg)("h4",m({},{id:"definition-12"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function stringCharCodeEq(): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/Eq/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Eq")),(0,t.yg)("inlineCode",{parentName:"p"},"<string>;"))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const eq = Eq.stringCharCodeEq()\nconsole.log(eq('a', 'a'))\n// => true\nconsole.log(eq('abc', 'aBc'))\n// => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"tuplesymmetric"}),(0,t.yg)("inlineCode",{parentName:"h3"},"tupleSymmetric")),(0,t.yg)("p",null,"Returns an ",(0,t.yg)("inlineCode",{parentName:"p"},"Eq")," instance for tuples that considers two tuples ","[A, B]"," and ","[C, D]"," equal if ","[A, B]"," equals ","[C, D]",", or if ","[A, B]"," equals ","[D, C]")),(0,t.yg)("h4",m({},{id:"definition-13"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function tupleSymmetric<T>(eq?: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/Eq/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Eq")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/Eq/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Eq")),(0,t.yg)("inlineCode",{parentName:"p"},"<readonly [T, T]>;"))),(0,t.yg)("h5",m({},{id:"type-parameters-5"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"T"),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",m({},{id:"parameters-4"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"eq")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/common/Eq/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Eq")),(0,t.yg)("inlineCode",{parentName:"td"},"<T>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"(optional) an alternative ",(0,t.yg)("inlineCode",{parentName:"td"},"Eq")," instance to use for the values in the tuple")))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const eq = Eq.tupleSymmetric()\nconsole.log(eq([1, 2], [1, 2]))\n// => true\nconsole.log(eq([1, 2], [2, 1]))\n// => true\nconsole.log(eq([1, 3], [2, 1]))\n// => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"valueofeq"}),(0,t.yg)("inlineCode",{parentName:"h3"},"valueOfEq")),(0,t.yg)("p",null,"Returns an Eq instance for objects that have a ",(0,t.yg)("inlineCode",{parentName:"p"},"valueOf")," method. It returns true if the ",(0,t.yg)("inlineCode",{parentName:"p"},".valueOf")," values of both given objects are equal.")),(0,t.yg)("h4",m({},{id:"definition-14"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function valueOfEq<T extends {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"valueOf(): V;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}, V>(): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/Eq/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"Eq")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,t.yg)("h5",m({},{id:"type-parameters-6"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"T"),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the object type containing a valueOf function of type V")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"V"),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the valueOf result type")))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const eq = Eq.valueOfEq()\nconsole.log(eq(new Number(5), new Number(5)))\n// => true\nconsole.log(eq(new Number(5), new Number(3)))\n// => false\n")))),(0,t.yg)("h2",m({},{id:"constants"}),"Constants"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"objectIs"),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"An Eq instance that uses ",(0,t.yg)("inlineCode",{parentName:"td"},"Object.is")," to determine if two objects are equal.")))))}v.isMDXComponent=!0}}]);