"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[48589],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>N});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var o=a.createContext({}),m=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=m(e.components);return a.createElement(o.Provider,{value:t},e.children)},u="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),u=m(n),s=l,N=u["".concat(o,".").concat(s)]||u[s]||k[s]||r;return n?a.createElement(N,i(i({ref:t},d),{},{components:n})):a.createElement(N,i({ref:t},d))}));function N(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=s;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[u]="string"==typeof e?e:l,i[1]=p;for(var m=2;m<r;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},28240:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>c,default:()=>v,frontMatter:()=>N,metadata:()=>y,toc:()=>f});var a=n(3905),l=Object.defineProperty,r=Object.defineProperties,i=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable,d=(e,t,n)=>t in e?l(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,u=(e,t)=>{for(var n in t||(t={}))o.call(t,n)&&d(e,n,t[n]);if(p)for(var n of p(t))m.call(t,n)&&d(e,n,t[n]);return e},k=(e,t)=>r(e,i(t)),s=(e,t)=>{var n={};for(var a in e)o.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&p)for(var a of p(e))t.indexOf(a)<0&&m.call(e,a)&&(n[a]=e[a]);return n};const N={title:"ContextBase<UK,Tp>",slug:"/rimbu/collection-types/map-custom/RMapBase/ContextBase/class"},c="class ContextBase<UK,Tp>",y={unversionedId:"rimbu_collection-types/map-custom/RMapBase/ContextBase.class",id:"rimbu_collection-types/map-custom/RMapBase/ContextBase.class",title:"ContextBase<UK,Tp>",description:"undocumented",source:"@site/api/rimbu_collection-types/map-custom/RMapBase/ContextBase.class.mdx",sourceDirName:"rimbu_collection-types/map-custom/RMapBase",slug:"/rimbu/collection-types/map-custom/RMapBase/ContextBase/class",permalink:"/api/rimbu/collection-types/map-custom/RMapBase/ContextBase/class",draft:!1,tags:[],version:"current",frontMatter:{title:"ContextBase<UK,Tp>",slug:"/rimbu/collection-types/map-custom/RMapBase/ContextBase/class"},sidebar:"defaultSidebar",previous:{title:"RMapBase.Context<UK,Tp>",permalink:"/api/rimbu/collection-types/map-custom/RMapBase/Context/interface"},next:{title:"RMapBase.Factory<Tp,UK>",permalink:"/api/rimbu/collection-types/map-custom/RMapBase/Factory/interface"}},h={},f=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>_empty</code>",id:"_empty",level:3},{value:"Definition",id:"definition",level:4},{value:"<code>_fixedKeyType</code>",id:"_fixedkeytype",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Overrides",id:"overrides",level:4},{value:"<code>_types</code>",id:"_types",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"<code>builder</code>",id:"builder",level:3},{value:"Definition",id:"definition-3",level:4},{value:"<code>empty</code>",id:"empty",level:3},{value:"Definition",id:"definition-4",level:4},{value:"<code>from</code>",id:"from",level:3},{value:"Definition",id:"definition-5",level:4},{value:"<code>merge</code>",id:"merge",level:3},{value:"Definition",id:"definition-6",level:4},{value:"<code>mergeAll</code>",id:"mergeall",level:3},{value:"Definition",id:"definition-7",level:4},{value:"<code>mergeAllWith</code>",id:"mergeallwith",level:3},{value:"Definition",id:"definition-8",level:4},{value:"<code>mergeWith</code>",id:"mergewith",level:3},{value:"Definition",id:"definition-9",level:4},{value:"<code>of</code>",id:"of",level:3},{value:"Definition",id:"definition-10",level:4},{value:"<code>reducer</code>",id:"reducer",level:3},{value:"Definition",id:"definition-11",level:4},{value:"<code>typeTag</code>",id:"typetag",level:3},{value:"Definition",id:"definition-12",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"Methods",id:"methods",level:2},{value:"<code>builder</code>",id:"builder-1",level:3},{value:"Definition",id:"definition-13",level:4},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"<code>empty</code>",id:"empty-1",level:3},{value:"Definition",id:"definition-14",level:4},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"Overrides",id:"overrides-4",level:4},{value:"<code>from</code>",id:"from-1",level:3},{value:"Definitions",id:"definitions",level:4},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Overrides",id:"overrides-5",level:4},{value:"<code>isNonEmptyInstance</code>",id:"isnonemptyinstance",level:3},{value:"Definition",id:"definition-15",level:4},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>isValidKey</code>",id:"isvalidkey",level:3},{value:"Definition",id:"definition-16",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Overrides",id:"overrides-6",level:4},{value:"<code>merge</code>",id:"merge-1",level:3},{value:"Definitions",id:"definitions-1",level:4},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Overrides",id:"overrides-7",level:4},{value:"<code>mergeAll</code>",id:"mergeall-1",level:3},{value:"Definitions",id:"definitions-2",level:4},{value:"Type parameters",id:"type-parameters-6",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"Overrides",id:"overrides-8",level:4},{value:"<code>mergeAllWith</code>",id:"mergeallwith-1",level:3},{value:"Definitions",id:"definitions-3",level:4},{value:"Type parameters",id:"type-parameters-7",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"Overrides",id:"overrides-9",level:4},{value:"<code>mergeWith</code>",id:"mergewith-1",level:3},{value:"Definitions",id:"definitions-4",level:4},{value:"Type parameters",id:"type-parameters-8",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"Overrides",id:"overrides-10",level:4},{value:"<code>of</code>",id:"of-1",level:3},{value:"Definition",id:"definition-17",level:4},{value:"Type parameters",id:"type-parameters-9",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"Overrides",id:"overrides-11",level:4},{value:"<code>reducer</code>",id:"reducer-1",level:3},{value:"Definition",id:"definition-18",level:4},{value:"Type parameters",id:"type-parameters-10",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"Overrides",id:"overrides-12",level:4}],g={toc:f},b="wrapper";function v(e){var t=e,{components:n}=t,l=s(t,["components"]);return(0,a.kt)(b,k(u(u({},g),l),{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",u({},{id:"class-contextbaseuktp"}),(0,a.kt)("inlineCode",{parentName:"h1"},"class ContextBase<UK,Tp>")),(0,a.kt)("p",null,"undocumented"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Implements:")," ",(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Context/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"RMapBase.Context<UK,Tp>"))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Extended by:")," ",(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/sorted/map-custom/SortedMapContext/class"}),(0,a.kt)("inlineCode",{parentName:"a"},"SortedMapContext<UK>")),", ",(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/hashed/map-custom/HashMapContext/class"}),(0,a.kt)("inlineCode",{parentName:"a"},"HashMapContext<UK>")),", ",(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/ordered/map-custom/OrderedMapContextImpl/class"}),(0,a.kt)("inlineCode",{parentName:"a"},"OrderedMapContextImpl<UK,Tp>")),", ",(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/proximity/map-custom/ProximityMapContext/class"}),(0,a.kt)("inlineCode",{parentName:"a"},"ProximityMapContext<UK>"))),(0,a.kt)("h2",u({},{id:"type-parameters"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Constraints"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Default"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"UK"),(0,a.kt)("td",u({parentName:"tr"},{align:null})),(0,a.kt)("td",u({parentName:"tr"},{align:null})),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"Tp"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Types/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"RMapBase.Types"))),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Types/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"RMapBase.Types"))),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")))),(0,a.kt)("h2",u({},{id:"properties"}),"Properties"),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"_empty"}),(0,a.kt)("inlineCode",{parentName:"h3"},"_empty")),(0,a.kt)("p",null,"undocumented")),(0,a.kt)("h4",u({},{id:"definition"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"abstract get _empty(): (Tp & "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/KeyValue/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"KeyValue")),(0,a.kt)("inlineCode",{parentName:"p"},"<any, any>)['normal'];")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"_fixedkeytype"}),(0,a.kt)("inlineCode",{parentName:"h3"},"_fixedKeyType")),(0,a.kt)("p",null,"undocumented")),(0,a.kt)("h4",u({},{id:"definition-1"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"_fixedKeyType: any;"))),(0,a.kt)("h4",u({},{id:"overrides"}),"Overrides"),(0,a.kt)("p",null,(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Context/interface#_fixedKeyType"}),"Context._fixedKeyType"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"_types"}),(0,a.kt)("inlineCode",{parentName:"h3"},"_types")),(0,a.kt)("p",null,"undocumented")),(0,a.kt)("h4",u({},{id:"definition-2"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"get _types(): Tp;"))),(0,a.kt)("h4",u({},{id:"overrides-1"}),"Overrides"),(0,a.kt)("p",null,(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Context/interface#_types"}),"Context._types"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"builder"}),(0,a.kt)("inlineCode",{parentName:"h3"},"builder")),(0,a.kt)("p",null,"undocumented")),(0,a.kt)("h4",u({},{id:"definition-3"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"abstract builder: <K extends UK, V>() => "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,a.kt)("inlineCode",{parentName:"p"},"<Tp, K, V>['builder'];")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"empty"}),(0,a.kt)("inlineCode",{parentName:"h3"},"empty")),(0,a.kt)("p",null,"undocumented")),(0,a.kt)("h4",u({},{id:"definition-4"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"readonly empty: <K extends UK, V>() => "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,a.kt)("inlineCode",{parentName:"p"},'<Tp, K, V>["normal"];')))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"from"}),(0,a.kt)("inlineCode",{parentName:"h3"},"from")),(0,a.kt)("p",null,"undocumented")),(0,a.kt)("h4",u({},{id:"definition-5"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"readonly from: any;")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"merge"}),(0,a.kt)("inlineCode",{parentName:"h3"},"merge")),(0,a.kt)("p",null,"undocumented")),(0,a.kt)("h4",u({},{id:"definition-6"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"readonly merge: any;")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"mergeall"}),(0,a.kt)("inlineCode",{parentName:"h3"},"mergeAll")),(0,a.kt)("p",null,"undocumented")),(0,a.kt)("h4",u({},{id:"definition-7"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"readonly mergeAll: any;")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"mergeallwith"}),(0,a.kt)("inlineCode",{parentName:"h3"},"mergeAllWith")),(0,a.kt)("p",null,"undocumented")),(0,a.kt)("h4",u({},{id:"definition-8"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"readonly mergeAllWith: any;")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"mergewith"}),(0,a.kt)("inlineCode",{parentName:"h3"},"mergeWith")),(0,a.kt)("p",null,"undocumented")),(0,a.kt)("h4",u({},{id:"definition-9"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"readonly mergeWith: any;")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"of"}),(0,a.kt)("inlineCode",{parentName:"h3"},"of")),(0,a.kt)("p",null,"undocumented")),(0,a.kt)("h4",u({},{id:"definition-10"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"readonly of: <K extends UK, V>(values_0: readonly [K, V], ...values_1: (readonly [K, V])[]) => K extends UK ? "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,a.kt)("inlineCode",{parentName:"p"},'<Tp, K, V>["nonEmpty"] : never;')))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"reducer"}),(0,a.kt)("inlineCode",{parentName:"h3"},"reducer")),(0,a.kt)("p",null,"undocumented")),(0,a.kt)("h4",u({},{id:"definition-11"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"readonly reducer: <K extends UK, V>(source?: "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,a.kt)("inlineCode",{parentName:"p"},"<readonly [K, V]>) => Reducer<readonly [K, V], "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,a.kt)("inlineCode",{parentName:"p"},'<Tp, K, V>["normal"]>;')))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"typetag"}),(0,a.kt)("inlineCode",{parentName:"h3"},"typeTag")),(0,a.kt)("p",null,"undocumented")),(0,a.kt)("h4",u({},{id:"definition-12"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"abstract get typeTag(): string;"))),(0,a.kt)("h4",u({},{id:"overrides-2"}),"Overrides"),(0,a.kt)("p",null,(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Context/interface#typeTag"}),"Context.typeTag"))),(0,a.kt)("h2",u({},{id:"methods"}),"Methods"),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"builder-1"}),(0,a.kt)("inlineCode",{parentName:"h3"},"builder")),(0,a.kt)("p",null,"Returns an empty builder instance for this type of collection and context.")),(0,a.kt)("h4",u({},{id:"definition-13"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"builder<K extends UK, V>(): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,a.kt)("inlineCode",{parentName:"p"},"<Tp, K, V>['builder'];"))),(0,a.kt)("h4",u({},{id:"type-parameters-1"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Constraints"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"K"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"UK")),(0,a.kt)("td",u({parentName:"tr"},{align:null}))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"V"),(0,a.kt)("td",u({parentName:"tr"},{align:null})),(0,a.kt)("td",u({parentName:"tr"},{align:null}))))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"HashMap.builder<number, string>()    // => HashMap.Builder<number, string>\n"))),(0,a.kt)("h4",u({},{id:"overrides-3"}),"Overrides"),(0,a.kt)("p",null,(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Factory/interface#builder"}),"Factory.builder"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"empty-1"}),(0,a.kt)("inlineCode",{parentName:"h3"},"empty")),(0,a.kt)("p",null,"Returns the (singleton) empty instance of this type and context with given key and value types.")),(0,a.kt)("h4",u({},{id:"definition-14"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"empty<K extends UK, V>(): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,a.kt)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,a.kt)("h4",u({},{id:"type-parameters-2"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Constraints"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"K"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"UK")),(0,a.kt)("td",u({parentName:"tr"},{align:null}))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"V"),(0,a.kt)("td",u({parentName:"tr"},{align:null})),(0,a.kt)("td",u({parentName:"tr"},{align:null}))))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"HashMap.empty<number, string>()    // => HashMap<number, string>\nHashMap.empty<string, boolean>()   // => HashMap<string, boolean>\n"))),(0,a.kt)("h4",u({},{id:"overrides-4"}),"Overrides"),(0,a.kt)("p",null,(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Factory/interface#empty"}),"Factory.empty"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"from-1"}),(0,a.kt)("inlineCode",{parentName:"h3"},"from")),(0,a.kt)("p",null,"Returns an immutable map of this type and context, containing the entries in the given ",(0,a.kt)("inlineCode",{parentName:"p"},"sources")," ",(0,a.kt)("inlineCode",{parentName:"p"},"StreamSource")," instances.")),(0,a.kt)("h4",u({},{id:"definitions"}),"Definitions"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"from<K extends UK, V>(...sources: ArrayNonEmpty<"),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,a.kt)("inlineCode",{parentName:"p"},"<readonly [K, V]>>): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,a.kt)("inlineCode",{parentName:"p"},"<Tp, K, V>['nonEmpty'];"))),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"from<K, V>(...sources: ArrayNonEmpty<"),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,a.kt)("inlineCode",{parentName:"p"},"<readonly [K, V]>>): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,a.kt)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,a.kt)("h4",u({},{id:"type-parameters-3"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Constraints"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"K"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"UK")),(0,a.kt)("td",u({parentName:"tr"},{align:null}))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"V"),(0,a.kt)("td",u({parentName:"tr"},{align:null})),(0,a.kt)("td",u({parentName:"tr"},{align:null}))))),(0,a.kt)("h4",u({},{id:"parameters"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"sources")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"ArrayNonEmpty<"),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,a.kt)("inlineCode",{parentName:"td"},"<readonly [K, V]>>")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"an array of ",(0,a.kt)("inlineCode",{parentName:"td"},"StreamSource")," instances containing key-value entries")))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"HashMap.from([[1, 'a'], [2, 'b']])    // => HashMap.NonEmpty<number, string>\n"))),(0,a.kt)("h4",u({},{id:"overrides-5"}),"Overrides"),(0,a.kt)("p",null,(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Factory/interface#from"}),"Factory.from"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"isnonemptyinstance"}),(0,a.kt)("inlineCode",{parentName:"h3"},"isNonEmptyInstance")),(0,a.kt)("p",null,"undocumented")),(0,a.kt)("h4",u({},{id:"definition-15"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"abstract isNonEmptyInstance<K, V>(source: any): source is "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,a.kt)("inlineCode",{parentName:"p"},"<Tp, K, V>['nonEmpty'];"))),(0,a.kt)("h4",u({},{id:"type-parameters-4"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"K"),(0,a.kt)("td",u({parentName:"tr"},{align:null}))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"V"),(0,a.kt)("td",u({parentName:"tr"},{align:null}))))),(0,a.kt)("h4",u({},{id:"parameters-1"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"source")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"any")),(0,a.kt)("td",u({parentName:"tr"},{align:null})))))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"isvalidkey"}),(0,a.kt)("inlineCode",{parentName:"h3"},"isValidKey")),(0,a.kt)("p",null,"undocumented")),(0,a.kt)("h4",u({},{id:"definition-16"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"abstract isValidKey(key: any): key is UK;"))),(0,a.kt)("h4",u({},{id:"parameters-2"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"key")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"any")),(0,a.kt)("td",u({parentName:"tr"},{align:null}))))),(0,a.kt)("h4",u({},{id:"overrides-6"}),"Overrides"),(0,a.kt)("p",null,(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Context/interface#isValidKey"}),"Context.isValidKey"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"merge-1"}),(0,a.kt)("inlineCode",{parentName:"h3"},"merge")),(0,a.kt)("p",null,"Returns a Map containing the common keys from this map and all the given ",(0,a.kt)("inlineCode",{parentName:"p"},"sources")," key-value stream sources, and as values tuples of all the corresponding values for each common key. If a source doesn't have a key, the key will be skipped.")),(0,a.kt)("h4",u({},{id:"definitions-1"}),"Definitions"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"merge<K extends UK, I extends readonly [unknown, unknown, ...unknown[]]>(...sources: {"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"[KT in keyof I]: "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,a.kt)("inlineCode",{parentName:"p"},"<readonly [K, I[KT]]>;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"} & unknown[]): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,a.kt)("inlineCode",{parentName:"p"},"<Tp, K, {"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"[KT in keyof I]: I[KT];"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"}>['nonEmpty'];"))),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"merge<K extends UK, I extends readonly [unknown, unknown, ...unknown[]]>(...sources: {"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"[KT in keyof I]: "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,a.kt)("inlineCode",{parentName:"p"},"<readonly [K, I[KT]]>;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"} & unknown[]): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,a.kt)("inlineCode",{parentName:"p"},"<Tp, K, {"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"[KT in keyof I]: I[KT];"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"}>['normal'];"))),(0,a.kt)("h4",u({},{id:"type-parameters-5"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Constraints"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"K"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"UK")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the common key type")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"I"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"readonly [unknown, unknown, ...unknown[]]")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the array of input source value types")))),(0,a.kt)("h4",u({},{id:"parameters-3"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"sources")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"{"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"[KT in keyof I]: "),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,a.kt)("inlineCode",{parentName:"td"},"<readonly [K, I[KT]]>;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"} & unknown[]")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"a non-empty set of StreamSouces containing tuples of keys and values")))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b'])\nconst m2 = HashMap.merge(m, [[2, true]], HashMap.of([2, 15]))\n// type of m2: HashMap<number, [string, boolean, number]>\nconsole.log(m2.toArray())\n// => [[2, ['b', true, 15]]]\n"))),(0,a.kt)("h4",u({},{id:"overrides-7"}),"Overrides"),(0,a.kt)("p",null,(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Factory/interface#merge"}),"Factory.merge"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"mergeall-1"}),(0,a.kt)("inlineCode",{parentName:"h3"},"mergeAll")),(0,a.kt)("p",null,"Returns a Map containing all keys from this map and all the given ",(0,a.kt)("inlineCode",{parentName:"p"},"sources")," key-value stream sources, and as values tuples of all the corresponding values for each key. If a source doesn't have a key, the tuple will be filled with the given ",(0,a.kt)("inlineCode",{parentName:"p"},"fillValue"),".")),(0,a.kt)("h4",u({},{id:"definitions-2"}),"Definitions"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"mergeAll<O, I extends readonly [unknown, unknown, ...unknown[]], K extends UK>(fillValue: O, ...sources: {"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"[KT in keyof I]: "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,a.kt)("inlineCode",{parentName:"p"},"<readonly [K, I[KT]]>;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"} & unknown[]): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,a.kt)("inlineCode",{parentName:"p"},"<Tp, K, {"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"[KT in keyof I]: I[KT] "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," O;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"}>['nonEmpty'];"))),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"mergeAll<O, I extends readonly [unknown, unknown, ...unknown[]], K extends UK>(fillValue: O, ...sources: {"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"[KT in keyof I]: "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,a.kt)("inlineCode",{parentName:"p"},"<readonly [K, I[KT]]>;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"} & unknown[]): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,a.kt)("inlineCode",{parentName:"p"},"<Tp, K, {"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"[KT in keyof I]: I[KT] "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," O;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"}>['normal'];"))),(0,a.kt)("h4",u({},{id:"type-parameters-6"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Constraints"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"O"),(0,a.kt)("td",u({parentName:"tr"},{align:null})),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the type of the fill value")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"I"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"readonly [unknown, unknown, ...unknown[]]")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the array of input source value types")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"K"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"UK")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the common key type")))),(0,a.kt)("h4",u({},{id:"parameters-4"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"fillValue")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"O")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the value to use for the result tuple if a source does not have a certain key")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"sources")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"{"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"[KT in keyof I]: "),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,a.kt)("inlineCode",{parentName:"td"},"<readonly [K, I[KT]]>;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"} & unknown[]")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"a non-empty set of StreamSouces containing tuples of keys and values")))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b'])\nconst m2 = HashMap.mergeAll('none', m, [[2, true]], HashMap.of([3, 15]))\n// type of m2: HashMap<number, [string, boolean | string, number | string]>\nconsole.log(m2.toArray())\n// => [[1, ['a', 'none', 'none']], [2, ['b', true, 'none']], [3, ['none', 'none', 15]]]\n"))),(0,a.kt)("h4",u({},{id:"overrides-8"}),"Overrides"),(0,a.kt)("p",null,(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Factory/interface#mergeAll"}),"Factory.mergeAll"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"mergeallwith-1"}),(0,a.kt)("inlineCode",{parentName:"h3"},"mergeAllWith")),(0,a.kt)("p",null,"Returns a Map containing all keys from this map and all the given ",(0,a.kt)("inlineCode",{parentName:"p"},"sources")," key-value stream sources, and as values the result of applying the given ",(0,a.kt)("inlineCode",{parentName:"p"},"mergeFun")," to the key and all the corresponding values for each key. If a source doesn't have a key, the given tuple will be filled with the given ",(0,a.kt)("inlineCode",{parentName:"p"},"fillValue"),".")),(0,a.kt)("h4",u({},{id:"definitions-3"}),"Definitions"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"mergeAllWith<I extends readonly [unknown, unknown, ...unknown[]], K extends UK>(...sources: {"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"[KT in keyof I]: "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,a.kt)("inlineCode",{parentName:"p"},"<readonly [K, I[KT]]>;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"} & unknown[]): <O, R>(fillValue: O, mergeFun: (key: K, ...values: {"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"[KT in keyof I]: I[KT] "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," O;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"}) => R) => "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,a.kt)("inlineCode",{parentName:"p"},"<Tp, K, R>['nonEmpty'];"))),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"mergeAllWith<I extends readonly [unknown, unknown, ...unknown[]], K extends UK>(...sources: {"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"[KT in keyof I]: "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,a.kt)("inlineCode",{parentName:"p"},"<readonly [K, I[KT]]>;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"} & unknown[]): <O, R>(fillValue: O, mergeFun: (key: K, ...values: {"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"[KT in keyof I]: I[KT] "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," O;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"}) => R) => "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,a.kt)("inlineCode",{parentName:"p"},"<Tp, K, R>['normal'];"))),(0,a.kt)("h4",u({},{id:"type-parameters-7"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Constraints"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"I"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"readonly [unknown, unknown, ...unknown[]]")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the array of input source value types")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"K"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"UK")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the common key type")))),(0,a.kt)("h4",u({},{id:"parameters-5"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"sources")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"{"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"[KT in keyof I]: "),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,a.kt)("inlineCode",{parentName:"td"},"<readonly [K, I[KT]]>;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"} & unknown[]")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"a non-empty set of StreamSouces containing tuples of keys and values")))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b'])\nconst m2 = HashMap.mergeAllWith(\nm\n[[2, 'c']],\nHashMap.of([3, 'd'])\n)(\n'q',\n(key, v1, v2, v3) => `${key}${v1}${v2}${v3}`\n)\n// type of m2: HashMap<number, string>\nconsole.log(m2.toArray())\n// => [[1, '1aqq'], [2, '2bcq'], [3, '3qqd']]\n"))),(0,a.kt)("h4",u({},{id:"overrides-9"}),"Overrides"),(0,a.kt)("p",null,(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Factory/interface#mergeAllWith"}),"Factory.mergeAllWith"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"mergewith-1"}),(0,a.kt)("inlineCode",{parentName:"h3"},"mergeWith")),(0,a.kt)("p",null,"Returns a Map containing the common keys from this map and all the given ",(0,a.kt)("inlineCode",{parentName:"p"},"sources")," key-value stream sources, and as values the result of applying given ",(0,a.kt)("inlineCode",{parentName:"p"},"mergeFun")," to the key and values of all the corresponding values for each common key. If a source doesn't have a key, the key will be skipped.")),(0,a.kt)("h4",u({},{id:"definitions-4"}),"Definitions"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"mergeWith<I extends readonly [unknown, unknown, ...unknown[]], K extends UK>(...sources: {"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"[KT in keyof I]: "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,a.kt)("inlineCode",{parentName:"p"},"<readonly [K, I[KT]]>;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"} & unknown[]): <R>(mergeFun: (key: K, ...values: I) => R) => "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,a.kt)("inlineCode",{parentName:"p"},"<Tp, K, R>['nonEmpty'];"))),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"mergeWith<I extends readonly [unknown, unknown, ...unknown[]], K extends UK>(...sources: {"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"[KT in keyof I]: "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,a.kt)("inlineCode",{parentName:"p"},"<readonly [K, I[KT]]>;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"} & unknown[]): <R>(mergeFun: (key: K, ...values: I) => R) => "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,a.kt)("inlineCode",{parentName:"p"},"<Tp, K, R>['normal'];"))),(0,a.kt)("h4",u({},{id:"type-parameters-8"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Constraints"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"I"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"readonly [unknown, unknown, ...unknown[]]")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the array of input source value types")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"K"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"UK")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the common key type")))),(0,a.kt)("h4",u({},{id:"parameters-6"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"sources")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"{"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"[KT in keyof I]: "),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,a.kt)("inlineCode",{parentName:"td"},"<readonly [K, I[KT]]>;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"} & unknown[]")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"a non-empty set of StreamSouces containing tuples of keys and values")))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b'])\nconst m2 = HashMap.mergeWith(\nm,\n[[2, true]],\nHashMap.of([2, 15])\n)(\n(key, v1, v2) => `${key}${v1}${v2}`,\n)\n// type of m2: HashMap<number, string>\nconsole.log(m2.toArray())\n// => [[2, '2true15']]\n"))),(0,a.kt)("h4",u({},{id:"overrides-10"}),"Overrides"),(0,a.kt)("p",null,(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Factory/interface#mergeWith"}),"Factory.mergeWith"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"of-1"}),(0,a.kt)("inlineCode",{parentName:"h3"},"of")),(0,a.kt)("p",null,"Returns an immutable map of this collection type and context, containing the given ",(0,a.kt)("inlineCode",{parentName:"p"},"entries"),".")),(0,a.kt)("h4",u({},{id:"definition-17"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"of<K extends UK, V>(...entries: ArrayNonEmpty<readonly [K, V]>): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,a.kt)("inlineCode",{parentName:"p"},"<Tp, K, V>['nonEmpty'];"))),(0,a.kt)("h4",u({},{id:"type-parameters-9"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Constraints"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"K"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"UK")),(0,a.kt)("td",u({parentName:"tr"},{align:null}))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"V"),(0,a.kt)("td",u({parentName:"tr"},{align:null})),(0,a.kt)("td",u({parentName:"tr"},{align:null}))))),(0,a.kt)("h4",u({},{id:"parameters-7"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"entries")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"ArrayNonEmpty<readonly [K, V]>")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"a non-empty array of key-value entries")))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 'a'], [2, 'b'])    // => HashMap.NonEmpty<number, string>\n"))),(0,a.kt)("h4",u({},{id:"overrides-11"}),"Overrides"),(0,a.kt)("p",null,(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Factory/interface#of"}),"Factory.of"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"reducer-1"}),(0,a.kt)("inlineCode",{parentName:"h3"},"reducer")),(0,a.kt)("p",null,"Returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"Reducer")," that adds received tuples to an RMap and returns the RMap as a result. When a ",(0,a.kt)("inlineCode",{parentName:"p"},"source")," is given, the reducer will first create an RMap from the source, and then add tuples to it.")),(0,a.kt)("h4",u({},{id:"definition-18"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"reducer<K extends UK, V>(source?: "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,a.kt)("inlineCode",{parentName:"p"},"<readonly [K, V]>): Reducer<readonly [K, V], "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/WithKeyValue/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,a.kt)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal']>;"))),(0,a.kt)("h4",u({},{id:"type-parameters-10"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Constraints"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"K"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"UK")),(0,a.kt)("td",u({parentName:"tr"},{align:null}))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"V"),(0,a.kt)("td",u({parentName:"tr"},{align:null})),(0,a.kt)("td",u({parentName:"tr"},{align:null}))))),(0,a.kt)("h4",u({},{id:"parameters-8"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"source")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,a.kt)("inlineCode",{parentName:"td"},"<readonly [K, V]>")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"(optional) an initial source of tuples to add to")))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"const someSource = HashMap.of([1, 'a'], [2, 'b']);\nconst result = Stream.of([1, 'c'], [3, 'a']).reduce(HashMap.reducer(someSource))\nresult.toArray()   // => [[1, 'c'], [2, 'b'], [3, 'a']]\n"))),(0,a.kt)("admonition",u({},{title:"note",type:"note"}),(0,a.kt)("p",{parentName:"admonition"},"uses a builder under the hood. If the given ",(0,a.kt)("inlineCode",{parentName:"p"},"source")," is an RMap in the same context, it will directly call ",(0,a.kt)("inlineCode",{parentName:"p"},".toBuilder()"),".")),(0,a.kt)("h4",u({},{id:"overrides-12"}),"Overrides"),(0,a.kt)("p",null,(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Factory/interface#reducer"}),"Factory.reducer"))))}v.isMDXComponent=!0}}]);