"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[74591],{15680:(e,n,t)=>{t.d(n,{xA:()=>m,yg:()=>s});var i=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=i.createContext({}),u=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=u(e.components);return i.createElement(c.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},f=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),p=u(t),f=a,s=p["".concat(c,".").concat(f)]||p[f]||d[f]||r;return t?i.createElement(s,l(l({ref:n},m),{},{components:t})):i.createElement(s,l({ref:n},m))}));function s(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=f;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o[p]="string"==typeof e?e:a,l[1]=o;for(var u=2;u<r;u++)l[u]=t[u];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}f.displayName="MDXCreateElement"},39675:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>g,contentTitle:()=>h,default:()=>O,frontMatter:()=>s,metadata:()=>y,toc:()=>v});var i=t(15680),a=Object.defineProperty,r=Object.defineProperties,l=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,c=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,m=(e,n,t)=>n in e?a(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,p=(e,n)=>{for(var t in n||(n={}))c.call(n,t)&&m(e,t,n[t]);if(o)for(var t of o(n))u.call(n,t)&&m(e,t,n[t]);return e},d=(e,n)=>r(e,l(n)),f=(e,n)=>{var t={};for(var i in e)c.call(e,i)&&n.indexOf(i)<0&&(t[i]=e[i]);if(null!=e&&o)for(var i of o(e))n.indexOf(i)<0&&u.call(e,i)&&(t[i]=e[i]);return t};const s={title:"RemoteChannel.WriteConfig",slug:"/rimbu/channel/RemoteChannel/WriteConfig/interface"},h="interface RemoteChannel.WriteConfig",y={unversionedId:"rimbu_channel/RemoteChannel/WriteConfig.interface",id:"rimbu_channel/RemoteChannel/WriteConfig.interface",title:"RemoteChannel.WriteConfig",description:"Interface defining the write configuration for a RemoteChannel.",source:"@site/api/rimbu_channel/RemoteChannel/WriteConfig.interface.mdx",sourceDirName:"rimbu_channel/RemoteChannel",slug:"/rimbu/channel/RemoteChannel/WriteConfig/interface",permalink:"/api/rimbu/channel/RemoteChannel/WriteConfig/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"RemoteChannel.WriteConfig",slug:"/rimbu/channel/RemoteChannel/WriteConfig/interface"},sidebar:"defaultSidebar",previous:{title:"RemoteChannel.SimpleMessagePort",permalink:"/api/rimbu/channel/RemoteChannel/SimpleMessagePort/interface"},next:{title:"RemoteChannelClient (namespace)",permalink:"/api/rimbu/channel/RemoteChannelClient/namespace"}},g={},v=[{value:"Properties",id:"properties",level:2},{value:"<code>capacity</code>",id:"capacity",level:3},{value:"Definition",id:"definition",level:4},{value:"<code>channelId</code>",id:"channelid",level:3},{value:"Definition",id:"definition-1",level:4},{value:"<code>handshakeAttemptTimeoutMs</code>",id:"handshakeattempttimeoutms",level:3},{value:"Definition",id:"definition-2",level:4},{value:"<code>maxHandshakeAttempts</code>",id:"maxhandshakeattempts",level:3},{value:"Definition",id:"definition-3",level:4},{value:"<code>validator</code>",id:"validator",level:3},{value:"Definition",id:"definition-4",level:4}],b={toc:v},C="wrapper";function O(e){var n=e,{components:t}=n,a=f(n,["components"]);return(0,i.yg)(C,d(p(p({},b),a),{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",p({},{id:"interface-remotechannelwriteconfig"}),(0,i.yg)("inlineCode",{parentName:"h1"},"interface RemoteChannel.WriteConfig")),(0,i.yg)("p",null,"Interface defining the write configuration for a RemoteChannel."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Implemented by:")," ",(0,i.yg)("a",p({parentName:"p"},{href:"/api/rimbu/channel/RemoteChannelClient/WriteChannelConfig/interface"}),(0,i.yg)("inlineCode",{parentName:"a"},"RemoteChannelClient.WriteChannelConfig"))),(0,i.yg)("h2",p({},{id:"properties"}),"Properties"),(0,i.yg)("details",null,(0,i.yg)("summary",null,(0,i.yg)("h3",p({},{id:"capacity"}),(0,i.yg)("inlineCode",{parentName:"h3"},"capacity")),(0,i.yg)("p",null,"The maximum amount of messages the Channel can buffer. If 0, the channel is unbuffered and the communication is synchronous.")),(0,i.yg)("h4",p({},{id:"definition"}),"Definition"),(0,i.yg)("code",null,(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"capacity?: number;")))),(0,i.yg)("details",null,(0,i.yg)("summary",null,(0,i.yg)("h3",p({},{id:"channelid"}),(0,i.yg)("inlineCode",{parentName:"h3"},"channelId")),(0,i.yg)("p",null,"An ID used for the client and server to connect the correct channels to each other.")),(0,i.yg)("h4",p({},{id:"definition-1"}),"Definition"),(0,i.yg)("code",null,(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"channelId: string;")))),(0,i.yg)("details",null,(0,i.yg)("summary",null,(0,i.yg)("h3",p({},{id:"handshakeattempttimeoutms"}),(0,i.yg)("inlineCode",{parentName:"h3"},"handshakeAttemptTimeoutMs")),(0,i.yg)("p",null,"The amount of milliseconds to wait for a reponse to each handshake.")),(0,i.yg)("h4",p({},{id:"definition-2"}),"Definition"),(0,i.yg)("code",null,(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"handshakeAttemptTimeoutMs?: number;")))),(0,i.yg)("details",null,(0,i.yg)("summary",null,(0,i.yg)("h3",p({},{id:"maxhandshakeattempts"}),(0,i.yg)("inlineCode",{parentName:"h3"},"maxHandshakeAttempts")),(0,i.yg)("p",null,"The amount of handshake attempts to make before failing.")),(0,i.yg)("h4",p({},{id:"definition-3"}),"Definition"),(0,i.yg)("code",null,(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"maxHandshakeAttempts?: number;")))),(0,i.yg)("details",null,(0,i.yg)("summary",null,(0,i.yg)("h3",p({},{id:"validator"}),(0,i.yg)("inlineCode",{parentName:"h3"},"validator")),(0,i.yg)("p",null,"A function taking a message and returning true if the message is of a valid type, false otherwise")),(0,i.yg)("h4",p({},{id:"definition-4"}),"Definition"),(0,i.yg)("code",null,(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"validator?: (value: any) => boolean;")))))}O.isMDXComponent=!0}}]);