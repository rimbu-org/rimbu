"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[43766],{15680:(e,n,a)=>{a.d(n,{xA:()=>p,yg:()=>y});var t=a(96540);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var m=t.createContext({}),g=function(e){var n=t.useContext(m),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},p=function(e){var n=g(e.components);return t.createElement(m.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,m=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=g(a),c=r,y=d["".concat(m,".").concat(c)]||d[c]||u[c]||i;return a?t.createElement(y,l(l({ref:n},p),{},{components:a})):t.createElement(y,l({ref:n},p))}));function y(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=c;var o={};for(var m in n)hasOwnProperty.call(n,m)&&(o[m]=n[m]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var g=2;g<i;g++)l[g]=a[g];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}c.displayName="MDXCreateElement"},5641:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>f,contentTitle:()=>s,default:()=>v,frontMatter:()=>y,metadata:()=>b,toc:()=>N});var t=a(15680),r=Object.defineProperty,i=Object.defineProperties,l=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,m=Object.prototype.hasOwnProperty,g=Object.prototype.propertyIsEnumerable,p=(e,n,a)=>n in e?r(e,n,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[n]=a,d=(e,n)=>{for(var a in n||(n={}))m.call(n,a)&&p(e,a,n[a]);if(o)for(var a of o(n))g.call(n,a)&&p(e,a,n[a]);return e},u=(e,n)=>i(e,l(n)),c=(e,n)=>{var a={};for(var t in e)m.call(e,t)&&n.indexOf(t)<0&&(a[t]=e[t]);if(null!=e&&o)for(var t of o(e))n.indexOf(t)<0&&g.call(e,t)&&(a[t]=e[t]);return a};const y={title:"IndexRange (namespace)",slug:"/rimbu/common/IndexRange/namespace"},s="namespace IndexRange",b={unversionedId:"rimbu_common/IndexRange/index",id:"rimbu_common/IndexRange/index",title:"IndexRange (namespace)",description:"A flexible range specification for numeric indices. If a start or end is defined, a tuple can be used where the second item is a boolean indicating whether that end is inclusive or exclusive.",source:"@site/api/rimbu_common/IndexRange/index.mdx",sourceDirName:"rimbu_common/IndexRange",slug:"/rimbu/common/IndexRange/namespace",permalink:"/api/rimbu/common/IndexRange/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"IndexRange (namespace)",slug:"/rimbu/common/IndexRange/namespace"},sidebar:"defaultSidebar",previous:{title:"ForcedError",permalink:"/api/rimbu/common/ErrBase/ForcedError/class"},next:{title:"IndexRange",permalink:"/api/rimbu/common/IndexRange/type"}},f={},N=[{value:"Functions",id:"functions",level:2},{value:"<code>getIndexRangeIndices</code>",id:"getindexrangeindices",level:3},{value:"Definition",id:"definition",level:4},{value:"Parameters",id:"parameters",level:4},{value:"<code>getIndicesFor</code>",id:"getindicesfor",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Parameters",id:"parameters-1",level:4}],h={toc:N},x="wrapper";function v(e){var n=e,{components:a}=n,r=c(n,["components"]);return(0,t.yg)(x,u(d(d({},h),r),{components:a,mdxType:"MDXLayout"}),(0,t.yg)("h1",d({},{id:"namespace-indexrange"}),(0,t.yg)("inlineCode",{parentName:"h1"},"namespace IndexRange")),(0,t.yg)("p",null,"A flexible range specification for numeric indices. If a start or end is defined, a tuple can be used where the second item is a boolean indicating whether that end is inclusive or exclusive.\nAn IndexRange can have one of the following forms:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"{ amount: number }"),(0,t.yg)("li",{parentName:"ul"},"{ start: number }"),(0,t.yg)("li",{parentName:"ul"},"{ start: number, amount: number }"),(0,t.yg)("li",{parentName:"ul"},"{ start: number, end: number }"),(0,t.yg)("li",{parentName:"ul"},"{ start: number, end: ","[number, boolean]"," }"),(0,t.yg)("li",{parentName:"ul"},"{ start: ","[number, boolean]"," }"),(0,t.yg)("li",{parentName:"ul"},"{ start: ","[number, boolean]",", amount: number }"),(0,t.yg)("li",{parentName:"ul"},"{ start: ","[number, boolean]",", end: number }"),(0,t.yg)("li",{parentName:"ul"},"{ start: ","[number, boolean]",", end: ","[number, boolean]"," }"),(0,t.yg)("li",{parentName:"ul"},"{ end: number }"),(0,t.yg)("li",{parentName:"ul"},"{ end: ","[number, boolean]"," }")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Companion type:")," ",(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/IndexRange/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"IndexRange"))),(0,t.yg)("h2",d({},{id:"functions"}),"Functions"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"getindexrangeindices"}),(0,t.yg)("inlineCode",{parentName:"h3"},"getIndexRangeIndices")),(0,t.yg)("p",null,"Returns, given the ",(0,t.yg)("inlineCode",{parentName:"p"},"range")," ",(0,t.yg)("inlineCode",{parentName:"p"},"IndexRange"),", a normalized tuple containing the start index, and optionally an end index.")),(0,t.yg)("h4",d({},{id:"definition"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function getIndexRangeIndices(range: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/IndexRange/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"IndexRange")),(0,t.yg)("inlineCode",{parentName:"p"},"): [number, number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined];"))),(0,t.yg)("h4",d({},{id:"parameters"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"range")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/IndexRange/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"IndexRange"))),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the ",(0,t.yg)("inlineCode",{parentName:"td"},"IndexRange")," to use"))))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",d({},{id:"getindicesfor"}),(0,t.yg)("inlineCode",{parentName:"h3"},"getIndicesFor")),(0,t.yg)("p",null,"Returns, given the ",(0,t.yg)("inlineCode",{parentName:"p"},"range")," ",(0,t.yg)("inlineCode",{parentName:"p"},"IndexRange"),", and a target maximum ",(0,t.yg)("inlineCode",{parentName:"p"},"length"),", the actual index range. This can be one of three options: - 'empty': there are no elements within the range - 'all': all elements are within the range - ","[start: number, end: number]",": an inclusive range of element indices within the given range")),(0,t.yg)("h4",d({},{id:"definition-1"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"function getIndicesFor(range: "),(0,t.yg)("a",d({parentName:"p"},{href:"/api/rimbu/common/IndexRange/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"IndexRange")),(0,t.yg)("inlineCode",{parentName:"p"},", length: number): [number, number] "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"},"'empty'"),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," 'all';"))),(0,t.yg)("h4",d({},{id:"parameters-1"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"range")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("a",d({parentName:"td"},{href:"/api/rimbu/common/IndexRange/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"IndexRange"))),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the ",(0,t.yg)("inlineCode",{parentName:"td"},"IndexRange")," to use")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"length")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"number")),(0,t.yg)("td",d({parentName:"tr"},{align:null}),"the target maximum length"))))))}v.isMDXComponent=!0}}]);