"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[44108],{15680:(e,n,a)=>{a.d(n,{xA:()=>m,yg:()=>s});var t=a(96540);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function p(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var y=t.createContext({}),d=function(e){var n=t.useContext(y),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},m=function(e){var n=d(e.components);return t.createElement(y.Provider,{value:n},e.children)},o="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},g=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,l=e.originalType,y=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),o=d(a),g=r,s=o["".concat(y,".").concat(g)]||o[g]||u[g]||l;return a?t.createElement(s,i(i({ref:n},m),{},{components:a})):t.createElement(s,i({ref:n},m))}));function s(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=g;var p={};for(var y in n)hasOwnProperty.call(n,y)&&(p[y]=n[y]);p.originalType=e,p[o]="string"==typeof e?e:r,i[1]=p;for(var d=2;d<l;d++)i[d]=a[d];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}g.displayName="MDXCreateElement"},4502:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>h,contentTitle:()=>c,default:()=>C,frontMatter:()=>s,metadata:()=>N,toc:()=>b});var t=a(15680),r=Object.defineProperty,l=Object.defineProperties,i=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,y=Object.prototype.hasOwnProperty,d=Object.prototype.propertyIsEnumerable,m=(e,n,a)=>n in e?r(e,n,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[n]=a,o=(e,n)=>{for(var a in n||(n={}))y.call(n,a)&&m(e,a,n[a]);if(p)for(var a of p(n))d.call(n,a)&&m(e,a,n[a]);return e},u=(e,n)=>l(e,i(n)),g=(e,n)=>{var a={};for(var t in e)y.call(e,t)&&n.indexOf(t)<0&&(a[t]=e[t]);if(null!=e&&p)for(var t of p(e))n.indexOf(t)<0&&d.call(e,t)&&(a[t]=e[t]);return a};const s={title:"AsyncReducer.Impl<I,O,S>",slug:"/rimbu/stream/AsyncReducer/Impl/interface"},c="interface AsyncReducer.Impl<I,O,S>",N={unversionedId:"rimbu_stream/AsyncReducer/Impl.interface",id:"rimbu_stream/AsyncReducer/Impl.interface",title:"AsyncReducer.Impl<I,O,S>",description:"The AsyncReducer implementation interface defining the required methods.",source:"@site/api/rimbu_stream/AsyncReducer/Impl.interface.mdx",sourceDirName:"rimbu_stream/AsyncReducer",slug:"/rimbu/stream/AsyncReducer/Impl/interface",permalink:"/api/rimbu/stream/AsyncReducer/Impl/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"AsyncReducer.Impl<I,O,S>",slug:"/rimbu/stream/AsyncReducer/Impl/interface"},sidebar:"defaultSidebar",previous:{title:"CombineShape",permalink:"/api/rimbu/stream/AsyncReducer/CombineShape/type"},next:{title:"AsyncReducer.Instance<I,O>",permalink:"/api/rimbu/stream/AsyncReducer/Instance/interface"}},h={},b=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>init</code>",id:"init",level:3},{value:"Definition",id:"definition",level:4},{value:"<code>mapInput</code>",id:"mapinput",level:3},{value:"Definition",id:"definition-1",level:4},{value:"<code>onClose</code>",id:"onclose",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Methods",id:"methods",level:2},{value:"<code>chain</code>",id:"chain",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters",level:4},{value:"<code>collectInput</code>",id:"collectinput",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>compile</code>",id:"compile",level:3},{value:"Definition",id:"definition-5",level:4},{value:"<code>dropInput</code>",id:"dropinput",level:3},{value:"Definition",id:"definition-6",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"<code>filterInput</code>",id:"filterinput",level:3},{value:"Definitions",id:"definitions",level:4},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"<code>flatMapInput</code>",id:"flatmapinput",level:3},{value:"Definition",id:"definition-7",level:4},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"<code>mapOutput</code>",id:"mapoutput",level:3},{value:"Definition",id:"definition-8",level:4},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"<code>next</code>",id:"next",level:3},{value:"Definition",id:"definition-9",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"<code>sliceInput</code>",id:"sliceinput",level:3},{value:"Definition",id:"definition-10",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"<code>stateToResult</code>",id:"statetoresult",level:3},{value:"Definition",id:"definition-11",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"<code>takeInput</code>",id:"takeinput",level:3},{value:"Definition",id:"definition-12",level:4},{value:"Parameters",id:"parameters-9",level:4},{value:"<code>takeOutput</code>",id:"takeoutput",level:3},{value:"Definition",id:"definition-13",level:4},{value:"Parameters",id:"parameters-10",level:4},{value:"<code>takeOutputUntil</code>",id:"takeoutputuntil",level:3},{value:"Definition",id:"definition-14",level:4},{value:"Parameters",id:"parameters-11",level:4}],v={toc:b},f="wrapper";function C(e){var n=e,{components:a}=n,r=g(n,["components"]);return(0,t.yg)(f,u(o(o({},v),r),{components:a,mdxType:"MDXLayout"}),(0,t.yg)("h1",o({},{id:"interface-asyncreducerimplios"}),(0,t.yg)("inlineCode",{parentName:"h1"},"interface AsyncReducer.Impl<I,O,S>")),(0,t.yg)("p",null,"The AsyncReducer implementation interface defining the required methods."),(0,t.yg)("h2",o({},{id:"type-parameters"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"I"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the input type")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"O"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the output type")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"S"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the state type")))),(0,t.yg)("h2",o({},{id:"properties"}),"Properties"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"init"}),(0,t.yg)("inlineCode",{parentName:"h3"},"init")),(0,t.yg)("p",null,"The initial state value for the reducer algorithm.")),(0,t.yg)("h4",o({},{id:"definition"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly init: (initHalt: () => void) => "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"p"},"<S>;")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"mapinput"}),(0,t.yg)("inlineCode",{parentName:"h3"},"mapInput")),(0,t.yg)("p",null,"Returns an ",(0,t.yg)("inlineCode",{parentName:"p"},"AsyncReducer")," instance that converts its input values using given ",(0,t.yg)("inlineCode",{parentName:"p"},"mapFun")," before passing them to the reducer.")),(0,t.yg)("h4",o({},{id:"definition-1"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"mapInput: <I2>(mapFun: (value: I2, index: number) => "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"p"},"<I>) => "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,t.yg)("inlineCode",{parentName:"p"},"<I2, O>;"))),(0,t.yg)("admonition",o({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"AsyncReducer\n.createMono(0, async (c, v) => c + v)\n.mapInput(async v => v * 2)\n// this reducer will double all input values before summing them\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"onclose"}),(0,t.yg)("inlineCode",{parentName:"h3"},"onClose")),(0,t.yg)("p",null,"An optional function that is called when the reducer will no longer receive values.")),(0,t.yg)("h4",o({},{id:"definition-2"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"onClose?: ((state: S, error?: unknown) => "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"p"},"<void>) "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;")))),(0,t.yg)("h2",o({},{id:"methods"}),"Methods"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"chain"}),(0,t.yg)("inlineCode",{parentName:"h3"},"chain")),(0,t.yg)("p",null,"Returns a reducer that applies the given ",(0,t.yg)("inlineCode",{parentName:"p"},"nextReducers")," sequentially after this reducer has halted, and moving on to the next provided reducer until it is halted. Optionally, it provides the last output value of the previous reducer.")),(0,t.yg)("h4",o({},{id:"definition-3"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"chain<O2 extends O>(nextReducers: "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<AsyncOptLazy<"),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,t.yg)("inlineCode",{parentName:"p"},"<I, O2>, [O2]>>): "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,t.yg)("inlineCode",{parentName:"p"},"<I, O2>;"))),(0,t.yg)("h4",o({},{id:"type-parameters-1"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"O2"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"O")),(0,t.yg)("td",o({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",o({},{id:"parameters"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"nextReducers")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<AsyncOptLazy<"),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncReducer/Accept/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer.Accept")),(0,t.yg)("inlineCode",{parentName:"td"},"<I, O2>, [O2]>>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"an number of reducers consuming and producing the same types as the current reducer.")))),(0,t.yg)("admonition",o({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"const result = await AsyncStream.range({ amount: 6 })\n.reduce(\nReducer.sum\n.takeInput(3)\n.chain(\nv => v > 10 ? Reducer.product : Reducer.sum\n)\n)\nconsole.log(result)\n// => 21\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"collectinput"}),(0,t.yg)("inlineCode",{parentName:"h3"},"collectInput")),(0,t.yg)("p",null,"Returns an ",(0,t.yg)("inlineCode",{parentName:"p"},"AsyncReducer")," instance that converts or filters its input values using given ",(0,t.yg)("inlineCode",{parentName:"p"},"collectFun")," before passing them to the reducer.")),(0,t.yg)("h4",o({},{id:"definition-4"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"collectInput<I2>(collectFun: "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/common/AsyncCollectFun/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncCollectFun")),(0,t.yg)("inlineCode",{parentName:"p"},"<I2, I>): "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,t.yg)("inlineCode",{parentName:"p"},"<I2, O>;"))),(0,t.yg)("h4",o({},{id:"type-parameters-2"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"I2"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the new input type")))),(0,t.yg)("h4",o({},{id:"parameters-1"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"collectFun")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/common/AsyncCollectFun/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncCollectFun")),(0,t.yg)("inlineCode",{parentName:"td"},"<I2, I>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"a (potentially async) function receiving",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"value"),": the next value",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"index"),": the value index",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"skip"),": a token that, when returned, will not add a value to the resulting collection",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"halt"),": a function that, when called, ensures no next elements are passed")))),(0,t.yg)("admonition",o({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"AsyncReducer\n.createMono(0, async (c, v) => c + v)\n.collectInput(async (v, _, skip) => v <= 10 ? skip : v * 2)\n// this reducer will double all input values larger thant 10 before summing them,\n// and will skip all values smaller than 10\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"compile"}),(0,t.yg)("inlineCode",{parentName:"h3"},"compile")),(0,t.yg)("p",null,"Returns a promise that resolves to a 'runnable' instance of the current reducer specification. This instance maintains its own state and indices, so that the instance only needs to be provided the input values, and output values can be retrieved when needed. The state is kept private.")),(0,t.yg)("h4",o({},{id:"definition-5"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"compile(): Promise<"),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/Instance/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer.Instance")),(0,t.yg)("inlineCode",{parentName:"p"},"<I, O>>;"))),(0,t.yg)("admonition",o({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"const reducer = AsyncReducer.from(Reducer.sum.mapOutput(v => v * 2));\nconst instance = reducer.compile();\nawait instance.next(3);\nawait instance.next(5);\nconsole.log(await instance.getOutput());\n// => 16\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"dropinput"}),(0,t.yg)("inlineCode",{parentName:"h3"},"dropInput")),(0,t.yg)("p",null,"Returns an ",(0,t.yg)("inlineCode",{parentName:"p"},"AsyncReducer")," instance that skips the first given ",(0,t.yg)("inlineCode",{parentName:"p"},"amount")," of input elements, and will process subsequent elements.")),(0,t.yg)("h4",o({},{id:"definition-6"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"dropInput(amount: number): "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,t.yg)("inlineCode",{parentName:"p"},"<I, O>;"))),(0,t.yg)("h4",o({},{id:"parameters-2"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"amount")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"number")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the amount of elements to skip")))),(0,t.yg)("admonition",o({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"await AsyncStream\n.from(Stream.range({ end: 10 }))\n.reduce(\nAsyncReducer\n.createMono(0, async (c, v) => c + v)\n.dropInput(9)\n)\n// => 19\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"filterinput"}),(0,t.yg)("inlineCode",{parentName:"h3"},"filterInput")),(0,t.yg)("p",null,"Returns an ",(0,t.yg)("inlineCode",{parentName:"p"},"AsyncReducer")," instance that only passes values to the reducer that satisy the given ",(0,t.yg)("inlineCode",{parentName:"p"},"pred")," predicate.")),(0,t.yg)("h4",o({},{id:"definitions"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"filterInput<IF extends I>(pred: (value: I, index: number, halt: () => void) => value is IF, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate?: false "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,t.yg)("inlineCode",{parentName:"p"},"<IF, O>;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"filterInput<IF extends I>(pred: (value: I, index: number, halt: () => void) => value is IF, options: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate: true;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,t.yg)("inlineCode",{parentName:"p"},"<Exclude<I, IF>, O>;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"filterInput(pred: (value: I, index: number, halt: () => void) => "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"p"},"<boolean>, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,t.yg)("inlineCode",{parentName:"p"},"<I, O>;"))),(0,t.yg)("h4",o({},{id:"type-parameters-3"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"IF"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"I")),(0,t.yg)("td",o({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",o({},{id:"parameters-3"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"pred")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(value: I, index: number, halt: () => void) => value is IF")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"a potaentially asynchronous function that returns true if the value should be passed to the reducer based on the following inputs:",(0,t.yg)("br",null)," - value: the current input value",(0,t.yg)("br",null)," - index: the current input index",(0,t.yg)("br",null)," - halt: function that, when called, ensures no more new values are passed to the reducer")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"negate?: false "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,t.yg)("br",null)," - negate: (default: false) when true will invert the given predicate")))),(0,t.yg)("admonition",o({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"if the predicate is a type guard, the return type is automatically inferred")),(0,t.yg)("admonition",o({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"AsyncReducer\n.createMono(0, async (c, v) => c + v)\n.filterInput(async v => v > 10)\n// this reducer will only sum values larger than 10\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"flatmapinput"}),(0,t.yg)("inlineCode",{parentName:"h3"},"flatMapInput")),(0,t.yg)("p",null,"Returns an ",(0,t.yg)("inlineCode",{parentName:"p"},"AsyncReducer")," instance that converts its input values using given ",(0,t.yg)("inlineCode",{parentName:"p"},"flatMapFun")," before passing them to the reducer.")),(0,t.yg)("h4",o({},{id:"definition-7"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"flatMapInput<I2>(flatMapFun: (value: I2, index: number) => "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"p"},"<"),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<I>>): "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,t.yg)("inlineCode",{parentName:"p"},"<I2, O>;"))),(0,t.yg)("h4",o({},{id:"type-parameters-4"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"I2"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the new input type")))),(0,t.yg)("h4",o({},{id:"parameters-4"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"flatMapFun")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(value: I2, index: number) => "),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"td"},"<"),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<I>>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"a potentially asynchronous function that returns am arbitrary number of new values to pass to the reducer based on the following inputs:",(0,t.yg)("br",null)," - value: the current input value",(0,t.yg)("br",null)," - index: the current input index")))),(0,t.yg)("admonition",o({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"AsyncReducer\n.createMono(0, async (c, v) => c + v)\n.flatMapInput(async v => [v, v])\n// this reducer will include all input values twice before summing them\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"mapoutput"}),(0,t.yg)("inlineCode",{parentName:"h3"},"mapOutput")),(0,t.yg)("p",null,"Returns an ",(0,t.yg)("inlineCode",{parentName:"p"},"AsyncReducer")," instance that converts its output values using given ",(0,t.yg)("inlineCode",{parentName:"p"},"mapFun"),".")),(0,t.yg)("h4",o({},{id:"definition-8"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"mapOutput<O2>(mapFun: (value: O, index: number, halted: boolean) => "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"p"},"<O2>): "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,t.yg)("inlineCode",{parentName:"p"},"<I, O2>;"))),(0,t.yg)("h4",o({},{id:"type-parameters-5"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),"O2"),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the new output type")))),(0,t.yg)("h4",o({},{id:"parameters-5"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"mapFun")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(value: O, index: number, halted: boolean) => "),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"td"},"<O2>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"a potentially asynchronous function that takes the current output value and converts it to a new output value")))),(0,t.yg)("admonition",o({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"AsyncReducer\n.createMono(0, async (c, v) => c + v)\n.mapOutput(async v => String(v))\n// this reducer will convert all its results to string before returning them\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"next"}),(0,t.yg)("inlineCode",{parentName:"h3"},"next")),(0,t.yg)("p",null,"Returns the next state based on the given input values")),(0,t.yg)("h4",o({},{id:"definition-9"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"next(state: S, elem: I, index: number, halt: () => void): "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"p"},"<S>;"))),(0,t.yg)("h4",o({},{id:"parameters-6"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"state")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"S")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the current state")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"elem")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"I")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the current input value")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"index")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"number")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the current input index")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"halt")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"() => void")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"a function that, when called, ensures no more values are passed to the reducer"))))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"sliceinput"}),(0,t.yg)("inlineCode",{parentName:"h3"},"sliceInput")),(0,t.yg)("p",null,"Returns an ",(0,t.yg)("inlineCode",{parentName:"p"},"AsyncReducer")," instance that takes given ",(0,t.yg)("inlineCode",{parentName:"p"},"amount")," of elements starting at given ",(0,t.yg)("inlineCode",{parentName:"p"},"from")," index, and ignores other elements.")),(0,t.yg)("h4",o({},{id:"definition-10"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"sliceInput(from?: number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"},"undefined, amount?: number"),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"},"undefined):"),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,t.yg)("inlineCode",{parentName:"p"},"<I, O>;"))),(0,t.yg)("h4",o({},{id:"parameters-7"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"from")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"(default: 0) the index at which to start processing elements")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"amount")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"number "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"(optional) the amount of elements to process, if not given, processes all elements from the ",(0,t.yg)("inlineCode",{parentName:"td"},"from")," index")))),(0,t.yg)("admonition",o({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"await AsyncStream\n.from(Stream.range({ end: 10 }))\n.reduce(\nAsyncReducer\n.createMono(0, async (c, v) => c + v)\n.sliceInput(1, 2)\n)\n// => 3\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"statetoresult"}),(0,t.yg)("inlineCode",{parentName:"h3"},"stateToResult")),(0,t.yg)("p",null,"Returns the output value based on the given ",(0,t.yg)("inlineCode",{parentName:"p"},"state"))),(0,t.yg)("h4",o({},{id:"definition-11"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"stateToResult(state: S, index: number, halted: boolean): "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"p"},"<O>;"))),(0,t.yg)("h4",o({},{id:"parameters-8"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"state")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"S")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the current state")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"index")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"number")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the value index")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"halted")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"boolean")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"a boolean indicating whether the reducer is halted"))))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"takeinput"}),(0,t.yg)("inlineCode",{parentName:"h3"},"takeInput")),(0,t.yg)("p",null,"Returns an ",(0,t.yg)("inlineCode",{parentName:"p"},"AsyncReducer")," instance that takes at most the given ",(0,t.yg)("inlineCode",{parentName:"p"},"amount")," of input elements, and will ignore subsequent elements.")),(0,t.yg)("h4",o({},{id:"definition-12"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"takeInput(amount: number): "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,t.yg)("inlineCode",{parentName:"p"},"<I, O>;"))),(0,t.yg)("h4",o({},{id:"parameters-9"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"amount")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"number")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the amount of elements to accept")))),(0,t.yg)("admonition",o({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"await AsyncStream\n.from(Stream.range({ end: 10 }))\n.reduce(\nAsyncReducer\n.createMono(0, async (c, v) => c + v)\n.takeInput(2)\n)\n// => 1\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"takeoutput"}),(0,t.yg)("inlineCode",{parentName:"h3"},"takeOutput")),(0,t.yg)("p",null,"Returns an 'AsyncReducer",(0,t.yg)("inlineCode",{parentName:"p"},"instance that produces at most"),"amount` values.")),(0,t.yg)("h4",o({},{id:"definition-13"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"takeOutput(amount: number): "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,t.yg)("inlineCode",{parentName:"p"},"<I, O>;"))),(0,t.yg)("h4",o({},{id:"parameters-10"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"amount")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"number")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"the maximum amount of values to produce."))))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",o({},{id:"takeoutputuntil"}),(0,t.yg)("inlineCode",{parentName:"h3"},"takeOutputUntil")),(0,t.yg)("p",null,"Returns an 'AsyncReducer",(0,t.yg)("inlineCode",{parentName:"p"},"instance that produces until the given"),"pred` predicate returns true for the output value.")),(0,t.yg)("h4",o({},{id:"definition-14"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"takeOutputUntil(pred: (value: O, index: number) => "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"p"},"<boolean>, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncReducer/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,t.yg)("inlineCode",{parentName:"p"},"<I, O>;"))),(0,t.yg)("h4",o({},{id:"parameters-11"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"pred")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(value: O, index: number) => "),(0,t.yg)("a",o({parentName:"td"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"MaybePromise")),(0,t.yg)("inlineCode",{parentName:"td"},"<boolean>")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"a potaentially asynchronous function that returns true if the value should be passed to the reducer based on the following inputs:",(0,t.yg)("br",null)," - value: the current input value",(0,t.yg)("br",null)," - index: the current input index",(0,t.yg)("br",null)," - halt: function that, when called, ensures no more new values are passed to the reducer")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"negate?: boolean "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",o({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,t.yg)("br",null)," - negate: (default: false) when true will invert the given predicate"))))))}C.isMDXComponent=!0}}]);