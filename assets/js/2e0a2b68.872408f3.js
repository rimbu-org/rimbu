"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[76767],{15680:(e,r,t)=>{t.d(r,{xA:()=>m,yg:()=>u});var a=t(96540);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function p(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?p(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function o(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},p=Object.keys(e);for(a=0;a<p.length;a++)t=p[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(a=0;a<p.length;a++)t=p[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var d=a.createContext({}),l=function(e){var r=a.useContext(d),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},m=function(e){var r=l(e.components);return a.createElement(d.Provider,{value:r},e.children)},s="mdxType",y={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},c=a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,p=e.originalType,d=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),s=l(t),c=n,u=s["".concat(d,".").concat(c)]||s[c]||y[c]||p;return t?a.createElement(u,i(i({ref:r},m),{},{components:t})):a.createElement(u,i({ref:r},m))}));function u(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var p=t.length,i=new Array(p);i[0]=c;var o={};for(var d in r)hasOwnProperty.call(r,d)&&(o[d]=r[d]);o.originalType=e,o[s]="string"==typeof e?e:n,i[1]=o;for(var l=2;l<p;l++)i[l]=t[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},10489:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>g,contentTitle:()=>h,default:()=>N,frontMatter:()=>u,metadata:()=>f,toc:()=>b});var a=t(15680),n=Object.defineProperty,p=Object.defineProperties,i=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,d=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable,m=(e,r,t)=>r in e?n(e,r,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[r]=t,s=(e,r)=>{for(var t in r||(r={}))d.call(r,t)&&m(e,t,r[t]);if(o)for(var t of o(r))l.call(r,t)&&m(e,t,r[t]);return e},y=(e,r)=>p(e,i(r)),c=(e,r)=>{var t={};for(var a in e)d.call(e,a)&&r.indexOf(a)<0&&(t[a]=e[a]);if(null!=e&&o)for(var a of o(e))r.indexOf(a)<0&&l.call(e,a)&&(t[a]=e[a]);return t};const u={title:"OrderedHashMap.NonEmpty<K,V>",slug:"/rimbu/ordered/map/OrderedHashMap/NonEmpty/interface"},h="interface OrderedHashMap.NonEmpty<K,V>",f={unversionedId:"rimbu_ordered/map/OrderedHashMap/NonEmpty.interface",id:"rimbu_ordered/map/OrderedHashMap/NonEmpty.interface",title:"OrderedHashMap.NonEmpty<K,V>",description:"A non-empty type-invariant immutable Ordered HashMap of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the Map documentation and the OrderedHashMap API documentation",source:"@site/api/rimbu_ordered/map/OrderedHashMap/NonEmpty.interface.mdx",sourceDirName:"rimbu_ordered/map/OrderedHashMap",slug:"/rimbu/ordered/map/OrderedHashMap/NonEmpty/interface",permalink:"/api/rimbu/ordered/map/OrderedHashMap/NonEmpty/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"OrderedHashMap.NonEmpty<K,V>",slug:"/rimbu/ordered/map/OrderedHashMap/NonEmpty/interface"},sidebar:"defaultSidebar",previous:{title:"OrderedHashMap.Context<UK>",permalink:"/api/rimbu/ordered/map/OrderedHashMap/Context/interface"},next:{title:"OrderedHashMap.Types",permalink:"/api/rimbu/ordered/map/OrderedHashMap/Types/interface"}},g={},b=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>stream</code>",id:"stream",level:3},{value:"Definition",id:"definition",level:4},{value:"Overrides",id:"overrides",level:4}],O={toc:b},v="wrapper";function N(e){var r=e,{components:t}=r,n=c(r,["components"]);return(0,a.yg)(v,y(s(s({},O),n),{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",s({},{id:"interface-orderedhashmapnonemptykv"}),(0,a.yg)("inlineCode",{parentName:"h1"},"interface OrderedHashMap.NonEmpty<K,V>")),(0,a.yg)("p",null,"A non-empty type-invariant immutable Ordered HashMap of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the ",(0,a.yg)("a",s({parentName:"p"},{href:"https://rimbu.org/docs/collections/map"}),"Map documentation")," and the ",(0,a.yg)("a",s({parentName:"p"},{href:"https://rimbu.org/api/rimbu/ordered/map/OrderedHashMap/interface"}),"OrderedHashMap API documentation"),"  "),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Extends:")," ",(0,a.yg)("a",s({parentName:"p"},{href:"/api/rimbu/stream/Streamable/NonEmpty/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"Streamable.NonEmpty<T>")),", ",(0,a.yg)("a",s({parentName:"p"},{href:"/api/rimbu/ordered/map/OrderedHashMap/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"OrderedHashMap<K,V>"))),(0,a.yg)("h2",s({},{id:"type-parameters"}),"Type parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",s({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",s({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",s({parentName:"tr"},{align:null}),"K"),(0,a.yg)("td",s({parentName:"tr"},{align:null}),"the key type")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",s({parentName:"tr"},{align:null}),"V"),(0,a.yg)("td",s({parentName:"tr"},{align:null}),"the value type")))),(0,a.yg)("admonition",s({},{title:"note",type:"note"}),(0,a.yg)("ul",{parentName:"admonition"},(0,a.yg)("li",{parentName:"ul"},"The OrderedHashMap keeps maintains the insertion order of elements, thus iterators and streams will also reflect this order. - The OrderedHashMap wraps around a HashMap instance, thus has mostly the same time complexity as the HashMap. - The OrderedHashMap keeps the key insertion order in a List, thus its space complexity is higher than a regular HashMap."))),(0,a.yg)("admonition",s({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",s({parentName:"pre"},{className:"language-ts"}),"const m1 = OrderedHashMap.empty<number, string>()\nconst m2 = OrderedHashMap.of([1, 'a'], [2, 'b'])\n"))),(0,a.yg)("h2",s({},{id:"methods"}),"Methods"),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",s({},{id:"stream"}),(0,a.yg)("inlineCode",{parentName:"h3"},"stream")),(0,a.yg)("p",null,"undocumented")),(0,a.yg)("h4",s({},{id:"definition"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"stream(): "),(0,a.yg)("a",s({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,a.yg)("inlineCode",{parentName:"p"},"<readonly [K, V]>;"))),(0,a.yg)("h4",s({},{id:"overrides"}),"Overrides"),(0,a.yg)("p",null,(0,a.yg)("a",s({parentName:"p"},{href:"/api/rimbu/stream/Streamable/NonEmpty/interface#stream"}),"NonEmpty.stream"))))}N.isMDXComponent=!0}}]);