"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[55911],{15680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>f});var i=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=i.createContext({}),d=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=d(e.components);return i.createElement(c.Provider,{value:n},e.children)},m="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},p=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=d(t),p=a,f=m["".concat(c,".").concat(p)]||m[p]||h[p]||r;return t?i.createElement(f,l(l({ref:n},u),{},{components:t})):i.createElement(f,l({ref:n},u))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=p;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o[m]="string"==typeof e?e:a,l[1]=o;for(var d=2;d<r;d++)l[d]=t[d];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}p.displayName="MDXCreateElement"},55339:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>y,contentTitle:()=>s,default:()=>O,frontMatter:()=>f,metadata:()=>g,toc:()=>C});var i=t(15680),a=Object.defineProperty,r=Object.defineProperties,l=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,c=Object.prototype.hasOwnProperty,d=Object.prototype.propertyIsEnumerable,u=(e,n,t)=>n in e?a(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,m=(e,n)=>{for(var t in n||(n={}))c.call(n,t)&&u(e,t,n[t]);if(o)for(var t of o(n))d.call(n,t)&&u(e,t,n[t]);return e},h=(e,n)=>r(e,l(n)),p=(e,n)=>{var t={};for(var i in e)c.call(e,i)&&n.indexOf(i)<0&&(t[i]=e[i]);if(null!=e&&o)for(var i of o(e))n.indexOf(i)<0&&d.call(e,i)&&(t[i]=e[i]);return t};const f={title:"RemoteChannelClient.WriteChannelConfig",slug:"/rimbu/channel/RemoteChannelClient/WriteChannelConfig/interface"},s="interface RemoteChannelClient.WriteChannelConfig",g={unversionedId:"rimbu_channel/RemoteChannelClient/WriteChannelConfig.interface",id:"rimbu_channel/RemoteChannelClient/WriteChannelConfig.interface",title:"RemoteChannelClient.WriteChannelConfig",description:"Interface defining the configuration options for creating a remote Channel.Write channel",source:"@site/api/rimbu_channel/RemoteChannelClient/WriteChannelConfig.interface.mdx",sourceDirName:"rimbu_channel/RemoteChannelClient",slug:"/rimbu/channel/RemoteChannelClient/WriteChannelConfig/interface",permalink:"/api/rimbu/channel/RemoteChannelClient/WriteChannelConfig/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"RemoteChannelClient.WriteChannelConfig",slug:"/rimbu/channel/RemoteChannelClient/WriteChannelConfig/interface"},sidebar:"defaultSidebar",previous:{title:"RemoteChannelClient.ReadChannelConfig",permalink:"/api/rimbu/channel/RemoteChannelClient/ReadChannelConfig/interface"},next:{title:"RemoteChannelClient",permalink:"/api/rimbu/channel/RemoteChannelClient/interface"}},y={},C=[{value:"Properties",id:"properties",level:2},{value:"<code>capacity</code>",id:"capacity",level:3},{value:"Definition",id:"definition",level:4},{value:"Overrides",id:"overrides",level:4},{value:"<code>channelId</code>",id:"channelid",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"<code>handshakeAttemptTimeoutMs</code>",id:"handshakeattempttimeoutms",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"<code>maxHandshakeAttempts</code>",id:"maxhandshakeattempts",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"<code>rcsChannelTimeoutMs</code>",id:"rcschanneltimeoutms",level:3},{value:"Definition",id:"definition-4",level:4},{value:"<code>validator</code>",id:"validator",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Overrides",id:"overrides-4",level:4}],v={toc:C},b="wrapper";function O(e){var n=e,{components:t}=n,a=p(n,["components"]);return(0,i.yg)(b,h(m(m({},v),a),{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",m({},{id:"interface-remotechannelclientwritechannelconfig"}),(0,i.yg)("inlineCode",{parentName:"h1"},"interface RemoteChannelClient.WriteChannelConfig")),(0,i.yg)("p",null,"Interface defining the configuration options for creating a remote Channel.Write channel"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Extends:")," ",(0,i.yg)("a",m({parentName:"p"},{href:"/api/rimbu/channel/RemoteChannel/WriteConfig/interface"}),(0,i.yg)("inlineCode",{parentName:"a"},"RemoteChannel.WriteConfig"))),(0,i.yg)("h2",m({},{id:"properties"}),"Properties"),(0,i.yg)("details",null,(0,i.yg)("summary",null,(0,i.yg)("h3",m({},{id:"capacity"}),(0,i.yg)("inlineCode",{parentName:"h3"},"capacity")),(0,i.yg)("p",null,"The maximum amount of messages the Channel can buffer. If 0, the channel is unbuffered and the communication is synchronous.")),(0,i.yg)("h4",m({},{id:"definition"}),"Definition"),(0,i.yg)("code",null,(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"capacity?: number;"))),(0,i.yg)("h4",m({},{id:"overrides"}),"Overrides"),(0,i.yg)("p",null,(0,i.yg)("a",m({parentName:"p"},{href:"/api/rimbu/channel/RemoteChannel/WriteConfig/interface#capacity"}),"WriteConfig.capacity"))),(0,i.yg)("details",null,(0,i.yg)("summary",null,(0,i.yg)("h3",m({},{id:"channelid"}),(0,i.yg)("inlineCode",{parentName:"h3"},"channelId")),(0,i.yg)("p",null,"An ID used for the client and server to connect the correct channels to each other.")),(0,i.yg)("h4",m({},{id:"definition-1"}),"Definition"),(0,i.yg)("code",null,(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"channelId: string;"))),(0,i.yg)("h4",m({},{id:"overrides-1"}),"Overrides"),(0,i.yg)("p",null,(0,i.yg)("a",m({parentName:"p"},{href:"/api/rimbu/channel/RemoteChannel/WriteConfig/interface#channelId"}),"WriteConfig.channelId"))),(0,i.yg)("details",null,(0,i.yg)("summary",null,(0,i.yg)("h3",m({},{id:"handshakeattempttimeoutms"}),(0,i.yg)("inlineCode",{parentName:"h3"},"handshakeAttemptTimeoutMs")),(0,i.yg)("p",null,"The amount of milliseconds to wait for a reponse to each handshake.")),(0,i.yg)("h4",m({},{id:"definition-2"}),"Definition"),(0,i.yg)("code",null,(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"handshakeAttemptTimeoutMs?: number;"))),(0,i.yg)("h4",m({},{id:"overrides-2"}),"Overrides"),(0,i.yg)("p",null,(0,i.yg)("a",m({parentName:"p"},{href:"/api/rimbu/channel/RemoteChannel/WriteConfig/interface#handshakeAttemptTimeoutMs"}),"WriteConfig.handshakeAttemptTimeoutMs"))),(0,i.yg)("details",null,(0,i.yg)("summary",null,(0,i.yg)("h3",m({},{id:"maxhandshakeattempts"}),(0,i.yg)("inlineCode",{parentName:"h3"},"maxHandshakeAttempts")),(0,i.yg)("p",null,"The amount of handshake attempts to make before failing.")),(0,i.yg)("h4",m({},{id:"definition-3"}),"Definition"),(0,i.yg)("code",null,(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"maxHandshakeAttempts?: number;"))),(0,i.yg)("h4",m({},{id:"overrides-3"}),"Overrides"),(0,i.yg)("p",null,(0,i.yg)("a",m({parentName:"p"},{href:"/api/rimbu/channel/RemoteChannel/WriteConfig/interface#maxHandshakeAttempts"}),"WriteConfig.maxHandshakeAttempts"))),(0,i.yg)("details",null,(0,i.yg)("summary",null,(0,i.yg)("h3",m({},{id:"rcschanneltimeoutms"}),(0,i.yg)("inlineCode",{parentName:"h3"},"rcsChannelTimeoutMs")),(0,i.yg)("p",null,"The amount of ms to wait when blocked sending to the RCS channel.")),(0,i.yg)("h4",m({},{id:"definition-4"}),"Definition"),(0,i.yg)("code",null,(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"rcsChannelTimeoutMs?: number;")))),(0,i.yg)("details",null,(0,i.yg)("summary",null,(0,i.yg)("h3",m({},{id:"validator"}),(0,i.yg)("inlineCode",{parentName:"h3"},"validator")),(0,i.yg)("p",null,"A function taking a message and returning true if the message is of a valid type, false otherwise")),(0,i.yg)("h4",m({},{id:"definition-5"}),"Definition"),(0,i.yg)("code",null,(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"validator?: (value: any) => boolean;"))),(0,i.yg)("h4",m({},{id:"overrides-4"}),"Overrides"),(0,i.yg)("p",null,(0,i.yg)("a",m({parentName:"p"},{href:"/api/rimbu/channel/RemoteChannel/WriteConfig/interface#validator"}),"WriteConfig.validator"))))}O.isMDXComponent=!0}}]);