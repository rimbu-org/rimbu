"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[28710],{15680:(e,a,n)=>{n.d(a,{xA:()=>g,yg:()=>N});var t=n(96540);function l(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){l(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function p(e,a){if(null==e)return{};var n,t,l=function(e,a){if(null==e)return{};var n,t,l={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(l[n]=e[n]);return l}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var d=t.createContext({}),o=function(e){var a=t.useContext(d),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},g=function(e){var a=o(e.components);return t.createElement(d.Provider,{value:a},e.children)},m="mdxType",y={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},u=t.forwardRef((function(e,a){var n=e.components,l=e.mdxType,r=e.originalType,d=e.parentName,g=p(e,["components","mdxType","originalType","parentName"]),m=o(n),u=l,N=m["".concat(d,".").concat(u)]||m[u]||y[u]||r;return n?t.createElement(N,i(i({ref:a},g),{},{components:n})):t.createElement(N,i({ref:a},g))}));function N(e,a){var n=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=u;var p={};for(var d in a)hasOwnProperty.call(a,d)&&(p[d]=a[d]);p.originalType=e,p[m]="string"==typeof e?e:l,i[1]=p;for(var o=2;o<r;o++)i[o]=n[o];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},50229:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>s,default:()=>C,frontMatter:()=>N,metadata:()=>h,toc:()=>b});var t=n(15680),l=Object.defineProperty,r=Object.defineProperties,i=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,d=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable,g=(e,a,n)=>a in e?l(e,a,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[a]=n,m=(e,a)=>{for(var n in a||(a={}))d.call(a,n)&&g(e,n,a[n]);if(p)for(var n of p(a))o.call(a,n)&&g(e,n,a[n]);return e},y=(e,a)=>r(e,i(a)),u=(e,a)=>{var n={};for(var t in e)d.call(e,t)&&a.indexOf(t)<0&&(n[t]=e[t]);if(null!=e&&p)for(var t of p(e))a.indexOf(t)<0&&o.call(e,t)&&(n[t]=e[t]);return n};const N={title:"ValuedGraphBase.Builder<N,V,Tp>",slug:"/rimbu/graph/custom/ValuedGraphBase/Builder/interface"},s="interface ValuedGraphBase.Builder<N,V,Tp>",h={unversionedId:"rimbu_graph/custom/ValuedGraphBase/Builder.interface",id:"rimbu_graph/custom/ValuedGraphBase/Builder.interface",title:"ValuedGraphBase.Builder<N,V,Tp>",description:"undocumented",source:"@site/api/rimbu_graph/custom/ValuedGraphBase/Builder.interface.mdx",sourceDirName:"rimbu_graph/custom/ValuedGraphBase",slug:"/rimbu/graph/custom/ValuedGraphBase/Builder/interface",permalink:"/api/rimbu/graph/custom/ValuedGraphBase/Builder/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"ValuedGraphBase.Builder<N,V,Tp>",slug:"/rimbu/graph/custom/ValuedGraphBase/Builder/interface"},sidebar:"defaultSidebar",previous:{title:"ValuedGraphBase (namespace)",permalink:"/api/rimbu/graph/custom/ValuedGraphBase/namespace"},next:{title:"ValuedGraphBase.Context<UN,Tp>",permalink:"/api/rimbu/graph/custom/ValuedGraphBase/Context/interface"}},c={},b=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>connectionSize</code>",id:"connectionsize",level:3},{value:"Definition",id:"definition",level:4},{value:"<code>context</code>",id:"context",level:3},{value:"Definition",id:"definition-1",level:4},{value:"<code>isEmpty</code>",id:"isempty",level:3},{value:"Definition",id:"definition-2",level:4},{value:"<code>nodeSize</code>",id:"nodesize",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Methods",id:"methods",level:2},{value:"<code>addGraphElement</code>",id:"addgraphelement",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Parameters",id:"parameters",level:4},{value:"<code>addGraphElements</code>",id:"addgraphelements",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>addNode</code>",id:"addnode",level:3},{value:"Definition",id:"definition-6",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"<code>addNodes</code>",id:"addnodes",level:3},{value:"Definition",id:"definition-7",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"<code>build</code>",id:"build",level:3},{value:"Definition",id:"definition-8",level:4},{value:"<code>buildMapValues</code>",id:"buildmapvalues",level:3},{value:"Definition",id:"definition-9",level:4},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"<code>connect</code>",id:"connect",level:3},{value:"Definition",id:"definition-10",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"<code>connectAll</code>",id:"connectall",level:3},{value:"Definition",id:"definition-11",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"<code>disconnect</code>",id:"disconnect",level:3},{value:"Definition",id:"definition-12",level:4},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"<code>disconnectAll</code>",id:"disconnectall",level:3},{value:"Definition",id:"definition-13",level:4},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"<code>getValue</code>",id:"getvalue",level:3},{value:"Definitions",id:"definitions",level:4},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"Parameters",id:"parameters-9",level:4},{value:"<code>hasConnection</code>",id:"hasconnection",level:3},{value:"Definition",id:"definition-14",level:4},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Parameters",id:"parameters-10",level:4},{value:"<code>hasNode</code>",id:"hasnode",level:3},{value:"Definition",id:"definition-15",level:4},{value:"Type parameters",id:"type-parameters-6",level:4},{value:"Parameters",id:"parameters-11",level:4},{value:"<code>modifyAt</code>",id:"modifyat",level:3},{value:"Definition",id:"definition-16",level:4},{value:"Parameters",id:"parameters-12",level:4},{value:"<code>removeNode</code>",id:"removenode",level:3},{value:"Definition",id:"definition-17",level:4},{value:"Type parameters",id:"type-parameters-7",level:4},{value:"Parameters",id:"parameters-13",level:4},{value:"<code>removeNodes</code>",id:"removenodes",level:3},{value:"Definition",id:"definition-18",level:4},{value:"Type parameters",id:"type-parameters-8",level:4},{value:"Parameters",id:"parameters-14",level:4}],f={toc:b},v="wrapper";function C(e){var a=e,{components:n}=a,l=u(a,["components"]);return(0,t.yg)(v,y(m(m({},f),l),{components:n,mdxType:"MDXLayout"}),(0,t.yg)("h1",m({},{id:"interface-valuedgraphbasebuildernvtp"}),(0,t.yg)("inlineCode",{parentName:"h1"},"interface ValuedGraphBase.Builder<N,V,Tp>")),(0,t.yg)("p",null,"undocumented"),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Implemented by:")," ",(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/graph/custom/ArrowValuedGraphBase/Builder/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"ArrowValuedGraphBase.Builder<N,V,Tp>")),", ",(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/graph/custom/EdgeValuedGraphBase/Builder/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"EdgeValuedGraphBase.Builder<N,V,Tp>"))),(0,t.yg)("h2",m({},{id:"type-parameters"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"N"),(0,t.yg)("td",m({parentName:"tr"},{align:null})),(0,t.yg)("td",m({parentName:"tr"},{align:null})),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"undocumented")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"V"),(0,t.yg)("td",m({parentName:"tr"},{align:null})),(0,t.yg)("td",m({parentName:"tr"},{align:null})),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"undocumented")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"Tp"),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/graph/custom/ValuedGraphBase/Types/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"ValuedGraphBase.Types"))),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/graph/custom/ValuedGraphBase/Types/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"ValuedGraphBase.Types"))),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"undocumented")))),(0,t.yg)("h2",m({},{id:"properties"}),"Properties"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"connectionsize"}),(0,t.yg)("inlineCode",{parentName:"h3"},"connectionSize")),(0,t.yg)("p",null,"Returns the amount of connections in the graph.")),(0,t.yg)("h4",m({},{id:"definition"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly connectionSize: number;"))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"ArrowValuedGraphHashed\n.of([[1, 2, 'a'], [2, 3, 'b']])\n.toBuilder()\n.connectionsSize\n// => 2\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"context"}),(0,t.yg)("inlineCode",{parentName:"h3"},"context")),(0,t.yg)("p",null,"Returns the ",(0,t.yg)("inlineCode",{parentName:"p"},"context")," associated to this collection instance.")),(0,t.yg)("h4",m({},{id:"definition-1"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly context: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, V>['context'];")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"isempty"}),(0,t.yg)("inlineCode",{parentName:"h3"},"isEmpty")),(0,t.yg)("p",null,"Returns true if there are no entries in the builder.")),(0,t.yg)("h4",m({},{id:"definition-2"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly isEmpty: boolean;"))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"ArrowValuedGraphHashed\n.of([[1, 2, 'a'], [2, 3, 'b']])\n.toBuilder()\n.isEmpty\n// => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"nodesize"}),(0,t.yg)("inlineCode",{parentName:"h3"},"nodeSize")),(0,t.yg)("p",null,"Returns the amount of nodes in the graph.")),(0,t.yg)("h4",m({},{id:"definition-3"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly nodeSize: number;"))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"ArrowValuedGraphHashed\n.of([[1, 2, 'a'], [2, 3, 'b']])\n.toBuilder()\n.nodeSize\n// => 3\n")))),(0,t.yg)("h2",m({},{id:"methods"}),"Methods"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"addgraphelement"}),(0,t.yg)("inlineCode",{parentName:"h3"},"addGraphElement")),(0,t.yg)("p",null,"Adds the given ",(0,t.yg)("inlineCode",{parentName:"p"},"element")," graph element to the graph.")),(0,t.yg)("h4",m({},{id:"definition-4"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"addGraphElement(element: ValuedGraphElement<N, V>): boolean;"))),(0,t.yg)("h4",m({},{id:"parameters"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"element")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"ValuedGraphElement<N, V>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const b = ArrowValuedGraphHashed\n.of([[1, 2, 'a'], [2, 3, 'b']])\n.toBuilder()\nb.addGraphElement([4])         // => true\nb.addGraphElement([3, 1, 'c']) // => true\nb.addGraphElement([1, 2, 'a']) // => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"addgraphelements"}),(0,t.yg)("inlineCode",{parentName:"h3"},"addGraphElements")),(0,t.yg)("p",null,"Adds the graph elements in the given ",(0,t.yg)("inlineCode",{parentName:"p"},"elements")," StreamSource to the graph.")),(0,t.yg)("h4",m({},{id:"definition-5"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"addGraphElements(elements: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<ValuedGraphElement<N, V>>): boolean;"))),(0,t.yg)("h4",m({},{id:"parameters-1"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"elements")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<ValuedGraphElement<N, V>>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const b = ArrowValuedGraphHashed\n.of([[1, 2, 'a'], [2, 3, 'b']])\n.toBuilder()\nb.addGraphElements([[4], [5]])          // => true\nb.addGraphElements([[3, 1, 'c'], [1]])  // => true\nb.addGraphElements([[1, 2, 'a'], [1]])  // => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"addnode"}),(0,t.yg)("inlineCode",{parentName:"h3"},"addNode")),(0,t.yg)("p",null,"Adds the given ",(0,t.yg)("inlineCode",{parentName:"p"},"node")," to the graph.")),(0,t.yg)("h4",m({},{id:"definition-6"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"addNode(node: N): boolean;"))),(0,t.yg)("h4",m({},{id:"parameters-2"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const b = ArrowValuedGraphHashed\n.of([[1, 2, 'a'], [2, 3, 'b']])\n.toBuilder()\nb.addNode(6)   // => true\nb.addNode(1)   // => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"addnodes"}),(0,t.yg)("inlineCode",{parentName:"h3"},"addNodes")),(0,t.yg)("p",null,"Adds the given ",(0,t.yg)("inlineCode",{parentName:"p"},"nodes")," to the builder.")),(0,t.yg)("h4",m({},{id:"definition-7"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"addNodes(nodes: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<N>): boolean;"))),(0,t.yg)("h4",m({},{id:"parameters-3"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"nodes")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<N>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const b = ArrowValuedGraphHashed\n.of([[1, 2, 'a'], [2, 3, 'b']])\n.toBuilder()\nb.addNodes([3, 4, 5]) // => true\nb.addNodes([1, 2])    // => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"build"}),(0,t.yg)("inlineCode",{parentName:"h3"},"build")),(0,t.yg)("p",null,"Returns an immutable graph containing the nodes and connections of this builder.")),(0,t.yg)("h4",m({},{id:"definition-8"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"build(): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, V>['normal'];"))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const b = ArrowValuedGraphHashed\n.of([[1, 2, 'a'], [2, 3, 'b']])\n.toBuilder()\nconst g: ArrowValuedGraphHashed<number, string> = b.build()\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"buildmapvalues"}),(0,t.yg)("inlineCode",{parentName:"h3"},"buildMapValues")),(0,t.yg)("p",null,"Returns an immutable graph containing the nodes and connections of this builder, where the values are mapped using the given ",(0,t.yg)("inlineCode",{parentName:"p"},"mapFun")," function.")),(0,t.yg)("h4",m({},{id:"definition-9"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"buildMapValues<V2>(mapFun: (value: V, node1: N, node2: N) => V2): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, V2>['normal'];"))),(0,t.yg)("h4",m({},{id:"type-parameters-1"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"V2"),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",m({},{id:"parameters-4"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"mapFun")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(value: V, node1: N, node2: N) => V2")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"a function taking the value")))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const b = ArrowValuedGraphHashed\n.of([[1, 2, 'a'], [2, 3, 'b']])\n.toBuilder()\nconst g: ArrowValuedGraphHashed<number, string> = b.buildMapValues(v => v.toUpperCase())\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"connect"}),(0,t.yg)("inlineCode",{parentName:"h3"},"connect")),(0,t.yg)("p",null,"Adds a connection between ",(0,t.yg)("inlineCode",{parentName:"p"},"node1")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"node2")," to the graph with given ",(0,t.yg)("inlineCode",{parentName:"p"},"value"),".")),(0,t.yg)("h4",m({},{id:"definition-10"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"connect(node1: N, node2: N, value: V): boolean;"))),(0,t.yg)("h4",m({},{id:"parameters-5"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node1")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the first connection node")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node2")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the second connection node")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"value")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"V")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const b = ArrowValuedGraphHashed\n.of([[1, 2, 'a'], [2, 3, 'b']])\n.toBuilder()\nb.connect(3, 1, 'c')  // => true\nb.connect(1, 2, 'a')  // => false\nb.connect(1, 2, 'z')  // => true\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"connectall"}),(0,t.yg)("inlineCode",{parentName:"h3"},"connectAll")),(0,t.yg)("p",null,"Adds the connections in given ",(0,t.yg)("inlineCode",{parentName:"p"},"connections")," ",(0,t.yg)("inlineCode",{parentName:"p"},"StreamSource")," to the graph.")),(0,t.yg)("h4",m({},{id:"definition-11"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"connectAll(connections: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<"),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, N, V>['link']>): boolean;"))),(0,t.yg)("h4",m({},{id:"parameters-6"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"connections")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<"),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/graph/custom/WithGraphValues/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithGraphValues")),(0,t.yg)("inlineCode",{parentName:"td"},"<Tp, N, V>['link']>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const b = ArrowValuedGraphHashed\n.of([[1, 2, 'a'], [2, 3, 'b']])\n.toBuilder()\nb.connectAll([[1, 2, 'a'], [3, 1, 'c']]) // => true\nb.connectAll([[1, 2, 'a']])              // => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"disconnect"}),(0,t.yg)("inlineCode",{parentName:"h3"},"disconnect")),(0,t.yg)("p",null,"Removes the connection between given ",(0,t.yg)("inlineCode",{parentName:"p"},"node1")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"node2")," if the connection was present.")),(0,t.yg)("h4",m({},{id:"definition-12"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"disconnect<UN = N>(node1: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>, node2: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>): boolean;"))),(0,t.yg)("h4",m({},{id:"type-parameters-2"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"UN"),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",m({},{id:"parameters-7"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node1")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the first connection node")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node2")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const b = ArrowValuedGraphHashed\n.of([[1, 2, 'a'], [2, 3, 'b']])\n.toBuilder()\nb.disconnect(1, 2)  // => true\nb.disconnect(3, 4)  // => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"disconnectall"}),(0,t.yg)("inlineCode",{parentName:"h3"},"disconnectAll")),(0,t.yg)("p",null,"Removes all connections from the given ",(0,t.yg)("inlineCode",{parentName:"p"},"connections")," ",(0,t.yg)("inlineCode",{parentName:"p"},"StreamSource")," from the graph.")),(0,t.yg)("h4",m({},{id:"definition-13"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"disconnectAll<UN = N>(connections: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<Link<"),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>>>): boolean;"))),(0,t.yg)("h4",m({},{id:"type-parameters-3"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"UN"),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",m({},{id:"parameters-8"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"connections")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<Link<"),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>>>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const b = ArrowValuedGraphHashed\n.of([[1, 2, 'a'], [2, 3, 'b']])\n.toBuilder()\nb.disconnectAll([[1, 2], [3, 4]])  // => true\nb.disconnectAll([[3, 4], [5, 6]])  // => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"getvalue"}),(0,t.yg)("inlineCode",{parentName:"h3"},"getValue")),(0,t.yg)("p",null,"Returns the value associated with the connection between ",(0,t.yg)("inlineCode",{parentName:"p"},"node1")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"node2"),", or given ",(0,t.yg)("inlineCode",{parentName:"p"},"otherwise")," value if the key is not in the collection.")),(0,t.yg)("h4",m({},{id:"definitions"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"getValue<UN = N>(node1: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>, node2: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>): V "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"getValue<UN, O>(node1: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>, node2: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>, otherwise: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,t.yg)("inlineCode",{parentName:"p"},"<O>): V "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," O;"))),(0,t.yg)("h4",m({},{id:"type-parameters-4"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"UN"),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",m({},{id:"parameters-9"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node1")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the first connection node")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node2")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the second connection node")))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const b = ArrowValuedGraphHashed\n.of([[1, 2, 'a'], [2, 3, 'b']])\n.toBuilder()\nm.getValue(2, 3)          // => 'b'\nm.getValue(3, 4)          // => undefined\nm.getValue(2, 3, 'none')  // => 'b'\nm.getValue(3, 4, 'none')  // => 'none'\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"hasconnection"}),(0,t.yg)("inlineCode",{parentName:"h3"},"hasConnection")),(0,t.yg)("p",null,"Returns true if the graph has a connection between given nodes ",(0,t.yg)("inlineCode",{parentName:"p"},"node1")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"node2"),".")),(0,t.yg)("h4",m({},{id:"definition-14"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"hasConnection<UN = N>(node1: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>, node2: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>): boolean;"))),(0,t.yg)("h4",m({},{id:"type-parameters-5"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"UN"),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",m({},{id:"parameters-10"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node1")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the first connection node")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node2")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the second connection node")))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const b = ArrowValuedGraphHashed\n.of([[1, 2, 'a'], [2, 3, 'b']])\n.toBuilder()\nb.hasConnection(1, 2)   // => true\nb.hasConnection(6, 7)   // => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"hasnode"}),(0,t.yg)("inlineCode",{parentName:"h3"},"hasNode")),(0,t.yg)("p",null,"Returns true if the graph contains the given ",(0,t.yg)("inlineCode",{parentName:"p"},"node"),".")),(0,t.yg)("h4",m({},{id:"definition-15"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"hasNode<UN = N>(node: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>): boolean;"))),(0,t.yg)("h4",m({},{id:"type-parameters-6"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"UN"),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",m({},{id:"parameters-11"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the node to search")))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const b = ArrowValuedGraphHashed\n.of([[1, 2, 'a'], [2, 3, 'b']])\n.toBuilder()\nb.hasNode(1)   // => true\nb.hasNode(6)   // => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"modifyat"}),(0,t.yg)("inlineCode",{parentName:"h3"},"modifyAt")),(0,t.yg)("p",null,"Modifies the graph at the connection between given ",(0,t.yg)("inlineCode",{parentName:"p"},"node1")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"node2")," modified according to given ",(0,t.yg)("inlineCode",{parentName:"p"},"options"),".")),(0,t.yg)("h4",m({},{id:"definition-16"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"modifyAt(node1: N, node2: N, options: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"ifNew?: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/OptLazyOr/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazyOr")),(0,t.yg)("inlineCode",{parentName:"p"},"<V, Token>;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"ifExists?: (value: V, remove: Token) => V "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," Token;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): boolean;"))),(0,t.yg)("h4",m({},{id:"parameters-12"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node1")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the first connection node")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node2")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the second connection node")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"ifNew?: "),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/common/OptLazyOr/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazyOr")),(0,t.yg)("inlineCode",{parentName:"td"},"<V, Token>;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"ifExists?: (value: V, remove: Token) => V "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," Token;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const b = ArrowValuedGraphHashed\n.of([[1, 2, 'a'], [2, 3, 'b']])\n.toBuilder()\nb.modifyAt(3, 4, { ifNew: 'c' })                           // => true\ng.modifyAt(4, 5, { ifNew: (none) => 1 < 2 ? none : 'c' })  // => false\ng.modifyAt(1, 2, { ifNew: 'a' })                           // => false\ng.modifyAt(1, 2, { ifExists: () => 'c' })                        // => false\ng.modifyAt(1, 2, { ifExists: (v) => v + 'z' })               // => true\ng.modifyAt(2, 3, { ifExists: (v, remove) => v === 'a' ? v : remove })\n// => true\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"removenode"}),(0,t.yg)("inlineCode",{parentName:"h3"},"removeNode")),(0,t.yg)("p",null,"Removes the given ",(0,t.yg)("inlineCode",{parentName:"p"},"node"),", and any of its connections, from the graph.")),(0,t.yg)("h4",m({},{id:"definition-17"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"removeNode<UN = N>(node: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>): boolean;"))),(0,t.yg)("h4",m({},{id:"type-parameters-7"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"UN"),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",m({},{id:"parameters-13"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"node")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const b = ArrowValuedGraphHashed\n.of([[1, 2, 'a'], [2, 3, 'b']])\n.toBuilder()\nb.removeNode(1)  // => true\nb.removeNode(6)  // => false\n")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"removenodes"}),(0,t.yg)("inlineCode",{parentName:"h3"},"removeNodes")),(0,t.yg)("p",null,"Removes the given ",(0,t.yg)("inlineCode",{parentName:"p"},"nodes"),", and any of their connections, from the graph.")),(0,t.yg)("h4",m({},{id:"definition-18"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"removeNodes<UN = N>(nodes: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<"),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<N, UN>>): boolean;"))),(0,t.yg)("h4",m({},{id:"type-parameters-8"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"UN"),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",m({},{id:"parameters-14"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"nodes")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<"),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<N, UN>>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const b = ArrowValuedGraphHashed\n.of([[1, 2, 'a'], [2, 3, 'b']])\n.toBuilder()\nb.removeNodes([1, 6, 7])  // => true\nb.removeNodes([6, 7])     // => false\n")))))}C.isMDXComponent=!0}}]);