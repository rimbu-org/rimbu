"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[92563],{15680:(e,a,n)=>{n.d(a,{xA:()=>d,yg:()=>u});var t=n(96540);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function i(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?i(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function o(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=t.createContext({}),y=function(e){var a=t.useContext(p),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},d=function(e){var a=y(e.components);return t.createElement(p.Provider,{value:a},e.children)},m="mdxType",g={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},s=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=y(n),s=r,u=m["".concat(p,".").concat(s)]||m[s]||g[s]||i;return n?t.createElement(u,l(l({ref:a},d),{},{components:n})):t.createElement(u,l({ref:a},d))}));function u(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=s;var o={};for(var p in a)hasOwnProperty.call(a,p)&&(o[p]=a[p]);o.originalType=e,o[m]="string"==typeof e?e:r,l[1]=o;for(var y=2;y<i;y++)l[y]=n[y];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}s.displayName="MDXCreateElement"},63771:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>h,contentTitle:()=>N,default:()=>C,frontMatter:()=>u,metadata:()=>c,toc:()=>v});var t=n(15680),r=Object.defineProperty,i=Object.defineProperties,l=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,y=Object.prototype.propertyIsEnumerable,d=(e,a,n)=>a in e?r(e,a,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[a]=n,m=(e,a)=>{for(var n in a||(a={}))p.call(a,n)&&d(e,n,a[n]);if(o)for(var n of o(a))y.call(a,n)&&d(e,n,a[n]);return e},g=(e,a)=>i(e,l(a)),s=(e,a)=>{var n={};for(var t in e)p.call(e,t)&&a.indexOf(t)<0&&(n[t]=e[t]);if(null!=e&&o)for(var t of o(e))a.indexOf(t)<0&&y.call(e,t)&&(n[t]=e[t]);return n};const u={title:"SortedMap.NonEmpty<K,V>",slug:"/rimbu/sorted/map/SortedMap/NonEmpty/interface"},N="interface SortedMap.NonEmpty<K,V>",c={unversionedId:"rimbu_sorted/map/SortedMap/NonEmpty.interface",id:"rimbu_sorted/map/SortedMap/NonEmpty.interface",title:"SortedMap.NonEmpty<K,V>",description:"A non-empty type-invariant immutable Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the Map documentation and the SortedMap API documentation",source:"@site/api/rimbu_sorted/map/SortedMap/NonEmpty.interface.mdx",sourceDirName:"rimbu_sorted/map/SortedMap",slug:"/rimbu/sorted/map/SortedMap/NonEmpty/interface",permalink:"/api/rimbu/sorted/map/SortedMap/NonEmpty/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"SortedMap.NonEmpty<K,V>",slug:"/rimbu/sorted/map/SortedMap/NonEmpty/interface"},sidebar:"defaultSidebar",previous:{title:"SortedMap.Context<UK>",permalink:"/api/rimbu/sorted/map/SortedMap/Context/interface"},next:{title:"SortedMap.Types",permalink:"/api/rimbu/sorted/map/SortedMap/Types/interface"}},h={},v=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>context</code>",id:"context",level:3},{value:"Definition",id:"definition",level:4},{value:"Overrides",id:"overrides",level:4},{value:"<code>isEmpty</code>",id:"isempty",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"<code>size</code>",id:"size",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"Methods",id:"methods",level:2},{value:"<code>[Symbol.iterator]</code>",id:"symboliterator",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"<code>addEntries</code>",id:"addentries",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Overrides",id:"overrides-4",level:4},{value:"<code>addEntry</code>",id:"addentry",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Overrides",id:"overrides-5",level:4},{value:"<code>asNormal</code>",id:"asnormal",level:3},{value:"Definition",id:"definition-6",level:4},{value:"Overrides",id:"overrides-6",level:4},{value:"<code>assumeNonEmpty</code>",id:"assumenonempty",level:3},{value:"Definition",id:"definition-7",level:4},{value:"Overrides",id:"overrides-7",level:4},{value:"<code>drop</code>",id:"drop",level:3},{value:"Definition",id:"definition-8",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Overrides",id:"overrides-8",level:4},{value:"<code>filter</code>",id:"filter",level:3},{value:"Definition",id:"definition-9",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Overrides",id:"overrides-9",level:4},{value:"<code>findIndex</code>",id:"findindex",level:3},{value:"Definition",id:"definition-10",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"Overrides",id:"overrides-10",level:4},{value:"<code>forEach</code>",id:"foreach",level:3},{value:"Definition",id:"definition-11",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"Overrides",id:"overrides-11",level:4},{value:"<code>get</code>",id:"get",level:3},{value:"Definitions",id:"definitions",level:4},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"Overrides",id:"overrides-12",level:4},{value:"<code>getAtIndex</code>",id:"getatindex",level:3},{value:"Definitions",id:"definitions-1",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"Overrides",id:"overrides-13",level:4},{value:"<code>getKeyAtIndex</code>",id:"getkeyatindex",level:3},{value:"Definitions",id:"definitions-2",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"Overrides",id:"overrides-14",level:4},{value:"<code>getValueAtIndex</code>",id:"getvalueatindex",level:3},{value:"Definitions",id:"definitions-3",level:4},{value:"Parameters",id:"parameters-9",level:4},{value:"Overrides",id:"overrides-15",level:4},{value:"<code>hasKey</code>",id:"haskey",level:3},{value:"Definition",id:"definition-12",level:4},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"Parameters",id:"parameters-10",level:4},{value:"Overrides",id:"overrides-16",level:4},{value:"<code>mapValues</code>",id:"mapvalues",level:3},{value:"Definition",id:"definition-13",level:4},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Parameters",id:"parameters-11",level:4},{value:"Overrides",id:"overrides-17",level:4},{value:"<code>max</code>",id:"max",level:3},{value:"Definition",id:"definition-14",level:4},{value:"Overrides",id:"overrides-18",level:4},{value:"<code>maxKey</code>",id:"maxkey",level:3},{value:"Definition",id:"definition-15",level:4},{value:"Overrides",id:"overrides-19",level:4},{value:"<code>maxValue</code>",id:"maxvalue",level:3},{value:"Definition",id:"definition-16",level:4},{value:"Overrides",id:"overrides-20",level:4},{value:"<code>min</code>",id:"min",level:3},{value:"Definition",id:"definition-17",level:4},{value:"Overrides",id:"overrides-21",level:4},{value:"<code>minKey</code>",id:"minkey",level:3},{value:"Definition",id:"definition-18",level:4},{value:"Overrides",id:"overrides-22",level:4},{value:"<code>minValue</code>",id:"minvalue",level:3},{value:"Definition",id:"definition-19",level:4},{value:"Overrides",id:"overrides-23",level:4},{value:"<code>modifyAt</code>",id:"modifyat",level:3},{value:"Definition",id:"definition-20",level:4},{value:"Parameters",id:"parameters-12",level:4},{value:"Overrides",id:"overrides-24",level:4},{value:"<code>nonEmpty</code>",id:"nonempty",level:3},{value:"Definition",id:"definition-21",level:4},{value:"Overrides",id:"overrides-25",level:4},{value:"<code>removeKey</code>",id:"removekey",level:3},{value:"Definition",id:"definition-22",level:4},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"Parameters",id:"parameters-13",level:4},{value:"Overrides",id:"overrides-26",level:4},{value:"<code>removeKeyAndGet</code>",id:"removekeyandget",level:3},{value:"Definition",id:"definition-23",level:4},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Parameters",id:"parameters-14",level:4},{value:"Overrides",id:"overrides-27",level:4},{value:"<code>removeKeys</code>",id:"removekeys",level:3},{value:"Definition",id:"definition-24",level:4},{value:"Type parameters",id:"type-parameters-6",level:4},{value:"Parameters",id:"parameters-15",level:4},{value:"Overrides",id:"overrides-28",level:4},{value:"<code>set</code>",id:"set",level:3},{value:"Definition",id:"definition-25",level:4},{value:"Parameters",id:"parameters-16",level:4},{value:"Overrides",id:"overrides-29",level:4},{value:"<code>slice</code>",id:"slice",level:3},{value:"Definition",id:"definition-26",level:4},{value:"Parameters",id:"parameters-17",level:4},{value:"Overrides",id:"overrides-30",level:4},{value:"<code>sliceIndex</code>",id:"sliceindex",level:3},{value:"Definition",id:"definition-27",level:4},{value:"Parameters",id:"parameters-18",level:4},{value:"Overrides",id:"overrides-31",level:4},{value:"<code>stream</code>",id:"stream",level:3},{value:"Definition",id:"definition-28",level:4},{value:"Parameters",id:"parameters-19",level:4},{value:"Overrides",id:"overrides-32",level:4},{value:"<code>streamKeys</code>",id:"streamkeys",level:3},{value:"Definition",id:"definition-29",level:4},{value:"Parameters",id:"parameters-20",level:4},{value:"Overrides",id:"overrides-33",level:4},{value:"<code>streamRange</code>",id:"streamrange",level:3},{value:"Definition",id:"definition-30",level:4},{value:"Parameters",id:"parameters-21",level:4},{value:"Overrides",id:"overrides-34",level:4},{value:"<code>streamSliceIndex</code>",id:"streamsliceindex",level:3},{value:"Definition",id:"definition-31",level:4},{value:"Parameters",id:"parameters-22",level:4},{value:"Overrides",id:"overrides-35",level:4},{value:"<code>streamValues</code>",id:"streamvalues",level:3},{value:"Definition",id:"definition-32",level:4},{value:"Parameters",id:"parameters-23",level:4},{value:"Overrides",id:"overrides-36",level:4},{value:"<code>take</code>",id:"take",level:3},{value:"Definition",id:"definition-33",level:4},{value:"Type parameters",id:"type-parameters-7",level:4},{value:"Parameters",id:"parameters-24",level:4},{value:"Overrides",id:"overrides-37",level:4},{value:"<code>toArray</code>",id:"toarray",level:3},{value:"Definition",id:"definition-34",level:4},{value:"Overrides",id:"overrides-38",level:4},{value:"<code>toBuilder</code>",id:"tobuilder",level:3},{value:"Definition",id:"definition-35",level:4},{value:"Overrides",id:"overrides-39",level:4},{value:"<code>toJSON</code>",id:"tojson",level:3},{value:"Definition",id:"definition-36",level:4},{value:"Overrides",id:"overrides-40",level:4},{value:"<code>toString</code>",id:"tostring",level:3},{value:"Definition",id:"definition-37",level:4},{value:"Overrides",id:"overrides-41",level:4},{value:"<code>updateAt</code>",id:"updateat",level:3},{value:"Definition",id:"definition-38",level:4},{value:"Type parameters",id:"type-parameters-8",level:4},{value:"Parameters",id:"parameters-25",level:4},{value:"Overrides",id:"overrides-42",level:4}],f={toc:v},b="wrapper";function C(e){var a=e,{components:n}=a,r=s(a,["components"]);return(0,t.yg)(b,g(m(m({},f),r),{components:n,mdxType:"MDXLayout"}),(0,t.yg)("h1",m({},{id:"interface-sortedmapnonemptykv"}),(0,t.yg)("inlineCode",{parentName:"h1"},"interface SortedMap.NonEmpty<K,V>")),(0,t.yg)("p",null,"A non-empty type-invariant immutable Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the ",(0,t.yg)("a",m({parentName:"p"},{href:"https://rimbu.org/docs/collections/map"}),"Map documentation")," and the ",(0,t.yg)("a",m({parentName:"p"},{href:"https://rimbu.org/api/rimbu/sorted/map/SortedMap/interface"}),"SortedMap API documentation"),"  "),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Extends:")," ",(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/stream/Streamable/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Streamable.NonEmpty<T>")),", ",(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"RMapBase.NonEmpty<K,V,Tp>")),", ",(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/sorted/map/SortedMap/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"SortedMap<K,V>"))),(0,t.yg)("h2",m({},{id:"type-parameters"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"K"),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the key type")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"V"),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the value type")))),(0,t.yg)("admonition",m({},{title:"note",type:"note"}),(0,t.yg)("ul",{parentName:"admonition"},(0,t.yg)("li",{parentName:"ul"},"The ",(0,t.yg)("inlineCode",{parentName:"li"},"SortedMap")," keeps the inserted keys in sorted order according to the context's ",(0,t.yg)("inlineCode",{parentName:"li"},"comp")," instance."))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const m1 = SortedMap.empty<number, string>()\nconst m2 = SortedMap.of([1, 'a'], [2, 'b'])\n"))),(0,t.yg)("h2",m({},{id:"properties"}),"Properties"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"context"}),(0,t.yg)("inlineCode",{parentName:"h3"},"context")),(0,t.yg)("p",null,"Returns the ",(0,t.yg)("inlineCode",{parentName:"p"},"context")," associated to this collection instance.")),(0,t.yg)("h4",m({},{id:"definition"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly context: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['context'];"))),(0,t.yg)("h4",m({},{id:"overrides"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/interface#context"}),"RMapBase.context"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"isempty"}),(0,t.yg)("inlineCode",{parentName:"h3"},"isEmpty")),(0,t.yg)("p",null,"Returns false since this collection is known to be non-empty.")),(0,t.yg)("h4",m({},{id:"definition-1"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly isEmpty: false;"))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 1], [2, 2]).isEmpty   // => false\n"))),(0,t.yg)("h4",m({},{id:"overrides-1"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/interface#isEmpty"}),"VariantMapBase.isEmpty"),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/NonEmpty/interface#isEmpty"}),"NonEmpty.isEmpty"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"size"}),(0,t.yg)("inlineCode",{parentName:"h3"},"size")),(0,t.yg)("p",null,"Returns the number of entries")),(0,t.yg)("h4",m({},{id:"definition-2"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly size: number;"))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 1], [2, 2]).size       // => 2\n"))),(0,t.yg)("h4",m({},{id:"overrides-2"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/interface#size"}),"VariantMapBase.size"))),(0,t.yg)("h2",m({},{id:"methods"}),"Methods"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"symboliterator"}),(0,t.yg)("inlineCode",{parentName:"h3"},"[Symbol.iterator]")),(0,t.yg)("p",null,"Returns a ",(0,t.yg)("inlineCode",{parentName:"p"},"FastIterator")," instance used to iterate over the values of this ",(0,t.yg)("inlineCode",{parentName:"p"},"Iterable"),".")),(0,t.yg)("h4",m({},{id:"definition-3"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"[Symbol.iterator](): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/stream/FastIterator/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"FastIterator")),(0,t.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,t.yg)("h4",m({},{id:"overrides-3"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/stream/FastIterable/interface#%5BSymbol.iterator%5D"}),"FastIterable.[Symbol.iterator]"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"addentries"}),(0,t.yg)("inlineCode",{parentName:"h3"},"addEntries")),(0,t.yg)("p",null,"Returns the collection with the entries from the given ",(0,t.yg)("inlineCode",{parentName:"p"},"StreamSource")," ",(0,t.yg)("inlineCode",{parentName:"p"},"entries")," added.")),(0,t.yg)("h4",m({},{id:"definition-4"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"addEntries(entries: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<readonly [K, V]>): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['nonEmpty'];"))),(0,t.yg)("h4",m({},{id:"parameters"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"entries")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<readonly [K, V]>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"a ",(0,t.yg)("inlineCode",{parentName:"td"},"StreamSource")," containing tuples with a key and value")))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 'a']).addEntries([[2, 'b']]).toArray()   // => [[1, 'a'], [2, 'b']]\n"))),(0,t.yg)("h4",m({},{id:"overrides-4"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/interface#addEntries"}),"RMapBase.addEntries"),", ",(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/NonEmpty/interface#addEntries"}),"NonEmpty.addEntries"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"addentry"}),(0,t.yg)("inlineCode",{parentName:"h3"},"addEntry")),(0,t.yg)("p",null,"Returns the collection with given ",(0,t.yg)("inlineCode",{parentName:"p"},"entry")," added.")),(0,t.yg)("h4",m({},{id:"definition-5"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"addEntry(entry: readonly [K, V]): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['nonEmpty'];"))),(0,t.yg)("h4",m({},{id:"parameters-1"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"entry")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"readonly [K, V]")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"a tuple containing a key and value")))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 'a']).addEntry([2, 'b']).toArray()   // => [[1, 'a'], [2, 'b']]\nHashMap.of([1, 'a']).addEntry([1, 'b']).toArray()   // => [[1, 'b']]\n"))),(0,t.yg)("h4",m({},{id:"overrides-5"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/interface#addEntry"}),"RMapBase.addEntry"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"asnormal"}),(0,t.yg)("inlineCode",{parentName:"h3"},"asNormal")),(0,t.yg)("p",null,"Returns this collection typed as a 'possibly empty' collection.")),(0,t.yg)("h4",m({},{id:"definition-6"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"asNormal(): (Tp & "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/KeyValue/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"KeyValue")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, V>)['normal'];"))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 1], [2, 2]).asNormal();  // type: HashMap<number, number>\n"))),(0,t.yg)("h4",m({},{id:"overrides-6"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/NonEmpty/interface#asNormal"}),"NonEmpty.asNormal"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"assumenonempty"}),(0,t.yg)("inlineCode",{parentName:"h3"},"assumeNonEmpty")),(0,t.yg)("p",null,"Returns a self reference since this collection is known to be non-empty.")),(0,t.yg)("h4",m({},{id:"definition-7"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"assumeNonEmpty(): this;"))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 1], [2, 2]);\nm === m.assumeNonEmpty()  // => true\n"))),(0,t.yg)("h4",m({},{id:"overrides-7"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/interface#assumeNonEmpty"}),"VariantMapBase.assumeNonEmpty"),", ",(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/NonEmpty/interface#assumeNonEmpty"}),"NonEmpty.assumeNonEmpty"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"drop"}),(0,t.yg)("inlineCode",{parentName:"h3"},"drop")),(0,t.yg)("p",null,"Returns a SortedMap containing all but the the first ",(0,t.yg)("inlineCode",{parentName:"p"},"amount")," of elements of this SortedMap.")),(0,t.yg)("h4",m({},{id:"definition-8"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"drop(amount: number): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/sorted/map/SortedMap/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"SortedMap")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,t.yg)("h4",m({},{id:"parameters-2"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"amount")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"number")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the amount of elements to drop")))),(0,t.yg)("admonition",m({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"a negative ",(0,t.yg)("inlineCode",{parentName:"p"},"amount")," drops the last elements instead of the first, e.g. -2 is the last 2 elements")),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const m = SortedMap.of(['b', 2], ['d', 4], ['a', 1], ['c', 3]).asNormal();\nconsole.log(m.drop(2).toArray())\n// => [['c', ], ['d', 4]]\nconsole.log(m.drop(-2).toArray())\n// => [['a', 1], ['b', 2]]\n"))),(0,t.yg)("h4",m({},{id:"overrides-8"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/sorted/map/SortedMap/interface#drop"}),"SortedMap.drop"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"filter"}),(0,t.yg)("inlineCode",{parentName:"h3"},"filter")),(0,t.yg)("p",null,"Returns a collection containing only those entries that satisfy given ",(0,t.yg)("inlineCode",{parentName:"p"},"pred")," predicate.")),(0,t.yg)("h4",m({},{id:"definition-9"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"filter(pred: (entry: readonly [K, V], index: number, halt: () => void) => boolean, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"negate?: boolean;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,t.yg)("h4",m({},{id:"parameters-3"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"pred")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(entry: readonly [K, V], index: number, halt: () => void) => boolean")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"a predicate function receiving:",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"entry"),": the next entry",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"index"),": the entry index",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"halt"),": a function that, when called, ensures no next elements are passed")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"negate?: boolean;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,t.yg)("br",null)," - negate: (default: false) when true will negate the predicate")))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 'a'], [2, 'b'], [3, 'c']).filter(entry => entry[0] === 2 || entry[1] === 'c').toArray()\n// => [[2, 'b'], [3, 'c']]\n"))),(0,t.yg)("h4",m({},{id:"overrides-9"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/interface#filter"}),"VariantMapBase.filter"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"findindex"}),(0,t.yg)("inlineCode",{parentName:"h3"},"findIndex")),(0,t.yg)("p",null,"Returns the index of the given key in the SortedMap, or -1 if the key is not present.")),(0,t.yg)("h4",m({},{id:"definition-10"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"findIndex(key: K): number;"))),(0,t.yg)("h4",m({},{id:"parameters-4"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"key")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"K")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the key to find the index for")))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const m = SortedMap.of(['b', 2], ['d', 4], ['a', 1], ['c', 3]);\nconsole.log(m.findIndex('c'))\n// => 2\nconsole.log(m.findIndex('q'))\n// => -1\n"))),(0,t.yg)("h4",m({},{id:"overrides-10"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/sorted/map/SortedMap/interface#findIndex"}),"SortedMap.findIndex"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"foreach"}),(0,t.yg)("inlineCode",{parentName:"h3"},"forEach")),(0,t.yg)("p",null,"Performs given function ",(0,t.yg)("inlineCode",{parentName:"p"},"f")," for each entry of the collection, using given ",(0,t.yg)("inlineCode",{parentName:"p"},"state")," as initial traversal state.")),(0,t.yg)("h4",m({},{id:"definition-11"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"forEach(f: (entry: readonly [K, V], index: number, halt: () => void) => void, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"state?: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/TraverseState/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"TraverseState")),(0,t.yg)("inlineCode",{parentName:"p"},";"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): void;"))),(0,t.yg)("h4",m({},{id:"parameters-5"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"f")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(entry: readonly [K, V], index: number, halt: () => void) => void")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the function to perform for each entry, receiving:",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"entry"),": the next tuple of a key and value",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"index"),": the index of the element",(0,t.yg)("br",null)," - ",(0,t.yg)("inlineCode",{parentName:"td"},"halt"),": a function that, if called, ensures that no new elements are passed")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"state?: "),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/common/TraverseState/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"TraverseState")),(0,t.yg)("inlineCode",{parentName:"td"},";"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,t.yg)("br",null)," - state:: (optional) the traversal state")))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 'a'], [2, 'b'], [3, 'c']).forEach((entry, i, halt) => {\nconsole.log([entry[1], entry[0]]);\nif (i >= 1) halt();\n})\n// => logs ['a', 1]  ['b', 2]\n"))),(0,t.yg)("admonition",m({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(N)")),(0,t.yg)("h4",m({},{id:"overrides-11"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/interface#forEach"}),"VariantMapBase.forEach"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"get"}),(0,t.yg)("inlineCode",{parentName:"h3"},"get")),(0,t.yg)("p",null,"Returns the value associated with the given ",(0,t.yg)("inlineCode",{parentName:"p"},"key"),", or given ",(0,t.yg)("inlineCode",{parentName:"p"},"otherwise")," value if the key is not in the collection.")),(0,t.yg)("h4",m({},{id:"definitions"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"get<UK = K>(key: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, UK>): V "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"get<UK, O>(key: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, UK>, otherwise: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,t.yg)("inlineCode",{parentName:"p"},"<O>): V "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," O;"))),(0,t.yg)("h4",m({},{id:"type-parameters-1"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"UK"),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"K")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",m({},{id:"parameters-6"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"key")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<K, UK>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the key to look for")))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b'])\nm.get(2)          // => 'b'\nm.get(3)          // => undefined\nm.get(2, 'none')  // => 'b'\nm.get(3, 'none')  // => 'none'\n"))),(0,t.yg)("h4",m({},{id:"overrides-12"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/interface#get"}),"VariantMapBase.get"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"getatindex"}),(0,t.yg)("inlineCode",{parentName:"h3"},"getAtIndex")),(0,t.yg)("p",null,"Returns the entry with its key at the given index of the key sort order of the SortedMap, or a fallback value (default: undefined) if the index is out of bounds.")),(0,t.yg)("h4",m({},{id:"definitions-1"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"getAtIndex(index: number): readonly [K, V] "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"getAtIndex<O>(index: number, otherwise: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,t.yg)("inlineCode",{parentName:"p"},"<O>): readonly [K, V] "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," O;"))),(0,t.yg)("h4",m({},{id:"parameters-7"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"index")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"number")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the index in the key sort order")))),(0,t.yg)("admonition",m({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"negative index values will retrieve the values from the end of the sort order, e.g. -1 is the last value")),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const m = SortedMap.of(['b', 2], ['d', 4], ['a', 1], ['c', 3]).asNormal();\nconsole.log(m.getAtIndex(1))\n// => ['b', 2]\nconsole.log(m.getAtIndex(-1))\n// => ['d', 4]\nconsole.log(m.getAtIndex(10))\n// => undefined\nconsole.log(m.getAtIndex(10, 'q'))\n// => 'q'\n"))),(0,t.yg)("h4",m({},{id:"overrides-13"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/sorted/map/SortedMap/interface#getAtIndex"}),"SortedMap.getAtIndex"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"getkeyatindex"}),(0,t.yg)("inlineCode",{parentName:"h3"},"getKeyAtIndex")),(0,t.yg)("p",null,"Returns the key at the given index of the key sort order of the SortedMap, or a fallback value (default: undefined) if the index is out of bounds.")),(0,t.yg)("h4",m({},{id:"definitions-2"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"getKeyAtIndex(index: number): K "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"getKeyAtIndex<O>(index: number, otherwise: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,t.yg)("inlineCode",{parentName:"p"},"<O>): K "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," O;"))),(0,t.yg)("h4",m({},{id:"parameters-8"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"index")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"number")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the index in the key sort order")))),(0,t.yg)("admonition",m({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"negative index values will retrieve the values from the end of the sort order, e.g. -1 is the last value")),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const m = SortedMap.of(['b', 2], ['d', 4], ['a', 1], ['c', 3]).asNormal();\nconsole.log(m.getKeyAtIndex(1))\n// => 'b'\nconsole.log(m.getKeyAtIndex(-1))\n// => 'd'\nconsole.log(m.getKeyAtIndex(10))\n// => undefined\nconsole.log(m.getKeyAtIndex(10, 'q'))\n// => 'q'\n"))),(0,t.yg)("h4",m({},{id:"overrides-14"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/sorted/map/SortedMap/interface#getKeyAtIndex"}),"SortedMap.getKeyAtIndex"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"getvalueatindex"}),(0,t.yg)("inlineCode",{parentName:"h3"},"getValueAtIndex")),(0,t.yg)("p",null,"Returns the value associated with the key at the given index of the key sort order of the SortedMap, or a fallback value (default: undefined) if the index is out of bounds.")),(0,t.yg)("h4",m({},{id:"definitions-3"}),"Definitions"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"getValueAtIndex(index: number): V "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"))),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"getValueAtIndex<O>(index: number, otherwise: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,t.yg)("inlineCode",{parentName:"p"},"<O>): V "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," O;"))),(0,t.yg)("h4",m({},{id:"parameters-9"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"index")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"number")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the index in the key sort order")))),(0,t.yg)("admonition",m({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"negative index values will retrieve the values from the end of the sort order, e.g. -1 is the last value")),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const m = SortedMap.of(['b', 2], ['d', 4], ['a', 1], ['c', 3]).asNormal();\nconsole.log(m.getValueAtIndex(1))\n// => 2\nconsole.log(m.getValueAtIndex(-1))\n// => 4\nconsole.log(m.getValueAtIndex(10))\n// => undefined\nconsole.log(m.getValueAtIndex(10, 'q'))\n// => 'q'\n"))),(0,t.yg)("h4",m({},{id:"overrides-15"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/sorted/map/SortedMap/interface#getValueAtIndex"}),"SortedMap.getValueAtIndex"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"haskey"}),(0,t.yg)("inlineCode",{parentName:"h3"},"hasKey")),(0,t.yg)("p",null,"Returns true if the given ",(0,t.yg)("inlineCode",{parentName:"p"},"key")," is present in the collection.")),(0,t.yg)("h4",m({},{id:"definition-12"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"hasKey<UK = K>(key: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, UK>): boolean;"))),(0,t.yg)("h4",m({},{id:"type-parameters-2"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"UK"),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"K")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",m({},{id:"parameters-10"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"key")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<K, UK>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the key to look for")))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b'])\nm.hasKey(2)    // => true\nm.hasKey(3)    // => false\n"))),(0,t.yg)("h4",m({},{id:"overrides-16"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/interface#hasKey"}),"VariantMapBase.hasKey"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"mapvalues"}),(0,t.yg)("inlineCode",{parentName:"h3"},"mapValues")),(0,t.yg)("p",null,"Returns a non-empty collection with the same keys, but where the given ",(0,t.yg)("inlineCode",{parentName:"p"},"mapFun")," function is applied to each entry value.")),(0,t.yg)("h4",m({},{id:"definition-13"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"mapValues<V2>(mapFun: (value: V, key: K) => V2): (Tp & "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/KeyValue/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"KeyValue")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, V2>)['nonEmpty'];"))),(0,t.yg)("h4",m({},{id:"type-parameters-3"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"V2"),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",m({},{id:"parameters-11"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"mapFun")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"(value: V, key: K) => V2")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"a function taking a ",(0,t.yg)("inlineCode",{parentName:"td"},"value")," and a ",(0,t.yg)("inlineCode",{parentName:"td"},"key"),", and returning a new value")))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 'a'], [2, 'abc']).mapValues(v => v.length).toArray()\n// => [[1, 1], [2, 3]]\n"))),(0,t.yg)("h4",m({},{id:"overrides-17"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/interface#mapValues"}),"VariantMapBase.mapValues"),", ",(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/NonEmpty/interface#mapValues"}),"NonEmpty.mapValues"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"max"}),(0,t.yg)("inlineCode",{parentName:"h3"},"max")),(0,t.yg)("p",null,"Returns the entry with the maximum key of the SortedMap.")),(0,t.yg)("h4",m({},{id:"definition-14"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"max(): readonly [K, V];"))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const m = SortedMap.of(['b', 2], ['d', 4], ['a', 1], ['c', 3]).asNormal();\nconsole.log(m.max())\n// => ['d', 4]\n"))),(0,t.yg)("h4",m({},{id:"overrides-18"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/sorted/map/SortedMap/interface#max"}),"SortedMap.max"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"maxkey"}),(0,t.yg)("inlineCode",{parentName:"h3"},"maxKey")),(0,t.yg)("p",null,"Returns the maximum key of the SortedMap.")),(0,t.yg)("h4",m({},{id:"definition-15"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"maxKey(): K;"))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const m = SortedMap.of(['b', 2], ['d', 4], ['a', 1], ['c', 3]).asNormal();\nconsole.log(m.maxKey())\n// => 'a'\n"))),(0,t.yg)("h4",m({},{id:"overrides-19"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/sorted/map/SortedMap/interface#maxKey"}),"SortedMap.maxKey"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"maxvalue"}),(0,t.yg)("inlineCode",{parentName:"h3"},"maxValue")),(0,t.yg)("p",null,"Returns the value associated with the maximum key of the SortedMap.")),(0,t.yg)("h4",m({},{id:"definition-16"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"maxValue(): V;"))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const m = SortedMap.of(['b', 2], ['d', 4], ['a', 1], ['c', 3]).asNormal();\nconsole.log(m.maxValue())\n// => 4\n"))),(0,t.yg)("h4",m({},{id:"overrides-20"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/sorted/map/SortedMap/interface#maxValue"}),"SortedMap.maxValue"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"min"}),(0,t.yg)("inlineCode",{parentName:"h3"},"min")),(0,t.yg)("p",null,"Returns the entry with the minimum key of the SortedMap.")),(0,t.yg)("h4",m({},{id:"definition-17"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"min(): readonly [K, V];"))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const m = SortedMap.of(['b', 2], ['d', 4], ['a', 1], ['c', 3]);\nconsole.log(m.min())\n// => ['a', 1]\n"))),(0,t.yg)("h4",m({},{id:"overrides-21"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/sorted/map/SortedMap/interface#min"}),"SortedMap.min"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"minkey"}),(0,t.yg)("inlineCode",{parentName:"h3"},"minKey")),(0,t.yg)("p",null,"Returns the minimum key of the SortedMap.")),(0,t.yg)("h4",m({},{id:"definition-18"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"minKey(): K;"))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const m = SortedMap.of(['b', 2], ['d', 4], ['a', 1], ['c', 3]);\nconsole.log(m.minKey())\n// => 'a'\n"))),(0,t.yg)("h4",m({},{id:"overrides-22"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/sorted/map/SortedMap/interface#minKey"}),"SortedMap.minKey"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"minvalue"}),(0,t.yg)("inlineCode",{parentName:"h3"},"minValue")),(0,t.yg)("p",null,"Returns the value associated with the minimum key of the SortedMap.")),(0,t.yg)("h4",m({},{id:"definition-19"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"minValue(): V;"))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const m = SortedMap.of(['b', 2], ['d', 4], ['a', 1], ['c', 3]).asNormal();\nconsole.log(m.minValue())\n// => 1\n"))),(0,t.yg)("h4",m({},{id:"overrides-23"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/sorted/map/SortedMap/interface#minValue"}),"SortedMap.minValue"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"modifyat"}),(0,t.yg)("inlineCode",{parentName:"h3"},"modifyAt")),(0,t.yg)("p",null,"Returns the collection with the given ",(0,t.yg)("inlineCode",{parentName:"p"},"atKey")," key modified according to given ",(0,t.yg)("inlineCode",{parentName:"p"},"options"),".")),(0,t.yg)("h4",m({},{id:"definition-20"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"modifyAt(atKey: K, options: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"ifNew?: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/OptLazyOr/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazyOr")),(0,t.yg)("inlineCode",{parentName:"p"},"<V, Token>;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"ifExists?: (<V2 extends V = V>(currentEntry: V & V2, remove: Token) => V "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"},"Token)"),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," V;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,t.yg)("h4",m({},{id:"parameters-12"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"atKey")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"K")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the key at which to modify the collection")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"ifNew?: "),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/common/OptLazyOr/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"OptLazyOr")),(0,t.yg)("inlineCode",{parentName:"td"},"<V, Token>;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"ifExists?: (<V2 extends V = V>(currentEntry: V & V2, remove: Token) => V "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"},"Token)"),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"td"}," V;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"an object containing the following information:",(0,t.yg)("br",null)," - ifNew: (optional) if the given ",(0,t.yg)("inlineCode",{parentName:"td"},"atKey")," is not present in the collection, this value or function will be used to generate a new entry. If a function returning the token argument is given, no new entry is created.",(0,t.yg)("br",null)," - ifExists: (optional) if a value is associated with given ",(0,t.yg)("inlineCode",{parentName:"td"},"atKey"),", this function is called with the given value to return a new value. As a second argument, a ",(0,t.yg)("inlineCode",{parentName:"td"},"remove")," token is given. If the function returns this token, the current entry is removed.")))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b'])\nm.modifyAt(3, { ifNew: 'c' }).toArray()\n// => [[1, 'a'], [2, 'b'], [3, 'c']]\nm.modifyAt(3, { ifNew: (none) => 1 < 2 ? none : 'c' }).toArray()\n// => [[1, 'a'], [2, 'b']]\nm.modifyAt(2, { ifExists: () => 'c' }).toArray()\n// => [[1, 'a'], [2, 'c']]\nm.modifyAt(2, { ifExists: (v) => v + 'z' }).toArray()\n// => [[1, 'a'], [2, 'bz']]\nm.modifyAt(2, { ifExists: (v, remove) => v === 'a' ? v : remove }).toArray()\n// => [[1, 'a']]\n"))),(0,t.yg)("h4",m({},{id:"overrides-24"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/interface#modifyAt"}),"RMapBase.modifyAt"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"nonempty"}),(0,t.yg)("inlineCode",{parentName:"h3"},"nonEmpty")),(0,t.yg)("p",null,"Returns true since this collection is known to be non-empty")),(0,t.yg)("h4",m({},{id:"definition-21"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"nonEmpty(): this is "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['nonEmpty'];"))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 1], [2, 2]).nonEmpty()   // => true\n"))),(0,t.yg)("h4",m({},{id:"overrides-25"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/interface#nonEmpty"}),"VariantMapBase.nonEmpty"),", ",(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/NonEmpty/interface#nonEmpty"}),"NonEmpty.nonEmpty"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"removekey"}),(0,t.yg)("inlineCode",{parentName:"h3"},"removeKey")),(0,t.yg)("p",null,"Returns the collection where the entry associated with given ",(0,t.yg)("inlineCode",{parentName:"p"},"key")," is removed if it was part of the collection.")),(0,t.yg)("h4",m({},{id:"definition-22"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"removeKey<UK = K>(key: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, UK>): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,t.yg)("h4",m({},{id:"type-parameters-4"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"UK"),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"K")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",m({},{id:"parameters-13"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"key")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<K, UK>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the key of the entry to remove")))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b'])\nm.removeKey(2).toArray()   // => [[1, 'a']]\nm.removeKey(3) === m       // true\n"))),(0,t.yg)("admonition",m({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"guarantees same object reference if the key is not present")),(0,t.yg)("h4",m({},{id:"overrides-26"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/interface#removeKey"}),"VariantMapBase.removeKey"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"removekeyandget"}),(0,t.yg)("inlineCode",{parentName:"h3"},"removeKeyAndGet")),(0,t.yg)("p",null,"Returns a tuple containing the collection of which the entry associated with given ",(0,t.yg)("inlineCode",{parentName:"p"},"key")," is removed, and the value that is associated with that key. If the key is not present, it will return undefined instead.")),(0,t.yg)("h4",m({},{id:"definition-23"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"removeKeyAndGet<UK = K>(key: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, UK>): ["),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'], V] "),(0,t.yg)("code",null,"|"),(0,t.yg)("inlineCode",{parentName:"p"}," undefined;"))),(0,t.yg)("h4",m({},{id:"type-parameters-5"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"UK"),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"K")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",m({},{id:"parameters-14"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"key")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<K, UK>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the key of the entry to remove")))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b'])\nconst result = m.removeKeyAndGet(2)\nif (result !== undefined) console.log([result[0].toString(), result[1]])    // => logs [HashMap(1 => 'a'), 'b']\nconsole.log(m.removeKeyAndGet(3))                                           // => logs undefined\n"))),(0,t.yg)("h4",m({},{id:"overrides-27"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/interface#removeKeyAndGet"}),"VariantMapBase.removeKeyAndGet"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"removekeys"}),(0,t.yg)("inlineCode",{parentName:"h3"},"removeKeys")),(0,t.yg)("p",null,"Returns the collection where the entries associated with each key in given ",(0,t.yg)("inlineCode",{parentName:"p"},"keys")," are removed if they were present.")),(0,t.yg)("h4",m({},{id:"definition-24"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"removeKeys<UK = K>(keys: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"p"},"<"),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, UK>>): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,t.yg)("h4",m({},{id:"type-parameters-6"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"UK"),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"K")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",m({},{id:"parameters-15"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"keys")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,t.yg)("inlineCode",{parentName:"td"},"<"),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<K, UK>>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"a ",(0,t.yg)("inlineCode",{parentName:"td"},"StreamSource")," of keys to remove")))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b'])\nm.removeKeys([1, 3]).toArray()     // => [[2, 'b']]\nm.removeKeys([1, 3, 2]).toArray()  // => []\nm.removeKeys([3, 4, 5]) === m      // => true\n"))),(0,t.yg)("admonition",m({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"guarantees same object reference if none of the keys are present")),(0,t.yg)("h4",m({},{id:"overrides-28"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/interface#removeKeys"}),"VariantMapBase.removeKeys"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"set"}),(0,t.yg)("inlineCode",{parentName:"h3"},"set")),(0,t.yg)("p",null,"Returns the collection with the given ",(0,t.yg)("inlineCode",{parentName:"p"},"key")," associated to the given ",(0,t.yg)("inlineCode",{parentName:"p"},"value"),".")),(0,t.yg)("h4",m({},{id:"definition-25"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"set(key: K, value: V): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['nonEmpty'];"))),(0,t.yg)("h4",m({},{id:"parameters-16"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"key")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"K")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the entry key to add")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"value")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"V")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the entry value to add")))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 'a']).set(2, 'b').toArray()   // => [[1, 'a'], [2, 'b']]\nHashMap.of([1, 'a']).set(1, 'b').toArray()   // => [[1, 'b']]\n"))),(0,t.yg)("admonition",m({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"if the key is already associated, the previous value will be 'replaced'")),(0,t.yg)("h4",m({},{id:"overrides-29"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/interface#set"}),"RMapBase.set"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"slice"}),(0,t.yg)("inlineCode",{parentName:"h3"},"slice")),(0,t.yg)("p",null,"Returns a SortedMap containing only those entries whose keys are within the given ",(0,t.yg)("inlineCode",{parentName:"p"},"keyRange"),".")),(0,t.yg)("h4",m({},{id:"definition-26"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"slice(keyRange: Range<K>): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/sorted/map/SortedMap/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"SortedMap")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,t.yg)("h4",m({},{id:"parameters-17"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"keyRange")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"Range<K>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"a ",(0,t.yg)("inlineCode",{parentName:"td"},"Range")," defining the keys to include")))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const m = SortedMap.of(['b', 2], ['d', 4], ['a', 1], ['c', 3]).asNormal();\nconsole.log(m.slice({ start: 'b', end: 'c' }).toArray())\n// => [['b', 2], ['c', 3]]\n"))),(0,t.yg)("h4",m({},{id:"overrides-30"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/sorted/map/SortedMap/interface#slice"}),"SortedMap.slice"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"sliceindex"}),(0,t.yg)("inlineCode",{parentName:"h3"},"sliceIndex")),(0,t.yg)("p",null,"Returns a SortedMap containing only those entries that are within the given ",(0,t.yg)("inlineCode",{parentName:"p"},"range")," index range of they key sort order.")),(0,t.yg)("h4",m({},{id:"definition-27"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"sliceIndex(range: IndexRange): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/sorted/map/SortedMap/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"SortedMap")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,t.yg)("h4",m({},{id:"parameters-18"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"range")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"IndexRange")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"an ",(0,t.yg)("inlineCode",{parentName:"td"},"IndexRange")," defining the sort order indices to include.")))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const m = SortedMap.of(['b', 2], ['d', 4], ['a', 1], ['c', 3]).asNormal();\nconsole.log(m.sliceIndex({ start: 1, amount: 2 }).toArray())\n// => [['b', 2], ['c', 3]]\n"))),(0,t.yg)("h4",m({},{id:"overrides-31"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/sorted/map/SortedMap/interface#sliceIndex"}),"SortedMap.sliceIndex"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"stream"}),(0,t.yg)("inlineCode",{parentName:"h3"},"stream")),(0,t.yg)("p",null,"undocumented")),(0,t.yg)("h4",m({},{id:"definition-28"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"stream(options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"reversed?: boolean;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<readonly [K, V]>;"))),(0,t.yg)("h4",m({},{id:"parameters-19"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"reversed?: boolean;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",m({},{id:"overrides-32"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/stream/Streamable/NonEmpty/interface#stream"}),"NonEmpty.stream"),", ",(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/NonEmpty/interface#stream"}),"NonEmpty.stream"),", ",(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/sorted/map/SortedMap/interface#stream"}),"SortedMap.stream"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"streamkeys"}),(0,t.yg)("inlineCode",{parentName:"h3"},"streamKeys")),(0,t.yg)("p",null,"undocumented")),(0,t.yg)("h4",m({},{id:"definition-29"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"streamKeys(options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"reversed?: boolean;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<K>;"))),(0,t.yg)("h4",m({},{id:"parameters-20"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"reversed?: boolean;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",m({},{id:"overrides-33"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/sorted/map/SortedMap/interface#streamKeys"}),"SortedMap.streamKeys"),", ",(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/NonEmpty/interface#streamKeys"}),"NonEmpty.streamKeys"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"streamrange"}),(0,t.yg)("inlineCode",{parentName:"h3"},"streamRange")),(0,t.yg)("p",null,"Returns a Stream of sorted entries of this collection within the given ",(0,t.yg)("inlineCode",{parentName:"p"},"keyRange"),".")),(0,t.yg)("h4",m({},{id:"definition-30"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"streamRange(keyRange: Range<K>, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"reversed?: boolean;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<readonly [K, V]>;"))),(0,t.yg)("h4",m({},{id:"parameters-21"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"keyRange")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"Range<K>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the range of keys to include in the stream")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"reversed?: boolean;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,t.yg)("br",null)," - reversed: (default: false) when true reverses the stream element order")))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const m = SortedMap.of(['b', 2], ['d', 4], ['a', 1], ['c', 3]);\nconsole.log(m.streamRange({ start: 'b', end: 'c' }).toArray())\n// => ['b', 'c']\n"))),(0,t.yg)("h4",m({},{id:"overrides-34"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/sorted/map/SortedMap/interface#streamRange"}),"SortedMap.streamRange"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"streamsliceindex"}),(0,t.yg)("inlineCode",{parentName:"h3"},"streamSliceIndex")),(0,t.yg)("p",null,"Returns a Stream of sorted entries of this collection within the given ",(0,t.yg)("inlineCode",{parentName:"p"},"range")," index range.")),(0,t.yg)("h4",m({},{id:"definition-31"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"streamSliceIndex(range: IndexRange, options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"reversed?: boolean;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream")),(0,t.yg)("inlineCode",{parentName:"p"},"<readonly [K, V]>;"))),(0,t.yg)("h4",m({},{id:"parameters-22"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"range")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"IndexRange")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the range of keys to include in the stream")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"reversed?: boolean;"),(0,t.yg)("br",null),"\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const m = SortedMap.of(['b', 2], ['d', 4], ['a', 1], ['c', 3]);\nconsole.log(m.streamSliceIndex({ start: 1, amount: 2 }).toArray())\n// => [['b', 2], ['c', 3]]\n"))),(0,t.yg)("h4",m({},{id:"overrides-35"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/sorted/map/SortedMap/interface#streamSliceIndex"}),"SortedMap.streamSliceIndex"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"streamvalues"}),(0,t.yg)("inlineCode",{parentName:"h3"},"streamValues")),(0,t.yg)("p",null,"undocumented")),(0,t.yg)("h4",m({},{id:"definition-32"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"streamValues(options?: {"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"reversed?: boolean;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"p"},"}): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<V>;"))),(0,t.yg)("h4",m({},{id:"parameters-23"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"options")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"{"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"reversed?: boolean;"),(0,t.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,t.yg)("inlineCode",{parentName:"td"},"}")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",m({},{id:"overrides-36"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/sorted/map/SortedMap/interface#streamValues"}),"SortedMap.streamValues"),", ",(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/NonEmpty/interface#streamValues"}),"NonEmpty.streamValues"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"take"}),(0,t.yg)("inlineCode",{parentName:"h3"},"take")),(0,t.yg)("p",null,"undocumented")),(0,t.yg)("h4",m({},{id:"definition-33"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"take<N extends number>(amount: N): 0 extends N ? "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/sorted/map/SortedMap/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"SortedMap")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, V> : "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/sorted/map/SortedMap/NonEmpty/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"SortedMap.NonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, V>;"))),(0,t.yg)("h4",m({},{id:"type-parameters-7"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Constraints"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"N"),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"number")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",m({},{id:"parameters-24"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"amount")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"N")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",m({},{id:"overrides-37"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/sorted/map/SortedMap/interface#take"}),"SortedMap.take"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"toarray"}),(0,t.yg)("inlineCode",{parentName:"h3"},"toArray")),(0,t.yg)("p",null,"Returns a non-empty array containing all entries in this collection.")),(0,t.yg)("h4",m({},{id:"definition-34"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"toArray(): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,t.yg)("inlineCode",{parentName:"p"},"<readonly [K, V]>;"))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 'a'], [2, 'b']).toArray()   // => [[1, 'a'], [2, 'b']]\n"))),(0,t.yg)("admonition",m({},{title:"note",type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"O(log(N))  @note it is safe to mutate the returned array, however, the array elements are not copied, thus should be treated as read-only")),(0,t.yg)("h4",m({},{id:"overrides-38"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/interface#toArray"}),"VariantMapBase.toArray"),", ",(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/NonEmpty/interface#toArray"}),"NonEmpty.toArray"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"tobuilder"}),(0,t.yg)("inlineCode",{parentName:"h3"},"toBuilder")),(0,t.yg)("p",null,"Returns a builder object containing the entries of this collection.")),(0,t.yg)("h4",m({},{id:"definition-35"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"toBuilder(): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['builder'];"))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const builder: HashMap.Builder<number, string> = HashMap.of([1, 'a'], [2, 'b']).toBuilder()\n"))),(0,t.yg)("h4",m({},{id:"overrides-39"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/interface#toBuilder"}),"RMapBase.toBuilder"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"tojson"}),(0,t.yg)("inlineCode",{parentName:"h3"},"toJSON")),(0,t.yg)("p",null,"Returns a JSON representation of this collection.")),(0,t.yg)("h4",m({},{id:"definition-36"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"toJSON(): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/ToJSON/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"ToJSON")),(0,t.yg)("inlineCode",{parentName:"p"},"<(readonly [K, V])[]>;"))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 'a'], [2, 'b']).toJSON()   // => { dataType: 'HashMap', value: [[1, 'a'], [2, 'b']] }\n"))),(0,t.yg)("h4",m({},{id:"overrides-40"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/interface#toJSON"}),"VariantMapBase.toJSON"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"tostring"}),(0,t.yg)("inlineCode",{parentName:"h3"},"toString")),(0,t.yg)("p",null,"Returns a string representation of this collection.")),(0,t.yg)("h4",m({},{id:"definition-37"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"toString(): string;"))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"HashMap.of([1, 'a'], [2, 'b']).toString()   // => HashMap(1 => 'a', 2 => 'b')\n"))),(0,t.yg)("h4",m({},{id:"overrides-41"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/VariantMapBase/interface#toString"}),"VariantMapBase.toString"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",m({},{id:"updateat"}),(0,t.yg)("inlineCode",{parentName:"h3"},"updateAt")),(0,t.yg)("p",null,"Returns the collection where the value associated with given ",(0,t.yg)("inlineCode",{parentName:"p"},"key")," is updated with the given ",(0,t.yg)("inlineCode",{parentName:"p"},"update")," value or update function.")),(0,t.yg)("h4",m({},{id:"definition-38"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"updateAt<UK = K>(key: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"p"},"<K, UK>, update: "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Update/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RMapBase.Update")),(0,t.yg)("inlineCode",{parentName:"p"},"<V>): "),(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,t.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['nonEmpty'];"))),(0,t.yg)("h4",m({},{id:"type-parameters-8"}),"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Default"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"UK"),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"K")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))))),(0,t.yg)("h4",m({},{id:"parameters-25"}),"Parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Name"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Type"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"key")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/common/RelatedTo/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RelatedTo")),(0,t.yg)("inlineCode",{parentName:"td"},"<K, UK>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"the key of the entry to update")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"update")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("a",m({parentName:"td"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/Update/type"}),(0,t.yg)("inlineCode",{parentName:"a"},"RMapBase.Update")),(0,t.yg)("inlineCode",{parentName:"td"},"<V>")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"a new value or function taking the current value and returning a new value")))),(0,t.yg)("admonition",m({},{title:"example",type:"note"}),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",m({parentName:"pre"},{className:"language-ts"}),"const m = HashMap.of([1, 'a'], [2, 'b'])\nm.updateAt(3, 'a').toArray()\n// => [[1, 'a'], [2, 'b']]\nm.updateAt(2, 'c').toArray()\n// => [[1, 'a'], [2, 'c']]\nm.updateAt(2, v => v + 'z')\n// => [[1, 'a'], [2, 'cz]]\n"))),(0,t.yg)("h4",m({},{id:"overrides-42"}),"Overrides"),(0,t.yg)("p",null,(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/interface#updateAt"}),"RMapBase.updateAt"),", ",(0,t.yg)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/map-custom/RMapBase/NonEmpty/interface#updateAt"}),"NonEmpty.updateAt"))))}C.isMDXComponent=!0}}]);