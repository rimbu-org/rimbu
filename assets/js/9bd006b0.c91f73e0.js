"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[99722],{15680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>u});var a=t(96540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=a.createContext({}),g=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=g(e.components);return a.createElement(p.Provider,{value:n},e.children)},y="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},s=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),y=g(t),s=i,u=y["".concat(p,".").concat(s)]||y[s]||m[s]||l;return t?a.createElement(u,r(r({ref:n},d),{},{components:t})):a.createElement(u,r({ref:n},d))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,r=new Array(l);r[0]=s;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[y]="string"==typeof e?e:i,r[1]=o;for(var g=2;g<l;g++)r[g]=t[g];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}s.displayName="MDXCreateElement"},79308:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>v,contentTitle:()=>N,default:()=>C,frontMatter:()=>u,metadata:()=>h,toc:()=>c});var a=t(15680),i=Object.defineProperty,l=Object.defineProperties,r=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,g=Object.prototype.propertyIsEnumerable,d=(e,n,t)=>n in e?i(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,y=(e,n)=>{for(var t in n||(n={}))p.call(n,t)&&d(e,t,n[t]);if(o)for(var t of o(n))g.call(n,t)&&d(e,t,n[t]);return e},m=(e,n)=>l(e,r(n)),s=(e,n)=>{var t={};for(var a in e)p.call(e,a)&&n.indexOf(a)<0&&(t[a]=e[a]);if(null!=e&&o)for(var a of o(e))n.indexOf(a)<0&&g.call(e,a)&&(t[a]=e[a]);return t};const u={title:"List.NonEmpty<T>",slug:"/rimbu/list/List/NonEmpty/interface"},N="interface List.NonEmpty<T>",h={unversionedId:"rimbu_list/List/NonEmpty.interface",id:"rimbu_list/List/NonEmpty.interface",title:"List.NonEmpty<T>",description:"A non-empty random accessible immutable sequence of values of type T. See the List documentation and the List API documentation",source:"@site/api/rimbu_list/List/NonEmpty.interface.mdx",sourceDirName:"rimbu_list/List",slug:"/rimbu/list/List/NonEmpty/interface",permalink:"/api/rimbu/list/List/NonEmpty/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"List.NonEmpty<T>",slug:"/rimbu/list/List/NonEmpty/interface"},sidebar:"defaultSidebar",previous:{title:"List.Context",permalink:"/api/rimbu/list/List/Context/interface"},next:{title:"List.Types",permalink:"/api/rimbu/list/List/Types/interface"}},v={},c=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>context</code>",id:"context",level:3},{value:"Definition",id:"definition",level:4},{value:"Overrides",id:"overrides",level:4},{value:"<code>isEmpty</code>",id:"isempty",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"<code>length</code>",id:"length",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"Methods",id:"methods",level:2},{value:"<code>[Symbol.iterator]</code>",id:"symboliterator",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"<code>append</code>",id:"append",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Overrides",id:"overrides-4",level:4},{value:"<code>asNormal</code>",id:"asnormal",level:3},{value:"Definition",id:"definition-5",level:4},{value:"<code>assumeNonEmpty</code>",id:"assumenonempty",level:3},{value:"Definition",id:"definition-6",level:4},{value:"Overrides",id:"overrides-5",level:4},{value:"<code>collect</code>",id:"collect",level:3},{value:"Definition",id:"definition-7",level:4},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Overrides",id:"overrides-6",level:4},{value:"<code>concat</code>",id:"concat",level:3},{value:"Definition",id:"definition-8",level:4},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Overrides",id:"overrides-7",level:4},{value:"<code>drop</code>",id:"drop",level:3},{value:"Definition",id:"definition-9",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Overrides",id:"overrides-8",level:4},{value:"<code>filter</code>",id:"filter",level:3},{value:"Definitions",id:"definitions",level:4},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"Overrides",id:"overrides-9",level:4},{value:"<code>first</code>",id:"first",level:3},{value:"Definition",id:"definition-10",level:4},{value:"Overrides",id:"overrides-10",level:4},{value:"<code>flatMap</code>",id:"flatmap",level:3},{value:"Definitions",id:"definitions-1",level:4},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"Overrides",id:"overrides-11",level:4},{value:"<code>forEach</code>",id:"foreach",level:3},{value:"Definition",id:"definition-11",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"Overrides",id:"overrides-12",level:4},{value:"<code>get</code>",id:"get",level:3},{value:"Definitions",id:"definitions-2",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"Overrides",id:"overrides-13",level:4},{value:"<code>insert</code>",id:"insert",level:3},{value:"Definition",id:"definition-12",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"Overrides",id:"overrides-14",level:4},{value:"<code>last</code>",id:"last",level:3},{value:"Definition",id:"definition-13",level:4},{value:"Overrides",id:"overrides-15",level:4},{value:"<code>map</code>",id:"map",level:3},{value:"Definition",id:"definition-14",level:4},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Parameters",id:"parameters-9",level:4},{value:"Overrides",id:"overrides-16",level:4},{value:"<code>mapPure</code>",id:"mappure",level:3},{value:"Definition",id:"definition-15",level:4},{value:"Type parameters",id:"type-parameters-6",level:4},{value:"Parameters",id:"parameters-10",level:4},{value:"Overrides",id:"overrides-17",level:4},{value:"<code>nonEmpty</code>",id:"nonempty",level:3},{value:"Definition",id:"definition-16",level:4},{value:"Overrides",id:"overrides-18",level:4},{value:"<code>padTo</code>",id:"padto",level:3},{value:"Definition",id:"definition-17",level:4},{value:"Parameters",id:"parameters-11",level:4},{value:"Overrides",id:"overrides-19",level:4},{value:"<code>prepend</code>",id:"prepend",level:3},{value:"Definition",id:"definition-18",level:4},{value:"Parameters",id:"parameters-12",level:4},{value:"Overrides",id:"overrides-20",level:4},{value:"<code>remove</code>",id:"remove",level:3},{value:"Definition",id:"definition-19",level:4},{value:"Parameters",id:"parameters-13",level:4},{value:"Overrides",id:"overrides-21",level:4},{value:"<code>repeat</code>",id:"repeat",level:3},{value:"Definition",id:"definition-20",level:4},{value:"Parameters",id:"parameters-14",level:4},{value:"Overrides",id:"overrides-22",level:4},{value:"<code>reversed</code>",id:"reversed",level:3},{value:"Definition",id:"definition-21",level:4},{value:"Overrides",id:"overrides-23",level:4},{value:"<code>rotate</code>",id:"rotate",level:3},{value:"Definition",id:"definition-22",level:4},{value:"Parameters",id:"parameters-15",level:4},{value:"Overrides",id:"overrides-24",level:4},{value:"<code>slice</code>",id:"slice",level:3},{value:"Definition",id:"definition-23",level:4},{value:"Parameters",id:"parameters-16",level:4},{value:"Overrides",id:"overrides-25",level:4},{value:"<code>sort</code>",id:"sort",level:3},{value:"Definition",id:"definition-24",level:4},{value:"Parameters",id:"parameters-17",level:4},{value:"Overrides",id:"overrides-26",level:4},{value:"<code>splice</code>",id:"splice",level:3},{value:"Definitions",id:"definitions-3",level:4},{value:"Parameters",id:"parameters-18",level:4},{value:"Overrides",id:"overrides-27",level:4},{value:"<code>stream</code>",id:"stream",level:3},{value:"Definition",id:"definition-25",level:4},{value:"Parameters",id:"parameters-19",level:4},{value:"Overrides",id:"overrides-28",level:4},{value:"<code>streamRange</code>",id:"streamrange",level:3},{value:"Definition",id:"definition-26",level:4},{value:"Parameters",id:"parameters-20",level:4},{value:"Overrides",id:"overrides-29",level:4},{value:"<code>take</code>",id:"take",level:3},{value:"Definition",id:"definition-27",level:4},{value:"Type parameters",id:"type-parameters-7",level:4},{value:"Parameters",id:"parameters-21",level:4},{value:"Overrides",id:"overrides-30",level:4},{value:"<code>toArray</code>",id:"toarray",level:3},{value:"Definitions",id:"definitions-4",level:4},{value:"Parameters",id:"parameters-22",level:4},{value:"Overrides",id:"overrides-31",level:4},{value:"<code>toBuilder</code>",id:"tobuilder",level:3},{value:"Definition",id:"definition-28",level:4},{value:"Overrides",id:"overrides-32",level:4},{value:"<code>toJSON</code>",id:"tojson",level:3},{value:"Definition",id:"definition-29",level:4},{value:"Overrides",id:"overrides-33",level:4},{value:"<code>toString</code>",id:"tostring",level:3},{value:"Definition",id:"definition-30",level:4},{value:"Overrides",id:"overrides-34",level:4},{value:"<code>updateAt</code>",id:"updateat",level:3},{value:"Definition",id:"definition-31",level:4},{value:"Parameters",id:"parameters-23",level:4},{value:"Overrides",id:"overrides-35",level:4}],f={toc:c},b="wrapper";function C(e){var n=e,{components:t}=n,i=s(n,["components"]);return(0,a.yg)(b,m(y(y({},f),i),{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",y({},{id:"interface-listnonemptyt"}),(0,a.yg)("inlineCode",{parentName:"h1"},"interface List.NonEmpty<T>")),(0,a.yg)("p",null,"A non-empty random accessible immutable sequence of values of type T. See the ",(0,a.yg)("a",y({parentName:"p"},{href:"https://rimbu.org/docs/collections/list"}),"List documentation")," and the ",(0,a.yg)("a",y({parentName:"p"},{href:"https://rimbu.org/api/rimbu/list/List/interface"}),"List API documentation")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Extends:")," ",(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/stream/Streamable/NonEmpty/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"Streamable.NonEmpty<T>")),", ",(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"List<T>"))),(0,a.yg)("h2",y({},{id:"type-parameters"}),"Type parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),"T"),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"the value type")))),(0,a.yg)("admonition",y({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"const l = List.of(1, 3, 2)\n"))),(0,a.yg)("h2",y({},{id:"properties"}),"Properties"),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",y({},{id:"context"}),(0,a.yg)("inlineCode",{parentName:"h3"},"context")),(0,a.yg)("p",null,"The list context that acts as a factory for all related list instances.")),(0,a.yg)("h4",y({},{id:"definition"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"readonly context: "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/Context/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"List.Context")),(0,a.yg)("inlineCode",{parentName:"p"},";"))),(0,a.yg)("h4",y({},{id:"overrides"}),"Overrides"),(0,a.yg)("p",null,(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface#context"}),"List.context"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",y({},{id:"isempty"}),(0,a.yg)("inlineCode",{parentName:"h3"},"isEmpty")),(0,a.yg)("p",null,"Returns false since this collection is known to be non-empty.")),(0,a.yg)("h4",y({},{id:"definition-1"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"readonly isEmpty: false;"))),(0,a.yg)("admonition",y({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"List(0, 1, 2).isEmpty   // => false\n"))),(0,a.yg)("h4",y({},{id:"overrides-1"}),"Overrides"),(0,a.yg)("p",null,(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface#isEmpty"}),"List.isEmpty"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",y({},{id:"length"}),(0,a.yg)("inlineCode",{parentName:"h3"},"length")),(0,a.yg)("p",null,"Returns the number of values in the collection")),(0,a.yg)("h4",y({},{id:"definition-2"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"readonly length: number;"))),(0,a.yg)("admonition",y({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"List.empty().length      // => 0\nList.of(0, 1, 2).length  // => 3\n"))),(0,a.yg)("h4",y({},{id:"overrides-2"}),"Overrides"),(0,a.yg)("p",null,(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface#length"}),"List.length"))),(0,a.yg)("h2",y({},{id:"methods"}),"Methods"),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",y({},{id:"symboliterator"}),(0,a.yg)("inlineCode",{parentName:"h3"},"[Symbol.iterator]")),(0,a.yg)("p",null,"Returns a ",(0,a.yg)("inlineCode",{parentName:"p"},"FastIterator")," instance used to iterate over the values of this ",(0,a.yg)("inlineCode",{parentName:"p"},"Iterable"),".")),(0,a.yg)("h4",y({},{id:"definition-3"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"[Symbol.iterator](): "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/stream/FastIterator/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"FastIterator")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.yg)("h4",y({},{id:"overrides-3"}),"Overrides"),(0,a.yg)("p",null,(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/stream/FastIterable/interface#%5BSymbol.iterator%5D"}),"FastIterable.[Symbol.iterator]"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",y({},{id:"append"}),(0,a.yg)("inlineCode",{parentName:"h3"},"append")),(0,a.yg)("p",null,"Returns the List with the given ",(0,a.yg)("inlineCode",{parentName:"p"},"value")," added to the end.")),(0,a.yg)("h4",y({},{id:"definition-4"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"append(value: T): "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/NonEmpty/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"List.NonEmpty")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.yg)("h4",y({},{id:"parameters"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"value")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"T")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"the value to append.")))),(0,a.yg)("admonition",y({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"List.of(0, 1, 2).append(-10)  // => List(0, 1, 2, -10)\n"))),(0,a.yg)("admonition",y({},{title:"note",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"O(logB(N)) for block size B - mostly o(1)")),(0,a.yg)("h4",y({},{id:"overrides-4"}),"Overrides"),(0,a.yg)("p",null,(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface#append"}),"List.append"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",y({},{id:"asnormal"}),(0,a.yg)("inlineCode",{parentName:"h3"},"asNormal")),(0,a.yg)("p",null,"Returns this collection typed as a 'possibly empty' collection.")),(0,a.yg)("h4",y({},{id:"definition-5"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"asNormal(): "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"List")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.yg)("admonition",y({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"List.of(0, 1, 2).asNormal();  // type: List<number>\n")))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",y({},{id:"assumenonempty"}),(0,a.yg)("inlineCode",{parentName:"h3"},"assumeNonEmpty")),(0,a.yg)("p",null,"Returns a self reference since this collection is known to be non-empty.")),(0,a.yg)("h4",y({},{id:"definition-6"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"assumeNonEmpty(): this;"))),(0,a.yg)("admonition",y({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"const m = List.of(0, 1, 2);\nm === m.assumeNonEmpty()  // => true\n"))),(0,a.yg)("h4",y({},{id:"overrides-5"}),"Overrides"),(0,a.yg)("p",null,(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface#assumeNonEmpty"}),"List.assumeNonEmpty"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",y({},{id:"collect"}),(0,a.yg)("inlineCode",{parentName:"h3"},"collect")),(0,a.yg)("p",null,"Returns a List containing the values resulting from applying given ",(0,a.yg)("inlineCode",{parentName:"p"},"collectFun")," to each value in this List.")),(0,a.yg)("h4",y({},{id:"definition-7"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"collect<T2>(collectFun: CollectFun<T, T2>, options?: {"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"range?: IndexRange;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"reversed?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"}): "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"List")),(0,a.yg)("inlineCode",{parentName:"p"},"<T2>;"))),(0,a.yg)("h4",y({},{id:"type-parameters-1"}),"Type parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),"T2"),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"the result element type")))),(0,a.yg)("h4",y({},{id:"parameters-1"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"collectFun")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"CollectFun<T, T2>")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"a function receiving",(0,a.yg)("br",null)," - ",(0,a.yg)("inlineCode",{parentName:"td"},"value"),": the next value",(0,a.yg)("br",null)," - ",(0,a.yg)("inlineCode",{parentName:"td"},"index"),": the value index",(0,a.yg)("br",null)," - ",(0,a.yg)("inlineCode",{parentName:"td"},"skip"),": a token that, when returned, will not add a value to the resulting collection",(0,a.yg)("br",null)," - ",(0,a.yg)("inlineCode",{parentName:"td"},"halt"),": a function that, when called, ensures no next elements are passed")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"options")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"{"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"range?: IndexRange;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"reversed?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"}")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,a.yg)("br",null)," - range: (optional) the range of the list to include in the filtering process",(0,a.yg)("br",null)," - reversed: (default: false) if true reverses the elements within the given range")))),(0,a.yg)("admonition",y({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"List.of(0, 1, 2, 3).collect(v => v > 1)\n// => List(false, false, true, true)\nList.of(0, 1, 2, 3).collect((v, i, skip) => v === 1 ? skip : v * 2)\n// => List(0, 4, 6)\nList.of(0, 1, 2, 3).collect((v, i, skip, halt) => {\nif (v > 1) halt()\nreturn v * 2\n})\n// => List(0, 2)\n"))),(0,a.yg)("h4",y({},{id:"overrides-6"}),"Overrides"),(0,a.yg)("p",null,(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface#collect"}),"List.collect"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",y({},{id:"concat"}),(0,a.yg)("inlineCode",{parentName:"h3"},"concat")),(0,a.yg)("p",null,"Returns the non-empty List succeeded by the values from all given ",(0,a.yg)("inlineCode",{parentName:"p"},"StreamSource")," instances given in ",(0,a.yg)("inlineCode",{parentName:"p"},"sources"),".")),(0,a.yg)("h4",y({},{id:"definition-8"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"concat<T2 = T>(...sources: "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,a.yg)("inlineCode",{parentName:"p"},"<"),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,a.yg)("inlineCode",{parentName:"p"},"<T2>>): "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/NonEmpty/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"List.NonEmpty")),(0,a.yg)("inlineCode",{parentName:"p"},"<T "),(0,a.yg)("code",null,"|"),(0,a.yg)("inlineCode",{parentName:"p"}," T2>;"))),(0,a.yg)("h4",y({},{id:"type-parameters-2"}),"Type parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Default"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),"T2"),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"T")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"the type of the source elements to add")))),(0,a.yg)("h4",y({},{id:"parameters-2"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"sources")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("a",y({parentName:"td"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,a.yg)("inlineCode",{parentName:"td"},"<"),(0,a.yg)("a",y({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,a.yg)("inlineCode",{parentName:"td"},"<T2>>")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"an array of ",(0,a.yg)("inlineCode",{parentName:"td"},"StreamSource")," instances containing values to be added to the list")))),(0,a.yg)("admonition",y({},{title:"note",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"this operation is most efficient when the given sources are instances of List from the same context.")),(0,a.yg)("admonition",y({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"List.of(0, 1, 2).concat([10, 11])                      // -> List(0, 1, 2, 10, 11)\nList.of(0, 1, 2).concat([10, 11], new Set([12, 13]))   // -> List(0, 1, 2, 10, 11, 12, 13)\n"))),(0,a.yg)("admonition",y({},{title:"note",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"O(logB(N)) for block size B")),(0,a.yg)("h4",y({},{id:"overrides-7"}),"Overrides"),(0,a.yg)("p",null,(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface#concat"}),"List.concat"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",y({},{id:"drop"}),(0,a.yg)("inlineCode",{parentName:"h3"},"drop")),(0,a.yg)("p",null,"Returns a List skipping the first given ",(0,a.yg)("inlineCode",{parentName:"p"},"amount")," elements of this List.")),(0,a.yg)("h4",y({},{id:"definition-9"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"drop(amount: number): "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"List")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.yg)("h4",y({},{id:"parameters-3"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"amount")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"number")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"the desired amount of values of to include")))),(0,a.yg)("admonition",y({},{title:"note",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"a negative ",(0,a.yg)("inlineCode",{parentName:"p"},"index")," will be treated as follows:",(0,a.yg)("br",null)," - -1: the last element in the list",(0,a.yg)("br",null)," - -2: the second-last element in the list",(0,a.yg)("br",null)," - ...etc")),(0,a.yg)("admonition",y({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"List.of(0, 1, 2, 3).drop(2)    // => List(2, 3)\nList.of(0, 1, 2, 3).drop(10)   // => List()\nList.of(0, 1, 2, 3).drop(-2)   // => List(0, 1)\n"))),(0,a.yg)("admonition",y({},{title:"note",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"O(logB(N)) for block size B")),(0,a.yg)("h4",y({},{id:"overrides-8"}),"Overrides"),(0,a.yg)("p",null,(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface#drop"}),"List.drop"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",y({},{id:"filter"}),(0,a.yg)("inlineCode",{parentName:"h3"},"filter")),(0,a.yg)("p",null,"Returns a List containing only those values within optionally given ",(0,a.yg)("inlineCode",{parentName:"p"},"range")," that satisfy given ",(0,a.yg)("inlineCode",{parentName:"p"},"pred")," predicate. If ",(0,a.yg)("inlineCode",{parentName:"p"},"reversed")," is true, the order of the values is reversed.")),(0,a.yg)("h4",y({},{id:"definitions"}),"Definitions"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"filter<TF extends T>(pred: (value: T, index: number, halt: () => void) => value is TF, options?: {"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"range?: IndexRange;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"reversed?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"negate?: false "),(0,a.yg)("code",null,"|"),(0,a.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,a.yg)("br",null),"\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"}): "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"List")),(0,a.yg)("inlineCode",{parentName:"p"},"<TF>;"))),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"filter<TF extends T>(pred: (value: T, index: number, halt: () => void) => value is TF, options: {"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"range?: IndexRange;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"reversed?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"negate: true;"),(0,a.yg)("br",null),"\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"}): "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"List")),(0,a.yg)("inlineCode",{parentName:"p"},"<Exclude<T, TF>>;"))),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"filter(pred: (value: T, index: number, halt: () => void) => boolean, options?: {"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"range?: IndexRange;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"reversed?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"negate?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"}): "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"List")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.yg)("h4",y({},{id:"type-parameters-3"}),"Type parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Constraints"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),"TF"),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"T")),(0,a.yg)("td",y({parentName:"tr"},{align:null}))))),(0,a.yg)("h4",y({},{id:"parameters-4"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"pred")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"(value: T, index: number, halt: () => void) => value is TF")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"a predicate function receiving",(0,a.yg)("br",null)," - ",(0,a.yg)("inlineCode",{parentName:"td"},"value"),": the next value",(0,a.yg)("br",null)," - ",(0,a.yg)("inlineCode",{parentName:"td"},"index"),": the value index",(0,a.yg)("br",null)," - ",(0,a.yg)("inlineCode",{parentName:"td"},"halt"),": a function that, when called, ensures no next elements are passed")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"options")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"{"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"range?: IndexRange;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"reversed?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"negate?: false "),(0,a.yg)("code",null,"|"),(0,a.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,a.yg)("br",null),"\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"}")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,a.yg)("br",null)," - range: (optional) the range of the list to include in the filtering process",(0,a.yg)("br",null)," - reversed: (default: false) if true reverses the elements within the given range")))),(0,a.yg)("admonition",y({},{title:"note",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"if the predicate is a type guard, the return type is automatically inferred")),(0,a.yg)("admonition",y({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"List.of(0, 1, 2, 3).filter(v => v < 2)           // -> List(0, 1)\nList.of(0, 1, 2, 3).filter((v, _, halt) => {\nif (v > 1) halt();\nreturn v;\n})                                               // -> List(0, 1, 2)\nList.of(0, 1, 2, 3)\n.filter((_, i) => i > 1, undefined, true)      // -> List(1, 0)\n"))),(0,a.yg)("h4",y({},{id:"overrides-9"}),"Overrides"),(0,a.yg)("p",null,(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface#filter"}),"List.filter"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",y({},{id:"first"}),(0,a.yg)("inlineCode",{parentName:"h3"},"first")),(0,a.yg)("p",null,"Returns the first value of the List.")),(0,a.yg)("h4",y({},{id:"definition-10"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"first(): T;"))),(0,a.yg)("admonition",y({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"List.of(0, 1, 2).first()   // => 0\n"))),(0,a.yg)("admonition",y({},{title:"note",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"O(1)")),(0,a.yg)("h4",y({},{id:"overrides-10"}),"Overrides"),(0,a.yg)("p",null,(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface#first"}),"List.first"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",y({},{id:"flatmap"}),(0,a.yg)("inlineCode",{parentName:"h3"},"flatMap")),(0,a.yg)("p",null,"Returns a List containing the joined results of applying given ",(0,a.yg)("inlineCode",{parentName:"p"},"flatMapFun")," to each value in this List.")),(0,a.yg)("h4",y({},{id:"definitions-1"}),"Definitions"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"flatMap<T2>(flatMapFun: (value: T, index: number) => "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,a.yg)("inlineCode",{parentName:"p"},"<T2>, options?: {"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"range?: undefined;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"reversed?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"}): "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/NonEmpty/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"List.NonEmpty")),(0,a.yg)("inlineCode",{parentName:"p"},"<T2>;"))),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"flatMap<T2>(flatMapFun: (value: T, index: number) => "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,a.yg)("inlineCode",{parentName:"p"},"<T2>, options?: {"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"range?: IndexRange;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"reversed?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"}): "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"List")),(0,a.yg)("inlineCode",{parentName:"p"},"<T2>;"))),(0,a.yg)("h4",y({},{id:"type-parameters-4"}),"Type parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),"T2"),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"the result element type")))),(0,a.yg)("h4",y({},{id:"parameters-5"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"flatMapFun")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"(value: T, index: number) => "),(0,a.yg)("a",y({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,a.yg)("inlineCode",{parentName:"td"},"<T2>")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"a function taking the next value and its index, and returning a ",(0,a.yg)("inlineCode",{parentName:"td"},"StreamSource")," of value to include in the resulting collection")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"options")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"{"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"range?: undefined;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"reversed?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"}")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,a.yg)("br",null)," - range: (optional) the range of the list to include in the filtering process",(0,a.yg)("br",null)," - reversed: (default: false) if true reverses the elements within the given range")))),(0,a.yg)("admonition",y({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"List.of(1, 2, 3).flatMap(v => [v, v + 1]).toArray()\n// => [1, 2, 2, 3, 3, 4]\n"))),(0,a.yg)("h4",y({},{id:"overrides-11"}),"Overrides"),(0,a.yg)("p",null,(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface#flatMap"}),"List.flatMap"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",y({},{id:"foreach"}),(0,a.yg)("inlineCode",{parentName:"h3"},"forEach")),(0,a.yg)("p",null,"Performs given function ",(0,a.yg)("inlineCode",{parentName:"p"},"f")," for each value of the List.")),(0,a.yg)("h4",y({},{id:"definition-11"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"forEach(f: (value: T, index: number, halt: () => void) => void, options?: {"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"reversed?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"state?: "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/common/TraverseState/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"TraverseState")),(0,a.yg)("inlineCode",{parentName:"p"},";"),(0,a.yg)("br",null),"\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"}): void;"))),(0,a.yg)("h4",y({},{id:"parameters-6"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"f")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"(value: T, index: number, halt: () => void) => void")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"the function to perform for each element, receiving",(0,a.yg)("br",null)," - ",(0,a.yg)("inlineCode",{parentName:"td"},"value"),": the next value",(0,a.yg)("br",null)," - ",(0,a.yg)("inlineCode",{parentName:"td"},"index"),": the index of the value",(0,a.yg)("br",null)," - ",(0,a.yg)("inlineCode",{parentName:"td"},"halt"),": a function that, if called, ensures that no new elements are passed")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"options")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"{"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"reversed?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"state?: "),(0,a.yg)("a",y({parentName:"td"},{href:"/api/rimbu/common/TraverseState/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"TraverseState")),(0,a.yg)("inlineCode",{parentName:"td"},";"),(0,a.yg)("br",null),"\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"}")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,a.yg)("br",null)," - reversed: (default: false) when true will reverse the element order - state: (optional) the traversal state")))),(0,a.yg)("admonition",y({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"List.of(0, 1, 2, 3).forEach((value, i, halt) => {\nconsole.log(value * 2);\nif (i >= 1) halt();\n})\n// => logs 0  2\n"))),(0,a.yg)("admonition",y({},{title:"note",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"O(N)")),(0,a.yg)("h4",y({},{id:"overrides-12"}),"Overrides"),(0,a.yg)("p",null,(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface#forEach"}),"List.forEach"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",y({},{id:"get"}),(0,a.yg)("inlineCode",{parentName:"h3"},"get")),(0,a.yg)("p",null,"Returns the value in the List at the given ",(0,a.yg)("inlineCode",{parentName:"p"},"index"),".")),(0,a.yg)("h4",y({},{id:"definitions-2"}),"Definitions"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"get(index: number): T "),(0,a.yg)("code",null,"|"),(0,a.yg)("inlineCode",{parentName:"p"}," undefined;"))),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"get<O>(index: number, otherwise: "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"OptLazy")),(0,a.yg)("inlineCode",{parentName:"p"},"<O>): T "),(0,a.yg)("code",null,"|"),(0,a.yg)("inlineCode",{parentName:"p"}," O;"))),(0,a.yg)("h4",y({},{id:"parameters-7"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"index")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"number")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"the element index")))),(0,a.yg)("admonition",y({},{title:"note",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"a negative ",(0,a.yg)("inlineCode",{parentName:"p"},"index")," will be treated as follows:",(0,a.yg)("br",null)," - -1: the last value in the list",(0,a.yg)("br",null)," - -2: the second-last value in the list",(0,a.yg)("br",null)," - ...etc")),(0,a.yg)("admonition",y({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"List.of(0, 1, 2).get(5)             // => undefined\nList.of(0, 1, 2).get(5, 'other')    // => 'other'\nList.of(0, 1, 2).get(1, 'other')    // => 1\nList.of(0, 1, 2).get(-1)            // => 2\n"))),(0,a.yg)("admonition",y({},{title:"note",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"O(logB(N)) for block size B")),(0,a.yg)("h4",y({},{id:"overrides-13"}),"Overrides"),(0,a.yg)("p",null,(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface#get"}),"List.get"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",y({},{id:"insert"}),(0,a.yg)("inlineCode",{parentName:"h3"},"insert")),(0,a.yg)("p",null,"Returns the non-empty List with the given ",(0,a.yg)("inlineCode",{parentName:"p"},"values")," inserted at the given ",(0,a.yg)("inlineCode",{parentName:"p"},"index"),".")),(0,a.yg)("h4",y({},{id:"definition-12"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"insert(index: number, values: "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>): "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/NonEmpty/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"List.NonEmpty")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.yg)("h4",y({},{id:"parameters-8"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"index")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"number")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"the index at which to insert the values")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"values")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("a",y({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,a.yg)("inlineCode",{parentName:"td"},"<T>")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"a ",(0,a.yg)("inlineCode",{parentName:"td"},"StreamSource")," of values to insert")))),(0,a.yg)("admonition",y({},{title:"note",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"a negative ",(0,a.yg)("inlineCode",{parentName:"p"},"index")," will be treated as follows:",(0,a.yg)("br",null)," - -1: the last element in the list",(0,a.yg)("br",null)," - -2: the second-last element in the list",(0,a.yg)("br",null)," - ...etc")),(0,a.yg)("admonition",y({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"List.of(0, 1, 2, 3).insert(2, [10, 11])   // -> List(0, 1, 10, 11, 2, 3)\nList.of(0, 1, 2, 3).insert(-1, [10, 11])  // -> List(0, 1, 2, 1, 11, 3)\n"))),(0,a.yg)("admonition",y({},{title:"note",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"O(logB(N)) for block size B")),(0,a.yg)("h4",y({},{id:"overrides-14"}),"Overrides"),(0,a.yg)("p",null,(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface#insert"}),"List.insert"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",y({},{id:"last"}),(0,a.yg)("inlineCode",{parentName:"h3"},"last")),(0,a.yg)("p",null,"Returns the last value of the List.")),(0,a.yg)("h4",y({},{id:"definition-13"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"last(): T;"))),(0,a.yg)("admonition",y({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"List.of(0, 1, 2).last()   // => 2\n"))),(0,a.yg)("admonition",y({},{title:"note",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"O(1)")),(0,a.yg)("h4",y({},{id:"overrides-15"}),"Overrides"),(0,a.yg)("p",null,(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface#last"}),"List.last"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",y({},{id:"map"}),(0,a.yg)("inlineCode",{parentName:"h3"},"map")),(0,a.yg)("p",null,"Returns a non-empty List containing the result of applying given ",(0,a.yg)("inlineCode",{parentName:"p"},"mapFun")," to each value in this List. If ",(0,a.yg)("inlineCode",{parentName:"p"},"reversed")," is true, the order of the values is reversed.")),(0,a.yg)("h4",y({},{id:"definition-14"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"map<T2>(mapFun: (value: T, index: number) => T2, options?: {"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"reversed?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"}): "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/NonEmpty/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"List.NonEmpty")),(0,a.yg)("inlineCode",{parentName:"p"},"<T2>;"))),(0,a.yg)("h4",y({},{id:"type-parameters-5"}),"Type parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),"T2"),(0,a.yg)("td",y({parentName:"tr"},{align:null}))))),(0,a.yg)("h4",y({},{id:"parameters-9"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"mapFun")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"(value: T, index: number) => T2")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"a function receiving a value and its index, and returning a new value")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"options")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"{"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"reversed?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"}")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,a.yg)("br",null)," - reversed: (default: false) if true, reverses the order of the values")))),(0,a.yg)("admonition",y({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"List.of(1, 2, 3).map(v => `value: ${v + 2}`).toArray()\n// => ['value 2', 'value 3', 'value 3']\n"))),(0,a.yg)("h4",y({},{id:"overrides-16"}),"Overrides"),(0,a.yg)("p",null,(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface#map"}),"List.map"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",y({},{id:"mappure"}),(0,a.yg)("inlineCode",{parentName:"h3"},"mapPure")),(0,a.yg)("p",null,"Returns a non-empty List containing the result of applying given ",(0,a.yg)("inlineCode",{parentName:"p"},"mapFun")," to each value in this List. If ",(0,a.yg)("inlineCode",{parentName:"p"},"reversed")," is true, the order of the values is reversed.  ")),(0,a.yg)("h4",y({},{id:"definition-15"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"mapPure<T2>(mapFun: (value: T) => T2, options?: {"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"reversed?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"}): "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/NonEmpty/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"List.NonEmpty")),(0,a.yg)("inlineCode",{parentName:"p"},"<T2>;"))),(0,a.yg)("h4",y({},{id:"type-parameters-6"}),"Type parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),"T2"),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"the result element type")))),(0,a.yg)("h4",y({},{id:"parameters-10"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"mapFun")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"(value: T) => T2")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"a function receiving a value and returning a new value")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"options")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"{"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"reversed?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"}")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,a.yg)("br",null)," - reversed: (default: false) if true, reverses the order of the values")))),(0,a.yg)("admonition",y({},{title:"note",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"The given ",(0,a.yg)("inlineCode",{parentName:"p"},"mapFun")," is expected to be side-effect free, so that structural sharing can be kept in place.")),(0,a.yg)("admonition",y({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"List.of(1, 2, 3).mapPure(v => `value: ${v + 2}`).toArray()\n// => ['value 2', 'value 3', 'value 3']\n"))),(0,a.yg)("h4",y({},{id:"overrides-17"}),"Overrides"),(0,a.yg)("p",null,(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface#mapPure"}),"List.mapPure"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",y({},{id:"nonempty"}),(0,a.yg)("inlineCode",{parentName:"h3"},"nonEmpty")),(0,a.yg)("p",null,"Returns true since this collection is known to be non-empty")),(0,a.yg)("h4",y({},{id:"definition-16"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"nonEmpty(): this is "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/NonEmpty/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"List.NonEmpty")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.yg)("admonition",y({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"List.of(0, 1, 2).nonEmpty()   // => true\n"))),(0,a.yg)("h4",y({},{id:"overrides-18"}),"Overrides"),(0,a.yg)("p",null,(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface#nonEmpty"}),"List.nonEmpty"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",y({},{id:"padto"}),(0,a.yg)("inlineCode",{parentName:"h3"},"padTo")),(0,a.yg)("p",null,"Returns the non-empty List where, if given ",(0,a.yg)("inlineCode",{parentName:"p"},"length")," is larger than the List length, the given ",(0,a.yg)("inlineCode",{parentName:"p"},"fill")," value is added to the start and/or end of the List according to the ",(0,a.yg)("inlineCode",{parentName:"p"},"positionPercentage")," such that the result length is equal to ",(0,a.yg)("inlineCode",{parentName:"p"},"length"),".")),(0,a.yg)("h4",y({},{id:"definition-17"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"padTo(length: number, fill: T, options?: {"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"positionPercentage?: number;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"}): "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/NonEmpty/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"List.NonEmpty")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.yg)("h4",y({},{id:"parameters-11"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"length")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"number")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"the target length of the resulting list")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"fill")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"T")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"the element used to fill up empty space in the resulting List")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"options")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"{"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"positionPercentage?: number;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"}")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,a.yg)("br",null)," - positionPercentage: (default: 0) a percentage indicating how much of the filling elements should be to the right side of the current List")))),(0,a.yg)("admonition",y({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"List.of(0, 1).padTo(4, 10)       // -> List(0, 1, 10, 10)\nList.of(0, 1).padTo(4, 10, 50)   // -> List(10, 0, 1, 10)\nList.of(0, 1).padTo(4, 10, 100)  // -> List(0, 1, 10, 10)\nList.of(0, 1, 2).padTo(2, 10)    // -> List(0, 1, 2)\n"))),(0,a.yg)("admonition",y({},{title:"note",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"O(logB(N)) for block size B")),(0,a.yg)("h4",y({},{id:"overrides-19"}),"Overrides"),(0,a.yg)("p",null,(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface#padTo"}),"List.padTo"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",y({},{id:"prepend"}),(0,a.yg)("inlineCode",{parentName:"h3"},"prepend")),(0,a.yg)("p",null,"Returns the List with the given ",(0,a.yg)("inlineCode",{parentName:"p"},"value")," added to the start.")),(0,a.yg)("h4",y({},{id:"definition-18"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"prepend(value: T): "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/NonEmpty/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"List.NonEmpty")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.yg)("h4",y({},{id:"parameters-12"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"value")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"T")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"the value to prepend")))),(0,a.yg)("admonition",y({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"List.of(0, 1, 2).prepend(-10)  // => List(-10, 0, 1, 2)\n"))),(0,a.yg)("admonition",y({},{title:"note",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"O(logB(N)) for block size B - mostly o(1)")),(0,a.yg)("h4",y({},{id:"overrides-20"}),"Overrides"),(0,a.yg)("p",null,(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface#prepend"}),"List.prepend"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",y({},{id:"remove"}),(0,a.yg)("inlineCode",{parentName:"h3"},"remove")),(0,a.yg)("p",null,"Returns the List with the given ",(0,a.yg)("inlineCode",{parentName:"p"},"amount")," of values removed at the given ",(0,a.yg)("inlineCode",{parentName:"p"},"index"),".")),(0,a.yg)("h4",y({},{id:"definition-19"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"remove(index: number, options?: {"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"amount?: number;"),(0,a.yg)("br",null),"\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"}): "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"List")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.yg)("h4",y({},{id:"parameters-13"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"index")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"number")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"the index at which to remove values")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"options")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"{"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"amount?: number;"),(0,a.yg)("br",null),"\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"}")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"object containing the following",(0,a.yg)("br",null)," - amount: (default: 1) the amount of elements to remove")))),(0,a.yg)("admonition",y({},{title:"note",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"a negative ",(0,a.yg)("inlineCode",{parentName:"p"},"index")," will be treated as follows:",(0,a.yg)("br",null)," - -1: the last element in the list",(0,a.yg)("br",null)," - -2: the second-last element in the list",(0,a.yg)("br",null)," - ...etc")),(0,a.yg)("admonition",y({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"List.of(0, 1, 2, 3).remove(1, 2)  // -> List(0, 3)\nList.of(0, 1, 2, 3).remove(-2, 1) // -> List(0, 1, 3)\n"))),(0,a.yg)("admonition",y({},{title:"note",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"O(logB(N)) for block size B")),(0,a.yg)("h4",y({},{id:"overrides-21"}),"Overrides"),(0,a.yg)("p",null,(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface#remove"}),"List.remove"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",y({},{id:"repeat"}),(0,a.yg)("inlineCode",{parentName:"h3"},"repeat")),(0,a.yg)("p",null,"Returns a non-empty List that contains this List the given ",(0,a.yg)("inlineCode",{parentName:"p"},"amount")," of times.")),(0,a.yg)("h4",y({},{id:"definition-20"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"repeat(amount: number): "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/NonEmpty/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"List.NonEmpty")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.yg)("h4",y({},{id:"parameters-14"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"amount")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"number")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"the amount of times to repeat the values in this List")))),(0,a.yg)("admonition",y({},{title:"note",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"if the given amount <= 1, the List itself is returned")),(0,a.yg)("admonition",y({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"List.of(0, 1, 2).repeat(2)   // -> List(0, 1, 2, 0, 1, 2)\nList.of(0, 1, 2).repeat(0)   // -> List(0, 1, 2)\n"))),(0,a.yg)("admonition",y({},{title:"note",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"O(logB(N)) for block size B")),(0,a.yg)("h4",y({},{id:"overrides-22"}),"Overrides"),(0,a.yg)("p",null,(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface#repeat"}),"List.repeat"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",y({},{id:"reversed"}),(0,a.yg)("inlineCode",{parentName:"h3"},"reversed")),(0,a.yg)("p",null,"Returns the non-empty List in reversed order.")),(0,a.yg)("h4",y({},{id:"definition-21"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"reversed(): "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/NonEmpty/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"List.NonEmpty")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.yg)("admonition",y({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"List.of(0, 1, 2).reversed()  // -> List(2, 1, 0)\n"))),(0,a.yg)("admonition",y({},{title:"note",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"O(logB(n)) for block size B")),(0,a.yg)("h4",y({},{id:"overrides-23"}),"Overrides"),(0,a.yg)("p",null,(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface#reversed"}),"List.reversed"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",y({},{id:"rotate"}),(0,a.yg)("inlineCode",{parentName:"h3"},"rotate")),(0,a.yg)("p",null,"Returns the non-empty List where the first given ",(0,a.yg)("inlineCode",{parentName:"p"},"shiftAmount")," of values are removed from this List, and are appended at the end.")),(0,a.yg)("h4",y({},{id:"definition-22"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"rotate(shiftAmount: number): "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/NonEmpty/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"List.NonEmpty")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.yg)("h4",y({},{id:"parameters-15"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"shiftAmount")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"number")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"the amount of values to rotate")))),(0,a.yg)("admonition",y({},{title:"note",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"if the ",(0,a.yg)("inlineCode",{parentName:"p"},"shiftAmount")," is negative, the last ",(0,a.yg)("inlineCode",{parentName:"p"},"shiftAmount")," values will be removed from the List and will be prepended.")),(0,a.yg)("admonition",y({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"List.of(0, 1, 2, 3).rotate(2)   // -> List(2, 3, 0, 1)\nList.of(0, 1, 2, 3).rotate(-1)  // -> List(1, 2, 3, 0)\n"))),(0,a.yg)("admonition",y({},{title:"note",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"O(logB(N)) for block size B")),(0,a.yg)("h4",y({},{id:"overrides-24"}),"Overrides"),(0,a.yg)("p",null,(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface#rotate"}),"List.rotate"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",y({},{id:"slice"}),(0,a.yg)("inlineCode",{parentName:"h3"},"slice")),(0,a.yg)("p",null,"Returns the List containing the values within the given index ",(0,a.yg)("inlineCode",{parentName:"p"},"range"),", potentially reversed in order if ",(0,a.yg)("inlineCode",{parentName:"p"},"reversed")," is true.")),(0,a.yg)("h4",y({},{id:"definition-23"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"slice(range: IndexRange, options?: {"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"reversed?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"}): "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"List")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.yg)("h4",y({},{id:"parameters-16"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"range")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"IndexRange")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"the index range to include")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"options")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"{"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"reversed?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"}")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,a.yg)("br",null)," - reversed: (default: false) if true reverses the order of the elements")))),(0,a.yg)("admonition",y({},{title:"note",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"a negative ",(0,a.yg)("inlineCode",{parentName:"p"},"index")," will be treated as follows:",(0,a.yg)("br",null)," - -1: the last element in the list",(0,a.yg)("br",null)," - -2: the second-last element in the list",(0,a.yg)("br",null)," - ...etc")),(0,a.yg)("admonition",y({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"List.of(0, 1, 2, 3).slice({ start: 1, amount: 2 })        // -> List(1, 2)\nList.of(0, 1, 2, 3).slice({ start: -2, amount: 2 }, true) // -> List(3, 2)\n"))),(0,a.yg)("admonition",y({},{title:"note",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"O(logB(N)) for block size B")),(0,a.yg)("h4",y({},{id:"overrides-25"}),"Overrides"),(0,a.yg)("p",null,(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface#slice"}),"List.slice"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",y({},{id:"sort"}),(0,a.yg)("inlineCode",{parentName:"h3"},"sort")),(0,a.yg)("p",null,"Returns the values sorted according to the given, optional Comp.\n",(0,a.yg)("strong",{parentName:"p"},"Performance warning"),": this method is not designed for frequent calls; should you need to keep in order a collection with potentially duplicate values, please consider ",(0,a.yg)("inlineCode",{parentName:"p"},"SortedMultiSet")," instead.")),(0,a.yg)("h4",y({},{id:"definition-24"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"sort(comp?: Comp<T>, options?: {"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"inverse?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"}): "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/NonEmpty/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"List.NonEmpty")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.yg)("h4",y({},{id:"parameters-17"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"comp")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"Comp<T>")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"The comparison logic to use; if missing, the default JavaScript sorting algorithm is applied")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"options")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"{"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"inverse?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"}")),(0,a.yg)("td",y({parentName:"tr"},{align:null}))))),(0,a.yg)("h4",y({},{id:"overrides-26"}),"Overrides"),(0,a.yg)("p",null,(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface#sort"}),"List.sort"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",y({},{id:"splice"}),(0,a.yg)("inlineCode",{parentName:"h3"},"splice")),(0,a.yg)("p",null,"Returns the List, where at the given ",(0,a.yg)("inlineCode",{parentName:"p"},"index")," the ",(0,a.yg)("inlineCode",{parentName:"p"},"remove")," amount of values are replaced by the values from the optionally given ",(0,a.yg)("inlineCode",{parentName:"p"},"insert")," ",(0,a.yg)("inlineCode",{parentName:"p"},"StreamSource"),".")),(0,a.yg)("h4",y({},{id:"definitions-3"}),"Definitions"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"splice(options: {"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"index: number;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"remove?: number;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"insert: "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"}): "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/NonEmpty/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"List.NonEmpty")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"splice(options: {"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"index: number;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"remove?: number;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"insert?: "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"}): "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"List")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.yg)("h4",y({},{id:"parameters-18"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"options")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"{"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"index: number;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"remove?: number;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"insert: "),(0,a.yg)("a",y({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,a.yg)("inlineCode",{parentName:"td"},"<T>;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"}")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"object containing the following",(0,a.yg)("br",null)," - index: the index at which to replace values",(0,a.yg)("br",null)," - remove: (default: 0) the amount of values to remove",(0,a.yg)("br",null)," - insert: (default: []) a ",(0,a.yg)("inlineCode",{parentName:"td"},"StreamSource")," of values to insert")))),(0,a.yg)("admonition",y({},{title:"note",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"a negative ",(0,a.yg)("inlineCode",{parentName:"p"},"index")," will be treated as follows: - -1: the last element in the list - -2: the second-last element in the list - ...etc")),(0,a.yg)("admonition",y({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"List.of(0, 1, 2, 3).splice({ index: 2, remove: 1 })                    // -> List(0, 1, 3)\nList.of(0, 1, 2, 3).splice({ index: 1, remove: 2, insert: [10, 11] })  // -> List(0, 10, 11, 3)\n"))),(0,a.yg)("admonition",y({},{title:"note",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"O(logB(N)) for block size B")),(0,a.yg)("h4",y({},{id:"overrides-27"}),"Overrides"),(0,a.yg)("p",null,(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface#splice"}),"List.splice"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",y({},{id:"stream"}),(0,a.yg)("inlineCode",{parentName:"h3"},"stream")),(0,a.yg)("p",null,"Returns a non-empty Stream containing the values in order of the List, or in reverse order if ",(0,a.yg)("inlineCode",{parentName:"p"},"reversed")," is true.")),(0,a.yg)("h4",y({},{id:"definition-25"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"stream(options?: {"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"reversed?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"}): "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.yg)("h4",y({},{id:"parameters-19"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"options")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"{"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"reversed?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"}")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,a.yg)("br",null)," - reversed: (default: false) if true reverses the order of the elements")))),(0,a.yg)("admonition",y({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"List.of(0, 1, 2).stream().toArray()      // => [0, 1, 2]\nList.of(0, 1, 2).stream(true).toArray()  // => [2, 1, 0]\n"))),(0,a.yg)("h4",y({},{id:"overrides-28"}),"Overrides"),(0,a.yg)("p",null,(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/stream/Streamable/NonEmpty/interface#stream"}),"NonEmpty.stream"),", ",(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface#stream"}),"List.stream"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",y({},{id:"streamrange"}),(0,a.yg)("inlineCode",{parentName:"h3"},"streamRange")),(0,a.yg)("p",null,"Returns a Stream containing the values contained in the given index ",(0,a.yg)("inlineCode",{parentName:"p"},"range"),", in order of the List, or in reverse order if ",(0,a.yg)("inlineCode",{parentName:"p"},"reversed")," is true.")),(0,a.yg)("h4",y({},{id:"definition-26"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"streamRange(range: IndexRange, options?: {"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"reversed?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"}): "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"Stream")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.yg)("h4",y({},{id:"parameters-20"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"range")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"IndexRange")),(0,a.yg)("td",y({parentName:"tr"},{align:null}))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"options")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"{"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"reversed?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"}")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,a.yg)("br",null)," - range: (optional) the index range to include from the list",(0,a.yg)("br",null)," - reversed: (default: false) if true reverses the order of the included elements")))),(0,a.yg)("admonition",y({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"List.of(0, 1, 2, 3, 4).streamRange({ start: 1, end: 2 }).toArray()             // => [0, 1, 2]\nList.of(0, 1, 2, 3, 4).streamRange({ start: 1, amount: 2 }, true).toArray()    // => [2, 1]\n"))),(0,a.yg)("h4",y({},{id:"overrides-29"}),"Overrides"),(0,a.yg)("p",null,(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface#streamRange"}),"List.streamRange"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",y({},{id:"take"}),(0,a.yg)("inlineCode",{parentName:"h3"},"take")),(0,a.yg)("p",null,"Returns a List containing the first (or last) given ",(0,a.yg)("inlineCode",{parentName:"p"},"amount")," values of this List.")),(0,a.yg)("h4",y({},{id:"definition-27"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"take<N extends number>(amount: N): 0 extends N ? "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"List")),(0,a.yg)("inlineCode",{parentName:"p"},"<T> : "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/NonEmpty/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"List.NonEmpty")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.yg)("h4",y({},{id:"type-parameters-7"}),"Type parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Constraints"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),"N"),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"number")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"the literal numeric type of amount")))),(0,a.yg)("h4",y({},{id:"parameters-21"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"amount")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"N")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"the desired amount of values of to include")))),(0,a.yg)("admonition",y({},{title:"note",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"a negative ",(0,a.yg)("inlineCode",{parentName:"p"},"index")," will be treated as follows:",(0,a.yg)("br",null)," - -1: the last element in the list",(0,a.yg)("br",null)," - -2: the second-last element in the list",(0,a.yg)("br",null)," - ...etc")),(0,a.yg)("admonition",y({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"List.of(0, 1, 2, 3).take(2)    // => List(0, 1)\nList.of(0, 1, 2, 3).take(10)   // => List(0, 1, 2, 3)\nList.of(0, 1, 2, 3).take(-2)   // => List(2, 3)\n"))),(0,a.yg)("admonition",y({},{title:"note",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"O(logB(N)) for block size B")),(0,a.yg)("h4",y({},{id:"overrides-30"}),"Overrides"),(0,a.yg)("p",null,(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface#take"}),"List.take"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",y({},{id:"toarray"}),(0,a.yg)("inlineCode",{parentName:"h3"},"toArray")),(0,a.yg)("p",null,"Returns an array containing the values within given ",(0,a.yg)("inlineCode",{parentName:"p"},"range")," (default: all) in this collection. If ",(0,a.yg)("inlineCode",{parentName:"p"},"reversed")," is true, reverses the order of the values.")),(0,a.yg)("h4",y({},{id:"definitions-4"}),"Definitions"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"toArray(options?: {"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"range?: undefined;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"reversed?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"}): "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"toArray(options?: {"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"range?: IndexRange;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"reversed?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"}): T[];"))),(0,a.yg)("h4",y({},{id:"parameters-22"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"options")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"{"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"range?: undefined;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"reversed?: boolean;"),(0,a.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.yg)("inlineCode",{parentName:"td"},"}")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,a.yg)("br",null)," - range: (optional) the range of the list to include in the filtering process",(0,a.yg)("br",null)," - reversed: (default: false) if true reverses the elements within the given range")))),(0,a.yg)("admonition",y({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"List.of(0, 1, 2, 3).toArray()                      // => [0, 1, 2, 3]\nList.of(0, 1, 2, 3).toArray({ amount: 2 })         // => [0, 1]\nList.of(0, 1, 2, 3).toArray({ amount: 2 }, true)   // => [1, 0]\n"))),(0,a.yg)("admonition",y({},{title:"note",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"O(logB(N)) for block size B  @note it is safe to mutate the returned array, however, the array elements are not copied, thus should be treated as read-only")),(0,a.yg)("h4",y({},{id:"overrides-31"}),"Overrides"),(0,a.yg)("p",null,(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface#toArray"}),"List.toArray"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",y({},{id:"tobuilder"}),(0,a.yg)("inlineCode",{parentName:"h3"},"toBuilder")),(0,a.yg)("p",null,"Returns a builder object containing the values of this collection.")),(0,a.yg)("h4",y({},{id:"definition-28"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"toBuilder(): "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/Builder/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"List.Builder")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.yg)("admonition",y({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"const builder: List.Builder<number> = List.of(0, 1, 2, 3).toBuilder()\n"))),(0,a.yg)("h4",y({},{id:"overrides-32"}),"Overrides"),(0,a.yg)("p",null,(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface#toBuilder"}),"List.toBuilder"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",y({},{id:"tojson"}),(0,a.yg)("inlineCode",{parentName:"h3"},"toJSON")),(0,a.yg)("p",null,"Returns a JSON representation of this collection.")),(0,a.yg)("h4",y({},{id:"definition-29"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"toJSON(): "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/common/ToJSON/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"ToJSON")),(0,a.yg)("inlineCode",{parentName:"p"},"<T[], this['context']['typeTag']>;"))),(0,a.yg)("admonition",y({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"List.of(0, 1, 2, 3).toJSON()   // => { dataType: 'List', value: [0, 1, 2, 3] }\n"))),(0,a.yg)("h4",y({},{id:"overrides-33"}),"Overrides"),(0,a.yg)("p",null,(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface#toJSON"}),"List.toJSON"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",y({},{id:"tostring"}),(0,a.yg)("inlineCode",{parentName:"h3"},"toString")),(0,a.yg)("p",null,"Returns a string representation of this collection.")),(0,a.yg)("h4",y({},{id:"definition-30"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"toString(): string;"))),(0,a.yg)("admonition",y({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"List.of(0, 1, 2, 3).toString()   // => List(0, 1, 2, 3)\n"))),(0,a.yg)("h4",y({},{id:"overrides-34"}),"Overrides"),(0,a.yg)("p",null,(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface#toString"}),"List.toString"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("h3",y({},{id:"updateat"}),(0,a.yg)("inlineCode",{parentName:"h3"},"updateAt")),(0,a.yg)("p",null,"Returns the non-empty List where at the given ",(0,a.yg)("inlineCode",{parentName:"p"},"index")," the value is replaced or updated by the given ",(0,a.yg)("inlineCode",{parentName:"p"},"update"),".")),(0,a.yg)("h4",y({},{id:"definition-31"}),"Definition"),(0,a.yg)("code",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"updateAt(index: number, update: "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/common/Update/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"Update")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>): "),(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/NonEmpty/interface"}),(0,a.yg)("inlineCode",{parentName:"a"},"List.NonEmpty")),(0,a.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.yg)("h4",y({},{id:"parameters-23"}),"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Type"),(0,a.yg)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"index")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"number")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"the index at which to update the value")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("inlineCode",{parentName:"td"},"update")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),(0,a.yg)("a",y({parentName:"td"},{href:"/api/rimbu/common/Update/type"}),(0,a.yg)("inlineCode",{parentName:"a"},"Update")),(0,a.yg)("inlineCode",{parentName:"td"},"<T>")),(0,a.yg)("td",y({parentName:"tr"},{align:null}),"a new value or function taking the current value and returning a new value")))),(0,a.yg)("admonition",y({},{title:"note",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"a negative ",(0,a.yg)("inlineCode",{parentName:"p"},"index")," will be treated as follows:",(0,a.yg)("br",null)," - -1: the last element in the list",(0,a.yg)("br",null)," - -2: the second-last element in the list",(0,a.yg)("br",null)," - ...etc")),(0,a.yg)("admonition",y({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",y({parentName:"pre"},{className:"language-ts"}),"List.of(0, 1, 2).updateAt(1, 10)            // -> List(0, 10, 2)\nList.of(0, 1, 2).updateAt(1, v => v + 1)    // -> List(0, 2, 2)\nList.of(0, 1, 2).updateAt(-1, 10)           // -> List(0, 1, 10)\n"))),(0,a.yg)("admonition",y({},{title:"note",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"O(logB(N)) for block size B")),(0,a.yg)("h4",y({},{id:"overrides-35"}),"Overrides"),(0,a.yg)("p",null,(0,a.yg)("a",y({parentName:"p"},{href:"/api/rimbu/list/List/interface#updateAt"}),"List.updateAt"))))}C.isMDXComponent=!0}}]);