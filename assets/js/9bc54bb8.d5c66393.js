"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[23214],{15680:(e,a,t)=>{t.d(a,{xA:()=>s,yg:()=>c});var n=t(96540);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var m=n.createContext({}),p=function(e){var a=n.useContext(m),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},s=function(e){var a=p(e.components);return n.createElement(m.Provider,{value:a},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},h=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,o=e.originalType,m=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=p(t),h=r,c=u["".concat(m,".").concat(h)]||u[h]||y[h]||o;return t?n.createElement(c,l(l({ref:a},s),{},{components:t})):n.createElement(c,l({ref:a},s))}));function c(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=h;var i={};for(var m in a)hasOwnProperty.call(a,m)&&(i[m]=a[m]);i.originalType=e,i[u]="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=t[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}h.displayName="MDXCreateElement"},80524:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>f,contentTitle:()=>b,default:()=>H,frontMatter:()=>c,metadata:()=>d,toc:()=>g});var n=t(15680),r=Object.defineProperty,o=Object.defineProperties,l=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,m=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,s=(e,a,t)=>a in e?r(e,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[a]=t,u=(e,a)=>{for(var t in a||(a={}))m.call(a,t)&&s(e,t,a[t]);if(i)for(var t of i(a))p.call(a,t)&&s(e,t,a[t]);return e},y=(e,a)=>o(e,l(a)),h=(e,a)=>{var t={};for(var n in e)m.call(e,n)&&a.indexOf(n)<0&&(t[n]=e[n]);if(null!=e&&i)for(var n of i(e))a.indexOf(n)<0&&p.call(e,n)&&(t[n]=e[n]);return t};const c={title:"HashTableHashColumn.NonEmpty<R,C,V>",slug:"/rimbu/table/hash-row/HashTableHashColumn/NonEmpty/interface"},b="interface HashTableHashColumn.NonEmpty<R,C,V>",d={unversionedId:"rimbu_table/hash-row/HashTableHashColumn/NonEmpty.interface",id:"rimbu_table/hash-row/HashTableHashColumn/NonEmpty.interface",title:"HashTableHashColumn.NonEmpty<R,C,V>",description:"A non-empty type-invariant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the Table documentation and the HashTableHashColumn API documentation",source:"@site/api/rimbu_table/hash-row/HashTableHashColumn/NonEmpty.interface.mdx",sourceDirName:"rimbu_table/hash-row/HashTableHashColumn",slug:"/rimbu/table/hash-row/HashTableHashColumn/NonEmpty/interface",permalink:"/api/rimbu/table/hash-row/HashTableHashColumn/NonEmpty/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"HashTableHashColumn.NonEmpty<R,C,V>",slug:"/rimbu/table/hash-row/HashTableHashColumn/NonEmpty/interface"},sidebar:"defaultSidebar",previous:{title:"HashTableHashColumn.Context<UR,UC>",permalink:"/api/rimbu/table/hash-row/HashTableHashColumn/Context/interface"},next:{title:"HashTableHashColumn.Types",permalink:"/api/rimbu/table/hash-row/HashTableHashColumn/Types/interface"}},f={},g=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>stream</code>",id:"stream",level:3},{value:"Definition",id:"definition",level:4},{value:"Overrides",id:"overrides",level:4}],N={toc:g},v="wrapper";function H(e){var a=e,{components:t}=a,r=h(a,["components"]);return(0,n.yg)(v,y(u(u({},N),r),{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",u({},{id:"interface-hashtablehashcolumnnonemptyrcv"}),(0,n.yg)("inlineCode",{parentName:"h1"},"interface HashTableHashColumn.NonEmpty<R,C,V>")),(0,n.yg)("p",null,"A non-empty type-invariant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the ",(0,n.yg)("a",u({parentName:"p"},{href:"https://rimbu.org/docs/collections/table"}),"Table documentation")," and the ",(0,n.yg)("a",u({parentName:"p"},{href:"https://rimbu.org/api/rimbu/table/hash-row/HashTableHashColumn/interface"}),"HashTableHashColumn API documentation"),"  "),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Extends:")," ",(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/stream/Streamable/NonEmpty/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"Streamable.NonEmpty<T>")),", ",(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/table/hash-row/HashTableHashColumn/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"HashTableHashColumn<R,C,V>"))),(0,n.yg)("h2",u({},{id:"type-parameters"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),"R"),(0,n.yg)("td",u({parentName:"tr"},{align:null}),"the row key type")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),"C"),(0,n.yg)("td",u({parentName:"tr"},{align:null}),"the column key type")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),"V"),(0,n.yg)("td",u({parentName:"tr"},{align:null}),"the value type")))),(0,n.yg)("admonition",u({},{title:"note",type:"note"}),(0,n.yg)("ul",{parentName:"admonition"},(0,n.yg)("li",{parentName:"ul"},"The HashTableHashColumn uses a HashMap to map row keys to column. - The HashTableHashColumn uses HashMaps to map column keys to values."))),(0,n.yg)("admonition",u({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",u({parentName:"pre"},{className:"language-ts"}),"const t1 = HashTableHashColumn.empty<number, string, boolean>()\nconst t2 = HashTableHashColumn.of([1, 'a', true], [2, 'a', false])\n"))),(0,n.yg)("h2",u({},{id:"methods"}),"Methods"),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",u({},{id:"stream"}),(0,n.yg)("inlineCode",{parentName:"h3"},"stream")),(0,n.yg)("p",null,"Returns a non-empty ",(0,n.yg)("inlineCode",{parentName:"p"},"Stream")," of the elements in this collection.")),(0,n.yg)("h4",u({},{id:"definition"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"stream(): "),(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/stream/Stream/NonEmpty/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,n.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,n.yg)("h4",u({},{id:"overrides"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/stream/Streamable/NonEmpty/interface#stream"}),"NonEmpty.stream"))))}H.isMDXComponent=!0}}]);