"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[5440],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>N});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),o=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=o(e.components);return a.createElement(p.Provider,{value:t},e.children)},k="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=m(e,["components","mdxType","originalType","parentName"]),k=o(n),u=r,N=k["".concat(p,".").concat(u)]||k[u]||s[u]||i;return n?a.createElement(N,l(l({ref:t},d),{},{components:n})):a.createElement(N,l({ref:t},d))}));function N(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var m={};for(var p in t)hasOwnProperty.call(t,p)&&(m[p]=t[p]);m.originalType=e,m[k]="string"==typeof e?e:r,l[1]=m;for(var o=2;o<i;o++)l[o]=n[o];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},58461:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>c,default:()=>v,frontMatter:()=>N,metadata:()=>y,toc:()=>f});var a=n(3905),r=Object.defineProperty,i=Object.defineProperties,l=Object.getOwnPropertyDescriptors,m=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable,d=(e,t,n)=>t in e?r(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,k=(e,t)=>{for(var n in t||(t={}))p.call(t,n)&&d(e,n,t[n]);if(m)for(var n of m(t))o.call(t,n)&&d(e,n,t[n]);return e},s=(e,t)=>i(e,l(t)),u=(e,t)=>{var n={};for(var a in e)p.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&m)for(var a of m(e))t.indexOf(a)<0&&o.call(e,a)&&(n[a]=e[a]);return n};const N={title:"AsyncStream.NonEmpty<T>",slug:"/rimbu/stream/async/AsyncStream/NonEmpty/interface"},c="interface AsyncStream.NonEmpty<T>",y={unversionedId:"rimbu_stream/async/AsyncStream/NonEmpty.interface",id:"rimbu_stream/async/AsyncStream/NonEmpty.interface",title:"AsyncStream.NonEmpty<T>",description:"A non-empty and possibly infinite asynchronous sequence of elements of type T. See the Stream documentation and the AsyncStream API documentation",source:"@site/api/rimbu_stream/async/AsyncStream/NonEmpty.interface.mdx",sourceDirName:"rimbu_stream/async/AsyncStream",slug:"/rimbu/stream/async/AsyncStream/NonEmpty/interface",permalink:"/api/rimbu/stream/async/AsyncStream/NonEmpty/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"AsyncStream.NonEmpty<T>",slug:"/rimbu/stream/async/AsyncStream/NonEmpty/interface"},sidebar:"defaultSidebar",previous:{title:"AsyncStream (namespace)",permalink:"/api/rimbu/stream/async/AsyncStream/namespace"},next:{title:"AsyncStream<T>",permalink:"/api/rimbu/stream/async/AsyncStream/interface"}},h={},f=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>asNormal</code>",id:"asnormal",level:3},{value:"Definition",id:"definition",level:4},{value:"<code>asyncStream</code>",id:"asyncstream",level:3},{value:"Definition",id:"definition-1",level:4},{value:"<code>concat</code>",id:"concat",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters",level:4},{value:"<code>distinctPrevious</code>",id:"distinctprevious",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>first</code>",id:"first",level:3},{value:"Definition",id:"definition-4",level:4},{value:"<code>flatMap</code>",id:"flatmap",level:3},{value:"Definitions",id:"definitions",level:4},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"<code>flatZip</code>",id:"flatzip",level:3},{value:"Definitions",id:"definitions-1",level:4},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"<code>foldStream</code>",id:"foldstream",level:3},{value:"Definitions",id:"definitions-2",level:4},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"<code>indexed</code>",id:"indexed",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"<code>intersperse</code>",id:"intersperse",level:3},{value:"Definition",id:"definition-6",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"<code>last</code>",id:"last",level:3},{value:"Definition",id:"definition-7",level:4},{value:"<code>map</code>",id:"map",level:3},{value:"Definition",id:"definition-8",level:4},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"<code>mapPure</code>",id:"mappure",level:3},{value:"Definition",id:"definition-9",level:4},{value:"Type parameters",id:"type-parameters-6",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"<code>max</code>",id:"max",level:3},{value:"Definition",id:"definition-10",level:4},{value:"<code>maxBy</code>",id:"maxby",level:3},{value:"Definition",id:"definition-11",level:4},{value:"Parameters",id:"parameters-9",level:4},{value:"<code>min</code>",id:"min",level:3},{value:"Definition",id:"definition-12",level:4},{value:"<code>minBy</code>",id:"minby",level:3},{value:"Definition",id:"definition-13",level:4},{value:"Parameters",id:"parameters-10",level:4},{value:"<code>mkGroup</code>",id:"mkgroup",level:3},{value:"Definition",id:"definition-14",level:4},{value:"Parameters",id:"parameters-11",level:4},{value:"<code>repeat</code>",id:"repeat",level:3},{value:"Definition",id:"definition-15",level:4},{value:"Parameters",id:"parameters-12",level:4},{value:"<code>toArray</code>",id:"toarray",level:3},{value:"Definition",id:"definition-16",level:4},{value:"<code>transform</code>",id:"transform",level:3},{value:"Definitions",id:"definitions-3",level:4},{value:"Type parameters",id:"type-parameters-7",level:4},{value:"Parameters",id:"parameters-13",level:4}],b={toc:f},g="wrapper";function v(e){var t=e,{components:n}=t,r=u(t,["components"]);return(0,a.kt)(g,s(k(k({},b),r),{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",k({},{id:"interface-asyncstreamnonemptyt"}),(0,a.kt)("inlineCode",{parentName:"h1"},"interface AsyncStream.NonEmpty<T>")),(0,a.kt)("p",null,"A non-empty and possibly infinite asynchronous sequence of elements of type T. See the ",(0,a.kt)("a",k({parentName:"p"},{href:"https://rimbu.org/docs/collections/stream"}),"Stream documentation")," and the ",(0,a.kt)("a",k({parentName:"p"},{href:"https://rimbu.org/api/rimbu/stream/async/AsyncStream/interface"}),"AsyncStream API documentation")),(0,a.kt)("h2",k({},{id:"type-parameters"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"T"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"the element type")))),(0,a.kt)("admonition",k({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const s1 = AsyncStream.empty<number>()\nconst s2 = AsyncStream.of(1, 3, 2)\nconst s3 = AsyncStream.from(Stream.range({ start: 10, amount: 15 }))\n"))),(0,a.kt)("h2",k({},{id:"methods"}),"Methods"),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",k({},{id:"asnormal"}),(0,a.kt)("inlineCode",{parentName:"h3"},"asNormal")),(0,a.kt)("p",null,"Returns this collection typed as a 'possibly empty' collection.")),(0,a.kt)("h4",k({},{id:"definition"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"asNormal(): "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/AsyncStream/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStream")),(0,a.kt)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.kt)("admonition",k({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"AsyncStream.of(0, 1, 2).asNormal();  // type: AsyncStream<number>\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",k({},{id:"asyncstream"}),(0,a.kt)("inlineCode",{parentName:"h3"},"asyncStream")),(0,a.kt)("p",null,"Returns a non-empty async stream of elements of type T.")),(0,a.kt)("h4",k({},{id:"definition-1"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"asyncStream(): this;"))),(0,a.kt)("admonition",k({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"AsyncStream.of(1, 2, 3).asyncStream()\n// => returns itself\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",k({},{id:"concat"}),(0,a.kt)("inlineCode",{parentName:"h3"},"concat")),(0,a.kt)("p",null,"Returns a non-empty AsyncStream containing the elements of this stream followed by all elements produced by the ",(0,a.kt)("inlineCode",{parentName:"p"},"others")," array of AsyncStreamSources.")),(0,a.kt)("h4",k({},{id:"definition-2"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"concat<T2 = T>(...others: "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,a.kt)("inlineCode",{parentName:"p"},"<"),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/AsyncStreamSource/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,a.kt)("inlineCode",{parentName:"p"},"<T>>): "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/AsyncStream/NonEmpty/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStream.NonEmpty")),(0,a.kt)("inlineCode",{parentName:"p"},"<T "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," T2>;"))),(0,a.kt)("h4",k({},{id:"type-parameters-1"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Default"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"T2"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"T")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"the result value type")))),(0,a.kt)("h4",k({},{id:"parameters"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"others")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("a",k({parentName:"td"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,a.kt)("inlineCode",{parentName:"td"},"<"),(0,a.kt)("a",k({parentName:"td"},{href:"/api/rimbu/stream/AsyncStreamSource/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,a.kt)("inlineCode",{parentName:"td"},"<T>>")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"a series of AsyncStreamSources to concatenate.")))),(0,a.kt)("admonition",k({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"await AsyncStream.of(1, 2, 3).concat([4, 5], () => [6, 7]).toArray()\n// [1, 2, 3, 4, 5, 6, 7]\n"))),(0,a.kt)("admonition",k({},{title:"note",type:"note"}),(0,a.kt)("p",{parentName:"admonition"},"O(1)"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",k({},{id:"distinctprevious"}),(0,a.kt)("inlineCode",{parentName:"h3"},"distinctPrevious")),(0,a.kt)("p",null,"Returns a non-empty AsyncStream containing non-repetitive elements of the source stream, where repetitive elements are compared using the optionally given ",(0,a.kt)("inlineCode",{parentName:"p"},"eq")," equality function.")),(0,a.kt)("h4",k({},{id:"definition-3"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"distinctPrevious(options?: {"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"eq?: Eq<T> "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"negate?: boolean "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"}): "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/AsyncStream/NonEmpty/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStream.NonEmpty")),(0,a.kt)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.kt)("h4",k({},{id:"parameters-1"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"options")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"{"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"eq?: Eq<T> "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"td"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"negate?: boolean "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"td"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"}")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"(optional) object specifying the following properties",(0,a.kt)("br",null)," - eq: (default: ",(0,a.kt)("inlineCode",{parentName:"td"},"Eq.objectIs"),") the ",(0,a.kt)("inlineCode",{parentName:"td"},"Eq")," instance to use to test equality of elements",(0,a.kt)("br",null)," - negate: (default: false) when true will negate the given predicate")))),(0,a.kt)("admonition",k({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"await AsyncStream.of(1, 1, 2, 2, 3, 1).distinctPrevious().toArray()\n// => [1, 2, 3, 1]\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",k({},{id:"first"}),(0,a.kt)("inlineCode",{parentName:"h3"},"first")),(0,a.kt)("p",null,"Returns the first element of the AsyncStream.")),(0,a.kt)("h4",k({},{id:"definition-4"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"first(): Promise<T>;"))),(0,a.kt)("admonition",k({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"await AsyncStream.of(1, 2, 3).first()      // => 1\n"))),(0,a.kt)("admonition",k({},{title:"note",type:"note"}),(0,a.kt)("p",{parentName:"admonition"},"O(1)"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",k({},{id:"flatmap"}),(0,a.kt)("inlineCode",{parentName:"h3"},"flatMap")),(0,a.kt)("p",null,"Returns an AsyncStream consisting of the concatenation of ",(0,a.kt)("inlineCode",{parentName:"p"},"flatMapFun")," applied to each element.")),(0,a.kt)("h4",k({},{id:"definitions"}),"Definitions"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"flatMap<T2>(flatMapFun: (value: T, index: number) => "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/AsyncStreamSource/NonEmpty/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStreamSource.NonEmpty")),(0,a.kt)("inlineCode",{parentName:"p"},"<T2>): "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/AsyncStream/NonEmpty/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStream.NonEmpty")),(0,a.kt)("inlineCode",{parentName:"p"},"<T2>;"))),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"flatMap<T2>(flatMapFun: (value: T, index: number, halt: () => void) => "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/AsyncStreamSource/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,a.kt)("inlineCode",{parentName:"p"},"<T2>): "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/AsyncStream/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStream")),(0,a.kt)("inlineCode",{parentName:"p"},"<T2>;"))),(0,a.kt)("h4",k({},{id:"type-parameters-2"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"T2"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"the result value type")))),(0,a.kt)("h4",k({},{id:"parameters-2"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"flatMapFun")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"(value: T, index: number) => "),(0,a.kt)("a",k({parentName:"td"},{href:"/api/rimbu/stream/AsyncStreamSource/NonEmpty/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStreamSource.NonEmpty")),(0,a.kt)("inlineCode",{parentName:"td"},"<T2>")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"a potentially asynchronous function receiving the inputs described below and returning a ",(0,a.kt)("inlineCode",{parentName:"td"},"StreamSource")," of new elements",(0,a.kt)("br",null)," - value: the next element",(0,a.kt)("br",null)," - index: the index of the element",(0,a.kt)("br",null)," - halt: a function that, if called, ensures that no new elements are passed")))),(0,a.kt)("admonition",k({},{title:"note",type:"note"}),(0,a.kt)("p",{parentName:"admonition"},"O(1)")),(0,a.kt)("admonition",k({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"await AsyncStream.of(1, 2, 3).flatMap(async (v, i, halt) => {\nif (i >= 1) halt();\nreturn [v, i, v + i]\n}).toArray()\n// => [1, 0, 1, 2, 1, 3]\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",k({},{id:"flatzip"}),(0,a.kt)("inlineCode",{parentName:"h3"},"flatZip")),(0,a.kt)("p",null,"Returns an AsyncStream consisting of the concatenation of ",(0,a.kt)("inlineCode",{parentName:"p"},"flatMapFun")," applied to each element, zipped with the element that was provided to the function.")),(0,a.kt)("h4",k({},{id:"definitions-1"}),"Definitions"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"flatZip<T2>(flatMapFun: (value: T, index: number) => "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/AsyncStreamSource/NonEmpty/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStreamSource.NonEmpty")),(0,a.kt)("inlineCode",{parentName:"p"},"<T2>): "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/AsyncStream/NonEmpty/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStream.NonEmpty")),(0,a.kt)("inlineCode",{parentName:"p"},"<[T, T2]>;"))),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"flatZip<T2>(flatMapFun: (value: T, index: number, halt: () => void) => "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/AsyncStreamSource/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,a.kt)("inlineCode",{parentName:"p"},"<T2>): "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/AsyncStream/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStream")),(0,a.kt)("inlineCode",{parentName:"p"},"<[T, T2]>;"))),(0,a.kt)("h4",k({},{id:"type-parameters-3"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"T2"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"the result element type")))),(0,a.kt)("h4",k({},{id:"parameters-3"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"flatMapFun")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"(value: T, index: number) => "),(0,a.kt)("a",k({parentName:"td"},{href:"/api/rimbu/stream/AsyncStreamSource/NonEmpty/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStreamSource.NonEmpty")),(0,a.kt)("inlineCode",{parentName:"td"},"<T2>")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"a function receiving the inputs described below and returning a ",(0,a.kt)("inlineCode",{parentName:"td"},"StreamSource")," of new elements",(0,a.kt)("br",null)," - value: the next element",(0,a.kt)("br",null)," - index: the index of the element",(0,a.kt)("br",null)," - halt: a function that, if called, ensures that no new elements are passed")))),(0,a.kt)("admonition",k({},{title:"note",type:"note"}),(0,a.kt)("p",{parentName:"admonition"},"O(1)")),(0,a.kt)("admonition",k({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"await AsyncStream.of(1, 2, 3).flatZip((v, i, halt) => {\nif (i >= 1) halt();\nreturn [v, i, v + i]\n}).toArray()\n// => [[1, 1], [1, 0], [1, 1], [2, 2], [2, 1], [2, 3]]\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",k({},{id:"foldstream"}),(0,a.kt)("inlineCode",{parentName:"h3"},"foldStream")),(0,a.kt)("p",null,"Returns an AsyncStream containing the values resulting from applying the given the given ",(0,a.kt)("inlineCode",{parentName:"p"},"next")," function to a current state (initially the given ",(0,a.kt)("inlineCode",{parentName:"p"},"init")," value), and the next stream value, and returning the new state.")),(0,a.kt)("h4",k({},{id:"definitions-2"}),"Definitions"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"foldStream<R>(init: AsyncOptLazy<R>, next: (current: R, value: T, index: number) => "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"MaybePromise")),(0,a.kt)("inlineCode",{parentName:"p"},"<R>): "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/AsyncStream/NonEmpty/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStream.NonEmpty")),(0,a.kt)("inlineCode",{parentName:"p"},"<R>;"))),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"foldStream<R>(init: AsyncOptLazy<R>, next: (current: R, value: T, index: number, halt: () => void) => "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"MaybePromise")),(0,a.kt)("inlineCode",{parentName:"p"},"<R>): "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/AsyncStream/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStream")),(0,a.kt)("inlineCode",{parentName:"p"},"<R>;"))),(0,a.kt)("h4",k({},{id:"type-parameters-4"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"R"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"the resulting element type")))),(0,a.kt)("h4",k({},{id:"parameters-4"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"init")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"AsyncOptLazy<R>")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"the initial result/state value")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"next")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"(current: R, value: T, index: number) => "),(0,a.kt)("a",k({parentName:"td"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"MaybePromise")),(0,a.kt)("inlineCode",{parentName:"td"},"<R>")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"a function taking the parameters below and returning the new result/state value",(0,a.kt)("br",null)," - current: the current result/state value, initially ",(0,a.kt)("inlineCode",{parentName:"td"},"init"),".",(0,a.kt)("br",null)," - value: the next Stream value",(0,a.kt)("br",null)," - index: the index of the given value",(0,a.kt)("br",null)," - halt: a function that, if called, ensures that no new elements are passed")))),(0,a.kt)("admonition",k({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"console.log(\nawait AsyncStream.empty<number>()\n.foldStream(5, async (current, value) => current + value)\n.toArray()\n)\n// => []\nconsole.log(\nawait AsyncStream.of(1, 2, 3)\n.foldStream(() => 5, (current, value) => current + value)\n.toArray()\n)\n// => [6, 8, 11]\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",k({},{id:"indexed"}),(0,a.kt)("inlineCode",{parentName:"h3"},"indexed")),(0,a.kt)("p",null,"Returns a non-empty AsyncStream where each element in this stream is paired with its index")),(0,a.kt)("h4",k({},{id:"definition-5"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"indexed(options?: {"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"startIndex?: number "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"}): "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/AsyncStream/NonEmpty/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStream.NonEmpty")),(0,a.kt)("inlineCode",{parentName:"p"},"<[number, T]>;"))),(0,a.kt)("h4",k({},{id:"parameters-5"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"options")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"{"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"startIndex?: number "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"td"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"}")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"(optional) object specifying the following properties",(0,a.kt)("br",null)," - startIndex: (optional) an alternative start index to use")))),(0,a.kt)("admonition",k({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"await AsyncStream.of(1, 2, 3).indexed().toArray()\n// => [[0, 1], [1, 2], [2, 3]]\n"))),(0,a.kt)("admonition",k({},{title:"note",type:"note"}),(0,a.kt)("p",{parentName:"admonition"},"O(1)"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",k({},{id:"intersperse"}),(0,a.kt)("inlineCode",{parentName:"h3"},"intersperse")),(0,a.kt)("p",null,"Returns a non-empty AsyncStream with all elements from the given ",(0,a.kt)("inlineCode",{parentName:"p"},"sep")," AsyncStreamSource between two elements of this stream.")),(0,a.kt)("h4",k({},{id:"definition-6"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"intersperse(sep: "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/AsyncStreamSource/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,a.kt)("inlineCode",{parentName:"p"},"<T>): "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/AsyncStream/NonEmpty/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStream.NonEmpty")),(0,a.kt)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.kt)("h4",k({},{id:"parameters-6"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"sep")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("a",k({parentName:"td"},{href:"/api/rimbu/stream/AsyncStreamSource/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,a.kt)("inlineCode",{parentName:"td"},"<T>")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"the AsyncStreamSource to insert between each element of this Stream")))),(0,a.kt)("admonition",k({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"await AsyncStream.of(1, 2, 3).intersperse(\"ab\").toArray()\n// => [1, 'a', 'b', 2, 'a', 'b', 3]\n"))),(0,a.kt)("admonition",k({},{title:"note",type:"note"}),(0,a.kt)("p",{parentName:"admonition"},"O(1)"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",k({},{id:"last"}),(0,a.kt)("inlineCode",{parentName:"h3"},"last")),(0,a.kt)("p",null,"Returns the last element of the AsyncStream.")),(0,a.kt)("h4",k({},{id:"definition-7"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"last(): Promise<T>;"))),(0,a.kt)("admonition",k({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"await AsyncStream.of(1, 2, 3).last()      // => 3\n"))),(0,a.kt)("admonition",k({},{title:"note",type:"note"}),(0,a.kt)("p",{parentName:"admonition"},"O(N)"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",k({},{id:"map"}),(0,a.kt)("inlineCode",{parentName:"h3"},"map")),(0,a.kt)("p",null,"Returns a non-empty AsyncStream where ",(0,a.kt)("inlineCode",{parentName:"p"},"mapFun")," is applied to each element.")),(0,a.kt)("h4",k({},{id:"definition-8"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"map<T2>(mapFun: (value: T, index: number) => "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"MaybePromise")),(0,a.kt)("inlineCode",{parentName:"p"},"<T2>): "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/AsyncStream/NonEmpty/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStream.NonEmpty")),(0,a.kt)("inlineCode",{parentName:"p"},"<T2>;"))),(0,a.kt)("h4",k({},{id:"type-parameters-5"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"T2"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"the result element type")))),(0,a.kt)("h4",k({},{id:"parameters-7"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"mapFun")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"(value: T, index: number) => "),(0,a.kt)("a",k({parentName:"td"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"MaybePromise")),(0,a.kt)("inlineCode",{parentName:"td"},"<T2>")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"a potentially asynchronous function taking an element and its index, and returning some new element")))),(0,a.kt)("admonition",k({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"await AsyncStream.of(1, 2, 3).map(async (v, i) => `[${i}]: ${v}`).toArray()\n// => ['[0]: 1', '[1]: 2', '[2]: 3']\n"))),(0,a.kt)("admonition",k({},{title:"note",type:"note"}),(0,a.kt)("p",{parentName:"admonition"},"O(1)"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",k({},{id:"mappure"}),(0,a.kt)("inlineCode",{parentName:"h3"},"mapPure")),(0,a.kt)("p",null,"Returns a non-empty AsyncStream where the given ",(0,a.kt)("inlineCode",{parentName:"p"},"mapFun")," is applied to each value in the stream, with optionally as extra arguments the given ",(0,a.kt)("inlineCode",{parentName:"p"},"args"),".")),(0,a.kt)("h4",k({},{id:"definition-9"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"mapPure<T2, A extends readonly unknown[]>(mapFun: (value: T, ...args: A) => "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"MaybePromise")),(0,a.kt)("inlineCode",{parentName:"p"},"<T2>, ...args: A): "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/AsyncStream/NonEmpty/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStream.NonEmpty")),(0,a.kt)("inlineCode",{parentName:"p"},"<T2>;"))),(0,a.kt)("h4",k({},{id:"type-parameters-6"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Constraints"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"T2"),(0,a.kt)("td",k({parentName:"tr"},{align:null})),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"the result value type")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"A"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"readonly unknown[]")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"the type of the arguments to be passed to the ",(0,a.kt)("inlineCode",{parentName:"td"},"mapFun")," function after each element")))),(0,a.kt)("h4",k({},{id:"parameters-8"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"mapFun")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"(value: T, ...args: A) => "),(0,a.kt)("a",k({parentName:"td"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"MaybePromise")),(0,a.kt)("inlineCode",{parentName:"td"},"<T2>")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"a potentially asynchronous function taking an element and the given args, and returning the resulting stream value")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"args")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"A")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"(optional) the extra arguments to pass to the given ",(0,a.kt)("inlineCode",{parentName:"td"},"mapFun"))))),(0,a.kt)("admonition",k({},{title:"note",type:"note"}),(0,a.kt)("p",{parentName:"admonition"},"is mostly aimed to increase performance so that an extra function is not required  @note can be used on function that really expect 1 argument, since the normal map will also pass more arguments")),(0,a.kt)("admonition",k({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",k({parentName:"pre"},{className:"language-ts"}),'const s = AsyncStream.of({ a: 1 }, { a: 2, c: { d: true } })\nconst s2 = s.mapPure(JSON.stringify, [\'a\'], 5)\n// when stream is evaluated, will call JSON.stringify on each stream element with the given extra arguments\nconsole.log(await s2.toArray())\n// => ["{\\n \\"a\\": 1\\n}", "{\\n \\"a\\": 2\\n}"]\n')))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",k({},{id:"max"}),(0,a.kt)("inlineCode",{parentName:"h3"},"max")),(0,a.kt)("p",null,"Returns the maximum element of the AsyncStream according to a default compare function.")),(0,a.kt)("h4",k({},{id:"definition-10"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"max(): Promise<T>;"))),(0,a.kt)("admonition",k({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"await AsyncStream.of(5, 1, 3).max()         // => 5\n"))),(0,a.kt)("admonition",k({},{title:"note",type:"note"}),(0,a.kt)("p",{parentName:"admonition"},"O(N)"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",k({},{id:"maxby"}),(0,a.kt)("inlineCode",{parentName:"h3"},"maxBy")),(0,a.kt)("p",null,"Returns the maximum element of the AsyncStream according to the provided ",(0,a.kt)("inlineCode",{parentName:"p"},"compare")," function.")),(0,a.kt)("h4",k({},{id:"definition-11"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"maxBy(compare: (v1: T, v2: T) => number): Promise<T>;"))),(0,a.kt)("h4",k({},{id:"parameters-9"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"compare")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"(v1: T, v2: T) => number")),(0,a.kt)("td",k({parentName:"tr"},{align:null}))))),(0,a.kt)("admonition",k({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"function compareLength(a: string, b: string): number { return b.length - a.length };\nawait AsyncStream.of('abc', 'a', 'ab').maxBy(compareLength)   // => 'abc'\n"))),(0,a.kt)("admonition",k({},{title:"note",type:"note"}),(0,a.kt)("p",{parentName:"admonition"},"O(N)"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",k({},{id:"min"}),(0,a.kt)("inlineCode",{parentName:"h3"},"min")),(0,a.kt)("p",null,"Returns the mimimum element of the AsyncStream according to a default compare function.")),(0,a.kt)("h4",k({},{id:"definition-12"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"min(): Promise<T>;"))),(0,a.kt)("admonition",k({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"await AsyncStream.of(5, 1, 3).min()         // => 1\n"))),(0,a.kt)("admonition",k({},{title:"note",type:"note"}),(0,a.kt)("p",{parentName:"admonition"},"O(N)"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",k({},{id:"minby"}),(0,a.kt)("inlineCode",{parentName:"h3"},"minBy")),(0,a.kt)("p",null,"Returns the mimimum element of the AsyncStream according to the provided ",(0,a.kt)("inlineCode",{parentName:"p"},"compare")," function.")),(0,a.kt)("h4",k({},{id:"definition-13"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"minBy(compare: (v1: T, v2: T) => number): Promise<T>;"))),(0,a.kt)("h4",k({},{id:"parameters-10"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"compare")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"(v1: T, v2: T) => number")),(0,a.kt)("td",k({parentName:"tr"},{align:null}))))),(0,a.kt)("admonition",k({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"function compareLength(a: string, b: string): number { return b.length - a.length };\nawait AsyncStream.of('abc', 'a', 'ab').minBy(compareLength)   // => 'a'\n"))),(0,a.kt)("admonition",k({},{title:"note",type:"note"}),(0,a.kt)("p",{parentName:"admonition"},"O(N)"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",k({},{id:"mkgroup"}),(0,a.kt)("inlineCode",{parentName:"h3"},"mkGroup")),(0,a.kt)("p",null,"Returns a non-empty AsyncStream starting with ",(0,a.kt)("inlineCode",{parentName:"p"},"options.sep"),", then returning the elements of this Stream interspersed with ",(0,a.kt)("inlineCode",{parentName:"p"},"options.sep"),", and ending with ",(0,a.kt)("inlineCode",{parentName:"p"},"options.end"),".")),(0,a.kt)("h4",k({},{id:"definition-14"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"mkGroup(options: {"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"sep?: "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/AsyncStreamSource/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,a.kt)("inlineCode",{parentName:"p"},"<T> "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"start?: "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/AsyncStreamSource/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,a.kt)("inlineCode",{parentName:"p"},"<T> "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"end?: "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/AsyncStreamSource/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,a.kt)("inlineCode",{parentName:"p"},"<T> "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"}): "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/AsyncStream/NonEmpty/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStream.NonEmpty")),(0,a.kt)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.kt)("h4",k({},{id:"parameters-11"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"options")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"{"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"sep?: "),(0,a.kt)("a",k({parentName:"td"},{href:"/api/rimbu/stream/AsyncStreamSource/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,a.kt)("inlineCode",{parentName:"td"},"<T> "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"td"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"start?: "),(0,a.kt)("a",k({parentName:"td"},{href:"/api/rimbu/stream/AsyncStreamSource/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,a.kt)("inlineCode",{parentName:"td"},"<T> "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"td"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"end?: "),(0,a.kt)("a",k({parentName:"td"},{href:"/api/rimbu/stream/AsyncStreamSource/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,a.kt)("inlineCode",{parentName:"td"},"<T> "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"td"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"}")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"object specifying the following properties",(0,a.kt)("br",null)," - sep: (optional) a seperator StreamSource to insert between each Stream element",(0,a.kt)("br",null)," - start: (optional) a start StreamSource to prepend",(0,a.kt)("br",null)," - end: (optional) an end StreamSource to append")))),(0,a.kt)("admonition",k({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"await AsyncStream.of(1, 2, 3).mkGroup({ start: '<<', sep: '-', end: '>>' }).toArray()\n// => ['<', '<', 1, '-', 2, '-', 3, '>', '>']\n"))),(0,a.kt)("admonition",k({},{title:"note",type:"note"}),(0,a.kt)("p",{parentName:"admonition"},"O(N)"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",k({},{id:"repeat"}),(0,a.kt)("inlineCode",{parentName:"h3"},"repeat")),(0,a.kt)("p",null,"Returns a non-empty AsyncStream that returns the elements from this stream given ",(0,a.kt)("inlineCode",{parentName:"p"},"amount")," of times.")),(0,a.kt)("h4",k({},{id:"definition-15"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"repeat(amount?: number "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"},"undefined):"),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/AsyncStream/NonEmpty/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStream.NonEmpty")),(0,a.kt)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.kt)("h4",k({},{id:"parameters-12"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"amount")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"number "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"td"}," undefined")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"(default: undefined) the amount of times to return this Stream")))),(0,a.kt)("admonition",k({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const source = AsyncStream.of(1, 2, 3)\nsource.repeat()              // => AsyncStream(1, 2, 3, 1, 2, 3, 1, 2, ...)\nawait source.repeat(1).toArray()   // => [1, 2, 3]\nawait source.repeat(3).toArray()   // => [1, 2, 3, 1, 2, 3, 1, 2, 3]\nawait source.repeat(-3).toArray()  // => [1, 2, 3]\n"))),(0,a.kt)("admonition",k({},{title:"note",type:"note"}),(0,a.kt)("p",{parentName:"admonition"},"amount = undefined means that the AsyncStream is repeated indefintely  @note amount = 1 means that the Stream is not repeated  @note amount < 1 will be normalized to amount = 1  @note O(1)"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",k({},{id:"toarray"}),(0,a.kt)("inlineCode",{parentName:"h3"},"toArray")),(0,a.kt)("p",null,"Returns a non-empty Array containing all elements in the AsyncStream.")),(0,a.kt)("h4",k({},{id:"definition-16"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"toArray(): Promise<"),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,a.kt)("inlineCode",{parentName:"p"},"<T>>;"))),(0,a.kt)("admonition",k({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"await AsyncStream.of(1, 2, 3).toArray()   // => [1, 2, 3]\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",k({},{id:"transform"}),(0,a.kt)("inlineCode",{parentName:"h3"},"transform")),(0,a.kt)("p",null,"Returns an AsyncStream consisting of the concatenation of AsyncStreamSource elements resulting from applying the given ",(0,a.kt)("inlineCode",{parentName:"p"},"reducer")," to each element.")),(0,a.kt)("h4",k({},{id:"definitions-3"}),"Definitions"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"transform<R, T2 extends T = T>(transformer: "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/AsyncTransformer/AcceptNonEmpty/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncTransformer.AcceptNonEmpty")),(0,a.kt)("inlineCode",{parentName:"p"},"<T "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"},"T2, R>):"),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/AsyncStream/NonEmpty/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStream.NonEmpty")),(0,a.kt)("inlineCode",{parentName:"p"},"<R>;"))),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"transform<R, T2 extends T = T>(transformer: "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/AsyncTransformer/Accept/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncTransformer.Accept")),(0,a.kt)("inlineCode",{parentName:"p"},"<T "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"},"T2, R>):"),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/stream/AsyncStream/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncStream")),(0,a.kt)("inlineCode",{parentName:"p"},"<R>;"))),(0,a.kt)("h4",k({},{id:"type-parameters-7"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Constraints"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Default"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"R"),(0,a.kt)("td",k({parentName:"tr"},{align:null})),(0,a.kt)("td",k({parentName:"tr"},{align:null})),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"the resulting element type")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"T2"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"T")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"T")),(0,a.kt)("td",k({parentName:"tr"},{align:null}))))),(0,a.kt)("h4",k({},{id:"parameters-13"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"transformer")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("a",k({parentName:"td"},{href:"/api/rimbu/stream/AsyncTransformer/AcceptNonEmpty/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncTransformer.AcceptNonEmpty")),(0,a.kt)("inlineCode",{parentName:"td"},"<T "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"td"}," T2, R>")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"an async reducer taking elements ot type T as input, and returing an ",(0,a.kt)("inlineCode",{parentName:"td"},"AsyncStreamSource")," of element type R.")))),(0,a.kt)("admonition",k({},{title:"note",type:"note"}),(0,a.kt)("p",{parentName:"admonition"},"O(1)")),(0,a.kt)("admonition",k({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"await AsyncStream.of(1, 2, 3, 4, 5, 6).transform(AsyncTransformer.window(3)).toArray()\n// => [[1, 2, 3], [4, 5, 6]]\n")))))}v.isMDXComponent=!0}}]);