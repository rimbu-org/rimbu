"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[66298],{15680:(e,a,t)=>{t.d(a,{xA:()=>y,yg:()=>N});var r=t(96540);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function p(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var g=r.createContext({}),d=function(e){var a=r.useContext(g),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},y=function(e){var a=d(e.components);return r.createElement(g.Provider,{value:a},e.children)},o="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},s=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,i=e.originalType,g=e.parentName,y=p(e,["components","mdxType","originalType","parentName"]),o=d(t),s=n,N=o["".concat(g,".").concat(s)]||o[s]||m[s]||i;return t?r.createElement(N,l(l({ref:a},y),{},{components:t})):r.createElement(N,l({ref:a},y))}));function N(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var i=t.length,l=new Array(i);l[0]=s;var p={};for(var g in a)hasOwnProperty.call(a,g)&&(p[g]=a[g]);p.originalType=e,p[o]="string"==typeof e?e:n,l[1]=p;for(var d=2;d<i;d++)l[d]=t[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}s.displayName="MDXCreateElement"},31649:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>c,contentTitle:()=>u,default:()=>C,frontMatter:()=>N,metadata:()=>h,toc:()=>v});var r=t(15680),n=Object.defineProperty,i=Object.defineProperties,l=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,g=Object.prototype.hasOwnProperty,d=Object.prototype.propertyIsEnumerable,y=(e,a,t)=>a in e?n(e,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[a]=t,o=(e,a)=>{for(var t in a||(a={}))g.call(a,t)&&y(e,t,a[t]);if(p)for(var t of p(a))d.call(a,t)&&y(e,t,a[t]);return e},m=(e,a)=>i(e,l(a)),s=(e,a)=>{var t={};for(var r in e)g.call(e,r)&&a.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&p)for(var r of p(e))a.indexOf(r)<0&&d.call(e,r)&&(t[r]=e[r]);return t};const N={title:"Traverse (namespace)",slug:"/rimbu/graph/Traverse/namespace"},u="namespace Traverse",h={unversionedId:"rimbu_graph/Traverse/index",id:"rimbu_graph/Traverse/index",title:"Traverse (namespace)",description:"undocumented",source:"@site/api/rimbu_graph/Traverse/index.mdx",sourceDirName:"rimbu_graph/Traverse",slug:"/rimbu/graph/Traverse/namespace",permalink:"/api/rimbu/graph/Traverse/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"Traverse (namespace)",slug:"/rimbu/graph/Traverse/namespace"},sidebar:"defaultSidebar",previous:{title:"Graph<N>",permalink:"/api/rimbu/graph/Graph/interface"},next:{title:"LinkType",permalink:"/api/rimbu/graph/Traverse/LinkType/type"}},c={},v=[{value:"Functions",id:"functions",level:2},{value:"<code>traverseBreadthFirstCustom</code>",id:"traversebreadthfirstcustom",level:3},{value:"Definition",id:"definition",level:4},{value:"Type parameters",id:"type-parameters",level:5},{value:"Parameters",id:"parameters",level:4},{value:"<code>traverseBreadthFirstHashed</code>",id:"traversebreadthfirsthashed",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Type parameters",id:"type-parameters-1",level:5},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>traverseBreadthFirstSorted</code>",id:"traversebreadthfirstsorted",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Type parameters",id:"type-parameters-2",level:5},{value:"Parameters",id:"parameters-2",level:4},{value:"<code>traverseDepthFirstCustom</code>",id:"traversedepthfirstcustom",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Type parameters",id:"type-parameters-3",level:5},{value:"Parameters",id:"parameters-3",level:4},{value:"<code>traverseDepthFirstHashed</code>",id:"traversedepthfirsthashed",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Type parameters",id:"type-parameters-4",level:5},{value:"Parameters",id:"parameters-4",level:4},{value:"<code>traverseDepthFirstSorted</code>",id:"traversedepthfirstsorted",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Type parameters",id:"type-parameters-5",level:5},{value:"Parameters",id:"parameters-5",level:4}],b={toc:v},f="wrapper";function C(e){var a=e,{components:t}=a,n=s(a,["components"]);return(0,r.yg)(f,m(o(o({},b),n),{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",o({},{id:"namespace-traverse"}),(0,r.yg)("inlineCode",{parentName:"h1"},"namespace Traverse")),(0,r.yg)("p",null,"undocumented"),(0,r.yg)("h2",o({},{id:"functions"}),"Functions"),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("h3",o({},{id:"traversebreadthfirstcustom"}),(0,r.yg)("inlineCode",{parentName:"h3"},"traverseBreadthFirstCustom")),(0,r.yg)("p",null,"Returns a stream of connections that can be reached in the given ",(0,r.yg)("inlineCode",{parentName:"p"},"graph")," starting at the given ",(0,r.yg)("inlineCode",{parentName:"p"},"startNode"),", and using breadth-first traversal. It can avoid loops if needed in a custom way by supplying the ",(0,r.yg)("inlineCode",{parentName:"p"},"addVisitedNode")," function.")),(0,r.yg)("h4",o({},{id:"definition"}),"Definition"),(0,r.yg)("code",null,(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"export declare function traverseBreadthFirstCustom<G extends VariantGraphBase<N, any>, N>(graph: G, startNode: N, addVisitedNode?: (node: N) => boolean): "),(0,r.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,r.yg)("inlineCode",{parentName:"a"},"Stream")),(0,r.yg)("inlineCode",{parentName:"p"},"<"),(0,r.yg)("a",o({parentName:"p"},{href:"/api/rimbu/graph/Traverse/LinkType/type"}),(0,r.yg)("inlineCode",{parentName:"a"},"LinkType")),(0,r.yg)("inlineCode",{parentName:"p"},"<G, N>>;"))),(0,r.yg)("h5",o({},{id:"type-parameters"}),"Type parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,r.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",o({parentName:"tr"},{align:null}),"G"),(0,r.yg)("td",o({parentName:"tr"},{align:null}))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",o({parentName:"tr"},{align:null}),"N"),(0,r.yg)("td",o({parentName:"tr"},{align:null}))))),(0,r.yg)("h4",o({},{id:"parameters"}),"Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,r.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,r.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",o({parentName:"tr"},{align:null}),(0,r.yg)("inlineCode",{parentName:"td"},"graph")),(0,r.yg)("td",o({parentName:"tr"},{align:null}),(0,r.yg)("inlineCode",{parentName:"td"},"G")),(0,r.yg)("td",o({parentName:"tr"},{align:null}),"the graph to traverse")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",o({parentName:"tr"},{align:null}),(0,r.yg)("inlineCode",{parentName:"td"},"startNode")),(0,r.yg)("td",o({parentName:"tr"},{align:null}),(0,r.yg)("inlineCode",{parentName:"td"},"N")),(0,r.yg)("td",o({parentName:"tr"},{align:null}),"the start node within the graph")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",o({parentName:"tr"},{align:null}),(0,r.yg)("inlineCode",{parentName:"td"},"addVisitedNode")),(0,r.yg)("td",o({parentName:"tr"},{align:null}),(0,r.yg)("inlineCode",{parentName:"td"},"(node: N) => boolean")),(0,r.yg)("td",o({parentName:"tr"},{align:null}),"a function taking the currenty traversed node, and returning true if the node has been traversed before, or false otherwise")))),(0,r.yg)("admonition",o({},{title:"example",type:"note"}),(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"const g = EdgeGraphHashed.of([1, 2], [2, 3], [1, 3], [3, 4])\nconst stream = traverseBreadthFirstCustom(g, 1)\nconsole.log(stream.toArray())\n// => [[1, 2], [1, 3], [2, 3], [3, 4]]\n")))),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("h3",o({},{id:"traversebreadthfirsthashed"}),(0,r.yg)("inlineCode",{parentName:"h3"},"traverseBreadthFirstHashed")),(0,r.yg)("p",null,"Returns a stream of connections that can be reached in the given ",(0,r.yg)("inlineCode",{parentName:"p"},"graph")," starting at the given ",(0,r.yg)("inlineCode",{parentName:"p"},"startNode"),", and using breadth-first traversal. It avoids loops by internally placing the visited nodes in a HashSet builder.")),(0,r.yg)("h4",o({},{id:"definition-1"}),"Definition"),(0,r.yg)("code",null,(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"export declare function traverseBreadthFirstHashed<G extends VariantGraphBase<N, V>, N, V>(graph: G, startNode: N): "),(0,r.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,r.yg)("inlineCode",{parentName:"a"},"Stream")),(0,r.yg)("inlineCode",{parentName:"p"},"<"),(0,r.yg)("a",o({parentName:"p"},{href:"/api/rimbu/graph/Traverse/LinkType/type"}),(0,r.yg)("inlineCode",{parentName:"a"},"LinkType")),(0,r.yg)("inlineCode",{parentName:"p"},"<G, N>>;"))),(0,r.yg)("h5",o({},{id:"type-parameters-1"}),"Type parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,r.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",o({parentName:"tr"},{align:null}),"G"),(0,r.yg)("td",o({parentName:"tr"},{align:null}))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",o({parentName:"tr"},{align:null}),"N"),(0,r.yg)("td",o({parentName:"tr"},{align:null}))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",o({parentName:"tr"},{align:null}),"V"),(0,r.yg)("td",o({parentName:"tr"},{align:null}))))),(0,r.yg)("h4",o({},{id:"parameters-1"}),"Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,r.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,r.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",o({parentName:"tr"},{align:null}),(0,r.yg)("inlineCode",{parentName:"td"},"graph")),(0,r.yg)("td",o({parentName:"tr"},{align:null}),(0,r.yg)("inlineCode",{parentName:"td"},"G")),(0,r.yg)("td",o({parentName:"tr"},{align:null}),"the graph to traverse")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",o({parentName:"tr"},{align:null}),(0,r.yg)("inlineCode",{parentName:"td"},"startNode")),(0,r.yg)("td",o({parentName:"tr"},{align:null}),(0,r.yg)("inlineCode",{parentName:"td"},"N")),(0,r.yg)("td",o({parentName:"tr"},{align:null}),"the start node within the graph")))),(0,r.yg)("admonition",o({},{title:"example",type:"note"}),(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"const g = EdgeGraphHashed.of([1, 2], [2, 3], [1, 3], [3, 4])\nconst stream = traverseBreadthFirstHashed(g, 1)\nconsole.log(stream.toArray())\n// => [[1, 2], [1, 3], [2, 3], [3, 4]]\n")))),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("h3",o({},{id:"traversebreadthfirstsorted"}),(0,r.yg)("inlineCode",{parentName:"h3"},"traverseBreadthFirstSorted")),(0,r.yg)("p",null,"Returns a stream of connections that can be reached in the given ",(0,r.yg)("inlineCode",{parentName:"p"},"graph")," starting at the given ",(0,r.yg)("inlineCode",{parentName:"p"},"startNode"),", and using breadth-first traversal. It avoids loops by internally placing the visited nodes in a SortedSet builder.")),(0,r.yg)("h4",o({},{id:"definition-2"}),"Definition"),(0,r.yg)("code",null,(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"export declare function traverseBreadthFirstSorted<G extends VariantGraphBase<N, any>, N>(graph: G, startNode: N): "),(0,r.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,r.yg)("inlineCode",{parentName:"a"},"Stream")),(0,r.yg)("inlineCode",{parentName:"p"},"<"),(0,r.yg)("a",o({parentName:"p"},{href:"/api/rimbu/graph/Traverse/LinkType/type"}),(0,r.yg)("inlineCode",{parentName:"a"},"LinkType")),(0,r.yg)("inlineCode",{parentName:"p"},"<G, N>>;"))),(0,r.yg)("h5",o({},{id:"type-parameters-2"}),"Type parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,r.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",o({parentName:"tr"},{align:null}),"G"),(0,r.yg)("td",o({parentName:"tr"},{align:null}))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",o({parentName:"tr"},{align:null}),"N"),(0,r.yg)("td",o({parentName:"tr"},{align:null}))))),(0,r.yg)("h4",o({},{id:"parameters-2"}),"Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,r.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,r.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",o({parentName:"tr"},{align:null}),(0,r.yg)("inlineCode",{parentName:"td"},"graph")),(0,r.yg)("td",o({parentName:"tr"},{align:null}),(0,r.yg)("inlineCode",{parentName:"td"},"G")),(0,r.yg)("td",o({parentName:"tr"},{align:null}),"the graph to traverse")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",o({parentName:"tr"},{align:null}),(0,r.yg)("inlineCode",{parentName:"td"},"startNode")),(0,r.yg)("td",o({parentName:"tr"},{align:null}),(0,r.yg)("inlineCode",{parentName:"td"},"N")),(0,r.yg)("td",o({parentName:"tr"},{align:null}),"the start node within the graph")))),(0,r.yg)("admonition",o({},{title:"example",type:"note"}),(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"const g = EdgeGraphHashed.of([1, 2], [2, 3], [1, 3], [3, 4])\nconst stream = traverseBreadthFirstSorted(g, 1)\nconsole.log(stream.toArray())\n// => [[1, 2], [1, 3], [2, 3], [3, 4]]\n")))),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("h3",o({},{id:"traversedepthfirstcustom"}),(0,r.yg)("inlineCode",{parentName:"h3"},"traverseDepthFirstCustom")),(0,r.yg)("p",null,"Returns a stream of connections that can be reached in the given ",(0,r.yg)("inlineCode",{parentName:"p"},"graph")," starting at the given ",(0,r.yg)("inlineCode",{parentName:"p"},"startNode"),", and using depth-first traversal. It can avoid loops if needed in a custom way by supplying the ",(0,r.yg)("inlineCode",{parentName:"p"},"addVisitedNode")," function.")),(0,r.yg)("h4",o({},{id:"definition-3"}),"Definition"),(0,r.yg)("code",null,(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"export declare function traverseDepthFirstCustom<G extends VariantGraphBase<N, any>, N>(graph: G, startNode: N, addVisitedNode?: (node: N) => boolean): "),(0,r.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,r.yg)("inlineCode",{parentName:"a"},"Stream")),(0,r.yg)("inlineCode",{parentName:"p"},"<"),(0,r.yg)("a",o({parentName:"p"},{href:"/api/rimbu/graph/Traverse/LinkType/type"}),(0,r.yg)("inlineCode",{parentName:"a"},"LinkType")),(0,r.yg)("inlineCode",{parentName:"p"},"<G, N>>;"))),(0,r.yg)("h5",o({},{id:"type-parameters-3"}),"Type parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,r.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",o({parentName:"tr"},{align:null}),"G"),(0,r.yg)("td",o({parentName:"tr"},{align:null}))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",o({parentName:"tr"},{align:null}),"N"),(0,r.yg)("td",o({parentName:"tr"},{align:null}))))),(0,r.yg)("h4",o({},{id:"parameters-3"}),"Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,r.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,r.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",o({parentName:"tr"},{align:null}),(0,r.yg)("inlineCode",{parentName:"td"},"graph")),(0,r.yg)("td",o({parentName:"tr"},{align:null}),(0,r.yg)("inlineCode",{parentName:"td"},"G")),(0,r.yg)("td",o({parentName:"tr"},{align:null}),"the graph to traverse")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",o({parentName:"tr"},{align:null}),(0,r.yg)("inlineCode",{parentName:"td"},"startNode")),(0,r.yg)("td",o({parentName:"tr"},{align:null}),(0,r.yg)("inlineCode",{parentName:"td"},"N")),(0,r.yg)("td",o({parentName:"tr"},{align:null}),"the start node within the graph")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",o({parentName:"tr"},{align:null}),(0,r.yg)("inlineCode",{parentName:"td"},"addVisitedNode")),(0,r.yg)("td",o({parentName:"tr"},{align:null}),(0,r.yg)("inlineCode",{parentName:"td"},"(node: N) => boolean")),(0,r.yg)("td",o({parentName:"tr"},{align:null}),"a function taking the currenty traversed node, and returning true if the node has been traversed before, or false otherwise")))),(0,r.yg)("admonition",o({},{title:"example",type:"note"}),(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"const g = EdgeGraphHashed.of([1, 2], [2, 3], [1, 3], [3, 4])\nconst stream = traverseDepthFirstCustom(g, 1)\nconsole.log(stream.toArray())\n// => [[1, 2], [2, 3], [1, 3], [3, 4]]\n")))),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("h3",o({},{id:"traversedepthfirsthashed"}),(0,r.yg)("inlineCode",{parentName:"h3"},"traverseDepthFirstHashed")),(0,r.yg)("p",null,"Returns a stream of connections that can be reached in the given ",(0,r.yg)("inlineCode",{parentName:"p"},"graph")," starting at the given ",(0,r.yg)("inlineCode",{parentName:"p"},"startNode"),", and using depth-first traversal. It avoids loops by internally placing the visited nodes in a HashSet builder.")),(0,r.yg)("h4",o({},{id:"definition-4"}),"Definition"),(0,r.yg)("code",null,(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"export declare function traverseDepthFirstHashed<G extends VariantGraphBase<N, any>, N>(graph: G, startNode: N): "),(0,r.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,r.yg)("inlineCode",{parentName:"a"},"Stream")),(0,r.yg)("inlineCode",{parentName:"p"},"<"),(0,r.yg)("a",o({parentName:"p"},{href:"/api/rimbu/graph/Traverse/LinkType/type"}),(0,r.yg)("inlineCode",{parentName:"a"},"LinkType")),(0,r.yg)("inlineCode",{parentName:"p"},"<G, N>>;"))),(0,r.yg)("h5",o({},{id:"type-parameters-4"}),"Type parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,r.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",o({parentName:"tr"},{align:null}),"G"),(0,r.yg)("td",o({parentName:"tr"},{align:null}))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",o({parentName:"tr"},{align:null}),"N"),(0,r.yg)("td",o({parentName:"tr"},{align:null}))))),(0,r.yg)("h4",o({},{id:"parameters-4"}),"Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,r.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,r.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",o({parentName:"tr"},{align:null}),(0,r.yg)("inlineCode",{parentName:"td"},"graph")),(0,r.yg)("td",o({parentName:"tr"},{align:null}),(0,r.yg)("inlineCode",{parentName:"td"},"G")),(0,r.yg)("td",o({parentName:"tr"},{align:null}),"the graph to traverse")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",o({parentName:"tr"},{align:null}),(0,r.yg)("inlineCode",{parentName:"td"},"startNode")),(0,r.yg)("td",o({parentName:"tr"},{align:null}),(0,r.yg)("inlineCode",{parentName:"td"},"N")),(0,r.yg)("td",o({parentName:"tr"},{align:null}),"the start node within the graph")))),(0,r.yg)("admonition",o({},{title:"example",type:"note"}),(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"const g = EdgeGraphHashed.of([1, 2], [2, 3], [1, 3], [3, 4])\nconst stream = traverseDepthFirstHashed(g, 1)\nconsole.log(stream.toArray())\n// => [[1, 2], [2, 3], [1, 3], [3, 4]]\n")))),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("h3",o({},{id:"traversedepthfirstsorted"}),(0,r.yg)("inlineCode",{parentName:"h3"},"traverseDepthFirstSorted")),(0,r.yg)("p",null,"Returns a stream of connections that can be reached in the given ",(0,r.yg)("inlineCode",{parentName:"p"},"graph")," starting at the given ",(0,r.yg)("inlineCode",{parentName:"p"},"startNode"),", and using depth-first traversal. It avoids loops by internally placing the visited nodes in a SortedSet builder.")),(0,r.yg)("h4",o({},{id:"definition-5"}),"Definition"),(0,r.yg)("code",null,(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"export declare function traverseDepthFirstSorted<G extends VariantGraphBase<N, any>, N>(graph: G, startNode: N): "),(0,r.yg)("a",o({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,r.yg)("inlineCode",{parentName:"a"},"Stream")),(0,r.yg)("inlineCode",{parentName:"p"},"<"),(0,r.yg)("a",o({parentName:"p"},{href:"/api/rimbu/graph/Traverse/LinkType/type"}),(0,r.yg)("inlineCode",{parentName:"a"},"LinkType")),(0,r.yg)("inlineCode",{parentName:"p"},"<G, N>>;"))),(0,r.yg)("h5",o({},{id:"type-parameters-5"}),"Type parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,r.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",o({parentName:"tr"},{align:null}),"G"),(0,r.yg)("td",o({parentName:"tr"},{align:null}))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",o({parentName:"tr"},{align:null}),"N"),(0,r.yg)("td",o({parentName:"tr"},{align:null}))))),(0,r.yg)("h4",o({},{id:"parameters-5"}),"Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",o({parentName:"tr"},{align:null}),"Name"),(0,r.yg)("th",o({parentName:"tr"},{align:null}),"Type"),(0,r.yg)("th",o({parentName:"tr"},{align:null}),"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",o({parentName:"tr"},{align:null}),(0,r.yg)("inlineCode",{parentName:"td"},"graph")),(0,r.yg)("td",o({parentName:"tr"},{align:null}),(0,r.yg)("inlineCode",{parentName:"td"},"G")),(0,r.yg)("td",o({parentName:"tr"},{align:null}),"the graph to traverse")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",o({parentName:"tr"},{align:null}),(0,r.yg)("inlineCode",{parentName:"td"},"startNode")),(0,r.yg)("td",o({parentName:"tr"},{align:null}),(0,r.yg)("inlineCode",{parentName:"td"},"N")),(0,r.yg)("td",o({parentName:"tr"},{align:null}),"the start node within the graph")))),(0,r.yg)("admonition",o({},{title:"example",type:"note"}),(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",o({parentName:"pre"},{className:"language-ts"}),"const g = EdgeGraphHashed.of([1, 2], [2, 3], [1, 3], [3, 4])\nconst stream = traverseDepthFirstSorted(g, 1)\nconsole.log(stream.toArray())\n// => [[1, 2], [2, 3], [1, 3], [3, 4]]\n")))))}C.isMDXComponent=!0}}]);