"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[55191],{15680:(e,n,a)=>{a.d(n,{xA:()=>y,yg:()=>m});var l=a(96540);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,l)}return a}function t(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,l,r=function(e,n){if(null==e)return{};var a,l,r={},i=Object.keys(e);for(l=0;l<i.length;l++)a=i[l],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(l=0;l<i.length;l++)a=i[l],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=l.createContext({}),g=function(e){var n=l.useContext(d),a=n;return e&&(a="function"==typeof e?e(n):t(t({},n),e)),a},y=function(e){var n=g(e.components);return l.createElement(d.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},s=l.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,y=o(e,["components","mdxType","originalType","parentName"]),p=g(a),s=r,m=p["".concat(d,".").concat(s)]||p[s]||u[s]||i;return a?l.createElement(m,t(t({ref:n},y),{},{components:a})):l.createElement(m,t({ref:n},y))}));function m(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,t=new Array(i);t[0]=s;var o={};for(var d in n)hasOwnProperty.call(n,d)&&(o[d]=n[d]);o.originalType=e,o[p]="string"==typeof e?e:r,t[1]=o;for(var g=2;g<i;g++)t[g]=a[g];return l.createElement.apply(null,t)}return l.createElement.apply(null,a)}s.displayName="MDXCreateElement"},23263:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>f,contentTitle:()=>c,default:()=>v,frontMatter:()=>m,metadata:()=>h,toc:()=>b});var l=a(15680),r=Object.defineProperty,i=Object.defineProperties,t=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,d=Object.prototype.hasOwnProperty,g=Object.prototype.propertyIsEnumerable,y=(e,n,a)=>n in e?r(e,n,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[n]=a,p=(e,n)=>{for(var a in n||(n={}))d.call(n,a)&&y(e,a,n[a]);if(o)for(var a of o(n))g.call(n,a)&&y(e,a,n[a]);return e},u=(e,n)=>i(e,t(n)),s=(e,n)=>{var a={};for(var l in e)d.call(e,l)&&n.indexOf(l)<0&&(a[l]=e[l]);if(null!=e&&o)for(var l of o(e))n.indexOf(l)<0&&g.call(e,l)&&(a[l]=e[l]);return a};const m={title:"Channel<T>",slug:"/rimbu/channel/Channel/interface"},c="interface Channel<T>",h={unversionedId:"rimbu_channel/Channel.interface",id:"rimbu_channel/Channel.interface",title:"Channel<T>",description:"A Rimbu Channel offers various ways to synchronize communication between asynchronous processes. These processes can send and receive messages in a blocking way. Channel messages are of type T, and channels can be buffered or unbuffered. A buffered channel can queue a given amount of messages before blocking the sender.",source:"@site/api/rimbu_channel/Channel.interface.mdx",sourceDirName:"rimbu_channel",slug:"/rimbu/channel/Channel/interface",permalink:"/api/rimbu/channel/Channel/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"Channel<T>",slug:"/rimbu/channel/Channel/interface"},sidebar:"defaultSidebar",previous:{title:"Channel.Write<T>",permalink:"/api/rimbu/channel/Channel/Write/interface"},next:{title:"ChannelError (namespace)",permalink:"/api/rimbu/channel/ChannelError/namespace"}},f={},b=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>capacity</code>",id:"capacity",level:3},{value:"Definition",id:"definition",level:4},{value:"Overrides",id:"overrides",level:4},{value:"<code>isClosed</code>",id:"isclosed",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"<code>isExhausted</code>",id:"isexhausted",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"<code>length</code>",id:"length",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"Methods",id:"methods",level:2},{value:"<code>asyncStream</code>",id:"asyncstream",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Overrides",id:"overrides-4",level:4},{value:"<code>close</code>",id:"close",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Overrides",id:"overrides-5",level:4},{value:"<code>readable</code>",id:"readable",level:3},{value:"Definition",id:"definition-6",level:4},{value:"Overrides",id:"overrides-6",level:4},{value:"<code>receive</code>",id:"receive",level:3},{value:"Definitions",id:"definitions",level:4},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Overrides",id:"overrides-7",level:4},{value:"<code>send</code>",id:"send",level:3},{value:"Definitions",id:"definitions-1",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Overrides",id:"overrides-8",level:4},{value:"<code>sendAll</code>",id:"sendall",level:3},{value:"Definitions",id:"definitions-2",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Overrides",id:"overrides-9",level:4},{value:"<code>writable</code>",id:"writable",level:3},{value:"Definition",id:"definition-7",level:4},{value:"Overrides",id:"overrides-10",level:4}],N={toc:b},C="wrapper";function v(e){var n=e,{components:a}=n,r=s(n,["components"]);return(0,l.yg)(C,u(p(p({},N),r),{components:a,mdxType:"MDXLayout"}),(0,l.yg)("h1",p({},{id:"interface-channelt"}),(0,l.yg)("inlineCode",{parentName:"h1"},"interface Channel<T>")),(0,l.yg)("p",null,"A Rimbu Channel offers various ways to synchronize communication between asynchronous processes. These processes can send and receive messages in a blocking way. Channel messages are of type T, and channels can be buffered or unbuffered. A buffered channel can queue a given amount of messages before blocking the sender."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Companion namespace:")," ",(0,l.yg)("a",p({parentName:"p"},{href:"/api/rimbu/channel/Channel/namespace"}),"Channel")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Extends:")," ",(0,l.yg)("a",p({parentName:"p"},{href:"/api/rimbu/channel/Channel/Write/interface"}),(0,l.yg)("inlineCode",{parentName:"a"},"Channel.Write<T>")),", ",(0,l.yg)("a",p({parentName:"p"},{href:"/api/rimbu/channel/Channel/Read/interface"}),(0,l.yg)("inlineCode",{parentName:"a"},"Channel.Read<T>"))),(0,l.yg)("h2",p({},{id:"type-parameters"}),"Type parameters"),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",p({parentName:"tr"},{align:null}),"Name"),(0,l.yg)("th",p({parentName:"tr"},{align:null}),"Default"),(0,l.yg)("th",p({parentName:"tr"},{align:null}),"Description"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",p({parentName:"tr"},{align:null}),"T"),(0,l.yg)("td",p({parentName:"tr"},{align:null}),(0,l.yg)("inlineCode",{parentName:"td"},"void")),(0,l.yg)("td",p({parentName:"tr"},{align:null}),"the channel message type")))),(0,l.yg)("h2",p({},{id:"properties"}),"Properties"),(0,l.yg)("details",null,(0,l.yg)("summary",null,(0,l.yg)("h3",p({},{id:"capacity"}),(0,l.yg)("inlineCode",{parentName:"h3"},"capacity")),(0,l.yg)("p",null,"The maximum amount of messages the Channel can buffer. If 0, the channel is unbuffered and the communication is synchronous.")),(0,l.yg)("h4",p({},{id:"definition"}),"Definition"),(0,l.yg)("code",null,(0,l.yg)("p",null,(0,l.yg)("inlineCode",{parentName:"p"},"get capacity(): number;"))),(0,l.yg)("h4",p({},{id:"overrides"}),"Overrides"),(0,l.yg)("p",null,(0,l.yg)("a",p({parentName:"p"},{href:"/api/rimbu/channel/Channel/Read/interface#capacity"}),"Read.capacity"))),(0,l.yg)("details",null,(0,l.yg)("summary",null,(0,l.yg)("h3",p({},{id:"isclosed"}),(0,l.yg)("inlineCode",{parentName:"h3"},"isClosed")),(0,l.yg)("p",null,"Returns true if the Channel is closed.")),(0,l.yg)("h4",p({},{id:"definition-1"}),"Definition"),(0,l.yg)("code",null,(0,l.yg)("p",null,(0,l.yg)("inlineCode",{parentName:"p"},"get isClosed(): boolean;"))),(0,l.yg)("h4",p({},{id:"overrides-1"}),"Overrides"),(0,l.yg)("p",null,(0,l.yg)("a",p({parentName:"p"},{href:"/api/rimbu/channel/Channel/Write/interface#isClosed"}),"Write.isClosed"))),(0,l.yg)("details",null,(0,l.yg)("summary",null,(0,l.yg)("h3",p({},{id:"isexhausted"}),(0,l.yg)("inlineCode",{parentName:"h3"},"isExhausted")),(0,l.yg)("p",null,"Returns true if the channel is closed and there are no message in the buffer (length = 0), false otherwise.")),(0,l.yg)("h4",p({},{id:"definition-2"}),"Definition"),(0,l.yg)("code",null,(0,l.yg)("p",null,(0,l.yg)("inlineCode",{parentName:"p"},"get isExhausted(): boolean;"))),(0,l.yg)("h4",p({},{id:"overrides-2"}),"Overrides"),(0,l.yg)("p",null,(0,l.yg)("a",p({parentName:"p"},{href:"/api/rimbu/channel/Channel/Read/interface#isExhausted"}),"Read.isExhausted"))),(0,l.yg)("details",null,(0,l.yg)("summary",null,(0,l.yg)("h3",p({},{id:"length"}),(0,l.yg)("inlineCode",{parentName:"h3"},"length")),(0,l.yg)("p",null,"The amount of messages currently in the read buffer.")),(0,l.yg)("h4",p({},{id:"definition-3"}),"Definition"),(0,l.yg)("code",null,(0,l.yg)("p",null,(0,l.yg)("inlineCode",{parentName:"p"},"get length(): number;"))),(0,l.yg)("h4",p({},{id:"overrides-3"}),"Overrides"),(0,l.yg)("p",null,(0,l.yg)("a",p({parentName:"p"},{href:"/api/rimbu/channel/Channel/Read/interface#length"}),"Read.length"))),(0,l.yg)("h2",p({},{id:"methods"}),"Methods"),(0,l.yg)("details",null,(0,l.yg)("summary",null,(0,l.yg)("h3",p({},{id:"asyncstream"}),(0,l.yg)("inlineCode",{parentName:"h3"},"asyncStream")),(0,l.yg)("p",null,"Returns an asynchronous stream of values.")),(0,l.yg)("h4",p({},{id:"definition-4"}),"Definition"),(0,l.yg)("code",null,(0,l.yg)("p",null,(0,l.yg)("inlineCode",{parentName:"p"},"asyncStream(): "),(0,l.yg)("a",p({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStream/interface"}),(0,l.yg)("inlineCode",{parentName:"a"},"AsyncStream")),(0,l.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,l.yg)("h4",p({},{id:"overrides-4"}),"Overrides"),(0,l.yg)("p",null,(0,l.yg)("a",p({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStreamable/interface#asyncStream"}),"AsyncStreamable.asyncStream"))),(0,l.yg)("details",null,(0,l.yg)("summary",null,(0,l.yg)("h3",p({},{id:"close"}),(0,l.yg)("inlineCode",{parentName:"h3"},"close")),(0,l.yg)("p",null,"Closes the channel. After a close, further send actions will throw.")),(0,l.yg)("h4",p({},{id:"definition-5"}),"Definition"),(0,l.yg)("code",null,(0,l.yg)("p",null,(0,l.yg)("inlineCode",{parentName:"p"},"close(): void;"))),(0,l.yg)("h4",p({},{id:"overrides-5"}),"Overrides"),(0,l.yg)("p",null,(0,l.yg)("a",p({parentName:"p"},{href:"/api/rimbu/channel/Channel/Write/interface#close"}),"Write.close"))),(0,l.yg)("details",null,(0,l.yg)("summary",null,(0,l.yg)("h3",p({},{id:"readable"}),(0,l.yg)("inlineCode",{parentName:"h3"},"readable")),(0,l.yg)("p",null,"Returns the Channel as a readonly Channel.Read instance.")),(0,l.yg)("h4",p({},{id:"definition-6"}),"Definition"),(0,l.yg)("code",null,(0,l.yg)("p",null,(0,l.yg)("inlineCode",{parentName:"p"},"readable(): "),(0,l.yg)("a",p({parentName:"p"},{href:"/api/rimbu/channel/Channel/Read/interface"}),(0,l.yg)("inlineCode",{parentName:"a"},"Channel.Read")),(0,l.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,l.yg)("h4",p({},{id:"overrides-6"}),"Overrides"),(0,l.yg)("p",null,(0,l.yg)("a",p({parentName:"p"},{href:"/api/rimbu/channel/Channel/Read/interface#readable"}),"Read.readable"))),(0,l.yg)("details",null,(0,l.yg)("summary",null,(0,l.yg)("h3",p({},{id:"receive"}),(0,l.yg)("inlineCode",{parentName:"h3"},"receive")),(0,l.yg)("p",null,"Returns the next message sent to the Channel. Blocks if there are no messages.")),(0,l.yg)("h4",p({},{id:"definitions"}),"Definitions"),(0,l.yg)("code",null,(0,l.yg)("p",null,(0,l.yg)("inlineCode",{parentName:"p"},"receive<RT>(options: {"),(0,l.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,l.yg)("inlineCode",{parentName:"p"},"signal?: AbortSignal "),(0,l.yg)("code",null,"|"),(0,l.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,l.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,l.yg)("inlineCode",{parentName:"p"},"timeoutMs?: number "),(0,l.yg)("code",null,"|"),(0,l.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,l.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,l.yg)("inlineCode",{parentName:"p"},"recover: (channelError: "),(0,l.yg)("a",p({parentName:"p"},{href:"/api/rimbu/channel/Channel/Error/type"}),(0,l.yg)("inlineCode",{parentName:"a"},"Channel.Error")),(0,l.yg)("inlineCode",{parentName:"p"},") => RT;"),(0,l.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,l.yg)("inlineCode",{parentName:"p"},"}): Promise<T "),(0,l.yg)("code",null,"|"),(0,l.yg)("inlineCode",{parentName:"p"}," RT>;"))),(0,l.yg)("code",null,(0,l.yg)("p",null,(0,l.yg)("inlineCode",{parentName:"p"},"receive(options?: {"),(0,l.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,l.yg)("inlineCode",{parentName:"p"},"signal?: AbortSignal "),(0,l.yg)("code",null,"|"),(0,l.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,l.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,l.yg)("inlineCode",{parentName:"p"},"timeoutMs?: number "),(0,l.yg)("code",null,"|"),(0,l.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,l.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,l.yg)("inlineCode",{parentName:"p"},"recover?: undefined;"),(0,l.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,l.yg)("inlineCode",{parentName:"p"},"}): Promise<T>;"))),(0,l.yg)("h4",p({},{id:"type-parameters-1"}),"Type parameters"),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",p({parentName:"tr"},{align:null}),"Name"),(0,l.yg)("th",p({parentName:"tr"},{align:null}),"Description"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",p({parentName:"tr"},{align:null}),"RT"),(0,l.yg)("td",p({parentName:"tr"},{align:null}))))),(0,l.yg)("h4",p({},{id:"parameters"}),"Parameters"),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",p({parentName:"tr"},{align:null}),"Name"),(0,l.yg)("th",p({parentName:"tr"},{align:null}),"Type"),(0,l.yg)("th",p({parentName:"tr"},{align:null}),"Description"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",p({parentName:"tr"},{align:null}),(0,l.yg)("inlineCode",{parentName:"td"},"options")),(0,l.yg)("td",p({parentName:"tr"},{align:null}),(0,l.yg)("inlineCode",{parentName:"td"},"{"),(0,l.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,l.yg)("inlineCode",{parentName:"td"},"signal?: AbortSignal "),(0,l.yg)("code",null,"|"),(0,l.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,l.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,l.yg)("inlineCode",{parentName:"td"},"timeoutMs?: number "),(0,l.yg)("code",null,"|"),(0,l.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,l.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,l.yg)("inlineCode",{parentName:"td"},"recover: (channelError: "),(0,l.yg)("a",p({parentName:"td"},{href:"/api/rimbu/channel/Channel/Error/type"}),(0,l.yg)("inlineCode",{parentName:"a"},"Channel.Error")),(0,l.yg)("inlineCode",{parentName:"td"},") => RT;"),(0,l.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,l.yg)("inlineCode",{parentName:"td"},"}")),(0,l.yg)("td",p({parentName:"tr"},{align:null}),"(optional) the options to receive a message",(0,l.yg)("br",null)," - signal: (optional) an abort signal to cancel receiving",(0,l.yg)("br",null)," - timeoutMs: (optional) amount of milliseconds to wait for received message",(0,l.yg)("br",null)," - recover: (optional) a function that can be supplied to recover from a channel error")))),(0,l.yg)("h4",p({},{id:"overrides-7"}),"Overrides"),(0,l.yg)("p",null,(0,l.yg)("a",p({parentName:"p"},{href:"/api/rimbu/channel/Channel/Read/interface#receive"}),"Read.receive"))),(0,l.yg)("details",null,(0,l.yg)("summary",null,(0,l.yg)("h3",p({},{id:"send"}),(0,l.yg)("inlineCode",{parentName:"h3"},"send")),(0,l.yg)("p",null,"Send the given ",(0,l.yg)("inlineCode",{parentName:"p"},"value")," message to the Channel. Blocks if the Channel is already at maximum capacity.")),(0,l.yg)("h4",p({},{id:"definitions-1"}),"Definitions"),(0,l.yg)("code",null,(0,l.yg)("p",null,(0,l.yg)("inlineCode",{parentName:"p"},"send(value: T, options: {"),(0,l.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,l.yg)("inlineCode",{parentName:"p"},"signal?: AbortSignal "),(0,l.yg)("code",null,"|"),(0,l.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,l.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,l.yg)("inlineCode",{parentName:"p"},"timeoutMs?: number "),(0,l.yg)("code",null,"|"),(0,l.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,l.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,l.yg)("inlineCode",{parentName:"p"},"catchChannelErrors?: false "),(0,l.yg)("code",null,"|"),(0,l.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,l.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,l.yg)("inlineCode",{parentName:"p"},"}): Promise<void>;"))),(0,l.yg)("code",null,(0,l.yg)("p",null,(0,l.yg)("inlineCode",{parentName:"p"},"send(value: T, options?: {"),(0,l.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,l.yg)("inlineCode",{parentName:"p"},"signal?: AbortSignal "),(0,l.yg)("code",null,"|"),(0,l.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,l.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,l.yg)("inlineCode",{parentName:"p"},"timeoutMs?: number "),(0,l.yg)("code",null,"|"),(0,l.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,l.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,l.yg)("inlineCode",{parentName:"p"},"catchChannelErrors: boolean;"),(0,l.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,l.yg)("inlineCode",{parentName:"p"},"}): Promise<undefined "),(0,l.yg)("code",null,"|"),(0,l.yg)("inlineCode",{parentName:"p"}," "),(0,l.yg)("a",p({parentName:"p"},{href:"/api/rimbu/channel/Channel/Error/type"}),(0,l.yg)("inlineCode",{parentName:"a"},"Channel.Error")),(0,l.yg)("inlineCode",{parentName:"p"},">;"))),(0,l.yg)("h4",p({},{id:"parameters-1"}),"Parameters"),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",p({parentName:"tr"},{align:null}),"Name"),(0,l.yg)("th",p({parentName:"tr"},{align:null}),"Type"),(0,l.yg)("th",p({parentName:"tr"},{align:null}),"Description"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",p({parentName:"tr"},{align:null}),(0,l.yg)("inlineCode",{parentName:"td"},"value")),(0,l.yg)("td",p({parentName:"tr"},{align:null}),(0,l.yg)("inlineCode",{parentName:"td"},"T")),(0,l.yg)("td",p({parentName:"tr"},{align:null}),"the message to send to the channel")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",p({parentName:"tr"},{align:null}),(0,l.yg)("inlineCode",{parentName:"td"},"options")),(0,l.yg)("td",p({parentName:"tr"},{align:null}),(0,l.yg)("inlineCode",{parentName:"td"},"{"),(0,l.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,l.yg)("inlineCode",{parentName:"td"},"signal?: AbortSignal "),(0,l.yg)("code",null,"|"),(0,l.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,l.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,l.yg)("inlineCode",{parentName:"td"},"timeoutMs?: number "),(0,l.yg)("code",null,"|"),(0,l.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,l.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,l.yg)("inlineCode",{parentName:"td"},"catchChannelErrors?: false "),(0,l.yg)("code",null,"|"),(0,l.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,l.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,l.yg)("inlineCode",{parentName:"td"},"}")),(0,l.yg)("td",p({parentName:"tr"},{align:null}),"(optional) the message send options",(0,l.yg)("br",null)," - signal: (optional) an abort signal to cancel sending",(0,l.yg)("br",null)," - timeoutMs: (optional) amount of milliseconds to wait for being able to send message",(0,l.yg)("br",null)," - recover: (optional) a function that can be supplied to recover from a channel error")))),(0,l.yg)("h4",p({},{id:"overrides-8"}),"Overrides"),(0,l.yg)("p",null,(0,l.yg)("a",p({parentName:"p"},{href:"/api/rimbu/channel/Channel/Write/interface#send"}),"Write.send"))),(0,l.yg)("details",null,(0,l.yg)("summary",null,(0,l.yg)("h3",p({},{id:"sendall"}),(0,l.yg)("inlineCode",{parentName:"h3"},"sendAll")),(0,l.yg)("p",null,"Sequentially send all the values in the given ",(0,l.yg)("inlineCode",{parentName:"p"},"source")," to the channel. Blocks until all the values are sent.")),(0,l.yg)("h4",p({},{id:"definitions-2"}),"Definitions"),(0,l.yg)("code",null,(0,l.yg)("p",null,(0,l.yg)("inlineCode",{parentName:"p"},"sendAll(source: "),(0,l.yg)("a",p({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,l.yg)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,l.yg)("inlineCode",{parentName:"p"},"<T>, options: {"),(0,l.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,l.yg)("inlineCode",{parentName:"p"},"signal?: AbortSignal "),(0,l.yg)("code",null,"|"),(0,l.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,l.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,l.yg)("inlineCode",{parentName:"p"},"timeoutMs?: number "),(0,l.yg)("code",null,"|"),(0,l.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,l.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,l.yg)("inlineCode",{parentName:"p"},"catchChannelErrors?: false "),(0,l.yg)("code",null,"|"),(0,l.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,l.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,l.yg)("inlineCode",{parentName:"p"},"}): Promise<void>;"))),(0,l.yg)("code",null,(0,l.yg)("p",null,(0,l.yg)("inlineCode",{parentName:"p"},"sendAll(source: "),(0,l.yg)("a",p({parentName:"p"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,l.yg)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,l.yg)("inlineCode",{parentName:"p"},"<T>, options?: {"),(0,l.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,l.yg)("inlineCode",{parentName:"p"},"signal?: AbortSignal "),(0,l.yg)("code",null,"|"),(0,l.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,l.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,l.yg)("inlineCode",{parentName:"p"},"timeoutMs?: number "),(0,l.yg)("code",null,"|"),(0,l.yg)("inlineCode",{parentName:"p"}," undefined;"),(0,l.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,l.yg)("inlineCode",{parentName:"p"},"catchChannelErrors: boolean;"),(0,l.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,l.yg)("inlineCode",{parentName:"p"},"}): Promise<undefined "),(0,l.yg)("code",null,"|"),(0,l.yg)("inlineCode",{parentName:"p"}," "),(0,l.yg)("a",p({parentName:"p"},{href:"/api/rimbu/channel/Channel/Error/type"}),(0,l.yg)("inlineCode",{parentName:"a"},"Channel.Error")),(0,l.yg)("inlineCode",{parentName:"p"},">;"))),(0,l.yg)("h4",p({},{id:"parameters-2"}),"Parameters"),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",p({parentName:"tr"},{align:null}),"Name"),(0,l.yg)("th",p({parentName:"tr"},{align:null}),"Type"),(0,l.yg)("th",p({parentName:"tr"},{align:null}),"Description"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",p({parentName:"tr"},{align:null}),(0,l.yg)("inlineCode",{parentName:"td"},"source")),(0,l.yg)("td",p({parentName:"tr"},{align:null}),(0,l.yg)("a",p({parentName:"td"},{href:"/api/rimbu/stream/async/AsyncStreamSource/type"}),(0,l.yg)("inlineCode",{parentName:"a"},"AsyncStreamSource")),(0,l.yg)("inlineCode",{parentName:"td"},"<T>")),(0,l.yg)("td",p({parentName:"tr"},{align:null}),"a stream source containing the values to send")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",p({parentName:"tr"},{align:null}),(0,l.yg)("inlineCode",{parentName:"td"},"options")),(0,l.yg)("td",p({parentName:"tr"},{align:null}),(0,l.yg)("inlineCode",{parentName:"td"},"{"),(0,l.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,l.yg)("inlineCode",{parentName:"td"},"signal?: AbortSignal "),(0,l.yg)("code",null,"|"),(0,l.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,l.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,l.yg)("inlineCode",{parentName:"td"},"timeoutMs?: number "),(0,l.yg)("code",null,"|"),(0,l.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,l.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,l.yg)("inlineCode",{parentName:"td"},"catchChannelErrors?: false "),(0,l.yg)("code",null,"|"),(0,l.yg)("inlineCode",{parentName:"td"}," undefined;"),(0,l.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,l.yg)("inlineCode",{parentName:"td"},"}")),(0,l.yg)("td",p({parentName:"tr"},{align:null}),"the message send options",(0,l.yg)("br",null)," - signal: (optional) an abort signal to cancel sending",(0,l.yg)("br",null)," - timeoutMs: (optional) amount of milliseconds to wait for being able to send message, for each separate message in the source",(0,l.yg)("br",null)," - recover: (optional) a function that can be supplied to recover from a channel error")))),(0,l.yg)("h4",p({},{id:"overrides-9"}),"Overrides"),(0,l.yg)("p",null,(0,l.yg)("a",p({parentName:"p"},{href:"/api/rimbu/channel/Channel/Write/interface#sendAll"}),"Write.sendAll"))),(0,l.yg)("details",null,(0,l.yg)("summary",null,(0,l.yg)("h3",p({},{id:"writable"}),(0,l.yg)("inlineCode",{parentName:"h3"},"writable")),(0,l.yg)("p",null,"Returns the Channel as a write-only Channel.Write instance.")),(0,l.yg)("h4",p({},{id:"definition-7"}),"Definition"),(0,l.yg)("code",null,(0,l.yg)("p",null,(0,l.yg)("inlineCode",{parentName:"p"},"writable(): "),(0,l.yg)("a",p({parentName:"p"},{href:"/api/rimbu/channel/Channel/Write/interface"}),(0,l.yg)("inlineCode",{parentName:"a"},"Channel.Write")),(0,l.yg)("inlineCode",{parentName:"p"},"<T>;"))),(0,l.yg)("h4",p({},{id:"overrides-10"}),"Overrides"),(0,l.yg)("p",null,(0,l.yg)("a",p({parentName:"p"},{href:"/api/rimbu/channel/Channel/Write/interface#writable"}),"Write.writable"))))}v.isMDXComponent=!0}}]);