"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[22861],{15680:(e,r,a)=>{a.d(r,{xA:()=>m,yg:()=>g});var n=a(96540);function t(e,r,a){return r in e?Object.defineProperty(e,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[r]=a,e}function o(e,r){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var r=1;r<arguments.length;r++){var a=null!=arguments[r]?arguments[r]:{};r%2?o(Object(a),!0).forEach((function(r){t(e,r,a[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(a,r))}))}return e}function l(e,r){if(null==e)return{};var a,n,t=function(e,r){if(null==e)return{};var a,n,t={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],r.indexOf(a)>=0||(t[a]=e[a]);return t}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],r.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var p=n.createContext({}),c=function(e){var r=n.useContext(p),a=r;return e&&(a="function"==typeof e?e(r):i(i({},r),e)),a},m=function(e){var r=c(e.components);return n.createElement(p.Provider,{value:r},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},h=n.forwardRef((function(e,r){var a=e.components,t=e.mdxType,o=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),s=c(a),h=t,g=s["".concat(p,".").concat(h)]||s[h]||u[h]||o;return a?n.createElement(g,i(i({ref:r},m),{},{components:a})):n.createElement(g,i({ref:r},m))}));function g(e,r){var a=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var o=a.length,i=new Array(o);i[0]=h;var l={};for(var p in r)hasOwnProperty.call(r,p)&&(l[p]=r[p]);l.originalType=e,l[s]="string"==typeof e?e:t,i[1]=l;for(var c=2;c<o;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},78802:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>f,contentTitle:()=>y,default:()=>O,frontMatter:()=>g,metadata:()=>d,toc:()=>b});var n=a(15680),t=Object.defineProperty,o=Object.defineProperties,i=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,m=(e,r,a)=>r in e?t(e,r,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[r]=a,s=(e,r)=>{for(var a in r||(r={}))p.call(r,a)&&m(e,a,r[a]);if(l)for(var a of l(r))c.call(r,a)&&m(e,a,r[a]);return e},u=(e,r)=>o(e,i(r)),h=(e,r)=>{var a={};for(var n in e)p.call(e,n)&&r.indexOf(n)<0&&(a[n]=e[n]);if(null!=e&&l)for(var n of l(e))r.indexOf(n)<0&&c.call(e,n)&&(a[n]=e[n]);return a};const g={title:"Semaphore (namespace)",slug:"/rimbu/channel/Semaphore/namespace"},y="namespace Semaphore",d={unversionedId:"rimbu_channel/Semaphore/index",id:"rimbu_channel/Semaphore/index",title:"Semaphore (namespace)",description:"A Semaphore is a generalized version of a Mutex, allowing boundaries on the amount of concurrent processes that can have simultaneous access to a shared resource. The semaphore is weighted, meaning that the semaphore has a maximum size/capacity available for the shared resources. When acquiring the resource, a weight can be provided allowing more intensive tasks to acquire a larger share of the shared resource, preventing too many other tasks from also acquiring the resource.",source:"@site/api/rimbu_channel/Semaphore/index.mdx",sourceDirName:"rimbu_channel/Semaphore",slug:"/rimbu/channel/Semaphore/namespace",permalink:"/api/rimbu/channel/Semaphore/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"Semaphore (namespace)",slug:"/rimbu/channel/Semaphore/namespace"},sidebar:"defaultSidebar",previous:{title:"RpcProxyError",permalink:"/api/rimbu/channel/RpcProxyError/RpcProxyError/class"},next:{title:"Semaphore.Constructors",permalink:"/api/rimbu/channel/Semaphore/Constructors/interface"}},f={},b=[{value:"Interfaces",id:"interfaces",level:2},{value:"Static Methods",id:"static-methods",level:2},{value:"<code>create</code>",id:"create",level:3},{value:"Definition",id:"definition",level:4},{value:"Parameters",id:"parameters",level:4}],v={toc:b},N="wrapper";function O(e){var r=e,{components:a}=r,t=h(r,["components"]);return(0,n.yg)(N,u(s(s({},v),t),{components:a,mdxType:"MDXLayout"}),(0,n.yg)("h1",s({},{id:"namespace-semaphore"}),(0,n.yg)("inlineCode",{parentName:"h1"},"namespace Semaphore")),(0,n.yg)("p",null,"A Semaphore is a generalized version of a Mutex, allowing boundaries on the amount of concurrent processes that can have simultaneous access to a shared resource. The semaphore is weighted, meaning that the semaphore has a maximum size/capacity available for the shared resources. When acquiring the resource, a weight can be provided allowing more intensive tasks to acquire a larger share of the shared resource, preventing too many other tasks from also acquiring the resource."),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Companion interface:")," ",(0,n.yg)("a",s({parentName:"p"},{href:"/api/rimbu/channel/Semaphore/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"Semaphore"))),(0,n.yg)("h2",s({},{id:"interfaces"}),"Interfaces"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",s({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",s({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",s({parentName:"tr"},{align:null}),(0,n.yg)("a",s({parentName:"td"},{href:"/api/rimbu/channel/Semaphore/Constructors/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"Semaphore.Constructors"))),(0,n.yg)("td",s({parentName:"tr"},{align:null}),"Defines the static ",(0,n.yg)("inlineCode",{parentName:"td"},"Semaphore")," API.")))),(0,n.yg)("h2",s({},{id:"static-methods"}),"Static Methods"),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",s({},{id:"create"}),(0,n.yg)("inlineCode",{parentName:"h3"},"create")),(0,n.yg)("p",null,"Returns a new Semaphore instance with the given configuration.")),(0,n.yg)("h4",s({},{id:"definition"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"create(options: {"),(0,n.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"p"},"maxSize: number;"),(0,n.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"p"},"}): "),(0,n.yg)("a",s({parentName:"p"},{href:"/api/rimbu/channel/Semaphore/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"Semaphore")),(0,n.yg)("inlineCode",{parentName:"p"},";"))),(0,n.yg)("h4",s({},{id:"parameters"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",s({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",s({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",s({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",s({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"options")),(0,n.yg)("td",s({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"{"),(0,n.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"td"},"maxSize: number;"),(0,n.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"td"},"}")),(0,n.yg)("td",s({parentName:"tr"},{align:null}),"the options for the Semaphore, including:",(0,n.yg)("br",null)," - maxSize: the maximum size/capacity for the semaphore"))))))}O.isMDXComponent=!0}}]);