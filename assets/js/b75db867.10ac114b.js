"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[41278],{15680:(e,a,t)=>{t.d(a,{xA:()=>o,yg:()=>s});var n=t(96540);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function p(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var m=n.createContext({}),y=function(e){var a=n.useContext(m),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},o=function(e){var a=y(e.components);return n.createElement(m.Provider,{value:a},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},d=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,i=e.originalType,m=e.parentName,o=p(e,["components","mdxType","originalType","parentName"]),u=y(t),d=r,s=u["".concat(m,".").concat(d)]||u[d]||g[d]||i;return t?n.createElement(s,l(l({ref:a},o),{},{components:t})):n.createElement(s,l({ref:a},o))}));function s(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=d;var p={};for(var m in a)hasOwnProperty.call(a,m)&&(p[m]=a[m]);p.originalType=e,p[u]="string"==typeof e?e:r,l[1]=p;for(var y=2;y<i;y++)l[y]=t[y];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},66623:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>h,contentTitle:()=>N,default:()=>v,frontMatter:()=>s,metadata:()=>c,toc:()=>b});var n=t(15680),r=Object.defineProperty,i=Object.defineProperties,l=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,m=Object.prototype.hasOwnProperty,y=Object.prototype.propertyIsEnumerable,o=(e,a,t)=>a in e?r(e,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[a]=t,u=(e,a)=>{for(var t in a||(a={}))m.call(a,t)&&o(e,t,a[t]);if(p)for(var t of p(a))y.call(a,t)&&o(e,t,a[t]);return e},g=(e,a)=>i(e,l(a)),d=(e,a)=>{var t={};for(var n in e)m.call(e,n)&&a.indexOf(n)<0&&(t[n]=e[n]);if(null!=e&&p)for(var n of p(e))a.indexOf(n)<0&&y.call(e,n)&&(t[n]=e[n]);return t};const s={title:"HashBiMultiMap (namespace)",slug:"/rimbu/bimultimap/HashBiMultiMap/namespace"},N="namespace HashBiMultiMap",c={unversionedId:"rimbu_bimultimap/HashBiMultiMap/index",id:"rimbu_bimultimap/HashBiMultiMap/index",title:"HashBiMultiMap (namespace)",description:"A type-invariant immutable bi-directional MultiMap where keys and values have a many-to-many mapping. Its keys and values are hashed. See the BiMultiMap documentation and the HashBiMultiMap API documentation",source:"@site/api/rimbu_bimultimap/HashBiMultiMap/index.mdx",sourceDirName:"rimbu_bimultimap/HashBiMultiMap",slug:"/rimbu/bimultimap/HashBiMultiMap/namespace",permalink:"/api/rimbu/bimultimap/HashBiMultiMap/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"HashBiMultiMap (namespace)",slug:"/rimbu/bimultimap/HashBiMultiMap/namespace"},sidebar:"defaultSidebar",previous:{title:"BiMultiMap<K,V>",permalink:"/api/rimbu/bimultimap/BiMultiMap/interface"},next:{title:"HashBiMultiMap.Builder<K,V>",permalink:"/api/rimbu/bimultimap/HashBiMultiMap/Builder/interface"}},h={},b=[{value:"Interfaces",id:"interfaces",level:2},{value:"Static Methods",id:"static-methods",level:2},{value:"<code>builder</code>",id:"builder",level:3},{value:"Definition",id:"definition",level:4},{value:"Type parameters",id:"type-parameters",level:4},{value:"Overrides",id:"overrides",level:4},{value:"<code>createContext</code>",id:"createcontext",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters",level:4},{value:"<code>defaultContext</code>",id:"defaultcontext",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"<code>empty</code>",id:"empty",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"<code>from</code>",id:"from",level:3},{value:"Definitions",id:"definitions",level:4},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"<code>of</code>",id:"of",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"<code>reducer</code>",id:"reducer",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Type parameters",id:"type-parameters-6",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Overrides",id:"overrides-4",level:4}],f={toc:b},M="wrapper";function v(e){var a=e,{components:t}=a,r=d(a,["components"]);return(0,n.yg)(M,g(u(u({},f),r),{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",u({},{id:"namespace-hashbimultimap"}),(0,n.yg)("inlineCode",{parentName:"h1"},"namespace HashBiMultiMap")),(0,n.yg)("p",null,"A type-invariant immutable bi-directional MultiMap where keys and values have a many-to-many mapping. Its keys and values are hashed. See the ",(0,n.yg)("a",u({parentName:"p"},{href:"https://rimbu.org/docs/collections/bimultimap"}),"BiMultiMap documentation")," and the ",(0,n.yg)("a",u({parentName:"p"},{href:"https://rimbu.org/api/rimbu/bimultimap/HashBiMultiMap/interface"}),"HashBiMultiMap API documentation")),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Companion interface:")," ",(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/bimultimap/HashBiMultiMap/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"HashBiMultiMap<K,V>"))),(0,n.yg)("h2",u({},{id:"interfaces"}),"Interfaces"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("a",u({parentName:"td"},{href:"/api/rimbu/bimultimap/HashBiMultiMap/Builder/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"HashBiMultiMap.Builder<K,V>"))),(0,n.yg)("td",u({parentName:"tr"},{align:null}),"A mutable ",(0,n.yg)("inlineCode",{parentName:"td"},"HashBiMultiMap")," builder used to efficiently create new immutable instances. See the ",(0,n.yg)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/bimultimap"}),"BiMultiMap documentation")," and the ",(0,n.yg)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/bimultimap/HashBiMultiMap/Builder/interface"}),"HashBiMultiMap.Builder API documentation"))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("a",u({parentName:"td"},{href:"/api/rimbu/bimultimap/HashBiMultiMap/Context/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"HashBiMultiMap.Context<UK,UV>"))),(0,n.yg)("td",u({parentName:"tr"},{align:null}),"The HashBiMultiMap's Context instance that serves as a factory for all related immutable instances and builders.")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("a",u({parentName:"td"},{href:"/api/rimbu/bimultimap/HashBiMultiMap/NonEmpty/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"HashBiMultiMap.NonEmpty<K,V>"))),(0,n.yg)("td",u({parentName:"tr"},{align:null}),"A non-empty type-invariant immutable bi-directional MultiMap where keys and values have a many-to-many mapping. Its keys and values are hashed. See the ",(0,n.yg)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/bimultimap"}),"BiMultiMap documentation")," and the ",(0,n.yg)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/bimultimap/HashBiMultiMap/interface"}),"HashBiMultiMap API documentation"))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("a",u({parentName:"td"},{href:"/api/rimbu/bimultimap/HashBiMultiMap/Types/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"HashBiMultiMap.Types"))),(0,n.yg)("td",u({parentName:"tr"},{align:null}),"Utility interface that provides higher-kinded types for this collection.")))),(0,n.yg)("h2",u({},{id:"static-methods"}),"Static Methods"),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",u({},{id:"builder"}),(0,n.yg)("inlineCode",{parentName:"h3"},"builder")),(0,n.yg)("p",null,"Returns an empty ",(0,n.yg)("inlineCode",{parentName:"p"},"BiMultiMap")," builder instance.")),(0,n.yg)("h4",u({},{id:"definition"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"builder<K extends UK, V extends UV>(): "),(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['builder'];"))),(0,n.yg)("h4",u({},{id:"type-parameters"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Constraints"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),"K"),(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UK")),(0,n.yg)("td",u({parentName:"tr"},{align:null}))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),"V"),(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UV")),(0,n.yg)("td",u({parentName:"tr"},{align:null}))))),(0,n.yg)("admonition",u({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",u({parentName:"pre"},{className:"language-ts"}),"HashBiMultiMap.builder<number, string>()    // => HashBiMultiMap.Builder<number, string>\n"))),(0,n.yg)("h4",u({},{id:"overrides"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/bimultimap/custom/BiMultiMapBase/Factory/interface#builder"}),"Factory.builder"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",u({},{id:"createcontext"}),(0,n.yg)("inlineCode",{parentName:"h3"},"createContext")),(0,n.yg)("p",null,"Returns a new HashBiMultiMap context instance based on the given ",(0,n.yg)("inlineCode",{parentName:"p"},"options"),".")),(0,n.yg)("h4",u({},{id:"definition-1"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"createContext<UK, UV>(options?: {"),(0,n.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"p"},"keyValueMultiMapContext?: "),(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/multimap/HashMultiMapHashValue/Context/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"HashMultiMapHashValue.Context")),(0,n.yg)("inlineCode",{parentName:"p"},"<UK, UV>;"),(0,n.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"p"},"valueKeyMultiMapContext?: "),(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/multimap/HashMultiMapHashValue/Context/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"HashMultiMapHashValue.Context")),(0,n.yg)("inlineCode",{parentName:"p"},"<UV, UK>;"),(0,n.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"p"},"}): HashBiMultiMap.Context<UK, UV>;"))),(0,n.yg)("h4",u({},{id:"type-parameters-1"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),"UK"),(0,n.yg)("td",u({parentName:"tr"},{align:null}),"the upper key type for which the context can create instances")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),"UV"),(0,n.yg)("td",u({parentName:"tr"},{align:null}),"the upper value type for which the context can create instances")))),(0,n.yg)("h4",u({},{id:"parameters"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"options")),(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"{"),(0,n.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"td"},"keyValueMultiMapContext?: "),(0,n.yg)("a",u({parentName:"td"},{href:"/api/rimbu/multimap/HashMultiMapHashValue/Context/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"HashMultiMapHashValue.Context")),(0,n.yg)("inlineCode",{parentName:"td"},"<UK, UV>;"),(0,n.yg)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"td"},"valueKeyMultiMapContext?: "),(0,n.yg)("a",u({parentName:"td"},{href:"/api/rimbu/multimap/HashMultiMapHashValue/Context/interface"}),(0,n.yg)("inlineCode",{parentName:"a"},"HashMultiMapHashValue.Context")),(0,n.yg)("inlineCode",{parentName:"td"},"<UV, UK>;"),(0,n.yg)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.yg)("inlineCode",{parentName:"td"},"}")),(0,n.yg)("td",u({parentName:"tr"},{align:null}),"(optional) an object containing the following properties:",(0,n.yg)("br",null)," - keyValueMultiMapContext: (optional) the map context to use for key value multimaps",(0,n.yg)("br",null)," - valueKeyMultiMapContext: (optional) the set context to use for value key multimaps"))))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",u({},{id:"defaultcontext"}),(0,n.yg)("inlineCode",{parentName:"h3"},"defaultContext")),(0,n.yg)("p",null,"Returns the default context for HashBiMultiMaps.")),(0,n.yg)("h4",u({},{id:"definition-2"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"defaultContext<UK, UV>(): HashBiMultiMap.Context<UK, UV>;"))),(0,n.yg)("h4",u({},{id:"type-parameters-2"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),"UK"),(0,n.yg)("td",u({parentName:"tr"},{align:null}),"the upper key type for which the context can create instances")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),"UV"),(0,n.yg)("td",u({parentName:"tr"},{align:null}),"the upper value type for which the context can create instances"))))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",u({},{id:"empty"}),(0,n.yg)("inlineCode",{parentName:"h3"},"empty")),(0,n.yg)("p",null,"Returns the (singleton) empty instance of this type and context with given key and value types.")),(0,n.yg)("h4",u({},{id:"definition-3"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"empty<K extends UK, V extends UV>(): "),(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,n.yg)("h4",u({},{id:"type-parameters-3"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Constraints"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),"K"),(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UK")),(0,n.yg)("td",u({parentName:"tr"},{align:null}))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),"V"),(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UV")),(0,n.yg)("td",u({parentName:"tr"},{align:null}))))),(0,n.yg)("admonition",u({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",u({parentName:"pre"},{className:"language-ts"}),"HashBiMultiMap.empty<number, string>()    // => HashBiMultiMap<number, string>\nHashBiMultiMap.empty<string, boolean>()   // => HashBiMultiMap<string, boolean>\n"))),(0,n.yg)("h4",u({},{id:"overrides-1"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/bimultimap/custom/BiMultiMapBase/Factory/interface#empty"}),"Factory.empty"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",u({},{id:"from"}),(0,n.yg)("inlineCode",{parentName:"h3"},"from")),(0,n.yg)("p",null,"Returns an immutable BiMultiMap, containing the entries in the given ",(0,n.yg)("inlineCode",{parentName:"p"},"sources")," ",(0,n.yg)("inlineCode",{parentName:"p"},"StreamSource")," instances.")),(0,n.yg)("h4",u({},{id:"definitions"}),"Definitions"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"from<K extends UK, V extends UV>(...sources: "),(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,n.yg)("inlineCode",{parentName:"p"},"<"),(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,n.yg)("inlineCode",{parentName:"p"},"<readonly [K, V]>>): "),(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['nonEmpty'];"))),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"from<K extends UK, V extends UV>(...sources: "),(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,n.yg)("inlineCode",{parentName:"p"},"<"),(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.yg)("inlineCode",{parentName:"p"},"<readonly [K, V]>>): "),(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal'];"))),(0,n.yg)("h4",u({},{id:"type-parameters-4"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Constraints"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),"K"),(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UK")),(0,n.yg)("td",u({parentName:"tr"},{align:null}))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),"V"),(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UV")),(0,n.yg)("td",u({parentName:"tr"},{align:null}))))),(0,n.yg)("h4",u({},{id:"parameters-1"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"sources")),(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("a",u({parentName:"td"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,n.yg)("inlineCode",{parentName:"td"},"<"),(0,n.yg)("a",u({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/NonEmpty/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"StreamSource.NonEmpty")),(0,n.yg)("inlineCode",{parentName:"td"},"<readonly [K, V]>>")),(0,n.yg)("td",u({parentName:"tr"},{align:null}),"an array of ",(0,n.yg)("inlineCode",{parentName:"td"},"StreamSource")," instances contaning key-value entries")))),(0,n.yg)("admonition",u({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",u({parentName:"pre"},{className:"language-ts"}),"HashBiMultiMap.from([[1, 'a'], [2, 'b']])    // => HashBiMultiMap.NonEmpty<number, string>\n"))),(0,n.yg)("h4",u({},{id:"overrides-2"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/bimultimap/custom/BiMultiMapBase/Factory/interface#from"}),"Factory.from"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",u({},{id:"of"}),(0,n.yg)("inlineCode",{parentName:"h3"},"of")),(0,n.yg)("p",null,"Returns an immutable BiMultiMap, containing the given ",(0,n.yg)("inlineCode",{parentName:"p"},"entries"),".")),(0,n.yg)("h4",u({},{id:"definition-4"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"of<K extends UK, V extends UV>(...entries: "),(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,n.yg)("inlineCode",{parentName:"p"},"<readonly [K, V]>): "),(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['nonEmpty'];"))),(0,n.yg)("h4",u({},{id:"type-parameters-5"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Constraints"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),"K"),(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UK")),(0,n.yg)("td",u({parentName:"tr"},{align:null}))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),"V"),(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UV")),(0,n.yg)("td",u({parentName:"tr"},{align:null}))))),(0,n.yg)("h4",u({},{id:"parameters-2"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"entries")),(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("a",u({parentName:"td"},{href:"/api/rimbu/common/ArrayNonEmpty/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"ArrayNonEmpty")),(0,n.yg)("inlineCode",{parentName:"td"},"<readonly [K, V]>")),(0,n.yg)("td",u({parentName:"tr"},{align:null}),"a non-empty array of key-value entries")))),(0,n.yg)("admonition",u({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",u({parentName:"pre"},{className:"language-ts"}),"HashBiMultiMap.of([1, 'a'], [2, 'b'])    // => HashBiMultiMap.NonEmpty<number, string>\n"))),(0,n.yg)("h4",u({},{id:"overrides-3"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/bimultimap/custom/BiMultiMapBase/Factory/interface#of"}),"Factory.of"))),(0,n.yg)("details",null,(0,n.yg)("summary",null,(0,n.yg)("h3",u({},{id:"reducer"}),(0,n.yg)("inlineCode",{parentName:"h3"},"reducer")),(0,n.yg)("p",null,"Returns a ",(0,n.yg)("inlineCode",{parentName:"p"},"Reducer")," that adds received tuples to a BiMultiMap and returns the BiMultiMap as a result. When a ",(0,n.yg)("inlineCode",{parentName:"p"},"source")," is given, the reducer will first create a BiMultiMap from the source, and then add tuples to it.")),(0,n.yg)("h4",u({},{id:"definition-5"}),"Definition"),(0,n.yg)("code",null,(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"reducer<K extends UK, V extends UV>(source?: "),(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.yg)("inlineCode",{parentName:"p"},"<readonly [K, V]>): Reducer<readonly [K, V], "),(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/collection-types/set-custom/WithKeyValue/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"WithKeyValue")),(0,n.yg)("inlineCode",{parentName:"p"},"<Tp, K, V>['normal']>;"))),(0,n.yg)("h4",u({},{id:"type-parameters-6"}),"Type parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Constraints"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),"K"),(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UK")),(0,n.yg)("td",u({parentName:"tr"},{align:null}))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),"V"),(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"UV")),(0,n.yg)("td",u({parentName:"tr"},{align:null}))))),(0,n.yg)("h4",u({},{id:"parameters-3"}),"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Type"),(0,n.yg)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"source")),(0,n.yg)("td",u({parentName:"tr"},{align:null}),(0,n.yg)("a",u({parentName:"td"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.yg)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.yg)("inlineCode",{parentName:"td"},"<readonly [K, V]>")),(0,n.yg)("td",u({parentName:"tr"},{align:null}),"(optional) an initial source of tuples to add to")))),(0,n.yg)("admonition",u({},{title:"example",type:"note"}),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",u({parentName:"pre"},{className:"language-ts"}),"const someSource = BiMultiMap.of([1, 'a'], [2, 'b']);\nconst result = Stream.of([1, 'c'], [3, 'a']).reduce(BiMultiMap.reducer(someSource))\nresult.toArray()   // => [[1, 'a'], [1, 'c'], [2, 'b'], [3, 'a']]\n"))),(0,n.yg)("admonition",u({},{title:"note",type:"note"}),(0,n.yg)("p",{parentName:"admonition"},"uses a builder under the hood. If the given ",(0,n.yg)("inlineCode",{parentName:"p"},"source")," is a BiMultiMap in the same context, it will directly call ",(0,n.yg)("inlineCode",{parentName:"p"},".toBuilder()"),".")),(0,n.yg)("h4",u({},{id:"overrides-4"}),"Overrides"),(0,n.yg)("p",null,(0,n.yg)("a",u({parentName:"p"},{href:"/api/rimbu/bimultimap/custom/BiMultiMapBase/Factory/interface#reducer"}),"Factory.reducer"))))}v.isMDXComponent=!0}}]);