"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[44314],{15680:(e,n,r)=>{r.d(n,{xA:()=>h,yg:()=>d});var t=r(96540);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function l(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function o(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=t.createContext({}),p=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):l(l({},n),e)),r},h=function(e){var n=p(e.components);return t.createElement(c.Provider,{value:n},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,h=o(e,["components","mdxType","originalType","parentName"]),s=p(r),u=a,d=s["".concat(c,".").concat(u)]||s[u]||m[u]||i;return r?t.createElement(d,l(l({ref:n},h),{},{components:r})):t.createElement(d,l({ref:n},h))}));function d(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=u;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o[s]="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=r[p];return t.createElement.apply(null,l)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},97924:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>g,contentTitle:()=>y,default:()=>w,frontMatter:()=>d,metadata:()=>f,toc:()=>C});var t=r(15680),a=Object.defineProperty,i=Object.defineProperties,l=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,c=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,h=(e,n,r)=>n in e?a(e,n,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[n]=r,s=(e,n)=>{for(var r in n||(n={}))c.call(n,r)&&h(e,r,n[r]);if(o)for(var r of o(n))p.call(n,r)&&h(e,r,n[r]);return e},m=(e,n)=>i(e,l(n)),u=(e,n)=>{var r={};for(var t in e)c.call(e,t)&&n.indexOf(t)<0&&(r[t]=e[t]);if(null!=e&&o)for(var t of o(e))n.indexOf(t)<0&&p.call(e,t)&&(r[t]=e[t]);return r};const d={title:"RemoteChannelServer",slug:"/rimbu/channel/RemoteChannelServer/interface"},y="interface RemoteChannelServer",f={unversionedId:"rimbu_channel/RemoteChannelServer.interface",id:"rimbu_channel/RemoteChannelServer.interface",title:"RemoteChannelServer",description:"A RemoteChannel server communicates with a RemoteChannel client through the given message port, and allows clients to easily create new channels to communicate with processes in the server context. The server needs to set up handlers to deal with the created channels.",source:"@site/api/rimbu_channel/RemoteChannelServer.interface.mdx",sourceDirName:"rimbu_channel",slug:"/rimbu/channel/RemoteChannelServer/interface",permalink:"/api/rimbu/channel/RemoteChannelServer/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"RemoteChannelServer",slug:"/rimbu/channel/RemoteChannelServer/interface"},sidebar:"defaultSidebar",previous:{title:"RemoteChannelServer.Constructors",permalink:"/api/rimbu/channel/RemoteChannelServer/Constructors/interface"},next:{title:"RemoteObject (namespace)",permalink:"/api/rimbu/channel/RemoteObject/namespace"}},g={},C=[{value:"Properties",id:"properties",level:2},{value:"<code>crossChannelCh</code>",id:"crosschannelch",level:3},{value:"Definition",id:"definition",level:4},{value:"<code>readChannelCh</code>",id:"readchannelch",level:3},{value:"Definition",id:"definition-1",level:4},{value:"<code>writeChannelCh</code>",id:"writechannelch",level:3},{value:"Definition",id:"definition-2",level:4}],v={toc:C},b="wrapper";function w(e){var n=e,{components:r}=n,a=u(n,["components"]);return(0,t.yg)(b,m(s(s({},v),a),{components:r,mdxType:"MDXLayout"}),(0,t.yg)("h1",s({},{id:"interface-remotechannelserver"}),(0,t.yg)("inlineCode",{parentName:"h1"},"interface RemoteChannelServer")),(0,t.yg)("p",null,"A RemoteChannel server communicates with a RemoteChannel client through the given message port, and allows clients to easily create new channels to communicate with processes in the server context. The server needs to set up handlers to deal with the created channels."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Companion namespace:")," ",(0,t.yg)("a",s({parentName:"p"},{href:"/api/rimbu/channel/RemoteChannelServer/namespace"}),"RemoteChannelServer")),(0,t.yg)("h2",s({},{id:"properties"}),"Properties"),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",s({},{id:"crosschannelch"}),(0,t.yg)("inlineCode",{parentName:"h3"},"crossChannelCh")),(0,t.yg)("p",null,"Channel that will send new cross channels requested by the client.")),(0,t.yg)("h4",s({},{id:"definition"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly crossChannelCh: "),(0,t.yg)("a",s({parentName:"p"},{href:"/api/rimbu/channel/Channel/Read/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Channel.Read")),(0,t.yg)("inlineCode",{parentName:"p"},"<"),(0,t.yg)("a",s({parentName:"p"},{href:"/api/rimbu/channel/CrossChannel/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"CrossChannel")),(0,t.yg)("inlineCode",{parentName:"p"},"<unknown, unknown>>;")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",s({},{id:"readchannelch"}),(0,t.yg)("inlineCode",{parentName:"h3"},"readChannelCh")),(0,t.yg)("p",null,"Channel that will send new read channels requested by the client.")),(0,t.yg)("h4",s({},{id:"definition-1"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly readChannelCh: "),(0,t.yg)("a",s({parentName:"p"},{href:"/api/rimbu/channel/Channel/Read/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Channel.Read")),(0,t.yg)("inlineCode",{parentName:"p"},"<"),(0,t.yg)("a",s({parentName:"p"},{href:"/api/rimbu/channel/Channel/Read/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Channel.Read")),(0,t.yg)("inlineCode",{parentName:"p"},"<unknown>>;")))),(0,t.yg)("details",null,(0,t.yg)("summary",null,(0,t.yg)("h3",s({},{id:"writechannelch"}),(0,t.yg)("inlineCode",{parentName:"h3"},"writeChannelCh")),(0,t.yg)("p",null,"Channel that will send new write channels requested by the client.")),(0,t.yg)("h4",s({},{id:"definition-2"}),"Definition"),(0,t.yg)("code",null,(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"readonly writeChannelCh: "),(0,t.yg)("a",s({parentName:"p"},{href:"/api/rimbu/channel/Channel/Read/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Channel.Read")),(0,t.yg)("inlineCode",{parentName:"p"},"<"),(0,t.yg)("a",s({parentName:"p"},{href:"/api/rimbu/channel/Channel/Write/interface"}),(0,t.yg)("inlineCode",{parentName:"a"},"Channel.Write")),(0,t.yg)("inlineCode",{parentName:"p"},"<unknown>>;")))))}w.isMDXComponent=!0}}]);