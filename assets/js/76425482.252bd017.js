"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[51251],{15680:(e,t,r)=>{r.d(t,{xA:()=>c,yg:()=>y});var a=r(96540);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),l=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=l(r),h=n,y=u["".concat(s,".").concat(h)]||u[h]||m[h]||i;return r?a.createElement(y,o(o({ref:t},c),{},{components:r})):a.createElement(y,o({ref:t},c))}));function y(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=h;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[u]="string"==typeof e?e:n,o[1]=p;for(var l=2;l<i;l++)o[l]=r[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}h.displayName="MDXCreateElement"},69072:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>b,contentTitle:()=>f,default:()=>S,frontMatter:()=>y,metadata:()=>d,toc:()=>g});var a=r(15680),n=Object.defineProperty,i=Object.defineProperties,o=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable,c=(e,t,r)=>t in e?n(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,u=(e,t)=>{for(var r in t||(t={}))s.call(t,r)&&c(e,r,t[r]);if(p)for(var r of p(t))l.call(t,r)&&c(e,r,t[r]);return e},m=(e,t)=>i(e,o(t)),h=(e,t)=>{var r={};for(var a in e)s.call(e,a)&&t.indexOf(a)<0&&(r[a]=e[a]);if(null!=e&&p)for(var a of p(e))t.indexOf(a)<0&&l.call(e,a)&&(r[a]=e[a]);return r};const y={title:"HashSet<T>",slug:"/rimbu/hashed/HashSet/interface"},f="interface HashSet<T>",d={unversionedId:"rimbu_hashed/HashSet.interface",id:"rimbu_hashed/HashSet.interface",title:"HashSet<T>",description:"A type-invariant immutable Set of value type T. In the Set, there are no duplicate values. See the Set documentation and the HashSet API documentation",source:"@site/api/rimbu_hashed/HashSet.interface.mdx",sourceDirName:"rimbu_hashed",slug:"/rimbu/hashed/HashSet/interface",permalink:"/api/rimbu/hashed/HashSet/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"HashSet<T>",slug:"/rimbu/hashed/HashSet/interface"},sidebar:"defaultSidebar",previous:{title:"HashSet.Types",permalink:"/api/rimbu/hashed/HashSet/Types/interface"},next:{title:"Hasher (namespace)",permalink:"/api/rimbu/hashed/Hasher/namespace"}},b={},g=[{value:"Type parameters",id:"type-parameters",level:2}],v={toc:g},O="wrapper";function S(e){var t=e,{components:r}=t,n=h(t,["components"]);return(0,a.yg)(O,m(u(u({},v),n),{components:r,mdxType:"MDXLayout"}),(0,a.yg)("h1",u({},{id:"interface-hashsett"}),(0,a.yg)("inlineCode",{parentName:"h1"},"interface HashSet<T>")),(0,a.yg)("p",null,"A type-invariant immutable Set of value type T. In the Set, there are no duplicate values. See the ",(0,a.yg)("a",u({parentName:"p"},{href:"https://rimbu.org/docs/collections/set"}),"Set documentation")," and the ",(0,a.yg)("a",u({parentName:"p"},{href:"https://rimbu.org/api/rimbu/hashed/HashSet/interface"}),"HashSet API documentation")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Companion namespace:")," ",(0,a.yg)("a",u({parentName:"p"},{href:"/api/rimbu/hashed/HashSet/namespace"}),"HashSet")),(0,a.yg)("h2",u({},{id:"type-parameters"}),"Type parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.yg)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",u({parentName:"tr"},{align:null}),"T"),(0,a.yg)("td",u({parentName:"tr"},{align:null}),"the value type")))),(0,a.yg)("admonition",u({},{title:"note",type:"note"}),(0,a.yg)("ul",{parentName:"admonition"},(0,a.yg)("li",{parentName:"ul"},"The ",(0,a.yg)("inlineCode",{parentName:"li"},"HashSet")," uses the context's ",(0,a.yg)("inlineCode",{parentName:"li"},"hasher")," instance to hash keys for performance.<b/r> - The ",(0,a.yg)("inlineCode",{parentName:"li"},"HashSet")," uses the context's ",(0,a.yg)("inlineCode",{parentName:"li"},"eq")," function to determine equivalence between keys."))),(0,a.yg)("admonition",u({},{title:"example",type:"note"}),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",u({parentName:"pre"},{className:"language-ts"}),"const s1 = HashSet.empty<string>()\nconst s2 = HashSet.of('a', 'b', 'c')\n"))))}S.isMDXComponent=!0}}]);